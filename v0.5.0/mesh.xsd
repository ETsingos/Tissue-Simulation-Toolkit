<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="unqualified"
    xmlns:common="common" targetNamespace="mesh" xmlns="mesh"> 

    <xs:import namespace="common" schemaLocation="common.xsd" />
    
    <xs:complexType name="bounding_box">
        <xs:simpleContent>
            <xs:extension base="common:units_double_list">
                <xs:attribute name="type" type="xs:string" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    
    
    <xs:complexType name="mesh">
        <xs:all>
            <xs:element name="bounding_box" type="bounding_box" minOccurs="0" />
            <xs:element name="x_coordinates" type="common:units_double_list" minOccurs="0" />
            <xs:element name="y_coordinates" type="common:units_double_list" minOccurs="0" />
            <xs:element name="z_coordinates" type="common:units_double_list" minOccurs="0" />
            <xs:element name="voxels" type="list_of_voxels" minOccurs="0" />
            <xs:element name="custom" type="common:custom" minOccurs="0" />
        </xs:all>
        <xs:attribute name="type" type="xs:string" />
        <xs:attribute name="uniform" type="xs:boolean" />
        <xs:attribute name="regular" type="xs:boolean" />
        <xs:attributeGroup ref="common:units_ag" />
    </xs:complexType>
    
    <xs:complexType name="list_of_voxels">
        <xs:annotation>
            <xs:documentation>
                This should be a choice between filename and voxels. Removed
                because custom should be allowed with filename and to make
                C++ API easier.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="filename" type="xs:string" minOccurs="0" />
            <xs:element name="voxel" type="voxel" maxOccurs="unbounded" />
            <xs:element name="custom" type="common:custom" minOccurs="0" />
        </xs:sequence>
        <xs:attribute name="type" type="common:data_storage_formats" />
    </xs:complexType>
    
    <xs:complexType name="voxel">
        <xs:all>
            <xs:element name="center" type="common:units_double_list" />
            <xs:element name="volume" type="common:units_decimal_nonnegative" />
            <xs:element name="custom" type="common:custom" minOccurs="0" />
        </xs:all>
        <xs:attribute name="ID" type="xs:unsignedInt" />
        <xs:attribute name="type" type="xs:string" />
    </xs:complexType>

    <xs:complexType name="node">
        <xs:sequence>
            <xs:element name="position" type="common:units_double_list" />
            <xs:element name="custom" type="common:custom" minOccurs="0" />
        </xs:sequence>
        <xs:attribute name="ID" type="xs:unsignedInt" />
    </xs:complexType>
    
    <xs:complexType name="edge">
        <xs:sequence>
            <xs:element name="node_ID" type="xs:unsignedInt" minOccurs="2" maxOccurs="2" />
            <!-- Custom removed because it needs to be extended in basement_membrane and we always want custom to be at the end -->
            <!--xs:element name="custom" type="common:custom" minOccurs="0" /-->
        </xs:sequence>
        <xs:attribute name="ID" type="xs:unsignedInt" />        
    </xs:complexType>

    <xs:complexType name="face">
        <xs:sequence>
            <xs:element name="edge_ID" type="xs:unsignedInt" minOccurs="3" maxOccurs="unbounded" />
            <!-- Custom removed because it needs to be extended in basement_membrane and we always want custom to be at the end -->
            <!--xs:element name="custom" type="common:custom" minOccurs="0" /-->
        </xs:sequence>
        <xs:attribute name="ID" type="xs:unsignedInt" />
    </xs:complexType>

    <xs:complexType name="int_list_xpath">
        <xs:simpleContent>
            <xs:extension base="common:unsigned_int_list">
                <xs:attribute name="xpath" type="xs:string" />
                <xs:attribute name="grouping_number" type="xs:unsignedShort" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

</xs:schema>
