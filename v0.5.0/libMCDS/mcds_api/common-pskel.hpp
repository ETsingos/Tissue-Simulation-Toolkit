// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef COMMON_PSKEL_HPP
#define COMMON_PSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
namespace common
{
  class custom_pskel;
  class double_list_pskel;
  class unsigned_int_list_pskel;
  class two_doubles_pskel;
  class units_double_list_pskel;
  class delimited_list_pskel;
  class units_delimited_list_pskel;
  class units_decimal_pskel;
  class units_decimal_nonnegative_pskel;
  class units_unsignedShort_pskel;
  class units_boolean_pskel;
  class fraction_pskel;
  class units_fraction_pskel;
  class units_string_pskel;
  class data_storage_formats_pskel;
  class threshold_type_pskel;
  class transition_threshold_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/parser/map.hxx>
#include <xsde/cxx/parser/substitution-map-callback.hxx>
#include <xsde/cxx/parser/substitution-map-load.hxx>
#include <xsde/cxx/parser/validating/inheritance-map-load.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "common.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser map interface and default implementation.
  //
  using ::xsde::cxx::parser::parser_map;
  using ::xsde::cxx::parser::parser_map_impl;

  // Parser substitution map callack.
  //
  using ::xsde::cxx::parser::parser_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::parser::parser_smap_buckets;
  using ::xsde::cxx::parser::parser_smap_elements;
  using ::xsde::cxx::parser::validating::parser_imap_buckets;
  using ::xsde::cxx::parser::validating::parser_imap_elements;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

namespace common
{
  class custom_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual ::common::custom*
    post_custom () = 0;

    // Constructor.
    //
    custom_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    custom_pskel* custom_impl_;
    custom_pskel (custom_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    public:
    struct v_state_descr_
    {
      void (::common::custom_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class double_list_pskel: public ::xsde::cxx::parser::validating::list_base
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    item (double);

    virtual ::common::double_list*
    post_double_list () = 0;

    // Parser construction API.
    //
    void
    item_parser (::xml_schema::double_pskel&);

    void
    parsers (::xml_schema::double_pskel& /* item */);

    virtual void
    _reset ();

    // Constructor.
    //
    double_list_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    double_list_pskel* double_list_impl_;
    double_list_pskel (double_list_pskel*, void*);

    virtual void
    _xsde_parse_item (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::double_pskel* _xsde_item_;
  };

  class unsigned_int_list_pskel: public ::xsde::cxx::parser::validating::list_base
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    item (unsigned int);

    virtual ::common::unsigned_int_list*
    post_unsigned_int_list () = 0;

    // Parser construction API.
    //
    void
    item_parser (::xml_schema::unsigned_int_pskel&);

    void
    parsers (::xml_schema::unsigned_int_pskel& /* item */);

    virtual void
    _reset ();

    // Constructor.
    //
    unsigned_int_list_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    unsigned_int_list_pskel* unsigned_int_list_impl_;
    unsigned_int_list_pskel (unsigned_int_list_pskel*, void*);

    virtual void
    _xsde_parse_item (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::unsigned_int_pskel* _xsde_item_;
  };

  class two_doubles_pskel: public ::common::double_list_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::common::two_doubles*
    post_two_doubles () = 0;

    // Constructor.
    //
    two_doubles_pskel (::common::double_list_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::double_list*
    post_double_list ();

    protected:
    two_doubles_pskel* two_doubles_impl_;
    two_doubles_pskel (two_doubles_pskel*, void*);
  };

  class units_double_list_pskel: public ::common::double_list_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual void
    measurement_type (const ::std::string&);

    virtual void
    uncertainty (double);

    virtual void
    negative_uncertainty (double);

    virtual void
    positive_uncertainty (double);

    virtual void
    uncertainty_percentage (double);

    virtual void
    negative_uncertainty_percentage (double);

    virtual void
    positive_uncertainty_percentage (double);

    virtual void
    median (double);

    virtual void
    standard_deviation (double);

    virtual void
    interquartile_range (::common::two_doubles*);

    virtual void
    range (::common::two_doubles*);

    virtual void
    min (double);

    virtual void
    max (double);

    virtual void
    standard_error (double);

    virtual void
    standard_error_of_the_mean (double);

    virtual void
    number_obs (int);

    virtual void
    skewnesss (double);

    virtual void
    kurtosis (double);

    virtual ::common::units_double_list*
    post_units_double_list () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::double_pskel& /* double_list item */,
             ::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    void
    measurement_type_parser (::xml_schema::string_pskel&);

    void
    uncertainty_parser (::xml_schema::double_pskel&);

    void
    negative_uncertainty_parser (::xml_schema::double_pskel&);

    void
    positive_uncertainty_parser (::xml_schema::double_pskel&);

    void
    uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    negative_uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    positive_uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    median_parser (::xml_schema::double_pskel&);

    void
    standard_deviation_parser (::xml_schema::double_pskel&);

    void
    interquartile_range_parser (::common::two_doubles_pskel&);

    void
    range_parser (::common::two_doubles_pskel&);

    void
    min_parser (::xml_schema::double_pskel&);

    void
    max_parser (::xml_schema::double_pskel&);

    void
    standard_error_parser (::xml_schema::double_pskel&);

    void
    standard_error_of_the_mean_parser (::xml_schema::double_pskel&);

    void
    number_obs_parser (::xml_schema::int_pskel&);

    void
    skewnesss_parser (::xml_schema::double_pskel&);

    void
    kurtosis_parser (::xml_schema::double_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_double_list_pskel (::common::double_list_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::double_list*
    post_double_list ();

    protected:
    units_double_list_pskel* units_double_list_impl_;
    units_double_list_pskel (units_double_list_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* units_parser_;
    ::xml_schema::string_pskel* measurement_type_parser_;
    ::xml_schema::double_pskel* uncertainty_parser_;
    ::xml_schema::double_pskel* negative_uncertainty_parser_;
    ::xml_schema::double_pskel* positive_uncertainty_parser_;
    ::xml_schema::double_pskel* uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* negative_uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* positive_uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* median_parser_;
    ::xml_schema::double_pskel* standard_deviation_parser_;
    ::common::two_doubles_pskel* interquartile_range_parser_;
    ::common::two_doubles_pskel* range_parser_;
    ::xml_schema::double_pskel* min_parser_;
    ::xml_schema::double_pskel* max_parser_;
    ::xml_schema::double_pskel* standard_error_parser_;
    ::xml_schema::double_pskel* standard_error_of_the_mean_parser_;
    ::xml_schema::int_pskel* number_obs_parser_;
    ::xml_schema::double_pskel* skewnesss_parser_;
    ::xml_schema::double_pskel* kurtosis_parser_;
  };

  class delimited_list_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    delimiter (const ::std::string&);

    virtual ::common::delimited_list
    post_delimited_list () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* delimiter */);

    // Individual attribute parsers.
    //
    void
    delimiter_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    delimited_list_pskel (::xml_schema::string_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    delimited_list_pskel* delimited_list_impl_;
    delimited_list_pskel (delimited_list_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* delimiter_parser_;
  };

  class units_delimited_list_pskel: public ::common::delimited_list_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual void
    measurement_type (const ::std::string&);

    virtual void
    uncertainty (double);

    virtual void
    negative_uncertainty (double);

    virtual void
    positive_uncertainty (double);

    virtual void
    uncertainty_percentage (double);

    virtual void
    negative_uncertainty_percentage (double);

    virtual void
    positive_uncertainty_percentage (double);

    virtual void
    median (double);

    virtual void
    standard_deviation (double);

    virtual void
    interquartile_range (::common::two_doubles*);

    virtual void
    range (::common::two_doubles*);

    virtual void
    min (double);

    virtual void
    max (double);

    virtual void
    standard_error (double);

    virtual void
    standard_error_of_the_mean (double);

    virtual void
    number_obs (int);

    virtual void
    skewnesss (double);

    virtual void
    kurtosis (double);

    virtual ::common::units_delimited_list*
    post_units_delimited_list () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* delimiter */,
             ::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    void
    measurement_type_parser (::xml_schema::string_pskel&);

    void
    uncertainty_parser (::xml_schema::double_pskel&);

    void
    negative_uncertainty_parser (::xml_schema::double_pskel&);

    void
    positive_uncertainty_parser (::xml_schema::double_pskel&);

    void
    uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    negative_uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    positive_uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    median_parser (::xml_schema::double_pskel&);

    void
    standard_deviation_parser (::xml_schema::double_pskel&);

    void
    interquartile_range_parser (::common::two_doubles_pskel&);

    void
    range_parser (::common::two_doubles_pskel&);

    void
    min_parser (::xml_schema::double_pskel&);

    void
    max_parser (::xml_schema::double_pskel&);

    void
    standard_error_parser (::xml_schema::double_pskel&);

    void
    standard_error_of_the_mean_parser (::xml_schema::double_pskel&);

    void
    number_obs_parser (::xml_schema::int_pskel&);

    void
    skewnesss_parser (::xml_schema::double_pskel&);

    void
    kurtosis_parser (::xml_schema::double_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_delimited_list_pskel (::common::delimited_list_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::delimited_list
    post_delimited_list ();

    protected:
    units_delimited_list_pskel* units_delimited_list_impl_;
    units_delimited_list_pskel (units_delimited_list_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* units_parser_;
    ::xml_schema::string_pskel* measurement_type_parser_;
    ::xml_schema::double_pskel* uncertainty_parser_;
    ::xml_schema::double_pskel* negative_uncertainty_parser_;
    ::xml_schema::double_pskel* positive_uncertainty_parser_;
    ::xml_schema::double_pskel* uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* negative_uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* positive_uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* median_parser_;
    ::xml_schema::double_pskel* standard_deviation_parser_;
    ::common::two_doubles_pskel* interquartile_range_parser_;
    ::common::two_doubles_pskel* range_parser_;
    ::xml_schema::double_pskel* min_parser_;
    ::xml_schema::double_pskel* max_parser_;
    ::xml_schema::double_pskel* standard_error_parser_;
    ::xml_schema::double_pskel* standard_error_of_the_mean_parser_;
    ::xml_schema::int_pskel* number_obs_parser_;
    ::xml_schema::double_pskel* skewnesss_parser_;
    ::xml_schema::double_pskel* kurtosis_parser_;
  };

  class units_decimal_pskel: public ::xml_schema::double_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual void
    measurement_type (const ::std::string&);

    virtual void
    uncertainty (double);

    virtual void
    negative_uncertainty (double);

    virtual void
    positive_uncertainty (double);

    virtual void
    uncertainty_percentage (double);

    virtual void
    negative_uncertainty_percentage (double);

    virtual void
    positive_uncertainty_percentage (double);

    virtual void
    median (double);

    virtual void
    standard_deviation (double);

    virtual void
    interquartile_range (::common::two_doubles*);

    virtual void
    range (::common::two_doubles*);

    virtual void
    min (double);

    virtual void
    max (double);

    virtual void
    standard_error (double);

    virtual void
    standard_error_of_the_mean (double);

    virtual void
    number_obs (int);

    virtual void
    skewnesss (double);

    virtual void
    kurtosis (double);

    virtual ::common::units_decimal*
    post_units_decimal () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    void
    measurement_type_parser (::xml_schema::string_pskel&);

    void
    uncertainty_parser (::xml_schema::double_pskel&);

    void
    negative_uncertainty_parser (::xml_schema::double_pskel&);

    void
    positive_uncertainty_parser (::xml_schema::double_pskel&);

    void
    uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    negative_uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    positive_uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    median_parser (::xml_schema::double_pskel&);

    void
    standard_deviation_parser (::xml_schema::double_pskel&);

    void
    interquartile_range_parser (::common::two_doubles_pskel&);

    void
    range_parser (::common::two_doubles_pskel&);

    void
    min_parser (::xml_schema::double_pskel&);

    void
    max_parser (::xml_schema::double_pskel&);

    void
    standard_error_parser (::xml_schema::double_pskel&);

    void
    standard_error_of_the_mean_parser (::xml_schema::double_pskel&);

    void
    number_obs_parser (::xml_schema::int_pskel&);

    void
    skewnesss_parser (::xml_schema::double_pskel&);

    void
    kurtosis_parser (::xml_schema::double_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_decimal_pskel (::xml_schema::double_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual double
    post_double ();

    protected:
    units_decimal_pskel* units_decimal_impl_;
    units_decimal_pskel (units_decimal_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* units_parser_;
    ::xml_schema::string_pskel* measurement_type_parser_;
    ::xml_schema::double_pskel* uncertainty_parser_;
    ::xml_schema::double_pskel* negative_uncertainty_parser_;
    ::xml_schema::double_pskel* positive_uncertainty_parser_;
    ::xml_schema::double_pskel* uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* negative_uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* positive_uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* median_parser_;
    ::xml_schema::double_pskel* standard_deviation_parser_;
    ::common::two_doubles_pskel* interquartile_range_parser_;
    ::common::two_doubles_pskel* range_parser_;
    ::xml_schema::double_pskel* min_parser_;
    ::xml_schema::double_pskel* max_parser_;
    ::xml_schema::double_pskel* standard_error_parser_;
    ::xml_schema::double_pskel* standard_error_of_the_mean_parser_;
    ::xml_schema::int_pskel* number_obs_parser_;
    ::xml_schema::double_pskel* skewnesss_parser_;
    ::xml_schema::double_pskel* kurtosis_parser_;
  };

  class units_decimal_nonnegative_pskel: public ::common::units_decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::common::units_decimal_nonnegative*
    post_units_decimal_nonnegative () = 0;

    // Constructor.
    //
    units_decimal_nonnegative_pskel (::common::units_decimal_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_decimal*
    post_units_decimal ();

    protected:
    units_decimal_nonnegative_pskel* units_decimal_nonnegative_impl_;
    units_decimal_nonnegative_pskel (units_decimal_nonnegative_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);
  };

  class units_unsignedShort_pskel: public ::xml_schema::unsigned_short_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    measurement_type (const ::std::string&);

    virtual void
    units (const ::std::string&);

    virtual ::common::units_unsignedShort
    post_units_unsignedShort () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::string_pskel& /* units */);

    // Individual attribute parsers.
    //
    void
    measurement_type_parser (::xml_schema::string_pskel&);

    void
    units_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_unsignedShort_pskel (::xml_schema::unsigned_short_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual unsigned short
    post_unsigned_short ();

    protected:
    units_unsignedShort_pskel* units_unsignedShort_impl_;
    units_unsignedShort_pskel (units_unsignedShort_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* measurement_type_parser_;
    ::xml_schema::string_pskel* units_parser_;
  };

  class units_boolean_pskel: public ::xml_schema::boolean_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual ::common::units_boolean
    post_units_boolean () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_boolean_pskel (::xml_schema::boolean_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual bool
    post_boolean ();

    protected:
    units_boolean_pskel* units_boolean_impl_;
    units_boolean_pskel (units_boolean_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* units_parser_;
  };

  class fraction_pskel: public ::xml_schema::double_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::common::fraction
    post_fraction () = 0;

    // Constructor.
    //
    fraction_pskel (::xml_schema::double_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual double
    post_double ();

    protected:
    fraction_pskel* fraction_impl_;
    fraction_pskel (fraction_pskel*, void*);
  };

  class units_fraction_pskel: public ::common::units_decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::common::units_fraction*
    post_units_fraction () = 0;

    // Constructor.
    //
    units_fraction_pskel (::common::units_decimal_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_decimal*
    post_units_decimal ();

    protected:
    units_fraction_pskel* units_fraction_impl_;
    units_fraction_pskel (units_fraction_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);
  };

  class units_string_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual void
    measurement_type (const ::std::string&);

    virtual void
    uncertainty (double);

    virtual void
    negative_uncertainty (double);

    virtual void
    positive_uncertainty (double);

    virtual void
    uncertainty_percentage (double);

    virtual void
    negative_uncertainty_percentage (double);

    virtual void
    positive_uncertainty_percentage (double);

    virtual void
    median (double);

    virtual void
    standard_deviation (double);

    virtual void
    interquartile_range (::common::two_doubles*);

    virtual void
    range (::common::two_doubles*);

    virtual void
    min (double);

    virtual void
    max (double);

    virtual void
    standard_error (double);

    virtual void
    standard_error_of_the_mean (double);

    virtual void
    number_obs (int);

    virtual void
    skewnesss (double);

    virtual void
    kurtosis (double);

    virtual ::common::units_string*
    post_units_string () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    void
    measurement_type_parser (::xml_schema::string_pskel&);

    void
    uncertainty_parser (::xml_schema::double_pskel&);

    void
    negative_uncertainty_parser (::xml_schema::double_pskel&);

    void
    positive_uncertainty_parser (::xml_schema::double_pskel&);

    void
    uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    negative_uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    positive_uncertainty_percentage_parser (::xml_schema::double_pskel&);

    void
    median_parser (::xml_schema::double_pskel&);

    void
    standard_deviation_parser (::xml_schema::double_pskel&);

    void
    interquartile_range_parser (::common::two_doubles_pskel&);

    void
    range_parser (::common::two_doubles_pskel&);

    void
    min_parser (::xml_schema::double_pskel&);

    void
    max_parser (::xml_schema::double_pskel&);

    void
    standard_error_parser (::xml_schema::double_pskel&);

    void
    standard_error_of_the_mean_parser (::xml_schema::double_pskel&);

    void
    number_obs_parser (::xml_schema::int_pskel&);

    void
    skewnesss_parser (::xml_schema::double_pskel&);

    void
    kurtosis_parser (::xml_schema::double_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_string_pskel (::xml_schema::string_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    units_string_pskel* units_string_impl_;
    units_string_pskel (units_string_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    virtual bool
    _characters_impl (const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* units_parser_;
    ::xml_schema::string_pskel* measurement_type_parser_;
    ::xml_schema::double_pskel* uncertainty_parser_;
    ::xml_schema::double_pskel* negative_uncertainty_parser_;
    ::xml_schema::double_pskel* positive_uncertainty_parser_;
    ::xml_schema::double_pskel* uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* negative_uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* positive_uncertainty_percentage_parser_;
    ::xml_schema::double_pskel* median_parser_;
    ::xml_schema::double_pskel* standard_deviation_parser_;
    ::common::two_doubles_pskel* interquartile_range_parser_;
    ::common::two_doubles_pskel* range_parser_;
    ::xml_schema::double_pskel* min_parser_;
    ::xml_schema::double_pskel* max_parser_;
    ::xml_schema::double_pskel* standard_error_parser_;
    ::xml_schema::double_pskel* standard_error_of_the_mean_parser_;
    ::xml_schema::int_pskel* number_obs_parser_;
    ::xml_schema::double_pskel* skewnesss_parser_;
    ::xml_schema::double_pskel* kurtosis_parser_;
  };

  class data_storage_formats_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::common::data_storage_formats
    post_data_storage_formats () = 0;

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    data_storage_formats_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    data_storage_formats_pskel* data_storage_formats_impl_;
    data_storage_formats_pskel (data_storage_formats_pskel*, void*);

    protected:
    static const char* const _xsde_data_storage_formats_pskel_enums_[7UL];
  };

  class threshold_type_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::common::threshold_type
    post_threshold_type () = 0;

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    threshold_type_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    threshold_type_pskel* threshold_type_impl_;
    threshold_type_pskel (threshold_type_pskel*, void*);

    protected:
    static const char* const _xsde_threshold_type_pskel_enums_[6UL];
  };

  class transition_threshold_pskel: public ::common::units_decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    quantity (const ::std::string&);

    virtual void
    type (const ::common::threshold_type&);

    virtual void
    variable_ID (unsigned long long);

    virtual ::common::transition_threshold*
    post_transition_threshold () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */,
             ::xml_schema::string_pskel& /* quantity */,
             ::common::threshold_type_pskel& /* type */,
             ::xml_schema::unsigned_long_pskel& /* variable_ID */);

    // Individual attribute parsers.
    //
    void
    quantity_parser (::xml_schema::string_pskel&);

    void
    type_parser (::common::threshold_type_pskel&);

    void
    variable_ID_parser (::xml_schema::unsigned_long_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    transition_threshold_pskel (::common::units_decimal_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_decimal*
    post_units_decimal ();

    protected:
    transition_threshold_pskel* transition_threshold_impl_;
    transition_threshold_pskel (transition_threshold_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* quantity_parser_;
    ::common::threshold_type_pskel* type_parser_;
    ::xml_schema::unsigned_long_pskel* variable_ID_parser_;

    protected:
    struct v_state_attr_
    {
      bool quantity;
      bool type;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };
}

#include "common-pskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // COMMON_PSKEL_HPP
