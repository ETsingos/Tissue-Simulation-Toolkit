// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "MultiCellDS.hpp"

#include <stdlib.h>
#include <new>

#include <xsde/cxx/guard.hxx>

// MCDS_type
//

static const char* _xsde_MCDS_type_enumerators_[] = 
{
  "cell_line",
  "snapshot/simulation",
  "snapshot/experiment",
  "snapshot/clinical"
};

const char* MCDS_type::
string () const
{
  return _xsde_MCDS_type_enumerators_[value_];
}

// MultiCellDS
//

MultiCellDS::
MultiCellDS ()
{
  this->version_present_ = false;
  this->type_present_ = false;
  this->metadata_ = 0;
  this->microenvironment_ = 0;
  this->cellular_information_ = 0;
}

MultiCellDS::
~MultiCellDS ()
{
  delete this->metadata_;
  delete this->microenvironment_;
  delete this->cellular_information_;
}

void MultiCellDS::
_copy (MultiCellDS& c) const
{
  XSDE_UNUSED (c);

  if (this->version_present ())
    c.version (this->version ());

  if (this->type_present ())
    c.type (this->type ());

  this->cell_line ().copy (c.cell_line ());

  if (this->metadata_present ())
  {
    ::metadata::metadata* m = this->metadata ()._clone ();
    c.metadata (m);
  }

  if (this->microenvironment_present ())
  {
    ::microenvironment::microenvironment* m = this->microenvironment ()._clone ();
    c.microenvironment (m);
  }

  if (this->cellular_information_present ())
  {
    ::cell::cellular_information* m = this->cellular_information ()._clone ();
    c.cellular_information (m);
  }
}

MultiCellDS* MultiCellDS::
_clone () const
{
  MultiCellDS* c = new MultiCellDS;
  ::xsde::cxx::guard< MultiCellDS > g (c);
  this->_copy (*c);
  g.release ();
  return c;
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

