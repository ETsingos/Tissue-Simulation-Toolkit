// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef COMMON_IPP
#define COMMON_IPP

// Begin prologue.
//
//
// End prologue.

namespace common
{
  // custom
  //

  inline
  const custom::custom_data_sequence& custom::
  custom_data () const
  {
    return this->custom_data_;
  }

  inline
  custom::custom_data_sequence& custom::
  custom_data ()
  {
    return this->custom_data_;
  }

  // double_list
  //

  inline
  double_list::
  double_list ()
  {
  }

  // unsigned_int_list
  //

  inline
  unsigned_int_list::
  unsigned_int_list ()
  {
  }

  // two_doubles
  //

  // units_double_list
  //

  inline
  bool units_double_list::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void units_double_list::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& units_double_list::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& units_double_list::
  units ()
  {
    return this->units_;
  }

  inline
  void units_double_list::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool units_double_list::
  measurement_type_present () const
  {
    return this->measurement_type_present_;
  }

  inline
  void units_double_list::
  measurement_type_present (bool x)
  {
    this->measurement_type_present_ = x;
  }

  inline
  const ::std::string& units_double_list::
  measurement_type () const
  {
    return this->measurement_type_;
  }

  inline
  ::std::string& units_double_list::
  measurement_type ()
  {
    return this->measurement_type_;
  }

  inline
  void units_double_list::
  measurement_type (const ::std::string& x)
  {
    this->measurement_type_ = x;
    this->measurement_type_present_ = true;
  }

  inline
  bool units_double_list::
  uncertainty_present () const
  {
    return this->uncertainty_present_;
  }

  inline
  void units_double_list::
  uncertainty_present (bool x)
  {
    this->uncertainty_present_ = x;
  }

  inline
  double units_double_list::
  uncertainty () const
  {
    return this->uncertainty_;
  }

  inline
  double& units_double_list::
  uncertainty ()
  {
    return this->uncertainty_;
  }

  inline
  void units_double_list::
  uncertainty (double x)
  {
    this->uncertainty_ = x;
    this->uncertainty_present_ = true;
  }

  inline
  bool units_double_list::
  negative_uncertainty_present () const
  {
    return this->negative_uncertainty_present_;
  }

  inline
  void units_double_list::
  negative_uncertainty_present (bool x)
  {
    this->negative_uncertainty_present_ = x;
  }

  inline
  double units_double_list::
  negative_uncertainty () const
  {
    return this->negative_uncertainty_;
  }

  inline
  double& units_double_list::
  negative_uncertainty ()
  {
    return this->negative_uncertainty_;
  }

  inline
  void units_double_list::
  negative_uncertainty (double x)
  {
    this->negative_uncertainty_ = x;
    this->negative_uncertainty_present_ = true;
  }

  inline
  bool units_double_list::
  positive_uncertainty_present () const
  {
    return this->positive_uncertainty_present_;
  }

  inline
  void units_double_list::
  positive_uncertainty_present (bool x)
  {
    this->positive_uncertainty_present_ = x;
  }

  inline
  double units_double_list::
  positive_uncertainty () const
  {
    return this->positive_uncertainty_;
  }

  inline
  double& units_double_list::
  positive_uncertainty ()
  {
    return this->positive_uncertainty_;
  }

  inline
  void units_double_list::
  positive_uncertainty (double x)
  {
    this->positive_uncertainty_ = x;
    this->positive_uncertainty_present_ = true;
  }

  inline
  bool units_double_list::
  uncertainty_percentage_present () const
  {
    return this->uncertainty_percentage_present_;
  }

  inline
  void units_double_list::
  uncertainty_percentage_present (bool x)
  {
    this->uncertainty_percentage_present_ = x;
  }

  inline
  double units_double_list::
  uncertainty_percentage () const
  {
    return this->uncertainty_percentage_;
  }

  inline
  double& units_double_list::
  uncertainty_percentage ()
  {
    return this->uncertainty_percentage_;
  }

  inline
  void units_double_list::
  uncertainty_percentage (double x)
  {
    this->uncertainty_percentage_ = x;
    this->uncertainty_percentage_present_ = true;
  }

  inline
  bool units_double_list::
  negative_uncertainty_percentage_present () const
  {
    return this->negative_uncertainty_percentage_present_;
  }

  inline
  void units_double_list::
  negative_uncertainty_percentage_present (bool x)
  {
    this->negative_uncertainty_percentage_present_ = x;
  }

  inline
  double units_double_list::
  negative_uncertainty_percentage () const
  {
    return this->negative_uncertainty_percentage_;
  }

  inline
  double& units_double_list::
  negative_uncertainty_percentage ()
  {
    return this->negative_uncertainty_percentage_;
  }

  inline
  void units_double_list::
  negative_uncertainty_percentage (double x)
  {
    this->negative_uncertainty_percentage_ = x;
    this->negative_uncertainty_percentage_present_ = true;
  }

  inline
  bool units_double_list::
  positive_uncertainty_percentage_present () const
  {
    return this->positive_uncertainty_percentage_present_;
  }

  inline
  void units_double_list::
  positive_uncertainty_percentage_present (bool x)
  {
    this->positive_uncertainty_percentage_present_ = x;
  }

  inline
  double units_double_list::
  positive_uncertainty_percentage () const
  {
    return this->positive_uncertainty_percentage_;
  }

  inline
  double& units_double_list::
  positive_uncertainty_percentage ()
  {
    return this->positive_uncertainty_percentage_;
  }

  inline
  void units_double_list::
  positive_uncertainty_percentage (double x)
  {
    this->positive_uncertainty_percentage_ = x;
    this->positive_uncertainty_percentage_present_ = true;
  }

  inline
  bool units_double_list::
  median_present () const
  {
    return this->median_present_;
  }

  inline
  void units_double_list::
  median_present (bool x)
  {
    this->median_present_ = x;
  }

  inline
  double units_double_list::
  median () const
  {
    return this->median_;
  }

  inline
  double& units_double_list::
  median ()
  {
    return this->median_;
  }

  inline
  void units_double_list::
  median (double x)
  {
    this->median_ = x;
    this->median_present_ = true;
  }

  inline
  bool units_double_list::
  standard_deviation_present () const
  {
    return this->standard_deviation_present_;
  }

  inline
  void units_double_list::
  standard_deviation_present (bool x)
  {
    this->standard_deviation_present_ = x;
  }

  inline
  double units_double_list::
  standard_deviation () const
  {
    return this->standard_deviation_;
  }

  inline
  double& units_double_list::
  standard_deviation ()
  {
    return this->standard_deviation_;
  }

  inline
  void units_double_list::
  standard_deviation (double x)
  {
    this->standard_deviation_ = x;
    this->standard_deviation_present_ = true;
  }

  inline
  bool units_double_list::
  interquartile_range_present () const
  {
    return this->interquartile_range_ != 0;
  }

  inline
  const ::common::two_doubles& units_double_list::
  interquartile_range () const
  {
    return *this->interquartile_range_;
  }

  inline
  ::common::two_doubles& units_double_list::
  interquartile_range ()
  {
    return *this->interquartile_range_;
  }

  inline
  void units_double_list::
  interquartile_range (::common::two_doubles* x)
  {
    delete this->interquartile_range_;
    this->interquartile_range_ = x;
  }

  inline
  ::common::two_doubles* units_double_list::
  interquartile_range_detach ()
  {
    ::common::two_doubles* r = this->interquartile_range_;
    this->interquartile_range_ = 0;
    return r;
  }

  inline
  bool units_double_list::
  range_present () const
  {
    return this->range_ != 0;
  }

  inline
  const ::common::two_doubles& units_double_list::
  range () const
  {
    return *this->range_;
  }

  inline
  ::common::two_doubles& units_double_list::
  range ()
  {
    return *this->range_;
  }

  inline
  void units_double_list::
  range (::common::two_doubles* x)
  {
    delete this->range_;
    this->range_ = x;
  }

  inline
  ::common::two_doubles* units_double_list::
  range_detach ()
  {
    ::common::two_doubles* r = this->range_;
    this->range_ = 0;
    return r;
  }

  inline
  bool units_double_list::
  min_present () const
  {
    return this->min_present_;
  }

  inline
  void units_double_list::
  min_present (bool x)
  {
    this->min_present_ = x;
  }

  inline
  double units_double_list::
  min () const
  {
    return this->min_;
  }

  inline
  double& units_double_list::
  min ()
  {
    return this->min_;
  }

  inline
  void units_double_list::
  min (double x)
  {
    this->min_ = x;
    this->min_present_ = true;
  }

  inline
  bool units_double_list::
  max_present () const
  {
    return this->max_present_;
  }

  inline
  void units_double_list::
  max_present (bool x)
  {
    this->max_present_ = x;
  }

  inline
  double units_double_list::
  max () const
  {
    return this->max_;
  }

  inline
  double& units_double_list::
  max ()
  {
    return this->max_;
  }

  inline
  void units_double_list::
  max (double x)
  {
    this->max_ = x;
    this->max_present_ = true;
  }

  inline
  bool units_double_list::
  standard_error_present () const
  {
    return this->standard_error_present_;
  }

  inline
  void units_double_list::
  standard_error_present (bool x)
  {
    this->standard_error_present_ = x;
  }

  inline
  double units_double_list::
  standard_error () const
  {
    return this->standard_error_;
  }

  inline
  double& units_double_list::
  standard_error ()
  {
    return this->standard_error_;
  }

  inline
  void units_double_list::
  standard_error (double x)
  {
    this->standard_error_ = x;
    this->standard_error_present_ = true;
  }

  inline
  bool units_double_list::
  standard_error_of_the_mean_present () const
  {
    return this->standard_error_of_the_mean_present_;
  }

  inline
  void units_double_list::
  standard_error_of_the_mean_present (bool x)
  {
    this->standard_error_of_the_mean_present_ = x;
  }

  inline
  double units_double_list::
  standard_error_of_the_mean () const
  {
    return this->standard_error_of_the_mean_;
  }

  inline
  double& units_double_list::
  standard_error_of_the_mean ()
  {
    return this->standard_error_of_the_mean_;
  }

  inline
  void units_double_list::
  standard_error_of_the_mean (double x)
  {
    this->standard_error_of_the_mean_ = x;
    this->standard_error_of_the_mean_present_ = true;
  }

  inline
  bool units_double_list::
  number_obs_present () const
  {
    return this->number_obs_present_;
  }

  inline
  void units_double_list::
  number_obs_present (bool x)
  {
    this->number_obs_present_ = x;
  }

  inline
  int units_double_list::
  number_obs () const
  {
    return this->number_obs_;
  }

  inline
  int& units_double_list::
  number_obs ()
  {
    return this->number_obs_;
  }

  inline
  void units_double_list::
  number_obs (int x)
  {
    this->number_obs_ = x;
    this->number_obs_present_ = true;
  }

  inline
  bool units_double_list::
  skewnesss_present () const
  {
    return this->skewnesss_present_;
  }

  inline
  void units_double_list::
  skewnesss_present (bool x)
  {
    this->skewnesss_present_ = x;
  }

  inline
  double units_double_list::
  skewnesss () const
  {
    return this->skewnesss_;
  }

  inline
  double& units_double_list::
  skewnesss ()
  {
    return this->skewnesss_;
  }

  inline
  void units_double_list::
  skewnesss (double x)
  {
    this->skewnesss_ = x;
    this->skewnesss_present_ = true;
  }

  inline
  bool units_double_list::
  kurtosis_present () const
  {
    return this->kurtosis_present_;
  }

  inline
  void units_double_list::
  kurtosis_present (bool x)
  {
    this->kurtosis_present_ = x;
  }

  inline
  double units_double_list::
  kurtosis () const
  {
    return this->kurtosis_;
  }

  inline
  double& units_double_list::
  kurtosis ()
  {
    return this->kurtosis_;
  }

  inline
  void units_double_list::
  kurtosis (double x)
  {
    this->kurtosis_ = x;
    this->kurtosis_present_ = true;
  }

  // delimited_list
  //

  inline
  bool delimited_list::
  delimiter_present () const
  {
    return this->delimiter_present_;
  }

  inline
  void delimited_list::
  delimiter_present (bool x)
  {
    this->delimiter_present_ = x;
  }

  inline
  const ::std::string& delimited_list::
  delimiter () const
  {
    return this->delimiter_;
  }

  inline
  ::std::string& delimited_list::
  delimiter ()
  {
    return this->delimiter_;
  }

  inline
  void delimited_list::
  delimiter (const ::std::string& x)
  {
    this->delimiter_ = x;
    this->delimiter_present_ = true;
  }

  // units_delimited_list
  //

  inline
  bool units_delimited_list::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void units_delimited_list::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& units_delimited_list::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& units_delimited_list::
  units ()
  {
    return this->units_;
  }

  inline
  void units_delimited_list::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool units_delimited_list::
  measurement_type_present () const
  {
    return this->measurement_type_present_;
  }

  inline
  void units_delimited_list::
  measurement_type_present (bool x)
  {
    this->measurement_type_present_ = x;
  }

  inline
  const ::std::string& units_delimited_list::
  measurement_type () const
  {
    return this->measurement_type_;
  }

  inline
  ::std::string& units_delimited_list::
  measurement_type ()
  {
    return this->measurement_type_;
  }

  inline
  void units_delimited_list::
  measurement_type (const ::std::string& x)
  {
    this->measurement_type_ = x;
    this->measurement_type_present_ = true;
  }

  inline
  bool units_delimited_list::
  uncertainty_present () const
  {
    return this->uncertainty_present_;
  }

  inline
  void units_delimited_list::
  uncertainty_present (bool x)
  {
    this->uncertainty_present_ = x;
  }

  inline
  double units_delimited_list::
  uncertainty () const
  {
    return this->uncertainty_;
  }

  inline
  double& units_delimited_list::
  uncertainty ()
  {
    return this->uncertainty_;
  }

  inline
  void units_delimited_list::
  uncertainty (double x)
  {
    this->uncertainty_ = x;
    this->uncertainty_present_ = true;
  }

  inline
  bool units_delimited_list::
  negative_uncertainty_present () const
  {
    return this->negative_uncertainty_present_;
  }

  inline
  void units_delimited_list::
  negative_uncertainty_present (bool x)
  {
    this->negative_uncertainty_present_ = x;
  }

  inline
  double units_delimited_list::
  negative_uncertainty () const
  {
    return this->negative_uncertainty_;
  }

  inline
  double& units_delimited_list::
  negative_uncertainty ()
  {
    return this->negative_uncertainty_;
  }

  inline
  void units_delimited_list::
  negative_uncertainty (double x)
  {
    this->negative_uncertainty_ = x;
    this->negative_uncertainty_present_ = true;
  }

  inline
  bool units_delimited_list::
  positive_uncertainty_present () const
  {
    return this->positive_uncertainty_present_;
  }

  inline
  void units_delimited_list::
  positive_uncertainty_present (bool x)
  {
    this->positive_uncertainty_present_ = x;
  }

  inline
  double units_delimited_list::
  positive_uncertainty () const
  {
    return this->positive_uncertainty_;
  }

  inline
  double& units_delimited_list::
  positive_uncertainty ()
  {
    return this->positive_uncertainty_;
  }

  inline
  void units_delimited_list::
  positive_uncertainty (double x)
  {
    this->positive_uncertainty_ = x;
    this->positive_uncertainty_present_ = true;
  }

  inline
  bool units_delimited_list::
  uncertainty_percentage_present () const
  {
    return this->uncertainty_percentage_present_;
  }

  inline
  void units_delimited_list::
  uncertainty_percentage_present (bool x)
  {
    this->uncertainty_percentage_present_ = x;
  }

  inline
  double units_delimited_list::
  uncertainty_percentage () const
  {
    return this->uncertainty_percentage_;
  }

  inline
  double& units_delimited_list::
  uncertainty_percentage ()
  {
    return this->uncertainty_percentage_;
  }

  inline
  void units_delimited_list::
  uncertainty_percentage (double x)
  {
    this->uncertainty_percentage_ = x;
    this->uncertainty_percentage_present_ = true;
  }

  inline
  bool units_delimited_list::
  negative_uncertainty_percentage_present () const
  {
    return this->negative_uncertainty_percentage_present_;
  }

  inline
  void units_delimited_list::
  negative_uncertainty_percentage_present (bool x)
  {
    this->negative_uncertainty_percentage_present_ = x;
  }

  inline
  double units_delimited_list::
  negative_uncertainty_percentage () const
  {
    return this->negative_uncertainty_percentage_;
  }

  inline
  double& units_delimited_list::
  negative_uncertainty_percentage ()
  {
    return this->negative_uncertainty_percentage_;
  }

  inline
  void units_delimited_list::
  negative_uncertainty_percentage (double x)
  {
    this->negative_uncertainty_percentage_ = x;
    this->negative_uncertainty_percentage_present_ = true;
  }

  inline
  bool units_delimited_list::
  positive_uncertainty_percentage_present () const
  {
    return this->positive_uncertainty_percentage_present_;
  }

  inline
  void units_delimited_list::
  positive_uncertainty_percentage_present (bool x)
  {
    this->positive_uncertainty_percentage_present_ = x;
  }

  inline
  double units_delimited_list::
  positive_uncertainty_percentage () const
  {
    return this->positive_uncertainty_percentage_;
  }

  inline
  double& units_delimited_list::
  positive_uncertainty_percentage ()
  {
    return this->positive_uncertainty_percentage_;
  }

  inline
  void units_delimited_list::
  positive_uncertainty_percentage (double x)
  {
    this->positive_uncertainty_percentage_ = x;
    this->positive_uncertainty_percentage_present_ = true;
  }

  inline
  bool units_delimited_list::
  median_present () const
  {
    return this->median_present_;
  }

  inline
  void units_delimited_list::
  median_present (bool x)
  {
    this->median_present_ = x;
  }

  inline
  double units_delimited_list::
  median () const
  {
    return this->median_;
  }

  inline
  double& units_delimited_list::
  median ()
  {
    return this->median_;
  }

  inline
  void units_delimited_list::
  median (double x)
  {
    this->median_ = x;
    this->median_present_ = true;
  }

  inline
  bool units_delimited_list::
  standard_deviation_present () const
  {
    return this->standard_deviation_present_;
  }

  inline
  void units_delimited_list::
  standard_deviation_present (bool x)
  {
    this->standard_deviation_present_ = x;
  }

  inline
  double units_delimited_list::
  standard_deviation () const
  {
    return this->standard_deviation_;
  }

  inline
  double& units_delimited_list::
  standard_deviation ()
  {
    return this->standard_deviation_;
  }

  inline
  void units_delimited_list::
  standard_deviation (double x)
  {
    this->standard_deviation_ = x;
    this->standard_deviation_present_ = true;
  }

  inline
  bool units_delimited_list::
  interquartile_range_present () const
  {
    return this->interquartile_range_ != 0;
  }

  inline
  const ::common::two_doubles& units_delimited_list::
  interquartile_range () const
  {
    return *this->interquartile_range_;
  }

  inline
  ::common::two_doubles& units_delimited_list::
  interquartile_range ()
  {
    return *this->interquartile_range_;
  }

  inline
  void units_delimited_list::
  interquartile_range (::common::two_doubles* x)
  {
    delete this->interquartile_range_;
    this->interquartile_range_ = x;
  }

  inline
  ::common::two_doubles* units_delimited_list::
  interquartile_range_detach ()
  {
    ::common::two_doubles* r = this->interquartile_range_;
    this->interquartile_range_ = 0;
    return r;
  }

  inline
  bool units_delimited_list::
  range_present () const
  {
    return this->range_ != 0;
  }

  inline
  const ::common::two_doubles& units_delimited_list::
  range () const
  {
    return *this->range_;
  }

  inline
  ::common::two_doubles& units_delimited_list::
  range ()
  {
    return *this->range_;
  }

  inline
  void units_delimited_list::
  range (::common::two_doubles* x)
  {
    delete this->range_;
    this->range_ = x;
  }

  inline
  ::common::two_doubles* units_delimited_list::
  range_detach ()
  {
    ::common::two_doubles* r = this->range_;
    this->range_ = 0;
    return r;
  }

  inline
  bool units_delimited_list::
  min_present () const
  {
    return this->min_present_;
  }

  inline
  void units_delimited_list::
  min_present (bool x)
  {
    this->min_present_ = x;
  }

  inline
  double units_delimited_list::
  min () const
  {
    return this->min_;
  }

  inline
  double& units_delimited_list::
  min ()
  {
    return this->min_;
  }

  inline
  void units_delimited_list::
  min (double x)
  {
    this->min_ = x;
    this->min_present_ = true;
  }

  inline
  bool units_delimited_list::
  max_present () const
  {
    return this->max_present_;
  }

  inline
  void units_delimited_list::
  max_present (bool x)
  {
    this->max_present_ = x;
  }

  inline
  double units_delimited_list::
  max () const
  {
    return this->max_;
  }

  inline
  double& units_delimited_list::
  max ()
  {
    return this->max_;
  }

  inline
  void units_delimited_list::
  max (double x)
  {
    this->max_ = x;
    this->max_present_ = true;
  }

  inline
  bool units_delimited_list::
  standard_error_present () const
  {
    return this->standard_error_present_;
  }

  inline
  void units_delimited_list::
  standard_error_present (bool x)
  {
    this->standard_error_present_ = x;
  }

  inline
  double units_delimited_list::
  standard_error () const
  {
    return this->standard_error_;
  }

  inline
  double& units_delimited_list::
  standard_error ()
  {
    return this->standard_error_;
  }

  inline
  void units_delimited_list::
  standard_error (double x)
  {
    this->standard_error_ = x;
    this->standard_error_present_ = true;
  }

  inline
  bool units_delimited_list::
  standard_error_of_the_mean_present () const
  {
    return this->standard_error_of_the_mean_present_;
  }

  inline
  void units_delimited_list::
  standard_error_of_the_mean_present (bool x)
  {
    this->standard_error_of_the_mean_present_ = x;
  }

  inline
  double units_delimited_list::
  standard_error_of_the_mean () const
  {
    return this->standard_error_of_the_mean_;
  }

  inline
  double& units_delimited_list::
  standard_error_of_the_mean ()
  {
    return this->standard_error_of_the_mean_;
  }

  inline
  void units_delimited_list::
  standard_error_of_the_mean (double x)
  {
    this->standard_error_of_the_mean_ = x;
    this->standard_error_of_the_mean_present_ = true;
  }

  inline
  bool units_delimited_list::
  number_obs_present () const
  {
    return this->number_obs_present_;
  }

  inline
  void units_delimited_list::
  number_obs_present (bool x)
  {
    this->number_obs_present_ = x;
  }

  inline
  int units_delimited_list::
  number_obs () const
  {
    return this->number_obs_;
  }

  inline
  int& units_delimited_list::
  number_obs ()
  {
    return this->number_obs_;
  }

  inline
  void units_delimited_list::
  number_obs (int x)
  {
    this->number_obs_ = x;
    this->number_obs_present_ = true;
  }

  inline
  bool units_delimited_list::
  skewnesss_present () const
  {
    return this->skewnesss_present_;
  }

  inline
  void units_delimited_list::
  skewnesss_present (bool x)
  {
    this->skewnesss_present_ = x;
  }

  inline
  double units_delimited_list::
  skewnesss () const
  {
    return this->skewnesss_;
  }

  inline
  double& units_delimited_list::
  skewnesss ()
  {
    return this->skewnesss_;
  }

  inline
  void units_delimited_list::
  skewnesss (double x)
  {
    this->skewnesss_ = x;
    this->skewnesss_present_ = true;
  }

  inline
  bool units_delimited_list::
  kurtosis_present () const
  {
    return this->kurtosis_present_;
  }

  inline
  void units_delimited_list::
  kurtosis_present (bool x)
  {
    this->kurtosis_present_ = x;
  }

  inline
  double units_delimited_list::
  kurtosis () const
  {
    return this->kurtosis_;
  }

  inline
  double& units_delimited_list::
  kurtosis ()
  {
    return this->kurtosis_;
  }

  inline
  void units_delimited_list::
  kurtosis (double x)
  {
    this->kurtosis_ = x;
    this->kurtosis_present_ = true;
  }

  // units_decimal
  //

  inline
  bool units_decimal::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void units_decimal::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& units_decimal::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& units_decimal::
  units ()
  {
    return this->units_;
  }

  inline
  void units_decimal::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool units_decimal::
  measurement_type_present () const
  {
    return this->measurement_type_present_;
  }

  inline
  void units_decimal::
  measurement_type_present (bool x)
  {
    this->measurement_type_present_ = x;
  }

  inline
  const ::std::string& units_decimal::
  measurement_type () const
  {
    return this->measurement_type_;
  }

  inline
  ::std::string& units_decimal::
  measurement_type ()
  {
    return this->measurement_type_;
  }

  inline
  void units_decimal::
  measurement_type (const ::std::string& x)
  {
    this->measurement_type_ = x;
    this->measurement_type_present_ = true;
  }

  inline
  bool units_decimal::
  uncertainty_present () const
  {
    return this->uncertainty_present_;
  }

  inline
  void units_decimal::
  uncertainty_present (bool x)
  {
    this->uncertainty_present_ = x;
  }

  inline
  double units_decimal::
  uncertainty () const
  {
    return this->uncertainty_;
  }

  inline
  double& units_decimal::
  uncertainty ()
  {
    return this->uncertainty_;
  }

  inline
  void units_decimal::
  uncertainty (double x)
  {
    this->uncertainty_ = x;
    this->uncertainty_present_ = true;
  }

  inline
  bool units_decimal::
  negative_uncertainty_present () const
  {
    return this->negative_uncertainty_present_;
  }

  inline
  void units_decimal::
  negative_uncertainty_present (bool x)
  {
    this->negative_uncertainty_present_ = x;
  }

  inline
  double units_decimal::
  negative_uncertainty () const
  {
    return this->negative_uncertainty_;
  }

  inline
  double& units_decimal::
  negative_uncertainty ()
  {
    return this->negative_uncertainty_;
  }

  inline
  void units_decimal::
  negative_uncertainty (double x)
  {
    this->negative_uncertainty_ = x;
    this->negative_uncertainty_present_ = true;
  }

  inline
  bool units_decimal::
  positive_uncertainty_present () const
  {
    return this->positive_uncertainty_present_;
  }

  inline
  void units_decimal::
  positive_uncertainty_present (bool x)
  {
    this->positive_uncertainty_present_ = x;
  }

  inline
  double units_decimal::
  positive_uncertainty () const
  {
    return this->positive_uncertainty_;
  }

  inline
  double& units_decimal::
  positive_uncertainty ()
  {
    return this->positive_uncertainty_;
  }

  inline
  void units_decimal::
  positive_uncertainty (double x)
  {
    this->positive_uncertainty_ = x;
    this->positive_uncertainty_present_ = true;
  }

  inline
  bool units_decimal::
  uncertainty_percentage_present () const
  {
    return this->uncertainty_percentage_present_;
  }

  inline
  void units_decimal::
  uncertainty_percentage_present (bool x)
  {
    this->uncertainty_percentage_present_ = x;
  }

  inline
  double units_decimal::
  uncertainty_percentage () const
  {
    return this->uncertainty_percentage_;
  }

  inline
  double& units_decimal::
  uncertainty_percentage ()
  {
    return this->uncertainty_percentage_;
  }

  inline
  void units_decimal::
  uncertainty_percentage (double x)
  {
    this->uncertainty_percentage_ = x;
    this->uncertainty_percentage_present_ = true;
  }

  inline
  bool units_decimal::
  negative_uncertainty_percentage_present () const
  {
    return this->negative_uncertainty_percentage_present_;
  }

  inline
  void units_decimal::
  negative_uncertainty_percentage_present (bool x)
  {
    this->negative_uncertainty_percentage_present_ = x;
  }

  inline
  double units_decimal::
  negative_uncertainty_percentage () const
  {
    return this->negative_uncertainty_percentage_;
  }

  inline
  double& units_decimal::
  negative_uncertainty_percentage ()
  {
    return this->negative_uncertainty_percentage_;
  }

  inline
  void units_decimal::
  negative_uncertainty_percentage (double x)
  {
    this->negative_uncertainty_percentage_ = x;
    this->negative_uncertainty_percentage_present_ = true;
  }

  inline
  bool units_decimal::
  positive_uncertainty_percentage_present () const
  {
    return this->positive_uncertainty_percentage_present_;
  }

  inline
  void units_decimal::
  positive_uncertainty_percentage_present (bool x)
  {
    this->positive_uncertainty_percentage_present_ = x;
  }

  inline
  double units_decimal::
  positive_uncertainty_percentage () const
  {
    return this->positive_uncertainty_percentage_;
  }

  inline
  double& units_decimal::
  positive_uncertainty_percentage ()
  {
    return this->positive_uncertainty_percentage_;
  }

  inline
  void units_decimal::
  positive_uncertainty_percentage (double x)
  {
    this->positive_uncertainty_percentage_ = x;
    this->positive_uncertainty_percentage_present_ = true;
  }

  inline
  bool units_decimal::
  median_present () const
  {
    return this->median_present_;
  }

  inline
  void units_decimal::
  median_present (bool x)
  {
    this->median_present_ = x;
  }

  inline
  double units_decimal::
  median () const
  {
    return this->median_;
  }

  inline
  double& units_decimal::
  median ()
  {
    return this->median_;
  }

  inline
  void units_decimal::
  median (double x)
  {
    this->median_ = x;
    this->median_present_ = true;
  }

  inline
  bool units_decimal::
  standard_deviation_present () const
  {
    return this->standard_deviation_present_;
  }

  inline
  void units_decimal::
  standard_deviation_present (bool x)
  {
    this->standard_deviation_present_ = x;
  }

  inline
  double units_decimal::
  standard_deviation () const
  {
    return this->standard_deviation_;
  }

  inline
  double& units_decimal::
  standard_deviation ()
  {
    return this->standard_deviation_;
  }

  inline
  void units_decimal::
  standard_deviation (double x)
  {
    this->standard_deviation_ = x;
    this->standard_deviation_present_ = true;
  }

  inline
  bool units_decimal::
  interquartile_range_present () const
  {
    return this->interquartile_range_ != 0;
  }

  inline
  const ::common::two_doubles& units_decimal::
  interquartile_range () const
  {
    return *this->interquartile_range_;
  }

  inline
  ::common::two_doubles& units_decimal::
  interquartile_range ()
  {
    return *this->interquartile_range_;
  }

  inline
  void units_decimal::
  interquartile_range (::common::two_doubles* x)
  {
    delete this->interquartile_range_;
    this->interquartile_range_ = x;
  }

  inline
  ::common::two_doubles* units_decimal::
  interquartile_range_detach ()
  {
    ::common::two_doubles* r = this->interquartile_range_;
    this->interquartile_range_ = 0;
    return r;
  }

  inline
  bool units_decimal::
  range_present () const
  {
    return this->range_ != 0;
  }

  inline
  const ::common::two_doubles& units_decimal::
  range () const
  {
    return *this->range_;
  }

  inline
  ::common::two_doubles& units_decimal::
  range ()
  {
    return *this->range_;
  }

  inline
  void units_decimal::
  range (::common::two_doubles* x)
  {
    delete this->range_;
    this->range_ = x;
  }

  inline
  ::common::two_doubles* units_decimal::
  range_detach ()
  {
    ::common::two_doubles* r = this->range_;
    this->range_ = 0;
    return r;
  }

  inline
  bool units_decimal::
  min_present () const
  {
    return this->min_present_;
  }

  inline
  void units_decimal::
  min_present (bool x)
  {
    this->min_present_ = x;
  }

  inline
  double units_decimal::
  min () const
  {
    return this->min_;
  }

  inline
  double& units_decimal::
  min ()
  {
    return this->min_;
  }

  inline
  void units_decimal::
  min (double x)
  {
    this->min_ = x;
    this->min_present_ = true;
  }

  inline
  bool units_decimal::
  max_present () const
  {
    return this->max_present_;
  }

  inline
  void units_decimal::
  max_present (bool x)
  {
    this->max_present_ = x;
  }

  inline
  double units_decimal::
  max () const
  {
    return this->max_;
  }

  inline
  double& units_decimal::
  max ()
  {
    return this->max_;
  }

  inline
  void units_decimal::
  max (double x)
  {
    this->max_ = x;
    this->max_present_ = true;
  }

  inline
  bool units_decimal::
  standard_error_present () const
  {
    return this->standard_error_present_;
  }

  inline
  void units_decimal::
  standard_error_present (bool x)
  {
    this->standard_error_present_ = x;
  }

  inline
  double units_decimal::
  standard_error () const
  {
    return this->standard_error_;
  }

  inline
  double& units_decimal::
  standard_error ()
  {
    return this->standard_error_;
  }

  inline
  void units_decimal::
  standard_error (double x)
  {
    this->standard_error_ = x;
    this->standard_error_present_ = true;
  }

  inline
  bool units_decimal::
  standard_error_of_the_mean_present () const
  {
    return this->standard_error_of_the_mean_present_;
  }

  inline
  void units_decimal::
  standard_error_of_the_mean_present (bool x)
  {
    this->standard_error_of_the_mean_present_ = x;
  }

  inline
  double units_decimal::
  standard_error_of_the_mean () const
  {
    return this->standard_error_of_the_mean_;
  }

  inline
  double& units_decimal::
  standard_error_of_the_mean ()
  {
    return this->standard_error_of_the_mean_;
  }

  inline
  void units_decimal::
  standard_error_of_the_mean (double x)
  {
    this->standard_error_of_the_mean_ = x;
    this->standard_error_of_the_mean_present_ = true;
  }

  inline
  bool units_decimal::
  number_obs_present () const
  {
    return this->number_obs_present_;
  }

  inline
  void units_decimal::
  number_obs_present (bool x)
  {
    this->number_obs_present_ = x;
  }

  inline
  int units_decimal::
  number_obs () const
  {
    return this->number_obs_;
  }

  inline
  int& units_decimal::
  number_obs ()
  {
    return this->number_obs_;
  }

  inline
  void units_decimal::
  number_obs (int x)
  {
    this->number_obs_ = x;
    this->number_obs_present_ = true;
  }

  inline
  bool units_decimal::
  skewnesss_present () const
  {
    return this->skewnesss_present_;
  }

  inline
  void units_decimal::
  skewnesss_present (bool x)
  {
    this->skewnesss_present_ = x;
  }

  inline
  double units_decimal::
  skewnesss () const
  {
    return this->skewnesss_;
  }

  inline
  double& units_decimal::
  skewnesss ()
  {
    return this->skewnesss_;
  }

  inline
  void units_decimal::
  skewnesss (double x)
  {
    this->skewnesss_ = x;
    this->skewnesss_present_ = true;
  }

  inline
  bool units_decimal::
  kurtosis_present () const
  {
    return this->kurtosis_present_;
  }

  inline
  void units_decimal::
  kurtosis_present (bool x)
  {
    this->kurtosis_present_ = x;
  }

  inline
  double units_decimal::
  kurtosis () const
  {
    return this->kurtosis_;
  }

  inline
  double& units_decimal::
  kurtosis ()
  {
    return this->kurtosis_;
  }

  inline
  void units_decimal::
  kurtosis (double x)
  {
    this->kurtosis_ = x;
    this->kurtosis_present_ = true;
  }

  // units_decimal_nonnegative
  //

  // units_unsignedShort
  //

  inline
  bool units_unsignedShort::
  measurement_type_present () const
  {
    return this->measurement_type_present_;
  }

  inline
  void units_unsignedShort::
  measurement_type_present (bool x)
  {
    this->measurement_type_present_ = x;
  }

  inline
  const ::std::string& units_unsignedShort::
  measurement_type () const
  {
    return this->measurement_type_;
  }

  inline
  ::std::string& units_unsignedShort::
  measurement_type ()
  {
    return this->measurement_type_;
  }

  inline
  void units_unsignedShort::
  measurement_type (const ::std::string& x)
  {
    this->measurement_type_ = x;
    this->measurement_type_present_ = true;
  }

  inline
  bool units_unsignedShort::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void units_unsignedShort::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& units_unsignedShort::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& units_unsignedShort::
  units ()
  {
    return this->units_;
  }

  inline
  void units_unsignedShort::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  // units_boolean
  //

  inline
  bool units_boolean::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void units_boolean::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& units_boolean::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& units_boolean::
  units ()
  {
    return this->units_;
  }

  inline
  void units_boolean::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  // fraction
  //

  // units_fraction
  //

  // units_string
  //

  inline
  bool units_string::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void units_string::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& units_string::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& units_string::
  units ()
  {
    return this->units_;
  }

  inline
  void units_string::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool units_string::
  measurement_type_present () const
  {
    return this->measurement_type_present_;
  }

  inline
  void units_string::
  measurement_type_present (bool x)
  {
    this->measurement_type_present_ = x;
  }

  inline
  const ::std::string& units_string::
  measurement_type () const
  {
    return this->measurement_type_;
  }

  inline
  ::std::string& units_string::
  measurement_type ()
  {
    return this->measurement_type_;
  }

  inline
  void units_string::
  measurement_type (const ::std::string& x)
  {
    this->measurement_type_ = x;
    this->measurement_type_present_ = true;
  }

  inline
  bool units_string::
  uncertainty_present () const
  {
    return this->uncertainty_present_;
  }

  inline
  void units_string::
  uncertainty_present (bool x)
  {
    this->uncertainty_present_ = x;
  }

  inline
  double units_string::
  uncertainty () const
  {
    return this->uncertainty_;
  }

  inline
  double& units_string::
  uncertainty ()
  {
    return this->uncertainty_;
  }

  inline
  void units_string::
  uncertainty (double x)
  {
    this->uncertainty_ = x;
    this->uncertainty_present_ = true;
  }

  inline
  bool units_string::
  negative_uncertainty_present () const
  {
    return this->negative_uncertainty_present_;
  }

  inline
  void units_string::
  negative_uncertainty_present (bool x)
  {
    this->negative_uncertainty_present_ = x;
  }

  inline
  double units_string::
  negative_uncertainty () const
  {
    return this->negative_uncertainty_;
  }

  inline
  double& units_string::
  negative_uncertainty ()
  {
    return this->negative_uncertainty_;
  }

  inline
  void units_string::
  negative_uncertainty (double x)
  {
    this->negative_uncertainty_ = x;
    this->negative_uncertainty_present_ = true;
  }

  inline
  bool units_string::
  positive_uncertainty_present () const
  {
    return this->positive_uncertainty_present_;
  }

  inline
  void units_string::
  positive_uncertainty_present (bool x)
  {
    this->positive_uncertainty_present_ = x;
  }

  inline
  double units_string::
  positive_uncertainty () const
  {
    return this->positive_uncertainty_;
  }

  inline
  double& units_string::
  positive_uncertainty ()
  {
    return this->positive_uncertainty_;
  }

  inline
  void units_string::
  positive_uncertainty (double x)
  {
    this->positive_uncertainty_ = x;
    this->positive_uncertainty_present_ = true;
  }

  inline
  bool units_string::
  uncertainty_percentage_present () const
  {
    return this->uncertainty_percentage_present_;
  }

  inline
  void units_string::
  uncertainty_percentage_present (bool x)
  {
    this->uncertainty_percentage_present_ = x;
  }

  inline
  double units_string::
  uncertainty_percentage () const
  {
    return this->uncertainty_percentage_;
  }

  inline
  double& units_string::
  uncertainty_percentage ()
  {
    return this->uncertainty_percentage_;
  }

  inline
  void units_string::
  uncertainty_percentage (double x)
  {
    this->uncertainty_percentage_ = x;
    this->uncertainty_percentage_present_ = true;
  }

  inline
  bool units_string::
  negative_uncertainty_percentage_present () const
  {
    return this->negative_uncertainty_percentage_present_;
  }

  inline
  void units_string::
  negative_uncertainty_percentage_present (bool x)
  {
    this->negative_uncertainty_percentage_present_ = x;
  }

  inline
  double units_string::
  negative_uncertainty_percentage () const
  {
    return this->negative_uncertainty_percentage_;
  }

  inline
  double& units_string::
  negative_uncertainty_percentage ()
  {
    return this->negative_uncertainty_percentage_;
  }

  inline
  void units_string::
  negative_uncertainty_percentage (double x)
  {
    this->negative_uncertainty_percentage_ = x;
    this->negative_uncertainty_percentage_present_ = true;
  }

  inline
  bool units_string::
  positive_uncertainty_percentage_present () const
  {
    return this->positive_uncertainty_percentage_present_;
  }

  inline
  void units_string::
  positive_uncertainty_percentage_present (bool x)
  {
    this->positive_uncertainty_percentage_present_ = x;
  }

  inline
  double units_string::
  positive_uncertainty_percentage () const
  {
    return this->positive_uncertainty_percentage_;
  }

  inline
  double& units_string::
  positive_uncertainty_percentage ()
  {
    return this->positive_uncertainty_percentage_;
  }

  inline
  void units_string::
  positive_uncertainty_percentage (double x)
  {
    this->positive_uncertainty_percentage_ = x;
    this->positive_uncertainty_percentage_present_ = true;
  }

  inline
  bool units_string::
  median_present () const
  {
    return this->median_present_;
  }

  inline
  void units_string::
  median_present (bool x)
  {
    this->median_present_ = x;
  }

  inline
  double units_string::
  median () const
  {
    return this->median_;
  }

  inline
  double& units_string::
  median ()
  {
    return this->median_;
  }

  inline
  void units_string::
  median (double x)
  {
    this->median_ = x;
    this->median_present_ = true;
  }

  inline
  bool units_string::
  standard_deviation_present () const
  {
    return this->standard_deviation_present_;
  }

  inline
  void units_string::
  standard_deviation_present (bool x)
  {
    this->standard_deviation_present_ = x;
  }

  inline
  double units_string::
  standard_deviation () const
  {
    return this->standard_deviation_;
  }

  inline
  double& units_string::
  standard_deviation ()
  {
    return this->standard_deviation_;
  }

  inline
  void units_string::
  standard_deviation (double x)
  {
    this->standard_deviation_ = x;
    this->standard_deviation_present_ = true;
  }

  inline
  bool units_string::
  interquartile_range_present () const
  {
    return this->interquartile_range_ != 0;
  }

  inline
  const ::common::two_doubles& units_string::
  interquartile_range () const
  {
    return *this->interquartile_range_;
  }

  inline
  ::common::two_doubles& units_string::
  interquartile_range ()
  {
    return *this->interquartile_range_;
  }

  inline
  void units_string::
  interquartile_range (::common::two_doubles* x)
  {
    delete this->interquartile_range_;
    this->interquartile_range_ = x;
  }

  inline
  ::common::two_doubles* units_string::
  interquartile_range_detach ()
  {
    ::common::two_doubles* r = this->interquartile_range_;
    this->interquartile_range_ = 0;
    return r;
  }

  inline
  bool units_string::
  range_present () const
  {
    return this->range_ != 0;
  }

  inline
  const ::common::two_doubles& units_string::
  range () const
  {
    return *this->range_;
  }

  inline
  ::common::two_doubles& units_string::
  range ()
  {
    return *this->range_;
  }

  inline
  void units_string::
  range (::common::two_doubles* x)
  {
    delete this->range_;
    this->range_ = x;
  }

  inline
  ::common::two_doubles* units_string::
  range_detach ()
  {
    ::common::two_doubles* r = this->range_;
    this->range_ = 0;
    return r;
  }

  inline
  bool units_string::
  min_present () const
  {
    return this->min_present_;
  }

  inline
  void units_string::
  min_present (bool x)
  {
    this->min_present_ = x;
  }

  inline
  double units_string::
  min () const
  {
    return this->min_;
  }

  inline
  double& units_string::
  min ()
  {
    return this->min_;
  }

  inline
  void units_string::
  min (double x)
  {
    this->min_ = x;
    this->min_present_ = true;
  }

  inline
  bool units_string::
  max_present () const
  {
    return this->max_present_;
  }

  inline
  void units_string::
  max_present (bool x)
  {
    this->max_present_ = x;
  }

  inline
  double units_string::
  max () const
  {
    return this->max_;
  }

  inline
  double& units_string::
  max ()
  {
    return this->max_;
  }

  inline
  void units_string::
  max (double x)
  {
    this->max_ = x;
    this->max_present_ = true;
  }

  inline
  bool units_string::
  standard_error_present () const
  {
    return this->standard_error_present_;
  }

  inline
  void units_string::
  standard_error_present (bool x)
  {
    this->standard_error_present_ = x;
  }

  inline
  double units_string::
  standard_error () const
  {
    return this->standard_error_;
  }

  inline
  double& units_string::
  standard_error ()
  {
    return this->standard_error_;
  }

  inline
  void units_string::
  standard_error (double x)
  {
    this->standard_error_ = x;
    this->standard_error_present_ = true;
  }

  inline
  bool units_string::
  standard_error_of_the_mean_present () const
  {
    return this->standard_error_of_the_mean_present_;
  }

  inline
  void units_string::
  standard_error_of_the_mean_present (bool x)
  {
    this->standard_error_of_the_mean_present_ = x;
  }

  inline
  double units_string::
  standard_error_of_the_mean () const
  {
    return this->standard_error_of_the_mean_;
  }

  inline
  double& units_string::
  standard_error_of_the_mean ()
  {
    return this->standard_error_of_the_mean_;
  }

  inline
  void units_string::
  standard_error_of_the_mean (double x)
  {
    this->standard_error_of_the_mean_ = x;
    this->standard_error_of_the_mean_present_ = true;
  }

  inline
  bool units_string::
  number_obs_present () const
  {
    return this->number_obs_present_;
  }

  inline
  void units_string::
  number_obs_present (bool x)
  {
    this->number_obs_present_ = x;
  }

  inline
  int units_string::
  number_obs () const
  {
    return this->number_obs_;
  }

  inline
  int& units_string::
  number_obs ()
  {
    return this->number_obs_;
  }

  inline
  void units_string::
  number_obs (int x)
  {
    this->number_obs_ = x;
    this->number_obs_present_ = true;
  }

  inline
  bool units_string::
  skewnesss_present () const
  {
    return this->skewnesss_present_;
  }

  inline
  void units_string::
  skewnesss_present (bool x)
  {
    this->skewnesss_present_ = x;
  }

  inline
  double units_string::
  skewnesss () const
  {
    return this->skewnesss_;
  }

  inline
  double& units_string::
  skewnesss ()
  {
    return this->skewnesss_;
  }

  inline
  void units_string::
  skewnesss (double x)
  {
    this->skewnesss_ = x;
    this->skewnesss_present_ = true;
  }

  inline
  bool units_string::
  kurtosis_present () const
  {
    return this->kurtosis_present_;
  }

  inline
  void units_string::
  kurtosis_present (bool x)
  {
    this->kurtosis_present_ = x;
  }

  inline
  double units_string::
  kurtosis () const
  {
    return this->kurtosis_;
  }

  inline
  double& units_string::
  kurtosis ()
  {
    return this->kurtosis_;
  }

  inline
  void units_string::
  kurtosis (double x)
  {
    this->kurtosis_ = x;
    this->kurtosis_present_ = true;
  }

  // data_storage_formats
  //

  inline
  data_storage_formats::
  data_storage_formats ()
  {
  }

  inline
  data_storage_formats::
  data_storage_formats (value_type v)
  {
    value_ = v;
  }

  inline
  void data_storage_formats::
  value (value_type v)
  {
    value_ = v;
  }

  // threshold_type
  //

  inline
  threshold_type::
  threshold_type ()
  {
  }

  inline
  threshold_type::
  threshold_type (value_type v)
  {
    value_ = v;
  }

  inline
  void threshold_type::
  value (value_type v)
  {
    value_ = v;
  }

  // transition_threshold
  //

  inline
  const ::std::string& transition_threshold::
  quantity () const
  {
    return this->quantity_;
  }

  inline
  ::std::string& transition_threshold::
  quantity ()
  {
    return this->quantity_;
  }

  inline
  void transition_threshold::
  quantity (const ::std::string& x)
  {
    this->quantity_ = x;
  }

  inline
  const ::common::threshold_type& transition_threshold::
  type () const
  {
    return this->type_;
  }

  inline
  ::common::threshold_type& transition_threshold::
  type ()
  {
    return this->type_;
  }

  inline
  void transition_threshold::
  type (const ::common::threshold_type& x)
  {
    this->type_ = x;
  }

  inline
  bool transition_threshold::
  variable_ID_present () const
  {
    return this->variable_ID_present_;
  }

  inline
  void transition_threshold::
  variable_ID_present (bool x)
  {
    this->variable_ID_present_ = x;
  }

  inline
  unsigned long long transition_threshold::
  variable_ID () const
  {
    return this->variable_ID_;
  }

  inline
  unsigned long long& transition_threshold::
  variable_ID ()
  {
    return this->variable_ID_;
  }

  inline
  void transition_threshold::
  variable_ID (unsigned long long x)
  {
    this->variable_ID_ = x;
    this->variable_ID_present_ = true;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // COMMON_IPP
