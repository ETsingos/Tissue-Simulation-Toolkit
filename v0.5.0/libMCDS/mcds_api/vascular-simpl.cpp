// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "vascular-simpl.hpp"

namespace vascular
{
  // vascular_node_simpl
  //

  vascular_node_simpl::
  vascular_node_simpl ()
  : vascular_node_sskel (&base_impl_)
  {
  }

  void vascular_node_simpl::
  pre (const ::mesh::node& x)
  {
    this->pre (static_cast< const ::vascular::vascular_node& > (x));
  }

  void vascular_node_simpl::
  pre (const ::vascular::vascular_node& x)
  {
    this->base_impl_.pre (x);
    this->vascular_node_simpl_state_.vascular_node_ = &x;
  }

  bool vascular_node_simpl::
  boundary_node_present ()
  {
    return this->vascular_node_simpl_state_.vascular_node_->boundary_node_present ();
  }

  bool vascular_node_simpl::
  boundary_node ()
  {
    return this->vascular_node_simpl_state_.vascular_node_->boundary_node ();
  }

  // list_of_vascular_nodes_simpl
  //

  list_of_vascular_nodes_simpl::
  list_of_vascular_nodes_simpl ()
  : list_of_vascular_nodes_simpl_state_ (sizeof (list_of_vascular_nodes_simpl_state ), &list_of_vascular_nodes_simpl_state_first_)
  {
  }

  void list_of_vascular_nodes_simpl::
  pre (const ::vascular::list_of_vascular_nodes& x)
  {
    this->list_of_vascular_nodes_simpl_state_.push ();
    static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->list_of_vascular_nodes_ = &x;
    static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->vascular_node_ = 
    static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->list_of_vascular_nodes_->vascular_node ().begin ();
    static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->vascular_node_end_ = 
    static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->list_of_vascular_nodes_->vascular_node ().end ();
  }

  bool list_of_vascular_nodes_simpl::
  vascular_node_next ()
  {
    return static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->vascular_node_ != 
    static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->vascular_node_end_;
  }

  const ::vascular::vascular_node& list_of_vascular_nodes_simpl::
  vascular_node ()
  {
    const ::std::string& dt = static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->vascular_node_->_dynamic_type ();
    if (dt != ::vascular::vascular_node_simpl::_static_type ())
      this->_context ().type_id (dt.c_str ());

    return *static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->vascular_node_++;
  }

  bool list_of_vascular_nodes_simpl::
  custom_present ()
  {
    return static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->list_of_vascular_nodes_->custom_present ();
  }

  const ::common::custom& list_of_vascular_nodes_simpl::
  custom ()
  {
    return static_cast< list_of_vascular_nodes_simpl_state* > (this->list_of_vascular_nodes_simpl_state_.top ())->list_of_vascular_nodes_->custom ();
  }

  void list_of_vascular_nodes_simpl::
  post ()
  {
    this->list_of_vascular_nodes_simpl_state_.pop ();
  }

  void list_of_vascular_nodes_simpl::
  _reset ()
  {
    list_of_vascular_nodes_sskel::_reset ();
    for (; !this->list_of_vascular_nodes_simpl_state_.empty (); this->list_of_vascular_nodes_simpl_state_.pop ()) ;
  }

  // boundary_node_simpl
  //

  void boundary_node_simpl::
  pre (const ::vascular::boundary_node& x)
  {
    this->boundary_node_simpl_state_.boundary_node_ = &x;
  }

  bool boundary_node_simpl::
  node_ID_present ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->node_ID_present ();
  }

  unsigned int boundary_node_simpl::
  node_ID ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->node_ID ();
  }

  bool boundary_node_simpl::
  fluid_flow_velocity_present ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->fluid_flow_velocity_present ();
  }

  const ::common::units_decimal& boundary_node_simpl::
  fluid_flow_velocity ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->fluid_flow_velocity ();
  }

  bool boundary_node_simpl::
  variables_present ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->variables_present ();
  }

  const ::variables::list_of_variables& boundary_node_simpl::
  variables ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->variables ();
  }

  bool boundary_node_simpl::
  boundary_conditions_present ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->boundary_conditions_present ();
  }

  const ::vascular::boundary_conditions& boundary_node_simpl::
  boundary_conditions ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->boundary_conditions ();
  }

  bool boundary_node_simpl::
  custom_present ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->custom_present ();
  }

  const ::common::custom& boundary_node_simpl::
  custom ()
  {
    return this->boundary_node_simpl_state_.boundary_node_->custom ();
  }

  // list_of_boundary_nodes_simpl
  //

  void list_of_boundary_nodes_simpl::
  pre (const ::vascular::list_of_boundary_nodes& x)
  {
    this->list_of_boundary_nodes_simpl_state_.list_of_boundary_nodes_ = &x;
    this->list_of_boundary_nodes_simpl_state_.boundary_node_ = 
    this->list_of_boundary_nodes_simpl_state_.list_of_boundary_nodes_->boundary_node ().begin ();
    this->list_of_boundary_nodes_simpl_state_.boundary_node_end_ = 
    this->list_of_boundary_nodes_simpl_state_.list_of_boundary_nodes_->boundary_node ().end ();
  }

  bool list_of_boundary_nodes_simpl::
  boundary_node_next ()
  {
    return this->list_of_boundary_nodes_simpl_state_.boundary_node_ != 
    this->list_of_boundary_nodes_simpl_state_.boundary_node_end_;
  }

  const ::vascular::boundary_node& list_of_boundary_nodes_simpl::
  boundary_node ()
  {
    return *this->list_of_boundary_nodes_simpl_state_.boundary_node_++;
  }

  bool list_of_boundary_nodes_simpl::
  custom_present ()
  {
    return this->list_of_boundary_nodes_simpl_state_.list_of_boundary_nodes_->custom_present ();
  }

  const ::common::custom& list_of_boundary_nodes_simpl::
  custom ()
  {
    return this->list_of_boundary_nodes_simpl_state_.list_of_boundary_nodes_->custom ();
  }

  // boundary_conditions_simpl
  //

  void boundary_conditions_simpl::
  pre (const ::vascular::boundary_conditions& x)
  {
    this->boundary_conditions_simpl_state_.boundary_conditions_ = &x;
    this->boundary_conditions_simpl_state_.boundary_condition_ = 
    this->boundary_conditions_simpl_state_.boundary_conditions_->boundary_condition ().begin ();
    this->boundary_conditions_simpl_state_.boundary_condition_end_ = 
    this->boundary_conditions_simpl_state_.boundary_conditions_->boundary_condition ().end ();
  }

  bool boundary_conditions_simpl::
  ID_present ()
  {
    return this->boundary_conditions_simpl_state_.boundary_conditions_->ID_present ();
  }

  unsigned int boundary_conditions_simpl::
  ID ()
  {
    return this->boundary_conditions_simpl_state_.boundary_conditions_->ID ();
  }

  bool boundary_conditions_simpl::
  boundary_condition_next ()
  {
    return this->boundary_conditions_simpl_state_.boundary_condition_ != 
    this->boundary_conditions_simpl_state_.boundary_condition_end_;
  }

  const ::vascular::boundary_condition& boundary_conditions_simpl::
  boundary_condition ()
  {
    return *this->boundary_conditions_simpl_state_.boundary_condition_++;
  }

  bool boundary_conditions_simpl::
  custom_present ()
  {
    return this->boundary_conditions_simpl_state_.boundary_conditions_->custom_present ();
  }

  const ::common::custom& boundary_conditions_simpl::
  custom ()
  {
    return this->boundary_conditions_simpl_state_.boundary_conditions_->custom ();
  }

  // boundary_type_simpl
  //

  boundary_type_simpl::
  boundary_type_simpl ()
  : boundary_type_sskel (0)
  {
  }

  void boundary_type_simpl::
  pre (const ::vascular::boundary_type& x)
  {
    this->boundary_type_simpl_state_ = &x;
  }

  void boundary_type_simpl::
  _serialize_content ()
  {
    this->_characters (this->boundary_type_simpl_state_->string ());
  }

  // boundary_condition_simpl
  //

  void boundary_condition_simpl::
  pre (const ::vascular::boundary_condition& x)
  {
    this->boundary_condition_simpl_state_.boundary_condition_ = &x;
  }

  bool boundary_condition_simpl::
  ID_present ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->ID_present ();
  }

  unsigned int boundary_condition_simpl::
  ID ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->ID ();
  }

  unsigned int boundary_condition_simpl::
  variable_ID ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->variable_ID ();
  }

  const ::vascular::boundary_type& boundary_condition_simpl::
  boundary_type ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->boundary_type ();
  }

  bool boundary_condition_simpl::
  value_present ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->value_present ();
  }

  const ::common::units_decimal& boundary_condition_simpl::
  value ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->value ();
  }

  bool boundary_condition_simpl::
  direction_present ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->direction_present ();
  }

  ::std::string boundary_condition_simpl::
  direction ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->direction ();
  }

  bool boundary_condition_simpl::
  custom_present ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->custom_present ();
  }

  const ::common::custom& boundary_condition_simpl::
  custom ()
  {
    return this->boundary_condition_simpl_state_.boundary_condition_->custom ();
  }

  // vascular_segments_simpl
  //

  void vascular_segments_simpl::
  pre (const ::vascular::vascular_segments& x)
  {
    this->vascular_segments_simpl_state_.vascular_segments_ = &x;
    this->vascular_segments_simpl_state_.vascular_segment_ = 
    this->vascular_segments_simpl_state_.vascular_segments_->vascular_segment ().begin ();
    this->vascular_segments_simpl_state_.vascular_segment_end_ = 
    this->vascular_segments_simpl_state_.vascular_segments_->vascular_segment ().end ();
  }

  bool vascular_segments_simpl::
  vascular_segment_next ()
  {
    return this->vascular_segments_simpl_state_.vascular_segment_ != 
    this->vascular_segments_simpl_state_.vascular_segment_end_;
  }

  const ::vascular::vascular_segment& vascular_segments_simpl::
  vascular_segment ()
  {
    return *this->vascular_segments_simpl_state_.vascular_segment_++;
  }

  bool vascular_segments_simpl::
  custom_present ()
  {
    return this->vascular_segments_simpl_state_.vascular_segments_->custom_present ();
  }

  const ::common::custom& vascular_segments_simpl::
  custom ()
  {
    return this->vascular_segments_simpl_state_.vascular_segments_->custom ();
  }

  // vascular_segment_simpl
  //

  void vascular_segment_simpl::
  pre (const ::vascular::vascular_segment& x)
  {
    this->vascular_segment_simpl_state_.vascular_segment_ = &x;
  }

  const ::vascular::endpoint& vascular_segment_simpl::
  endpoint_1 ()
  {
    return this->vascular_segment_simpl_state_.vascular_segment_->endpoint_1 ();
  }

  const ::vascular::endpoint& vascular_segment_simpl::
  endpoint_2 ()
  {
    return this->vascular_segment_simpl_state_.vascular_segment_->endpoint_2 ();
  }

  bool vascular_segment_simpl::
  surface_present ()
  {
    return this->vascular_segment_simpl_state_.vascular_segment_->surface_present ();
  }

  const ::vascular::surface_properties& vascular_segment_simpl::
  surface ()
  {
    return this->vascular_segment_simpl_state_.vascular_segment_->surface ();
  }

  bool vascular_segment_simpl::
  interior_present ()
  {
    return this->vascular_segment_simpl_state_.vascular_segment_->interior_present ();
  }

  const ::vascular::volume_properties& vascular_segment_simpl::
  interior ()
  {
    return this->vascular_segment_simpl_state_.vascular_segment_->interior ();
  }

  bool vascular_segment_simpl::
  custom_present ()
  {
    return this->vascular_segment_simpl_state_.vascular_segment_->custom_present ();
  }

  const ::common::custom& vascular_segment_simpl::
  custom ()
  {
    return this->vascular_segment_simpl_state_.vascular_segment_->custom ();
  }

  // endpoint_simpl
  //

  void endpoint_simpl::
  pre (const ::vascular::endpoint& x)
  {
    this->endpoint_simpl_state_.endpoint_ = &x;
  }

  bool endpoint_simpl::
  node_ID_present ()
  {
    return this->endpoint_simpl_state_.endpoint_->node_ID_present ();
  }

  unsigned int endpoint_simpl::
  node_ID ()
  {
    return this->endpoint_simpl_state_.endpoint_->node_ID ();
  }

  bool endpoint_simpl::
  lengths_present ()
  {
    return this->endpoint_simpl_state_.endpoint_->lengths_present ();
  }

  const ::phenotype_common::lengths& endpoint_simpl::
  lengths ()
  {
    return this->endpoint_simpl_state_.endpoint_->lengths ();
  }

  bool endpoint_simpl::
  areas_present ()
  {
    return this->endpoint_simpl_state_.endpoint_->areas_present ();
  }

  const ::phenotype_common::areas_2D& endpoint_simpl::
  areas ()
  {
    return this->endpoint_simpl_state_.endpoint_->areas ();
  }

  bool endpoint_simpl::
  fluid_flow_velocity_present ()
  {
    return this->endpoint_simpl_state_.endpoint_->fluid_flow_velocity_present ();
  }

  const ::common::units_decimal& endpoint_simpl::
  fluid_flow_velocity ()
  {
    return this->endpoint_simpl_state_.endpoint_->fluid_flow_velocity ();
  }

  bool endpoint_simpl::
  custom_present ()
  {
    return this->endpoint_simpl_state_.endpoint_->custom_present ();
  }

  const ::common::custom& endpoint_simpl::
  custom ()
  {
    return this->endpoint_simpl_state_.endpoint_->custom ();
  }

  // surface_properties_simpl
  //

  void surface_properties_simpl::
  pre (const ::vascular::surface_properties& x)
  {
    this->surface_properties_simpl_state_.surface_properties_ = &x;
  }

  bool surface_properties_simpl::
  areas_present ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->areas_present ();
  }

  const ::phenotype_common::areas_3D& surface_properties_simpl::
  areas ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->areas ();
  }

  bool surface_properties_simpl::
  fluid_flow_velocity_present ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->fluid_flow_velocity_present ();
  }

  const ::common::units_decimal& surface_properties_simpl::
  fluid_flow_velocity ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->fluid_flow_velocity ();
  }

  bool surface_properties_simpl::
  mechanics_present ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->mechanics_present ();
  }

  const ::phenotype_common::mechanics& surface_properties_simpl::
  mechanics ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->mechanics ();
  }

  bool surface_properties_simpl::
  permeability_present ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->permeability_present ();
  }

  const ::common::units_decimal& surface_properties_simpl::
  permeability ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->permeability ();
  }

  bool surface_properties_simpl::
  surface_proteins_present ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->surface_proteins_present ();
  }

  const ::variables::list_of_variables& surface_properties_simpl::
  surface_proteins ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->surface_proteins ();
  }

  bool surface_properties_simpl::
  custom_present ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->custom_present ();
  }

  const ::common::custom& surface_properties_simpl::
  custom ()
  {
    return this->surface_properties_simpl_state_.surface_properties_->custom ();
  }

  // volume_properties_simpl
  //

  void volume_properties_simpl::
  pre (const ::vascular::volume_properties& x)
  {
    this->volume_properties_simpl_state_.volume_properties_ = &x;
  }

  bool volume_properties_simpl::
  fluid_flow_velocity_present ()
  {
    return this->volume_properties_simpl_state_.volume_properties_->fluid_flow_velocity_present ();
  }

  const ::common::units_decimal& volume_properties_simpl::
  fluid_flow_velocity ()
  {
    return this->volume_properties_simpl_state_.volume_properties_->fluid_flow_velocity ();
  }

  bool volume_properties_simpl::
  variables_present ()
  {
    return this->volume_properties_simpl_state_.volume_properties_->variables_present ();
  }

  const ::variables::list_of_variables& volume_properties_simpl::
  variables ()
  {
    return this->volume_properties_simpl_state_.volume_properties_->variables ();
  }

  bool volume_properties_simpl::
  volumes_present ()
  {
    return this->volume_properties_simpl_state_.volume_properties_->volumes_present ();
  }

  const ::phenotype_common::volumes& volume_properties_simpl::
  volumes ()
  {
    return this->volume_properties_simpl_state_.volume_properties_->volumes ();
  }

  bool volume_properties_simpl::
  custom_present ()
  {
    return this->volume_properties_simpl_state_.volume_properties_->custom_present ();
  }

  const ::common::custom& volume_properties_simpl::
  custom ()
  {
    return this->volume_properties_simpl_state_.volume_properties_->custom ();
  }

  // vascular_network_simpl
  //

  void vascular_network_simpl::
  pre (const ::vascular::vascular_network& x)
  {
    this->vascular_network_simpl_state_.vascular_network_ = &x;
  }

  bool vascular_network_simpl::
  ID_present ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->ID_present ();
  }

  unsigned int vascular_network_simpl::
  ID ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->ID ();
  }

  bool vascular_network_simpl::
  keywords_present ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->keywords_present ();
  }

  ::std::string vascular_network_simpl::
  keywords ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->keywords ();
  }

  bool vascular_network_simpl::
  name_present ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->name_present ();
  }

  ::std::string vascular_network_simpl::
  name ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->name ();
  }

  bool vascular_network_simpl::
  vascular_nodes_present ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->vascular_nodes_present ();
  }

  const ::vascular::list_of_vascular_nodes& vascular_network_simpl::
  vascular_nodes ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->vascular_nodes ();
  }

  bool vascular_network_simpl::
  boundary_nodes_present ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->boundary_nodes_present ();
  }

  const ::vascular::list_of_boundary_nodes& vascular_network_simpl::
  boundary_nodes ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->boundary_nodes ();
  }

  bool vascular_network_simpl::
  vascular_segments_present ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->vascular_segments_present ();
  }

  const ::vascular::vascular_segments& vascular_network_simpl::
  vascular_segments ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->vascular_segments ();
  }

  bool vascular_network_simpl::
  voxels_present ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->voxels_present ();
  }

  const ::mesh::int_list_xpath& vascular_network_simpl::
  voxels ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->voxels ();
  }

  bool vascular_network_simpl::
  custom_present ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->custom_present ();
  }

  const ::common::custom& vascular_network_simpl::
  custom ()
  {
    return this->vascular_network_simpl_state_.vascular_network_->custom ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

