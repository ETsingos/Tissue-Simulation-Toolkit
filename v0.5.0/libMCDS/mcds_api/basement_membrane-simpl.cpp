// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "basement_membrane-simpl.hpp"

namespace basement
{
  // basement_edge_simpl
  //

  basement_edge_simpl::
  basement_edge_simpl ()
  : basement_edge_sskel (&base_impl_)
  {
  }

  void basement_edge_simpl::
  pre (const ::basement::basement_edge& x)
  {
    this->base_impl_.pre (x);
    this->basement_edge_simpl_state_.basement_edge_ = &x;
  }

  const ::common::units_decimal_nonnegative& basement_edge_simpl::
  tensile_strength ()
  {
    return this->basement_edge_simpl_state_.basement_edge_->tensile_strength ();
  }

  const ::common::custom& basement_edge_simpl::
  custom ()
  {
    return this->basement_edge_simpl_state_.basement_edge_->custom ();
  }

  // basement_face_simpl
  //

  basement_face_simpl::
  basement_face_simpl ()
  : basement_face_sskel (&base_impl_)
  {
  }

  void basement_face_simpl::
  pre (const ::basement::basement_face& x)
  {
    this->base_impl_.pre (x);
    this->basement_face_simpl_state_.basement_face_ = &x;
  }

  const ::common::units_decimal_nonnegative& basement_face_simpl::
  thickness ()
  {
    return this->basement_face_simpl_state_.basement_face_->thickness ();
  }

  const ::common::custom& basement_face_simpl::
  custom ()
  {
    return this->basement_face_simpl_state_.basement_face_->custom ();
  }

  // nodes_simpl
  //

  nodes_simpl::
  nodes_simpl ()
  : nodes_simpl_state_ (sizeof (nodes_simpl_state ), &nodes_simpl_state_first_)
  {
  }

  void nodes_simpl::
  pre (const ::basement::nodes& x)
  {
    this->nodes_simpl_state_.push ();
    static_cast< nodes_simpl_state* > (this->nodes_simpl_state_.top ())->nodes_ = &x;
  }

  const ::mesh::node& nodes_simpl::
  node ()
  {
    const ::std::string& dt = static_cast< nodes_simpl_state* > (this->nodes_simpl_state_.top ())->nodes_->node ()._dynamic_type ();
    if (dt != ::mesh::node_simpl::_static_type ())
      this->_context ().type_id (dt.c_str ());

    return static_cast< nodes_simpl_state* > (this->nodes_simpl_state_.top ())->nodes_->node ();
  }

  const ::common::custom& nodes_simpl::
  custom ()
  {
    return static_cast< nodes_simpl_state* > (this->nodes_simpl_state_.top ())->nodes_->custom ();
  }

  void nodes_simpl::
  post ()
  {
    this->nodes_simpl_state_.pop ();
  }

  void nodes_simpl::
  _reset ()
  {
    nodes_sskel::_reset ();
    for (; !this->nodes_simpl_state_.empty (); this->nodes_simpl_state_.pop ()) ;
  }

  // egdes_simpl
  //

  void egdes_simpl::
  pre (const ::basement::egdes& x)
  {
    this->egdes_simpl_state_.egdes_ = &x;
  }

  const ::basement::basement_edge& egdes_simpl::
  edge ()
  {
    return this->egdes_simpl_state_.egdes_->edge ();
  }

  const ::common::custom& egdes_simpl::
  custom ()
  {
    return this->egdes_simpl_state_.egdes_->custom ();
  }

  // faces_simpl
  //

  void faces_simpl::
  pre (const ::basement::faces& x)
  {
    this->faces_simpl_state_.faces_ = &x;
  }

  const ::basement::basement_face& faces_simpl::
  face ()
  {
    return this->faces_simpl_state_.faces_->face ();
  }

  const ::common::custom& faces_simpl::
  custom ()
  {
    return this->faces_simpl_state_.faces_->custom ();
  }

  // basement_membrane_simpl
  //

  void basement_membrane_simpl::
  pre (const ::basement::basement_membrane& x)
  {
    this->basement_membrane_simpl_state_.basement_membrane_ = &x;
  }

  bool basement_membrane_simpl::
  ID_present ()
  {
    return this->basement_membrane_simpl_state_.basement_membrane_->ID_present ();
  }

  unsigned int basement_membrane_simpl::
  ID ()
  {
    return this->basement_membrane_simpl_state_.basement_membrane_->ID ();
  }

  const ::basement::nodes& basement_membrane_simpl::
  nodes ()
  {
    return this->basement_membrane_simpl_state_.basement_membrane_->nodes ();
  }

  const ::basement::egdes& basement_membrane_simpl::
  edges ()
  {
    return this->basement_membrane_simpl_state_.basement_membrane_->edges ();
  }

  const ::basement::faces& basement_membrane_simpl::
  faces ()
  {
    return this->basement_membrane_simpl_state_.basement_membrane_->faces ();
  }

  const ::common::custom& basement_membrane_simpl::
  custom ()
  {
    return this->basement_membrane_simpl_state_.basement_membrane_->custom ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

