// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef COMMON_SIMPL_HPP
#define COMMON_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define COMMON_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "common-sskel.hpp"

#include <xsde/cxx/stack.hxx>

namespace common
{
  class custom_base_simpl: public custom_sskel
  {
    public:
    virtual void
    pre (const ::common::custom&);

    // Elements.
    //
    public:
    struct custom_base_simpl_state
    {
      const ::common::custom* custom_;
    };

    custom_base_simpl_state custom_base_simpl_state_;
  };
}

#include "custom-simpl.hpp"

namespace common
{
  class double_list_simpl: public double_list_sskel
  {
    public:
    virtual void
    pre (const ::common::double_list&);

    virtual bool
    item_next ();

    virtual double
    item ();

    public:
    struct double_list_simpl_state
    {
      ::common::double_list::const_iterator i_;
      ::common::double_list::const_iterator end_;
    };

    double_list_simpl_state double_list_simpl_state_;
  };

  class unsigned_int_list_simpl: public unsigned_int_list_sskel
  {
    public:
    virtual void
    pre (const ::common::unsigned_int_list&);

    virtual bool
    item_next ();

    virtual unsigned int
    item ();

    public:
    struct unsigned_int_list_simpl_state
    {
      ::common::unsigned_int_list::const_iterator i_;
      ::common::unsigned_int_list::const_iterator end_;
    };

    unsigned_int_list_simpl_state unsigned_int_list_simpl_state_;
  };

  class two_doubles_simpl: public two_doubles_sskel
  {
    public:
    two_doubles_simpl ();

    virtual void
    pre (const ::common::two_doubles&);

    public:
    ::common::double_list_simpl base_impl_;
  };

  class units_double_list_simpl: public units_double_list_sskel
  {
    public:
    units_double_list_simpl ();

    virtual void
    pre (const ::common::units_double_list&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type ();

    virtual bool
    uncertainty_present ();

    virtual double
    uncertainty ();

    virtual bool
    negative_uncertainty_present ();

    virtual double
    negative_uncertainty ();

    virtual bool
    positive_uncertainty_present ();

    virtual double
    positive_uncertainty ();

    virtual bool
    uncertainty_percentage_present ();

    virtual double
    uncertainty_percentage ();

    virtual bool
    negative_uncertainty_percentage_present ();

    virtual double
    negative_uncertainty_percentage ();

    virtual bool
    positive_uncertainty_percentage_present ();

    virtual double
    positive_uncertainty_percentage ();

    virtual bool
    median_present ();

    virtual double
    median ();

    virtual bool
    standard_deviation_present ();

    virtual double
    standard_deviation ();

    virtual bool
    interquartile_range_present ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual bool
    range_present ();

    virtual const ::common::two_doubles&
    range ();

    virtual bool
    min_present ();

    virtual double
    min ();

    virtual bool
    max_present ();

    virtual double
    max ();

    virtual bool
    standard_error_present ();

    virtual double
    standard_error ();

    virtual bool
    standard_error_of_the_mean_present ();

    virtual double
    standard_error_of_the_mean ();

    virtual bool
    number_obs_present ();

    virtual int
    number_obs ();

    virtual bool
    skewnesss_present ();

    virtual double
    skewnesss ();

    virtual bool
    kurtosis_present ();

    virtual double
    kurtosis ();

    public:
    ::common::double_list_simpl base_impl_;

    public:
    struct units_double_list_simpl_state
    {
      const ::common::units_double_list* units_double_list_;
    };

    units_double_list_simpl_state units_double_list_simpl_state_;
  };

  class delimited_list_simpl: public delimited_list_sskel
  {
    public:
    delimited_list_simpl ();

    virtual void
    pre (const ::common::delimited_list&);

    // Attributes.
    //
    virtual bool
    delimiter_present ();

    virtual ::std::string
    delimiter ();

    public:
    ::xml_schema::string_simpl base_impl_;

    public:
    struct delimited_list_simpl_state
    {
      const ::common::delimited_list* delimited_list_;
    };

    delimited_list_simpl_state delimited_list_simpl_state_;
  };

  class units_delimited_list_simpl: public units_delimited_list_sskel
  {
    public:
    units_delimited_list_simpl ();

    virtual void
    pre (const ::common::units_delimited_list&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type ();

    virtual bool
    uncertainty_present ();

    virtual double
    uncertainty ();

    virtual bool
    negative_uncertainty_present ();

    virtual double
    negative_uncertainty ();

    virtual bool
    positive_uncertainty_present ();

    virtual double
    positive_uncertainty ();

    virtual bool
    uncertainty_percentage_present ();

    virtual double
    uncertainty_percentage ();

    virtual bool
    negative_uncertainty_percentage_present ();

    virtual double
    negative_uncertainty_percentage ();

    virtual bool
    positive_uncertainty_percentage_present ();

    virtual double
    positive_uncertainty_percentage ();

    virtual bool
    median_present ();

    virtual double
    median ();

    virtual bool
    standard_deviation_present ();

    virtual double
    standard_deviation ();

    virtual bool
    interquartile_range_present ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual bool
    range_present ();

    virtual const ::common::two_doubles&
    range ();

    virtual bool
    min_present ();

    virtual double
    min ();

    virtual bool
    max_present ();

    virtual double
    max ();

    virtual bool
    standard_error_present ();

    virtual double
    standard_error ();

    virtual bool
    standard_error_of_the_mean_present ();

    virtual double
    standard_error_of_the_mean ();

    virtual bool
    number_obs_present ();

    virtual int
    number_obs ();

    virtual bool
    skewnesss_present ();

    virtual double
    skewnesss ();

    virtual bool
    kurtosis_present ();

    virtual double
    kurtosis ();

    public:
    ::common::delimited_list_simpl base_impl_;

    public:
    struct units_delimited_list_simpl_state
    {
      const ::common::units_delimited_list* units_delimited_list_;
    };

    units_delimited_list_simpl_state units_delimited_list_simpl_state_;
  };

  class units_decimal_simpl: public units_decimal_sskel
  {
    public:
    units_decimal_simpl ();

    virtual void
    pre (const ::common::units_decimal&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type ();

    virtual bool
    uncertainty_present ();

    virtual double
    uncertainty ();

    virtual bool
    negative_uncertainty_present ();

    virtual double
    negative_uncertainty ();

    virtual bool
    positive_uncertainty_present ();

    virtual double
    positive_uncertainty ();

    virtual bool
    uncertainty_percentage_present ();

    virtual double
    uncertainty_percentage ();

    virtual bool
    negative_uncertainty_percentage_present ();

    virtual double
    negative_uncertainty_percentage ();

    virtual bool
    positive_uncertainty_percentage_present ();

    virtual double
    positive_uncertainty_percentage ();

    virtual bool
    median_present ();

    virtual double
    median ();

    virtual bool
    standard_deviation_present ();

    virtual double
    standard_deviation ();

    virtual bool
    interquartile_range_present ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual bool
    range_present ();

    virtual const ::common::two_doubles&
    range ();

    virtual bool
    min_present ();

    virtual double
    min ();

    virtual bool
    max_present ();

    virtual double
    max ();

    virtual bool
    standard_error_present ();

    virtual double
    standard_error ();

    virtual bool
    standard_error_of_the_mean_present ();

    virtual double
    standard_error_of_the_mean ();

    virtual bool
    number_obs_present ();

    virtual int
    number_obs ();

    virtual bool
    skewnesss_present ();

    virtual double
    skewnesss ();

    virtual bool
    kurtosis_present ();

    virtual double
    kurtosis ();

    public:
    ::xml_schema::double_simpl base_impl_;

    public:
    struct units_decimal_simpl_state
    {
      const ::common::units_decimal* units_decimal_;
    };

    units_decimal_simpl_state units_decimal_simpl_state_;
  };

  class units_decimal_nonnegative_simpl: public units_decimal_nonnegative_sskel
  {
    public:
    units_decimal_nonnegative_simpl ();

    virtual void
    pre (const ::common::units_decimal_nonnegative&);

    public:
    ::common::units_decimal_simpl base_impl_;
  };

  class units_unsignedShort_simpl: public units_unsignedShort_sskel
  {
    public:
    units_unsignedShort_simpl ();

    virtual void
    pre (const ::common::units_unsignedShort&);

    // Attributes.
    //
    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type ();

    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    public:
    ::xml_schema::unsigned_short_simpl base_impl_;

    public:
    struct units_unsignedShort_simpl_state
    {
      const ::common::units_unsignedShort* units_unsignedShort_;
    };

    units_unsignedShort_simpl_state units_unsignedShort_simpl_state_;
  };

  class units_boolean_simpl: public units_boolean_sskel
  {
    public:
    units_boolean_simpl ();

    virtual void
    pre (const ::common::units_boolean&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    public:
    ::xml_schema::boolean_simpl base_impl_;

    public:
    struct units_boolean_simpl_state
    {
      const ::common::units_boolean* units_boolean_;
    };

    units_boolean_simpl_state units_boolean_simpl_state_;
  };

  class fraction_simpl: public fraction_sskel
  {
    public:
    fraction_simpl ();

    virtual void
    pre (const ::common::fraction&);

    public:
    ::xml_schema::double_simpl base_impl_;
  };

  class units_fraction_simpl: public units_fraction_sskel
  {
    public:
    units_fraction_simpl ();

    virtual void
    pre (const ::common::units_fraction&);

    public:
    ::common::units_decimal_simpl base_impl_;
  };

  class units_string_simpl: public units_string_sskel
  {
    public:
    units_string_simpl ();

    virtual void
    pre (const ::common::units_string&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type ();

    virtual bool
    uncertainty_present ();

    virtual double
    uncertainty ();

    virtual bool
    negative_uncertainty_present ();

    virtual double
    negative_uncertainty ();

    virtual bool
    positive_uncertainty_present ();

    virtual double
    positive_uncertainty ();

    virtual bool
    uncertainty_percentage_present ();

    virtual double
    uncertainty_percentage ();

    virtual bool
    negative_uncertainty_percentage_present ();

    virtual double
    negative_uncertainty_percentage ();

    virtual bool
    positive_uncertainty_percentage_present ();

    virtual double
    positive_uncertainty_percentage ();

    virtual bool
    median_present ();

    virtual double
    median ();

    virtual bool
    standard_deviation_present ();

    virtual double
    standard_deviation ();

    virtual bool
    interquartile_range_present ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual bool
    range_present ();

    virtual const ::common::two_doubles&
    range ();

    virtual bool
    min_present ();

    virtual double
    min ();

    virtual bool
    max_present ();

    virtual double
    max ();

    virtual bool
    standard_error_present ();

    virtual double
    standard_error ();

    virtual bool
    standard_error_of_the_mean_present ();

    virtual double
    standard_error_of_the_mean ();

    virtual bool
    number_obs_present ();

    virtual int
    number_obs ();

    virtual bool
    skewnesss_present ();

    virtual double
    skewnesss ();

    virtual bool
    kurtosis_present ();

    virtual double
    kurtosis ();

    public:
    ::xml_schema::string_simpl base_impl_;

    public:
    struct units_string_simpl_state
    {
      const ::common::units_string* units_string_;
    };

    units_string_simpl_state units_string_simpl_state_;
  };

  class data_storage_formats_simpl: public data_storage_formats_sskel
  {
    public:
    data_storage_formats_simpl ();

    virtual void
    pre (const ::common::data_storage_formats&);

    virtual void
    _serialize_content ();

    public:
    const ::common::data_storage_formats* data_storage_formats_simpl_state_;
  };

  class threshold_type_simpl: public threshold_type_sskel
  {
    public:
    threshold_type_simpl ();

    virtual void
    pre (const ::common::threshold_type&);

    virtual void
    _serialize_content ();

    public:
    const ::common::threshold_type* threshold_type_simpl_state_;
  };

  class transition_threshold_simpl: public transition_threshold_sskel
  {
    public:
    transition_threshold_simpl ();

    virtual void
    pre (const ::common::transition_threshold&);

    // Attributes.
    //
    virtual ::std::string
    quantity ();

    virtual const ::common::threshold_type&
    type ();

    virtual bool
    variable_ID_present ();

    virtual unsigned long long
    variable_ID ();

    public:
    ::common::units_decimal_simpl base_impl_;

    public:
    struct transition_threshold_simpl_state
    {
      const ::common::transition_threshold* transition_threshold_;
    };

    transition_threshold_simpl_state transition_threshold_simpl_state_;
  };
}

#ifdef COMMON_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // COMMON_SIMPL_HPP
