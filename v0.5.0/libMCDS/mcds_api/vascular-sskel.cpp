// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "vascular-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

namespace vascular
{
  // vascular_node_sskel
  //

  bool vascular_node_sskel::
  boundary_node_present ()
  {
    return this->vascular_node_impl_ ? this->vascular_node_impl_->boundary_node_present () : false;
  }

  void vascular_node_sskel::
  _reset ()
  {
    typedef ::mesh::node_sskel base;
    base::_reset ();

    if (this->boundary_node_serializer_)
      this->boundary_node_serializer_->_reset ();
  }

  const char* vascular_node_sskel::
  _static_type ()
  {
    return "vascular_node vascular";
  }

  const char* vascular_node_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void vascular_node_sskel::
  pre (const ::mesh::node& x)
  {
    assert (this->node_impl_);
    this->node_impl_->pre (x);
  }

  unsigned int vascular_node_sskel::
  ID ()
  {
    assert (this->node_impl_);
    return this->node_impl_->ID ();
  }

  const ::common::units_double_list& vascular_node_sskel::
  position ()
  {
    assert (this->node_impl_);
    return this->node_impl_->position ();
  }

  const ::common::custom& vascular_node_sskel::
  custom ()
  {
    assert (this->node_impl_);
    return this->node_impl_->custom ();
  }

  void vascular_node_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::mesh::node_sskel base;
    base::_serialize_attributes ();

    // boundary_node
    //
    if (this->boundary_node_present ())
    {
      bool r = this->boundary_node ();

      if (this->boundary_node_serializer_)
      {
        this->boundary_node_serializer_->pre (r);
        this->_start_attribute ("boundary_node");
        this->boundary_node_serializer_->_pre_impl (ctx);
        this->boundary_node_serializer_->_serialize_content ();
        this->boundary_node_serializer_->_post_impl ();
        this->_end_attribute ();
        this->boundary_node_serializer_->post ();
      }
    }
  }

  // list_of_vascular_nodes_sskel
  //

  bool list_of_vascular_nodes_sskel::
  custom_present ()
  {
    return this->list_of_vascular_nodes_impl_ ? this->list_of_vascular_nodes_impl_->custom_present () : false;
  }

  void list_of_vascular_nodes_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->vascular_node_serializer_)
      this->vascular_node_serializer_->_reset ();

    if (this->vascular_node_serializer_map_)
      this->vascular_node_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_vascular_nodes_sskel::
  _static_type ()
  {
    return "list_of_vascular_nodes vascular";
  }

  const char* list_of_vascular_nodes_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void list_of_vascular_nodes_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // vascular_node
    //
    while (this->vascular_node_next ())
    {
      ctx.type_id (0);
      const ::vascular::vascular_node& r = this->vascular_node ();

      const void* t = ctx.type_id ();
      ::vascular::vascular_node_sskel* s = 0;

      if (t == 0 && this->vascular_node_serializer_ != 0)
        s = this->vascular_node_serializer_;
      else if (this->vascular_node_serializer_map_ != 0)
        s = static_cast< ::vascular::vascular_node_sskel* > (
          this->vascular_node_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::vascular_node_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("vascular_node");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // boundary_node_sskel
  //

  bool boundary_node_sskel::
  node_ID_present ()
  {
    return this->boundary_node_impl_ ? this->boundary_node_impl_->node_ID_present () : false;
  }

  bool boundary_node_sskel::
  fluid_flow_velocity_present ()
  {
    return this->boundary_node_impl_ ? this->boundary_node_impl_->fluid_flow_velocity_present () : false;
  }

  bool boundary_node_sskel::
  variables_present ()
  {
    return this->boundary_node_impl_ ? this->boundary_node_impl_->variables_present () : false;
  }

  bool boundary_node_sskel::
  boundary_conditions_present ()
  {
    return this->boundary_node_impl_ ? this->boundary_node_impl_->boundary_conditions_present () : false;
  }

  bool boundary_node_sskel::
  custom_present ()
  {
    return this->boundary_node_impl_ ? this->boundary_node_impl_->custom_present () : false;
  }

  void boundary_node_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->node_ID_serializer_)
      this->node_ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->fluid_flow_velocity_serializer_)
      this->fluid_flow_velocity_serializer_->_reset ();

    if (this->fluid_flow_velocity_serializer_map_)
      this->fluid_flow_velocity_serializer_map_->reset ();

    if (this->variables_serializer_)
      this->variables_serializer_->_reset ();

    if (this->variables_serializer_map_)
      this->variables_serializer_map_->reset ();

    if (this->boundary_conditions_serializer_)
      this->boundary_conditions_serializer_->_reset ();

    if (this->boundary_conditions_serializer_map_)
      this->boundary_conditions_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* boundary_node_sskel::
  _static_type ()
  {
    return "boundary_node vascular";
  }

  const char* boundary_node_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void boundary_node_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // node_ID
    //
    if (this->node_ID_present ())
    {
      unsigned int r = this->node_ID ();

      if (this->node_ID_serializer_)
      {
        this->node_ID_serializer_->pre (r);
        this->_start_attribute ("node_ID");
        this->node_ID_serializer_->_pre_impl (ctx);
        this->node_ID_serializer_->_serialize_content ();
        this->node_ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->node_ID_serializer_->post ();
      }
    }
  }

  void boundary_node_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // fluid_flow_velocity
    //
    if (this->fluid_flow_velocity_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->fluid_flow_velocity ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->fluid_flow_velocity_serializer_ != 0)
        s = this->fluid_flow_velocity_serializer_;
      else if (this->fluid_flow_velocity_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->fluid_flow_velocity_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("fluid_flow_velocity");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // variables
    //
    if (this->variables_present ())
    {
      ctx.type_id (0);
      const ::variables::list_of_variables& r = this->variables ();

      const void* t = ctx.type_id ();
      ::variables::list_of_variables_sskel* s = 0;

      if (t == 0 && this->variables_serializer_ != 0)
        s = this->variables_serializer_;
      else if (this->variables_serializer_map_ != 0)
        s = static_cast< ::variables::list_of_variables_sskel* > (
          this->variables_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::variables::list_of_variables_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("variables");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // boundary_conditions
    //
    if (this->boundary_conditions_present ())
    {
      ctx.type_id (0);
      const ::vascular::boundary_conditions& r = this->boundary_conditions ();

      const void* t = ctx.type_id ();
      ::vascular::boundary_conditions_sskel* s = 0;

      if (t == 0 && this->boundary_conditions_serializer_ != 0)
        s = this->boundary_conditions_serializer_;
      else if (this->boundary_conditions_serializer_map_ != 0)
        s = static_cast< ::vascular::boundary_conditions_sskel* > (
          this->boundary_conditions_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::boundary_conditions_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("boundary_conditions");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // list_of_boundary_nodes_sskel
  //

  bool list_of_boundary_nodes_sskel::
  custom_present ()
  {
    return this->list_of_boundary_nodes_impl_ ? this->list_of_boundary_nodes_impl_->custom_present () : false;
  }

  void list_of_boundary_nodes_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->boundary_node_serializer_)
      this->boundary_node_serializer_->_reset ();

    if (this->boundary_node_serializer_map_)
      this->boundary_node_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_boundary_nodes_sskel::
  _static_type ()
  {
    return "list_of_boundary_nodes vascular";
  }

  const char* list_of_boundary_nodes_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void list_of_boundary_nodes_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // boundary_node
    //
    while (this->boundary_node_next ())
    {
      ctx.type_id (0);
      const ::vascular::boundary_node& r = this->boundary_node ();

      const void* t = ctx.type_id ();
      ::vascular::boundary_node_sskel* s = 0;

      if (t == 0 && this->boundary_node_serializer_ != 0)
        s = this->boundary_node_serializer_;
      else if (this->boundary_node_serializer_map_ != 0)
        s = static_cast< ::vascular::boundary_node_sskel* > (
          this->boundary_node_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::boundary_node_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("boundary_node");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // boundary_conditions_sskel
  //

  bool boundary_conditions_sskel::
  ID_present ()
  {
    return this->boundary_conditions_impl_ ? this->boundary_conditions_impl_->ID_present () : false;
  }

  bool boundary_conditions_sskel::
  custom_present ()
  {
    return this->boundary_conditions_impl_ ? this->boundary_conditions_impl_->custom_present () : false;
  }

  void boundary_conditions_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->boundary_condition_serializer_)
      this->boundary_condition_serializer_->_reset ();

    if (this->boundary_condition_serializer_map_)
      this->boundary_condition_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* boundary_conditions_sskel::
  _static_type ()
  {
    return "boundary_conditions vascular";
  }

  const char* boundary_conditions_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void boundary_conditions_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }
  }

  void boundary_conditions_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // boundary_condition
    //
    while (this->boundary_condition_next ())
    {
      ctx.type_id (0);
      const ::vascular::boundary_condition& r = this->boundary_condition ();

      const void* t = ctx.type_id ();
      ::vascular::boundary_condition_sskel* s = 0;

      if (t == 0 && this->boundary_condition_serializer_ != 0)
        s = this->boundary_condition_serializer_;
      else if (this->boundary_condition_serializer_map_ != 0)
        s = static_cast< ::vascular::boundary_condition_sskel* > (
          this->boundary_condition_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::boundary_condition_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("boundary_condition");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // boundary_type_sskel
  //

  const char* boundary_type_sskel::
  _static_type ()
  {
    return "boundary_type vascular";
  }

  const char* boundary_type_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void boundary_type_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // boundary_condition_sskel
  //

  bool boundary_condition_sskel::
  ID_present ()
  {
    return this->boundary_condition_impl_ ? this->boundary_condition_impl_->ID_present () : false;
  }

  bool boundary_condition_sskel::
  value_present ()
  {
    return this->boundary_condition_impl_ ? this->boundary_condition_impl_->value_present () : false;
  }

  bool boundary_condition_sskel::
  direction_present ()
  {
    return this->boundary_condition_impl_ ? this->boundary_condition_impl_->direction_present () : false;
  }

  bool boundary_condition_sskel::
  custom_present ()
  {
    return this->boundary_condition_impl_ ? this->boundary_condition_impl_->custom_present () : false;
  }

  void boundary_condition_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    if (this->variable_ID_serializer_)
      this->variable_ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->boundary_type_serializer_)
      this->boundary_type_serializer_->_reset ();

    if (this->boundary_type_serializer_map_)
      this->boundary_type_serializer_map_->reset ();

    if (this->value_serializer_)
      this->value_serializer_->_reset ();

    if (this->value_serializer_map_)
      this->value_serializer_map_->reset ();

    if (this->direction_serializer_)
      this->direction_serializer_->_reset ();

    if (this->direction_serializer_map_)
      this->direction_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* boundary_condition_sskel::
  _static_type ()
  {
    return "boundary_condition vascular";
  }

  const char* boundary_condition_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void boundary_condition_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    // variable_ID
    //
    {
      unsigned int r = this->variable_ID ();

      if (this->variable_ID_serializer_)
      {
        this->variable_ID_serializer_->pre (r);
        this->_start_attribute ("variable_ID");
        this->variable_ID_serializer_->_pre_impl (ctx);
        this->variable_ID_serializer_->_serialize_content ();
        this->variable_ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->variable_ID_serializer_->post ();
      }
    }
  }

  void boundary_condition_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // boundary_type
    //
    {
      ctx.type_id (0);
      const ::vascular::boundary_type& r = this->boundary_type ();

      const void* t = ctx.type_id ();
      ::vascular::boundary_type_sskel* s = 0;

      if (t == 0 && this->boundary_type_serializer_ != 0)
        s = this->boundary_type_serializer_;
      else if (this->boundary_type_serializer_map_ != 0)
        s = static_cast< ::vascular::boundary_type_sskel* > (
          this->boundary_type_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::boundary_type_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("boundary_type");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // value
    //
    if (this->value_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->value ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->value_serializer_ != 0)
        s = this->value_serializer_;
      else if (this->value_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->value_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("value");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // direction
    //
    if (this->direction_present ())
    {
      ctx.type_id (0);
      const ::std::string& r = this->direction ();

      const void* t = ctx.type_id ();
      ::xml_schema::string_sskel* s = 0;

      if (t == 0 && this->direction_serializer_ != 0)
        s = this->direction_serializer_;
      else if (this->direction_serializer_map_ != 0)
        s = static_cast< ::xml_schema::string_sskel* > (
          this->direction_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::xml_schema::string_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("direction");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // vascular_segments_sskel
  //

  bool vascular_segments_sskel::
  custom_present ()
  {
    return this->vascular_segments_impl_ ? this->vascular_segments_impl_->custom_present () : false;
  }

  void vascular_segments_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->vascular_segment_serializer_)
      this->vascular_segment_serializer_->_reset ();

    if (this->vascular_segment_serializer_map_)
      this->vascular_segment_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* vascular_segments_sskel::
  _static_type ()
  {
    return "vascular_segments vascular";
  }

  const char* vascular_segments_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void vascular_segments_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // vascular_segment
    //
    while (this->vascular_segment_next ())
    {
      ctx.type_id (0);
      const ::vascular::vascular_segment& r = this->vascular_segment ();

      const void* t = ctx.type_id ();
      ::vascular::vascular_segment_sskel* s = 0;

      if (t == 0 && this->vascular_segment_serializer_ != 0)
        s = this->vascular_segment_serializer_;
      else if (this->vascular_segment_serializer_map_ != 0)
        s = static_cast< ::vascular::vascular_segment_sskel* > (
          this->vascular_segment_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::vascular_segment_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("vascular_segment");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // vascular_segment_sskel
  //

  bool vascular_segment_sskel::
  surface_present ()
  {
    return this->vascular_segment_impl_ ? this->vascular_segment_impl_->surface_present () : false;
  }

  bool vascular_segment_sskel::
  interior_present ()
  {
    return this->vascular_segment_impl_ ? this->vascular_segment_impl_->interior_present () : false;
  }

  bool vascular_segment_sskel::
  custom_present ()
  {
    return this->vascular_segment_impl_ ? this->vascular_segment_impl_->custom_present () : false;
  }

  void vascular_segment_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->endpoint_1_serializer_)
      this->endpoint_1_serializer_->_reset ();

    if (this->endpoint_1_serializer_map_)
      this->endpoint_1_serializer_map_->reset ();

    if (this->endpoint_2_serializer_)
      this->endpoint_2_serializer_->_reset ();

    if (this->endpoint_2_serializer_map_)
      this->endpoint_2_serializer_map_->reset ();

    if (this->surface_serializer_)
      this->surface_serializer_->_reset ();

    if (this->surface_serializer_map_)
      this->surface_serializer_map_->reset ();

    if (this->interior_serializer_)
      this->interior_serializer_->_reset ();

    if (this->interior_serializer_map_)
      this->interior_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* vascular_segment_sskel::
  _static_type ()
  {
    return "vascular_segment vascular";
  }

  const char* vascular_segment_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void vascular_segment_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // endpoint_1
    //
    {
      ctx.type_id (0);
      const ::vascular::endpoint& r = this->endpoint_1 ();

      const void* t = ctx.type_id ();
      ::vascular::endpoint_sskel* s = 0;

      if (t == 0 && this->endpoint_1_serializer_ != 0)
        s = this->endpoint_1_serializer_;
      else if (this->endpoint_1_serializer_map_ != 0)
        s = static_cast< ::vascular::endpoint_sskel* > (
          this->endpoint_1_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::endpoint_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("endpoint_1");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // endpoint_2
    //
    {
      ctx.type_id (0);
      const ::vascular::endpoint& r = this->endpoint_2 ();

      const void* t = ctx.type_id ();
      ::vascular::endpoint_sskel* s = 0;

      if (t == 0 && this->endpoint_2_serializer_ != 0)
        s = this->endpoint_2_serializer_;
      else if (this->endpoint_2_serializer_map_ != 0)
        s = static_cast< ::vascular::endpoint_sskel* > (
          this->endpoint_2_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::endpoint_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("endpoint_2");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // surface
    //
    if (this->surface_present ())
    {
      ctx.type_id (0);
      const ::vascular::surface_properties& r = this->surface ();

      const void* t = ctx.type_id ();
      ::vascular::surface_properties_sskel* s = 0;

      if (t == 0 && this->surface_serializer_ != 0)
        s = this->surface_serializer_;
      else if (this->surface_serializer_map_ != 0)
        s = static_cast< ::vascular::surface_properties_sskel* > (
          this->surface_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::surface_properties_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("surface");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // interior
    //
    if (this->interior_present ())
    {
      ctx.type_id (0);
      const ::vascular::volume_properties& r = this->interior ();

      const void* t = ctx.type_id ();
      ::vascular::volume_properties_sskel* s = 0;

      if (t == 0 && this->interior_serializer_ != 0)
        s = this->interior_serializer_;
      else if (this->interior_serializer_map_ != 0)
        s = static_cast< ::vascular::volume_properties_sskel* > (
          this->interior_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::volume_properties_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("interior");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // endpoint_sskel
  //

  bool endpoint_sskel::
  node_ID_present ()
  {
    return this->endpoint_impl_ ? this->endpoint_impl_->node_ID_present () : false;
  }

  bool endpoint_sskel::
  lengths_present ()
  {
    return this->endpoint_impl_ ? this->endpoint_impl_->lengths_present () : false;
  }

  bool endpoint_sskel::
  areas_present ()
  {
    return this->endpoint_impl_ ? this->endpoint_impl_->areas_present () : false;
  }

  bool endpoint_sskel::
  fluid_flow_velocity_present ()
  {
    return this->endpoint_impl_ ? this->endpoint_impl_->fluid_flow_velocity_present () : false;
  }

  bool endpoint_sskel::
  custom_present ()
  {
    return this->endpoint_impl_ ? this->endpoint_impl_->custom_present () : false;
  }

  void endpoint_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->node_ID_serializer_)
      this->node_ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->lengths_serializer_)
      this->lengths_serializer_->_reset ();

    if (this->lengths_serializer_map_)
      this->lengths_serializer_map_->reset ();

    if (this->areas_serializer_)
      this->areas_serializer_->_reset ();

    if (this->areas_serializer_map_)
      this->areas_serializer_map_->reset ();

    if (this->fluid_flow_velocity_serializer_)
      this->fluid_flow_velocity_serializer_->_reset ();

    if (this->fluid_flow_velocity_serializer_map_)
      this->fluid_flow_velocity_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* endpoint_sskel::
  _static_type ()
  {
    return "endpoint vascular";
  }

  const char* endpoint_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void endpoint_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // node_ID
    //
    if (this->node_ID_present ())
    {
      unsigned int r = this->node_ID ();

      if (this->node_ID_serializer_)
      {
        this->node_ID_serializer_->pre (r);
        this->_start_attribute ("node_ID");
        this->node_ID_serializer_->_pre_impl (ctx);
        this->node_ID_serializer_->_serialize_content ();
        this->node_ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->node_ID_serializer_->post ();
      }
    }
  }

  void endpoint_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // lengths
    //
    if (this->lengths_present ())
    {
      ctx.type_id (0);
      const ::phenotype_common::lengths& r = this->lengths ();

      const void* t = ctx.type_id ();
      ::phenotype_common::lengths_sskel* s = 0;

      if (t == 0 && this->lengths_serializer_ != 0)
        s = this->lengths_serializer_;
      else if (this->lengths_serializer_map_ != 0)
        s = static_cast< ::phenotype_common::lengths_sskel* > (
          this->lengths_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_common::lengths_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("lengths");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // areas
    //
    if (this->areas_present ())
    {
      ctx.type_id (0);
      const ::phenotype_common::areas_2D& r = this->areas ();

      const void* t = ctx.type_id ();
      ::phenotype_common::areas_2D_sskel* s = 0;

      if (t == 0 && this->areas_serializer_ != 0)
        s = this->areas_serializer_;
      else if (this->areas_serializer_map_ != 0)
        s = static_cast< ::phenotype_common::areas_2D_sskel* > (
          this->areas_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_common::areas_2D_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("areas");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // fluid_flow_velocity
    //
    if (this->fluid_flow_velocity_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->fluid_flow_velocity ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->fluid_flow_velocity_serializer_ != 0)
        s = this->fluid_flow_velocity_serializer_;
      else if (this->fluid_flow_velocity_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->fluid_flow_velocity_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("fluid_flow_velocity");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // surface_properties_sskel
  //

  bool surface_properties_sskel::
  areas_present ()
  {
    return this->surface_properties_impl_ ? this->surface_properties_impl_->areas_present () : false;
  }

  bool surface_properties_sskel::
  fluid_flow_velocity_present ()
  {
    return this->surface_properties_impl_ ? this->surface_properties_impl_->fluid_flow_velocity_present () : false;
  }

  bool surface_properties_sskel::
  mechanics_present ()
  {
    return this->surface_properties_impl_ ? this->surface_properties_impl_->mechanics_present () : false;
  }

  bool surface_properties_sskel::
  permeability_present ()
  {
    return this->surface_properties_impl_ ? this->surface_properties_impl_->permeability_present () : false;
  }

  bool surface_properties_sskel::
  surface_proteins_present ()
  {
    return this->surface_properties_impl_ ? this->surface_properties_impl_->surface_proteins_present () : false;
  }

  bool surface_properties_sskel::
  custom_present ()
  {
    return this->surface_properties_impl_ ? this->surface_properties_impl_->custom_present () : false;
  }

  void surface_properties_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->areas_serializer_)
      this->areas_serializer_->_reset ();

    if (this->areas_serializer_map_)
      this->areas_serializer_map_->reset ();

    if (this->fluid_flow_velocity_serializer_)
      this->fluid_flow_velocity_serializer_->_reset ();

    if (this->fluid_flow_velocity_serializer_map_)
      this->fluid_flow_velocity_serializer_map_->reset ();

    if (this->mechanics_serializer_)
      this->mechanics_serializer_->_reset ();

    if (this->mechanics_serializer_map_)
      this->mechanics_serializer_map_->reset ();

    if (this->permeability_serializer_)
      this->permeability_serializer_->_reset ();

    if (this->permeability_serializer_map_)
      this->permeability_serializer_map_->reset ();

    if (this->surface_proteins_serializer_)
      this->surface_proteins_serializer_->_reset ();

    if (this->surface_proteins_serializer_map_)
      this->surface_proteins_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* surface_properties_sskel::
  _static_type ()
  {
    return "surface_properties vascular";
  }

  const char* surface_properties_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void surface_properties_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // areas
    //
    if (this->areas_present ())
    {
      ctx.type_id (0);
      const ::phenotype_common::areas_3D& r = this->areas ();

      const void* t = ctx.type_id ();
      ::phenotype_common::areas_3D_sskel* s = 0;

      if (t == 0 && this->areas_serializer_ != 0)
        s = this->areas_serializer_;
      else if (this->areas_serializer_map_ != 0)
        s = static_cast< ::phenotype_common::areas_3D_sskel* > (
          this->areas_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_common::areas_3D_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("areas");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // fluid_flow_velocity
    //
    if (this->fluid_flow_velocity_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->fluid_flow_velocity ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->fluid_flow_velocity_serializer_ != 0)
        s = this->fluid_flow_velocity_serializer_;
      else if (this->fluid_flow_velocity_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->fluid_flow_velocity_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("fluid_flow_velocity");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // mechanics
    //
    if (this->mechanics_present ())
    {
      ctx.type_id (0);
      const ::phenotype_common::mechanics& r = this->mechanics ();

      const void* t = ctx.type_id ();
      ::phenotype_common::mechanics_sskel* s = 0;

      if (t == 0 && this->mechanics_serializer_ != 0)
        s = this->mechanics_serializer_;
      else if (this->mechanics_serializer_map_ != 0)
        s = static_cast< ::phenotype_common::mechanics_sskel* > (
          this->mechanics_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_common::mechanics_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("mechanics");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // permeability
    //
    if (this->permeability_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->permeability ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->permeability_serializer_ != 0)
        s = this->permeability_serializer_;
      else if (this->permeability_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->permeability_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("permeability");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // surface_proteins
    //
    if (this->surface_proteins_present ())
    {
      ctx.type_id (0);
      const ::variables::list_of_variables& r = this->surface_proteins ();

      const void* t = ctx.type_id ();
      ::variables::list_of_variables_sskel* s = 0;

      if (t == 0 && this->surface_proteins_serializer_ != 0)
        s = this->surface_proteins_serializer_;
      else if (this->surface_proteins_serializer_map_ != 0)
        s = static_cast< ::variables::list_of_variables_sskel* > (
          this->surface_proteins_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::variables::list_of_variables_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("surface_proteins");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // volume_properties_sskel
  //

  bool volume_properties_sskel::
  fluid_flow_velocity_present ()
  {
    return this->volume_properties_impl_ ? this->volume_properties_impl_->fluid_flow_velocity_present () : false;
  }

  bool volume_properties_sskel::
  variables_present ()
  {
    return this->volume_properties_impl_ ? this->volume_properties_impl_->variables_present () : false;
  }

  bool volume_properties_sskel::
  volumes_present ()
  {
    return this->volume_properties_impl_ ? this->volume_properties_impl_->volumes_present () : false;
  }

  bool volume_properties_sskel::
  custom_present ()
  {
    return this->volume_properties_impl_ ? this->volume_properties_impl_->custom_present () : false;
  }

  void volume_properties_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->fluid_flow_velocity_serializer_)
      this->fluid_flow_velocity_serializer_->_reset ();

    if (this->fluid_flow_velocity_serializer_map_)
      this->fluid_flow_velocity_serializer_map_->reset ();

    if (this->variables_serializer_)
      this->variables_serializer_->_reset ();

    if (this->variables_serializer_map_)
      this->variables_serializer_map_->reset ();

    if (this->volumes_serializer_)
      this->volumes_serializer_->_reset ();

    if (this->volumes_serializer_map_)
      this->volumes_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* volume_properties_sskel::
  _static_type ()
  {
    return "volume_properties vascular";
  }

  const char* volume_properties_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void volume_properties_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // fluid_flow_velocity
    //
    if (this->fluid_flow_velocity_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->fluid_flow_velocity ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->fluid_flow_velocity_serializer_ != 0)
        s = this->fluid_flow_velocity_serializer_;
      else if (this->fluid_flow_velocity_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->fluid_flow_velocity_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("fluid_flow_velocity");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // variables
    //
    if (this->variables_present ())
    {
      ctx.type_id (0);
      const ::variables::list_of_variables& r = this->variables ();

      const void* t = ctx.type_id ();
      ::variables::list_of_variables_sskel* s = 0;

      if (t == 0 && this->variables_serializer_ != 0)
        s = this->variables_serializer_;
      else if (this->variables_serializer_map_ != 0)
        s = static_cast< ::variables::list_of_variables_sskel* > (
          this->variables_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::variables::list_of_variables_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("variables");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // volumes
    //
    if (this->volumes_present ())
    {
      ctx.type_id (0);
      const ::phenotype_common::volumes& r = this->volumes ();

      const void* t = ctx.type_id ();
      ::phenotype_common::volumes_sskel* s = 0;

      if (t == 0 && this->volumes_serializer_ != 0)
        s = this->volumes_serializer_;
      else if (this->volumes_serializer_map_ != 0)
        s = static_cast< ::phenotype_common::volumes_sskel* > (
          this->volumes_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_common::volumes_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("volumes");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // vascular_network_sskel
  //

  bool vascular_network_sskel::
  ID_present ()
  {
    return this->vascular_network_impl_ ? this->vascular_network_impl_->ID_present () : false;
  }

  bool vascular_network_sskel::
  keywords_present ()
  {
    return this->vascular_network_impl_ ? this->vascular_network_impl_->keywords_present () : false;
  }

  bool vascular_network_sskel::
  name_present ()
  {
    return this->vascular_network_impl_ ? this->vascular_network_impl_->name_present () : false;
  }

  bool vascular_network_sskel::
  vascular_nodes_present ()
  {
    return this->vascular_network_impl_ ? this->vascular_network_impl_->vascular_nodes_present () : false;
  }

  bool vascular_network_sskel::
  boundary_nodes_present ()
  {
    return this->vascular_network_impl_ ? this->vascular_network_impl_->boundary_nodes_present () : false;
  }

  bool vascular_network_sskel::
  vascular_segments_present ()
  {
    return this->vascular_network_impl_ ? this->vascular_network_impl_->vascular_segments_present () : false;
  }

  bool vascular_network_sskel::
  voxels_present ()
  {
    return this->vascular_network_impl_ ? this->vascular_network_impl_->voxels_present () : false;
  }

  bool vascular_network_sskel::
  custom_present ()
  {
    return this->vascular_network_impl_ ? this->vascular_network_impl_->custom_present () : false;
  }

  void vascular_network_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    if (this->keywords_serializer_)
      this->keywords_serializer_->_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    this->resetting_ = true;

    if (this->vascular_nodes_serializer_)
      this->vascular_nodes_serializer_->_reset ();

    if (this->vascular_nodes_serializer_map_)
      this->vascular_nodes_serializer_map_->reset ();

    if (this->boundary_nodes_serializer_)
      this->boundary_nodes_serializer_->_reset ();

    if (this->boundary_nodes_serializer_map_)
      this->boundary_nodes_serializer_map_->reset ();

    if (this->vascular_segments_serializer_)
      this->vascular_segments_serializer_->_reset ();

    if (this->vascular_segments_serializer_map_)
      this->vascular_segments_serializer_map_->reset ();

    if (this->voxels_serializer_)
      this->voxels_serializer_->_reset ();

    if (this->voxels_serializer_map_)
      this->voxels_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* vascular_network_sskel::
  _static_type ()
  {
    return "vascular_network vascular";
  }

  const char* vascular_network_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void vascular_network_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    // keywords
    //
    if (this->keywords_present ())
    {
      const ::std::string& r = this->keywords ();

      if (this->keywords_serializer_)
      {
        this->keywords_serializer_->pre (r);
        this->_start_attribute ("keywords");
        this->keywords_serializer_->_pre_impl (ctx);
        this->keywords_serializer_->_serialize_content ();
        this->keywords_serializer_->_post_impl ();
        this->_end_attribute ();
        this->keywords_serializer_->post ();
      }
    }

    // name
    //
    if (this->name_present ())
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);
        this->name_serializer_->_serialize_content ();
        this->name_serializer_->_post_impl ();
        this->_end_attribute ();
        this->name_serializer_->post ();
      }
    }
  }

  void vascular_network_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // vascular_nodes
    //
    if (this->vascular_nodes_present ())
    {
      ctx.type_id (0);
      const ::vascular::list_of_vascular_nodes& r = this->vascular_nodes ();

      const void* t = ctx.type_id ();
      ::vascular::list_of_vascular_nodes_sskel* s = 0;

      if (t == 0 && this->vascular_nodes_serializer_ != 0)
        s = this->vascular_nodes_serializer_;
      else if (this->vascular_nodes_serializer_map_ != 0)
        s = static_cast< ::vascular::list_of_vascular_nodes_sskel* > (
          this->vascular_nodes_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::list_of_vascular_nodes_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("vascular_nodes");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // boundary_nodes
    //
    if (this->boundary_nodes_present ())
    {
      ctx.type_id (0);
      const ::vascular::list_of_boundary_nodes& r = this->boundary_nodes ();

      const void* t = ctx.type_id ();
      ::vascular::list_of_boundary_nodes_sskel* s = 0;

      if (t == 0 && this->boundary_nodes_serializer_ != 0)
        s = this->boundary_nodes_serializer_;
      else if (this->boundary_nodes_serializer_map_ != 0)
        s = static_cast< ::vascular::list_of_boundary_nodes_sskel* > (
          this->boundary_nodes_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::list_of_boundary_nodes_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("boundary_nodes");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // vascular_segments
    //
    if (this->vascular_segments_present ())
    {
      ctx.type_id (0);
      const ::vascular::vascular_segments& r = this->vascular_segments ();

      const void* t = ctx.type_id ();
      ::vascular::vascular_segments_sskel* s = 0;

      if (t == 0 && this->vascular_segments_serializer_ != 0)
        s = this->vascular_segments_serializer_;
      else if (this->vascular_segments_serializer_map_ != 0)
        s = static_cast< ::vascular::vascular_segments_sskel* > (
          this->vascular_segments_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::vascular::vascular_segments_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("vascular_segments");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // voxels
    //
    if (this->voxels_present ())
    {
      ctx.type_id (0);
      const ::mesh::int_list_xpath& r = this->voxels ();

      const void* t = ctx.type_id ();
      ::mesh::int_list_xpath_sskel* s = 0;

      if (t == 0 && this->voxels_serializer_ != 0)
        s = this->voxels_serializer_;
      else if (this->voxels_serializer_map_ != 0)
        s = static_cast< ::mesh::int_list_xpath_sskel* > (
          this->voxels_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::mesh::int_list_xpath_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("voxels");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

