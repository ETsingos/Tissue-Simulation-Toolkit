// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VASCULAR_SSKEL_HPP
#define VASCULAR_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_SERIALIZER_VALIDATION
#error the XSD/e runtime uses validation while the generated code does not (reconfigure the runtime or remove --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace vascular
{
  class vascular_node_sskel;
  class list_of_vascular_nodes_sskel;
  class boundary_node_sskel;
  class list_of_boundary_nodes_sskel;
  class boundary_conditions_sskel;
  class boundary_type_sskel;
  class boundary_condition_sskel;
  class vascular_segments_sskel;
  class vascular_segment_sskel;
  class endpoint_sskel;
  class surface_properties_sskel;
  class volume_properties_sskel;
  class vascular_network_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>

#include <xsde/cxx/serializer/non-validating/serializer.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "vascular.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::non_validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::non_validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::non_validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::non_validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::non_validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::non_validating::byte_sskel;
  using ::xsde::cxx::serializer::non_validating::byte_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::non_validating::short_sskel;
  using ::xsde::cxx::serializer::non_validating::short_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::non_validating::int_sskel;
  using ::xsde::cxx::serializer::non_validating::int_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::non_validating::long_sskel;
  using ::xsde::cxx::serializer::non_validating::long_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::non_validating::integer_sskel;
  using ::xsde::cxx::serializer::non_validating::integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::boolean_sskel;
  using ::xsde::cxx::serializer::non_validating::boolean_simpl;

  using ::xsde::cxx::serializer::non_validating::float_sskel;
  using ::xsde::cxx::serializer::non_validating::float_simpl;

  using ::xsde::cxx::serializer::non_validating::double_sskel;
  using ::xsde::cxx::serializer::non_validating::double_simpl;

  using ::xsde::cxx::serializer::non_validating::decimal_sskel;
  using ::xsde::cxx::serializer::non_validating::decimal_simpl;

  using ::xsde::cxx::serializer::non_validating::string_sskel;
  using ::xsde::cxx::serializer::non_validating::string_simpl;

  using ::xsde::cxx::serializer::non_validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::non_validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::non_validating::token_sskel;
  using ::xsde::cxx::serializer::non_validating::token_simpl;

  using ::xsde::cxx::serializer::non_validating::name_sskel;
  using ::xsde::cxx::serializer::non_validating::name_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::non_validating::ncname_sskel;
  using ::xsde::cxx::serializer::non_validating::ncname_simpl;

  using ::xsde::cxx::serializer::non_validating::language_sskel;
  using ::xsde::cxx::serializer::non_validating::language_simpl;

  using ::xsde::cxx::serializer::non_validating::id_sskel;
  using ::xsde::cxx::serializer::non_validating::id_simpl;

  using ::xsde::cxx::serializer::non_validating::idref_sskel;
  using ::xsde::cxx::serializer::non_validating::idref_simpl;

  using ::xsde::cxx::serializer::non_validating::idrefs_sskel;
  using ::xsde::cxx::serializer::non_validating::idrefs_simpl;

  using ::xsde::cxx::serializer::non_validating::uri_sskel;
  using ::xsde::cxx::serializer::non_validating::uri_simpl;

  using ::xsde::cxx::serializer::non_validating::qname_sskel;
  using ::xsde::cxx::serializer::non_validating::qname_simpl;

  using ::xsde::cxx::serializer::non_validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::date_sskel;
  using ::xsde::cxx::serializer::non_validating::date_simpl;

  using ::xsde::cxx::serializer::non_validating::date_time_sskel;
  using ::xsde::cxx::serializer::non_validating::date_time_simpl;

  using ::xsde::cxx::serializer::non_validating::duration_sskel;
  using ::xsde::cxx::serializer::non_validating::duration_simpl;

  using ::xsde::cxx::serializer::non_validating::gday_sskel;
  using ::xsde::cxx::serializer::non_validating::gday_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::non_validating::time_sskel;
  using ::xsde::cxx::serializer::non_validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "common-sskel.hpp"

#include "mesh-sskel.hpp"

#include "variables-sskel.hpp"

#include "phenotype_common-sskel.hpp"

namespace vascular
{
  class vascular_node_sskel: public ::mesh::node_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::vascular_node&) = 0;

    // Attributes.
    //
    virtual bool
    boundary_node_present ();

    virtual bool
    boundary_node () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::common::units_double_list_sskel& /* position */,
                 ::common::custom_sskel& /* custom */,
                 ::xml_schema::boolean_sskel& /* boundary_node */);

    // Individual attribute serializers.
    //
    void
    boundary_node_serializer (::xml_schema::boolean_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    vascular_node_sskel (::mesh::node_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::mesh::node&);

    virtual unsigned int
    ID ();

    virtual const ::common::units_double_list&
    position ();

    virtual const ::common::custom&
    custom ();

    virtual void
    _serialize_attributes ();

    protected:
    vascular_node_sskel* vascular_node_impl_;
    vascular_node_sskel (vascular_node_sskel*, void*);

    protected:
    ::xml_schema::boolean_sskel* boundary_node_serializer_;
  };

  class list_of_vascular_nodes_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::list_of_vascular_nodes&) = 0;

    // Elements.
    //
    virtual bool
    vascular_node_next () = 0;

    virtual const ::vascular::vascular_node&
    vascular_node () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::vascular::vascular_node_sskel& /* vascular_node */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* vascular_node */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    vascular_node_serializer (::vascular::vascular_node_sskel&);

    void
    vascular_node_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    list_of_vascular_nodes_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    list_of_vascular_nodes_sskel* list_of_vascular_nodes_impl_;
    list_of_vascular_nodes_sskel (list_of_vascular_nodes_sskel*, void*);

    protected:
    ::vascular::vascular_node_sskel* vascular_node_serializer_;
    ::xml_schema::serializer_map* vascular_node_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class boundary_node_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::boundary_node&) = 0;

    // Attributes.
    //
    virtual bool
    node_ID_present ();

    virtual unsigned int
    node_ID () = 0;

    // Elements.
    //
    virtual bool
    fluid_flow_velocity_present ();

    virtual const ::common::units_decimal&
    fluid_flow_velocity () = 0;

    virtual bool
    variables_present ();

    virtual const ::variables::list_of_variables&
    variables () = 0;

    virtual bool
    boundary_conditions_present ();

    virtual const ::vascular::boundary_conditions&
    boundary_conditions () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* node_ID */,
                 ::common::units_decimal_sskel& /* fluid_flow_velocity */,
                 ::variables::list_of_variables_sskel& /* variables */,
                 ::vascular::boundary_conditions_sskel& /* boundary_conditions */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* fluid_flow_velocity */,
                     ::xml_schema::serializer_map& /* variables */,
                     ::xml_schema::serializer_map& /* boundary_conditions */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    node_ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    fluid_flow_velocity_serializer (::common::units_decimal_sskel&);

    void
    fluid_flow_velocity_serializer (::xml_schema::serializer_map&);

    void
    variables_serializer (::variables::list_of_variables_sskel&);

    void
    variables_serializer (::xml_schema::serializer_map&);

    void
    boundary_conditions_serializer (::vascular::boundary_conditions_sskel&);

    void
    boundary_conditions_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    boundary_node_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    boundary_node_sskel* boundary_node_impl_;
    boundary_node_sskel (boundary_node_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* node_ID_serializer_;
    ::common::units_decimal_sskel* fluid_flow_velocity_serializer_;
    ::xml_schema::serializer_map* fluid_flow_velocity_serializer_map_;

    ::variables::list_of_variables_sskel* variables_serializer_;
    ::xml_schema::serializer_map* variables_serializer_map_;

    ::vascular::boundary_conditions_sskel* boundary_conditions_serializer_;
    ::xml_schema::serializer_map* boundary_conditions_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class list_of_boundary_nodes_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::list_of_boundary_nodes&) = 0;

    // Elements.
    //
    virtual bool
    boundary_node_next () = 0;

    virtual const ::vascular::boundary_node&
    boundary_node () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::vascular::boundary_node_sskel& /* boundary_node */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* boundary_node */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    boundary_node_serializer (::vascular::boundary_node_sskel&);

    void
    boundary_node_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    list_of_boundary_nodes_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    list_of_boundary_nodes_sskel* list_of_boundary_nodes_impl_;
    list_of_boundary_nodes_sskel (list_of_boundary_nodes_sskel*, void*);

    protected:
    ::vascular::boundary_node_sskel* boundary_node_serializer_;
    ::xml_schema::serializer_map* boundary_node_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class boundary_conditions_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::boundary_conditions&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    // Elements.
    //
    virtual bool
    boundary_condition_next () = 0;

    virtual const ::vascular::boundary_condition&
    boundary_condition () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::vascular::boundary_condition_sskel& /* boundary_condition */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* boundary_condition */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    boundary_condition_serializer (::vascular::boundary_condition_sskel&);

    void
    boundary_condition_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    boundary_conditions_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    boundary_conditions_sskel* boundary_conditions_impl_;
    boundary_conditions_sskel (boundary_conditions_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::vascular::boundary_condition_sskel* boundary_condition_serializer_;
    ::xml_schema::serializer_map* boundary_condition_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class boundary_type_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::boundary_type&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    boundary_type_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    boundary_type_sskel* boundary_type_impl_;
    boundary_type_sskel (boundary_type_sskel*, void*);
  };

  class boundary_condition_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::boundary_condition&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    virtual unsigned int
    variable_ID () = 0;

    // Elements.
    //
    virtual const ::vascular::boundary_type&
    boundary_type () = 0;

    virtual bool
    value_present ();

    virtual const ::common::units_decimal&
    value () = 0;

    virtual bool
    direction_present ();

    virtual ::std::string
    direction () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::xml_schema::unsigned_int_sskel& /* variable_ID */,
                 ::vascular::boundary_type_sskel& /* boundary_type */,
                 ::common::units_decimal_sskel& /* value */,
                 ::xml_schema::string_sskel& /* direction */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* boundary_type */,
                     ::xml_schema::serializer_map& /* value */,
                     ::xml_schema::serializer_map& /* direction */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    void
    variable_ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    boundary_type_serializer (::vascular::boundary_type_sskel&);

    void
    boundary_type_serializer (::xml_schema::serializer_map&);

    void
    value_serializer (::common::units_decimal_sskel&);

    void
    value_serializer (::xml_schema::serializer_map&);

    void
    direction_serializer (::xml_schema::string_sskel&);

    void
    direction_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    boundary_condition_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    boundary_condition_sskel* boundary_condition_impl_;
    boundary_condition_sskel (boundary_condition_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::xml_schema::unsigned_int_sskel* variable_ID_serializer_;
    ::vascular::boundary_type_sskel* boundary_type_serializer_;
    ::xml_schema::serializer_map* boundary_type_serializer_map_;

    ::common::units_decimal_sskel* value_serializer_;
    ::xml_schema::serializer_map* value_serializer_map_;

    ::xml_schema::string_sskel* direction_serializer_;
    ::xml_schema::serializer_map* direction_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class vascular_segments_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::vascular_segments&) = 0;

    // Elements.
    //
    virtual bool
    vascular_segment_next () = 0;

    virtual const ::vascular::vascular_segment&
    vascular_segment () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::vascular::vascular_segment_sskel& /* vascular_segment */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* vascular_segment */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    vascular_segment_serializer (::vascular::vascular_segment_sskel&);

    void
    vascular_segment_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    vascular_segments_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    vascular_segments_sskel* vascular_segments_impl_;
    vascular_segments_sskel (vascular_segments_sskel*, void*);

    protected:
    ::vascular::vascular_segment_sskel* vascular_segment_serializer_;
    ::xml_schema::serializer_map* vascular_segment_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class vascular_segment_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::vascular_segment&) = 0;

    // Elements.
    //
    virtual const ::vascular::endpoint&
    endpoint_1 () = 0;

    virtual const ::vascular::endpoint&
    endpoint_2 () = 0;

    virtual bool
    surface_present ();

    virtual const ::vascular::surface_properties&
    surface () = 0;

    virtual bool
    interior_present ();

    virtual const ::vascular::volume_properties&
    interior () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::vascular::endpoint_sskel& /* endpoint_1 */,
                 ::vascular::endpoint_sskel& /* endpoint_2 */,
                 ::vascular::surface_properties_sskel& /* surface */,
                 ::vascular::volume_properties_sskel& /* interior */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* endpoint_1 */,
                     ::xml_schema::serializer_map& /* endpoint_2 */,
                     ::xml_schema::serializer_map& /* surface */,
                     ::xml_schema::serializer_map& /* interior */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    endpoint_1_serializer (::vascular::endpoint_sskel&);

    void
    endpoint_1_serializer (::xml_schema::serializer_map&);

    void
    endpoint_2_serializer (::vascular::endpoint_sskel&);

    void
    endpoint_2_serializer (::xml_schema::serializer_map&);

    void
    surface_serializer (::vascular::surface_properties_sskel&);

    void
    surface_serializer (::xml_schema::serializer_map&);

    void
    interior_serializer (::vascular::volume_properties_sskel&);

    void
    interior_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    vascular_segment_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    vascular_segment_sskel* vascular_segment_impl_;
    vascular_segment_sskel (vascular_segment_sskel*, void*);

    protected:
    ::vascular::endpoint_sskel* endpoint_1_serializer_;
    ::xml_schema::serializer_map* endpoint_1_serializer_map_;

    ::vascular::endpoint_sskel* endpoint_2_serializer_;
    ::xml_schema::serializer_map* endpoint_2_serializer_map_;

    ::vascular::surface_properties_sskel* surface_serializer_;
    ::xml_schema::serializer_map* surface_serializer_map_;

    ::vascular::volume_properties_sskel* interior_serializer_;
    ::xml_schema::serializer_map* interior_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class endpoint_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::endpoint&) = 0;

    // Attributes.
    //
    virtual bool
    node_ID_present ();

    virtual unsigned int
    node_ID () = 0;

    // Elements.
    //
    virtual bool
    lengths_present ();

    virtual const ::phenotype_common::lengths&
    lengths () = 0;

    virtual bool
    areas_present ();

    virtual const ::phenotype_common::areas_2D&
    areas () = 0;

    virtual bool
    fluid_flow_velocity_present ();

    virtual const ::common::units_decimal&
    fluid_flow_velocity () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* node_ID */,
                 ::phenotype_common::lengths_sskel& /* lengths */,
                 ::phenotype_common::areas_2D_sskel& /* areas */,
                 ::common::units_decimal_sskel& /* fluid_flow_velocity */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* lengths */,
                     ::xml_schema::serializer_map& /* areas */,
                     ::xml_schema::serializer_map& /* fluid_flow_velocity */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    node_ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    lengths_serializer (::phenotype_common::lengths_sskel&);

    void
    lengths_serializer (::xml_schema::serializer_map&);

    void
    areas_serializer (::phenotype_common::areas_2D_sskel&);

    void
    areas_serializer (::xml_schema::serializer_map&);

    void
    fluid_flow_velocity_serializer (::common::units_decimal_sskel&);

    void
    fluid_flow_velocity_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    endpoint_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    endpoint_sskel* endpoint_impl_;
    endpoint_sskel (endpoint_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* node_ID_serializer_;
    ::phenotype_common::lengths_sskel* lengths_serializer_;
    ::xml_schema::serializer_map* lengths_serializer_map_;

    ::phenotype_common::areas_2D_sskel* areas_serializer_;
    ::xml_schema::serializer_map* areas_serializer_map_;

    ::common::units_decimal_sskel* fluid_flow_velocity_serializer_;
    ::xml_schema::serializer_map* fluid_flow_velocity_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class surface_properties_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::surface_properties&) = 0;

    // Elements.
    //
    virtual bool
    areas_present ();

    virtual const ::phenotype_common::areas_3D&
    areas () = 0;

    virtual bool
    fluid_flow_velocity_present ();

    virtual const ::common::units_decimal&
    fluid_flow_velocity () = 0;

    virtual bool
    mechanics_present ();

    virtual const ::phenotype_common::mechanics&
    mechanics () = 0;

    virtual bool
    permeability_present ();

    virtual const ::common::units_decimal&
    permeability () = 0;

    virtual bool
    surface_proteins_present ();

    virtual const ::variables::list_of_variables&
    surface_proteins () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::phenotype_common::areas_3D_sskel& /* areas */,
                 ::common::units_decimal_sskel& /* fluid_flow_velocity */,
                 ::phenotype_common::mechanics_sskel& /* mechanics */,
                 ::common::units_decimal_sskel& /* permeability */,
                 ::variables::list_of_variables_sskel& /* surface_proteins */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* areas */,
                     ::xml_schema::serializer_map& /* fluid_flow_velocity */,
                     ::xml_schema::serializer_map& /* mechanics */,
                     ::xml_schema::serializer_map& /* permeability */,
                     ::xml_schema::serializer_map& /* surface_proteins */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    areas_serializer (::phenotype_common::areas_3D_sskel&);

    void
    areas_serializer (::xml_schema::serializer_map&);

    void
    fluid_flow_velocity_serializer (::common::units_decimal_sskel&);

    void
    fluid_flow_velocity_serializer (::xml_schema::serializer_map&);

    void
    mechanics_serializer (::phenotype_common::mechanics_sskel&);

    void
    mechanics_serializer (::xml_schema::serializer_map&);

    void
    permeability_serializer (::common::units_decimal_sskel&);

    void
    permeability_serializer (::xml_schema::serializer_map&);

    void
    surface_proteins_serializer (::variables::list_of_variables_sskel&);

    void
    surface_proteins_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    surface_properties_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    surface_properties_sskel* surface_properties_impl_;
    surface_properties_sskel (surface_properties_sskel*, void*);

    protected:
    ::phenotype_common::areas_3D_sskel* areas_serializer_;
    ::xml_schema::serializer_map* areas_serializer_map_;

    ::common::units_decimal_sskel* fluid_flow_velocity_serializer_;
    ::xml_schema::serializer_map* fluid_flow_velocity_serializer_map_;

    ::phenotype_common::mechanics_sskel* mechanics_serializer_;
    ::xml_schema::serializer_map* mechanics_serializer_map_;

    ::common::units_decimal_sskel* permeability_serializer_;
    ::xml_schema::serializer_map* permeability_serializer_map_;

    ::variables::list_of_variables_sskel* surface_proteins_serializer_;
    ::xml_schema::serializer_map* surface_proteins_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class volume_properties_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::volume_properties&) = 0;

    // Elements.
    //
    virtual bool
    fluid_flow_velocity_present ();

    virtual const ::common::units_decimal&
    fluid_flow_velocity () = 0;

    virtual bool
    variables_present ();

    virtual const ::variables::list_of_variables&
    variables () = 0;

    virtual bool
    volumes_present ();

    virtual const ::phenotype_common::volumes&
    volumes () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_sskel& /* fluid_flow_velocity */,
                 ::variables::list_of_variables_sskel& /* variables */,
                 ::phenotype_common::volumes_sskel& /* volumes */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* fluid_flow_velocity */,
                     ::xml_schema::serializer_map& /* variables */,
                     ::xml_schema::serializer_map& /* volumes */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    fluid_flow_velocity_serializer (::common::units_decimal_sskel&);

    void
    fluid_flow_velocity_serializer (::xml_schema::serializer_map&);

    void
    variables_serializer (::variables::list_of_variables_sskel&);

    void
    variables_serializer (::xml_schema::serializer_map&);

    void
    volumes_serializer (::phenotype_common::volumes_sskel&);

    void
    volumes_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    volume_properties_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    volume_properties_sskel* volume_properties_impl_;
    volume_properties_sskel (volume_properties_sskel*, void*);

    protected:
    ::common::units_decimal_sskel* fluid_flow_velocity_serializer_;
    ::xml_schema::serializer_map* fluid_flow_velocity_serializer_map_;

    ::variables::list_of_variables_sskel* variables_serializer_;
    ::xml_schema::serializer_map* variables_serializer_map_;

    ::phenotype_common::volumes_sskel* volumes_serializer_;
    ::xml_schema::serializer_map* volumes_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class vascular_network_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::vascular::vascular_network&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    virtual bool
    keywords_present ();

    virtual ::std::string
    keywords () = 0;

    virtual bool
    name_present ();

    virtual ::std::string
    name () = 0;

    // Elements.
    //
    virtual bool
    vascular_nodes_present ();

    virtual const ::vascular::list_of_vascular_nodes&
    vascular_nodes () = 0;

    virtual bool
    boundary_nodes_present ();

    virtual const ::vascular::list_of_boundary_nodes&
    boundary_nodes () = 0;

    virtual bool
    vascular_segments_present ();

    virtual const ::vascular::vascular_segments&
    vascular_segments () = 0;

    virtual bool
    voxels_present ();

    virtual const ::mesh::int_list_xpath&
    voxels () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::xml_schema::string_sskel& /* keywords */,
                 ::xml_schema::string_sskel& /* name */,
                 ::vascular::list_of_vascular_nodes_sskel& /* vascular_nodes */,
                 ::vascular::list_of_boundary_nodes_sskel& /* boundary_nodes */,
                 ::vascular::vascular_segments_sskel& /* vascular_segments */,
                 ::mesh::int_list_xpath_sskel& /* voxels */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* vascular_nodes */,
                     ::xml_schema::serializer_map& /* boundary_nodes */,
                     ::xml_schema::serializer_map& /* vascular_segments */,
                     ::xml_schema::serializer_map& /* voxels */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    void
    keywords_serializer (::xml_schema::string_sskel&);

    void
    name_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    vascular_nodes_serializer (::vascular::list_of_vascular_nodes_sskel&);

    void
    vascular_nodes_serializer (::xml_schema::serializer_map&);

    void
    boundary_nodes_serializer (::vascular::list_of_boundary_nodes_sskel&);

    void
    boundary_nodes_serializer (::xml_schema::serializer_map&);

    void
    vascular_segments_serializer (::vascular::vascular_segments_sskel&);

    void
    vascular_segments_serializer (::xml_schema::serializer_map&);

    void
    voxels_serializer (::mesh::int_list_xpath_sskel&);

    void
    voxels_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    vascular_network_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    vascular_network_sskel* vascular_network_impl_;
    vascular_network_sskel (vascular_network_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::xml_schema::string_sskel* keywords_serializer_;
    ::xml_schema::string_sskel* name_serializer_;
    ::vascular::list_of_vascular_nodes_sskel* vascular_nodes_serializer_;
    ::xml_schema::serializer_map* vascular_nodes_serializer_map_;

    ::vascular::list_of_boundary_nodes_sskel* boundary_nodes_serializer_;
    ::xml_schema::serializer_map* boundary_nodes_serializer_map_;

    ::vascular::vascular_segments_sskel* vascular_segments_serializer_;
    ::xml_schema::serializer_map* vascular_segments_serializer_map_;

    ::mesh::int_list_xpath_sskel* voxels_serializer_;
    ::xml_schema::serializer_map* voxels_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };
}

#include "vascular-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // VASCULAR_SSKEL_HPP
