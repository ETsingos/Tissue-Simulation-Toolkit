// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef STATE_SIMPL_HPP
#define STATE_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define STATE_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "state-sskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-simpl.hpp"

#include "phenotype_common-simpl.hpp"

#include "mesh-simpl.hpp"

namespace state
{
  class phase_name_simpl: public phase_name_sskel
  {
    public:
    phase_name_simpl ();

    virtual void
    pre (const ::state::phase_name&);

    // Attributes.
    //
    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID ();

    public:
    ::xml_schema::string_simpl base_impl_;

    public:
    struct phase_name_simpl_state
    {
      const ::state::phase_name* phase_name_;
    };

    phase_name_simpl_state phase_name_simpl_state_;
  };

  class phase_simpl: public phase_sskel
  {
    public:
    virtual void
    pre (const ::state::phase&);

    // Elements.
    //
    virtual bool
    model_name_present ();

    virtual ::std::string
    model_name ();

    virtual bool
    phase_name_present ();

    virtual const ::state::phase_name&
    phase_name ();

    virtual bool
    cell_cycle_model_index_present ();

    virtual unsigned short
    cell_cycle_model_index ();

    virtual bool
    cell_cycle_phase_index_present ();

    virtual unsigned short
    cell_cycle_phase_index ();

    virtual bool
    elapsed_time_present ();

    virtual const ::common::units_decimal&
    elapsed_time ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct phase_simpl_state
    {
      const ::state::phase* phase_;
    };

    phase_simpl_state phase_simpl_state_;
  };

  class orientation_formalism_simpl: public orientation_formalism_sskel
  {
    public:
    orientation_formalism_simpl ();

    virtual void
    pre (const ::state::orientation_formalism&);

    virtual void
    _serialize_content ();

    public:
    const ::state::orientation_formalism* orientation_formalism_simpl_state_;
  };

  class orientation_simpl: public orientation_sskel
  {
    public:
    orientation_simpl ();

    virtual void
    pre (const ::state::orientation&);

    // Attributes.
    //
    virtual bool
    formalism_present ();

    virtual const ::state::orientation_formalism&
    formalism ();

    public:
    ::common::units_double_list_simpl base_impl_;

    public:
    struct orientation_simpl_state
    {
      const ::state::orientation* orientation_;
    };

    orientation_simpl_state orientation_simpl_state_;
  };

  class cell_parts_simpl: public cell_parts_sskel
  {
    public:
    cell_parts_simpl ();

    virtual void
    pre (const ::state::cell_parts&);

    // Attributes.
    //
    virtual ::std::string
    name ();

    virtual bool
    ID_present ();

    virtual unsigned int
    ID ();

    // Elements.
    //
    virtual bool
    orientation_present ();

    virtual const ::state::orientation&
    orientation ();

    virtual bool
    position_present ();

    virtual const ::common::units_double_list&
    position ();

    virtual bool
    velocity_present ();

    virtual const ::common::units_double_list&
    velocity ();

    virtual bool
    voxels_present ();

    virtual const ::mesh::int_list_xpath&
    voxels ();

    virtual bool
    cell_part_next ();

    virtual const ::state::cell_parts&
    cell_part ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    virtual void
    post ();

    virtual void
    _reset ();

    public:
    struct cell_parts_simpl_state
    {
      const ::state::cell_parts* cell_parts_;
      ::state::cell_parts::cell_part_const_iterator cell_part_;
      ::state::cell_parts::cell_part_const_iterator cell_part_end_;
    };

    cell_parts_simpl_state cell_parts_simpl_state_first_;
    ::xsde::cxx::stack cell_parts_simpl_state_;
  };

  class state_simpl: public state_sskel
  {
    public:
    virtual void
    pre (const ::state::state&);

    // Elements.
    //
    virtual bool
    orientation_present ();

    virtual const ::state::orientation&
    orientation ();

    virtual bool
    position_present ();

    virtual const ::common::units_double_list&
    position ();

    virtual bool
    velocity_present ();

    virtual const ::common::units_double_list&
    velocity ();

    virtual bool
    voxels_present ();

    virtual const ::mesh::int_list_xpath&
    voxels ();

    virtual bool
    cell_part_next ();

    virtual const ::state::cell_parts&
    cell_part ();

    virtual bool
    phase_present ();

    virtual const ::state::phase&
    phase ();

    virtual bool
    adhered_cells_present ();

    virtual const ::state::list_of_adhered_cells&
    adhered_cells ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct state_simpl_state
    {
      const ::state::state* state_;
      ::state::state::cell_part_const_iterator cell_part_;
      ::state::state::cell_part_const_iterator cell_part_end_;
    };

    state_simpl_state state_simpl_state_;
  };

  class adhered_cell_simpl: public adhered_cell_sskel
  {
    public:
    virtual void
    pre (const ::state::adhered_cell&);

    // Elements.
    //
    virtual unsigned int
    ID ();

    virtual const ::common::units_decimal_nonnegative&
    contact_area ();

    virtual const ::phenotype_common::cross_section&
    contact ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct adhered_cell_simpl_state
    {
      const ::state::adhered_cell* adhered_cell_;
    };

    adhered_cell_simpl_state adhered_cell_simpl_state_;
  };

  class list_of_adhered_cells_simpl: public list_of_adhered_cells_sskel
  {
    public:
    virtual void
    pre (const ::state::list_of_adhered_cells&);

    // Elements.
    //
    virtual bool
    adhered_cell_next ();

    virtual const ::state::adhered_cell&
    adhered_cell ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct list_of_adhered_cells_simpl_state
    {
      const ::state::list_of_adhered_cells* list_of_adhered_cells_;
      ::state::list_of_adhered_cells::adhered_cell_const_iterator adhered_cell_;
      ::state::list_of_adhered_cells::adhered_cell_const_iterator adhered_cell_end_;
    };

    list_of_adhered_cells_simpl_state list_of_adhered_cells_simpl_state_;
  };
}

#ifdef STATE_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // STATE_SIMPL_HPP
