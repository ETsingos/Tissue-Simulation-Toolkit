// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VARIABLES_IPP
#define VARIABLES_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

namespace variables
{
  // amount_type
  //

  inline
  amount_type::
  amount_type ()
  {
  }

  inline
  amount_type::
  amount_type (value_type v)
  {
    value_ = v;
  }

  inline
  void amount_type::
  value (value_type v)
  {
    value_ = v;
  }

  // variable
  //

  inline
  const ::std::string& variable::
  name () const
  {
    return this->name_;
  }

  inline
  ::std::string& variable::
  name ()
  {
    return this->name_;
  }

  inline
  void variable::
  name (const ::std::string& x)
  {
    this->name_ = x;
  }

  inline
  bool variable::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void variable::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& variable::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& variable::
  units ()
  {
    return this->units_;
  }

  inline
  void variable::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool variable::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void variable::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned long long variable::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned long long& variable::
  ID ()
  {
    return this->ID_;
  }

  inline
  void variable::
  ID (unsigned long long x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  bool variable::
  type_present () const
  {
    return this->type_present_;
  }

  inline
  void variable::
  type_present (bool x)
  {
    this->type_present_ = x;
  }

  inline
  const ::variables::amount_type& variable::
  type () const
  {
    return this->type_;
  }

  inline
  ::variables::amount_type& variable::
  type ()
  {
    return this->type_;
  }

  inline
  void variable::
  type (const ::variables::amount_type& x)
  {
    this->type_ = x;
    this->type_present_ = true;
  }

  inline
  bool variable::
  ChEBI_ID_present () const
  {
    return this->ChEBI_ID_present_;
  }

  inline
  void variable::
  ChEBI_ID_present (bool x)
  {
    this->ChEBI_ID_present_ = x;
  }

  inline
  const ::std::string& variable::
  ChEBI_ID () const
  {
    return this->ChEBI_ID_;
  }

  inline
  ::std::string& variable::
  ChEBI_ID ()
  {
    return this->ChEBI_ID_;
  }

  inline
  void variable::
  ChEBI_ID (const ::std::string& x)
  {
    this->ChEBI_ID_ = x;
    this->ChEBI_ID_present_ = true;
  }

  inline
  bool variable::
  MeSH_ID_present () const
  {
    return this->MeSH_ID_present_;
  }

  inline
  void variable::
  MeSH_ID_present (bool x)
  {
    this->MeSH_ID_present_ = x;
  }

  inline
  const ::std::string& variable::
  MeSH_ID () const
  {
    return this->MeSH_ID_;
  }

  inline
  ::std::string& variable::
  MeSH_ID ()
  {
    return this->MeSH_ID_;
  }

  inline
  void variable::
  MeSH_ID (const ::std::string& x)
  {
    this->MeSH_ID_ = x;
    this->MeSH_ID_present_ = true;
  }

  inline
  bool variable::
  DrugBank_ID_present () const
  {
    return this->DrugBank_ID_present_;
  }

  inline
  void variable::
  DrugBank_ID_present (bool x)
  {
    this->DrugBank_ID_present_ = x;
  }

  inline
  const ::std::string& variable::
  DrugBank_ID () const
  {
    return this->DrugBank_ID_;
  }

  inline
  ::std::string& variable::
  DrugBank_ID ()
  {
    return this->DrugBank_ID_;
  }

  inline
  void variable::
  DrugBank_ID (const ::std::string& x)
  {
    this->DrugBank_ID_ = x;
    this->DrugBank_ID_present_ = true;
  }

  inline
  bool variable::
  GMO_ID_present () const
  {
    return this->GMO_ID_present_;
  }

  inline
  void variable::
  GMO_ID_present (bool x)
  {
    this->GMO_ID_present_ = x;
  }

  inline
  const ::std::string& variable::
  GMO_ID () const
  {
    return this->GMO_ID_;
  }

  inline
  ::std::string& variable::
  GMO_ID ()
  {
    return this->GMO_ID_;
  }

  inline
  void variable::
  GMO_ID (const ::std::string& x)
  {
    this->GMO_ID_ = x;
    this->GMO_ID_present_ = true;
  }

  inline
  bool variable::
  GO_ID_present () const
  {
    return this->GO_ID_present_;
  }

  inline
  void variable::
  GO_ID_present (bool x)
  {
    this->GO_ID_present_ = x;
  }

  inline
  const ::std::string& variable::
  GO_ID () const
  {
    return this->GO_ID_;
  }

  inline
  ::std::string& variable::
  GO_ID ()
  {
    return this->GO_ID_;
  }

  inline
  void variable::
  GO_ID (const ::std::string& x)
  {
    this->GO_ID_ = x;
    this->GO_ID_present_ = true;
  }

  inline
  bool variable::
  UniProt_ID_present () const
  {
    return this->UniProt_ID_present_;
  }

  inline
  void variable::
  UniProt_ID_present (bool x)
  {
    this->UniProt_ID_present_ = x;
  }

  inline
  const ::std::string& variable::
  UniProt_ID () const
  {
    return this->UniProt_ID_;
  }

  inline
  ::std::string& variable::
  UniProt_ID ()
  {
    return this->UniProt_ID_;
  }

  inline
  void variable::
  UniProt_ID (const ::std::string& x)
  {
    this->UniProt_ID_ = x;
    this->UniProt_ID_present_ = true;
  }

  inline
  bool variable::
  PR_ID_present () const
  {
    return this->PR_ID_present_;
  }

  inline
  void variable::
  PR_ID_present (bool x)
  {
    this->PR_ID_present_ = x;
  }

  inline
  const ::std::string& variable::
  PR_ID () const
  {
    return this->PR_ID_;
  }

  inline
  ::std::string& variable::
  PR_ID ()
  {
    return this->PR_ID_;
  }

  inline
  void variable::
  PR_ID (const ::std::string& x)
  {
    this->PR_ID_ = x;
    this->PR_ID_present_ = true;
  }

  inline
  bool variable::
  material_amount_present () const
  {
    return this->material_amount_ != 0;
  }

  inline
  const ::variables::material_amount& variable::
  material_amount () const
  {
    return *this->material_amount_;
  }

  inline
  ::variables::material_amount& variable::
  material_amount ()
  {
    return *this->material_amount_;
  }

  inline
  void variable::
  material_amount (::variables::material_amount* x)
  {
    delete this->material_amount_;
    this->material_amount_ = x;
  }

  inline
  ::variables::material_amount* variable::
  material_amount_detach ()
  {
    ::variables::material_amount* r = this->material_amount_;
    this->material_amount_ = 0;
    return r;
  }

  inline
  bool variable::
  physical_parameter_set_present () const
  {
    return this->physical_parameter_set_ != 0;
  }

  inline
  const ::variables::physical_parameter_set& variable::
  physical_parameter_set () const
  {
    return *this->physical_parameter_set_;
  }

  inline
  ::variables::physical_parameter_set& variable::
  physical_parameter_set ()
  {
    return *this->physical_parameter_set_;
  }

  inline
  void variable::
  physical_parameter_set (::variables::physical_parameter_set* x)
  {
    delete this->physical_parameter_set_;
    this->physical_parameter_set_ = x;
  }

  inline
  ::variables::physical_parameter_set* variable::
  physical_parameter_set_detach ()
  {
    ::variables::physical_parameter_set* r = this->physical_parameter_set_;
    this->physical_parameter_set_ = 0;
    return r;
  }

  // material_amount
  //

  inline
  bool material_amount::
  type_present () const
  {
    return this->type_present_;
  }

  inline
  void material_amount::
  type_present (bool x)
  {
    this->type_present_ = x;
  }

  inline
  const ::variables::amount_type& material_amount::
  type () const
  {
    return this->type_;
  }

  inline
  ::variables::amount_type& material_amount::
  type ()
  {
    return this->type_;
  }

  inline
  void material_amount::
  type (const ::variables::amount_type& x)
  {
    this->type_ = x;
    this->type_present_ = true;
  }

  inline
  bool material_amount::
  scale_units_present () const
  {
    return this->scale_units_present_;
  }

  inline
  void material_amount::
  scale_units_present (bool x)
  {
    this->scale_units_present_ = x;
  }

  inline
  const ::std::string& material_amount::
  scale_units () const
  {
    return this->scale_units_;
  }

  inline
  ::std::string& material_amount::
  scale_units ()
  {
    return this->scale_units_;
  }

  inline
  void material_amount::
  scale_units (const ::std::string& x)
  {
    this->scale_units_ = x;
    this->scale_units_present_ = true;
  }

  // physical_parameter_set
  //

  inline
  bool physical_parameter_set::
  conditions_present () const
  {
    return this->conditions_ != 0;
  }

  inline
  const ::variables::physical_conditions& physical_parameter_set::
  conditions () const
  {
    return *this->conditions_;
  }

  inline
  ::variables::physical_conditions& physical_parameter_set::
  conditions ()
  {
    return *this->conditions_;
  }

  inline
  void physical_parameter_set::
  conditions (::variables::physical_conditions* x)
  {
    delete this->conditions_;
    this->conditions_ = x;
  }

  inline
  ::variables::physical_conditions* physical_parameter_set::
  conditions_detach ()
  {
    ::variables::physical_conditions* r = this->conditions_;
    this->conditions_ = 0;
    return r;
  }

  inline
  bool physical_parameter_set::
  diffusion_coefficient_present () const
  {
    return this->diffusion_coefficient_ != 0;
  }

  inline
  const ::common::units_decimal& physical_parameter_set::
  diffusion_coefficient () const
  {
    return *this->diffusion_coefficient_;
  }

  inline
  ::common::units_decimal& physical_parameter_set::
  diffusion_coefficient ()
  {
    return *this->diffusion_coefficient_;
  }

  inline
  void physical_parameter_set::
  diffusion_coefficient (::common::units_decimal* x)
  {
    delete this->diffusion_coefficient_;
    this->diffusion_coefficient_ = x;
  }

  inline
  ::common::units_decimal* physical_parameter_set::
  diffusion_coefficient_detach ()
  {
    ::common::units_decimal* r = this->diffusion_coefficient_;
    this->diffusion_coefficient_ = 0;
    return r;
  }

  inline
  bool physical_parameter_set::
  decay_rate_present () const
  {
    return this->decay_rate_ != 0;
  }

  inline
  const ::common::units_decimal& physical_parameter_set::
  decay_rate () const
  {
    return *this->decay_rate_;
  }

  inline
  ::common::units_decimal& physical_parameter_set::
  decay_rate ()
  {
    return *this->decay_rate_;
  }

  inline
  void physical_parameter_set::
  decay_rate (::common::units_decimal* x)
  {
    delete this->decay_rate_;
    this->decay_rate_ = x;
  }

  inline
  ::common::units_decimal* physical_parameter_set::
  decay_rate_detach ()
  {
    ::common::units_decimal* r = this->decay_rate_;
    this->decay_rate_ = 0;
    return r;
  }

  inline
  bool physical_parameter_set::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& physical_parameter_set::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& physical_parameter_set::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void physical_parameter_set::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* physical_parameter_set::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // physical_conditions
  //

  inline
  bool physical_conditions::
  temperature_present () const
  {
    return this->temperature_ != 0;
  }

  inline
  const ::common::units_decimal& physical_conditions::
  temperature () const
  {
    return *this->temperature_;
  }

  inline
  ::common::units_decimal& physical_conditions::
  temperature ()
  {
    return *this->temperature_;
  }

  inline
  void physical_conditions::
  temperature (::common::units_decimal* x)
  {
    delete this->temperature_;
    this->temperature_ = x;
  }

  inline
  ::common::units_decimal* physical_conditions::
  temperature_detach ()
  {
    ::common::units_decimal* r = this->temperature_;
    this->temperature_ = 0;
    return r;
  }

  inline
  bool physical_conditions::
  mechanical_pressure_present () const
  {
    return this->mechanical_pressure_ != 0;
  }

  inline
  const ::common::units_decimal& physical_conditions::
  mechanical_pressure () const
  {
    return *this->mechanical_pressure_;
  }

  inline
  ::common::units_decimal& physical_conditions::
  mechanical_pressure ()
  {
    return *this->mechanical_pressure_;
  }

  inline
  void physical_conditions::
  mechanical_pressure (::common::units_decimal* x)
  {
    delete this->mechanical_pressure_;
    this->mechanical_pressure_ = x;
  }

  inline
  ::common::units_decimal* physical_conditions::
  mechanical_pressure_detach ()
  {
    ::common::units_decimal* r = this->mechanical_pressure_;
    this->mechanical_pressure_ = 0;
    return r;
  }

  inline
  bool physical_conditions::
  acidity_present () const
  {
    return this->acidity_ != 0;
  }

  inline
  const ::common::units_decimal& physical_conditions::
  acidity () const
  {
    return *this->acidity_;
  }

  inline
  ::common::units_decimal& physical_conditions::
  acidity ()
  {
    return *this->acidity_;
  }

  inline
  void physical_conditions::
  acidity (::common::units_decimal* x)
  {
    delete this->acidity_;
    this->acidity_ = x;
  }

  inline
  ::common::units_decimal* physical_conditions::
  acidity_detach ()
  {
    ::common::units_decimal* r = this->acidity_;
    this->acidity_ = 0;
    return r;
  }

  inline
  bool physical_conditions::
  pH_present () const
  {
    return this->pH_ != 0;
  }

  inline
  const ::common::units_decimal& physical_conditions::
  pH () const
  {
    return *this->pH_;
  }

  inline
  ::common::units_decimal& physical_conditions::
  pH ()
  {
    return *this->pH_;
  }

  inline
  void physical_conditions::
  pH (::common::units_decimal* x)
  {
    delete this->pH_;
    this->pH_ = x;
  }

  inline
  ::common::units_decimal* physical_conditions::
  pH_detach ()
  {
    ::common::units_decimal* r = this->pH_;
    this->pH_ = 0;
    return r;
  }

  inline
  bool physical_conditions::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& physical_conditions::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& physical_conditions::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void physical_conditions::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* physical_conditions::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // conditions
  //

  inline
  conditions::
  conditions ()
  {
  }

  inline
  conditions::
  conditions (value_type v)
  {
    value_ = v;
  }

  inline
  void conditions::
  value (value_type v)
  {
    value_ = v;
  }

  // system
  //

  inline
  system::
  system ()
  {
  }

  inline
  system::
  system (value_type v)
  {
    value_ = v;
  }

  inline
  void system::
  value (value_type v)
  {
    value_ = v;
  }

  // experimental_conditions
  //

  inline
  bool experimental_conditions::
  type_present () const
  {
    return this->type_present_;
  }

  inline
  void experimental_conditions::
  type_present (bool x)
  {
    this->type_present_ = x;
  }

  inline
  const ::std::string& experimental_conditions::
  type () const
  {
    return this->type_;
  }

  inline
  ::std::string& experimental_conditions::
  type ()
  {
    return this->type_;
  }

  inline
  void experimental_conditions::
  type (const ::std::string& x)
  {
    this->type_ = x;
    this->type_present_ = true;
  }

  inline
  bool experimental_conditions::
  dimensionality_present () const
  {
    return this->dimensionality_present_;
  }

  inline
  void experimental_conditions::
  dimensionality_present (bool x)
  {
    this->dimensionality_present_ = x;
  }

  inline
  unsigned short experimental_conditions::
  dimensionality () const
  {
    return this->dimensionality_;
  }

  inline
  unsigned short& experimental_conditions::
  dimensionality ()
  {
    return this->dimensionality_;
  }

  inline
  void experimental_conditions::
  dimensionality (unsigned short x)
  {
    this->dimensionality_ = x;
    this->dimensionality_present_ = true;
  }

  inline
  bool experimental_conditions::
  system_present () const
  {
    return this->system_present_;
  }

  inline
  void experimental_conditions::
  system_present (bool x)
  {
    this->system_present_ = x;
  }

  inline
  const ::variables::system& experimental_conditions::
  system () const
  {
    return this->system_;
  }

  inline
  ::variables::system& experimental_conditions::
  system ()
  {
    return this->system_;
  }

  inline
  void experimental_conditions::
  system (const ::variables::system& x)
  {
    this->system_ = x;
    this->system_present_ = true;
  }

  inline
  bool experimental_conditions::
  conditions_present () const
  {
    return this->conditions_present_;
  }

  inline
  void experimental_conditions::
  conditions_present (bool x)
  {
    this->conditions_present_ = x;
  }

  inline
  const ::variables::conditions& experimental_conditions::
  conditions () const
  {
    return this->conditions_;
  }

  inline
  ::variables::conditions& experimental_conditions::
  conditions ()
  {
    return this->conditions_;
  }

  inline
  void experimental_conditions::
  conditions (const ::variables::conditions& x)
  {
    this->conditions_ = x;
    this->conditions_present_ = true;
  }

  inline
  const experimental_conditions::surface_variable_sequence& experimental_conditions::
  surface_variable () const
  {
    return this->surface_variable_;
  }

  inline
  experimental_conditions::surface_variable_sequence& experimental_conditions::
  surface_variable ()
  {
    return this->surface_variable_;
  }

  // data_vector
  //

  inline
  bool data_vector::
  voxel_ID_present () const
  {
    return this->voxel_ID_ != 0;
  }

  inline
  const ::common::unsigned_int_list& data_vector::
  voxel_ID () const
  {
    return *this->voxel_ID_;
  }

  inline
  ::common::unsigned_int_list& data_vector::
  voxel_ID ()
  {
    return *this->voxel_ID_;
  }

  inline
  void data_vector::
  voxel_ID (::common::unsigned_int_list* x)
  {
    delete this->voxel_ID_;
    this->voxel_ID_ = x;
  }

  inline
  ::common::unsigned_int_list* data_vector::
  voxel_ID_detach ()
  {
    ::common::unsigned_int_list* r = this->voxel_ID_;
    this->voxel_ID_ = 0;
    return r;
  }

  // data
  //

  inline
  bool data::
  type_present () const
  {
    return this->type_present_;
  }

  inline
  void data::
  type_present (bool x)
  {
    this->type_present_ = x;
  }

  inline
  const ::common::data_storage_formats& data::
  type () const
  {
    return this->type_;
  }

  inline
  ::common::data_storage_formats& data::
  type ()
  {
    return this->type_;
  }

  inline
  void data::
  type (const ::common::data_storage_formats& x)
  {
    this->type_ = x;
    this->type_present_ = true;
  }

  inline
  bool data::
  filename_present () const
  {
    return this->filename_present_;
  }

  inline
  void data::
  filename_present (bool x)
  {
    this->filename_present_ = x;
  }

  inline
  const ::std::string& data::
  filename () const
  {
    return this->filename_;
  }

  inline
  ::std::string& data::
  filename ()
  {
    return this->filename_;
  }

  inline
  void data::
  filename (const ::std::string& x)
  {
    this->filename_ = x;
    this->filename_present_ = true;
  }

  inline
  const data::data_vector_sequence& data::
  data_vector () const
  {
    return this->data_vector_;
  }

  inline
  data::data_vector_sequence& data::
  data_vector ()
  {
    return this->data_vector_;
  }

  inline
  bool data::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& data::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& data::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void data::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* data::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // list_of_variables
  //

  inline
  const list_of_variables::variable_sequence& list_of_variables::
  variable () const
  {
    return this->variable_;
  }

  inline
  list_of_variables::variable_sequence& list_of_variables::
  variable ()
  {
    return this->variable_;
  }

  inline
  bool list_of_variables::
  physical_parameter_set_present () const
  {
    return this->physical_parameter_set_ != 0;
  }

  inline
  const ::variables::physical_parameter_set& list_of_variables::
  physical_parameter_set () const
  {
    return *this->physical_parameter_set_;
  }

  inline
  ::variables::physical_parameter_set& list_of_variables::
  physical_parameter_set ()
  {
    return *this->physical_parameter_set_;
  }

  inline
  void list_of_variables::
  physical_parameter_set (::variables::physical_parameter_set* x)
  {
    delete this->physical_parameter_set_;
    this->physical_parameter_set_ = x;
  }

  inline
  ::variables::physical_parameter_set* list_of_variables::
  physical_parameter_set_detach ()
  {
    ::variables::physical_parameter_set* r = this->physical_parameter_set_;
    this->physical_parameter_set_ = 0;
    return r;
  }

  inline
  bool list_of_variables::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& list_of_variables::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& list_of_variables::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void list_of_variables::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* list_of_variables::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // transition_threshold
  //

  inline
  bool transition_threshold::
  ChEBI_ID_present () const
  {
    return this->ChEBI_ID_present_;
  }

  inline
  void transition_threshold::
  ChEBI_ID_present (bool x)
  {
    this->ChEBI_ID_present_ = x;
  }

  inline
  const ::std::string& transition_threshold::
  ChEBI_ID () const
  {
    return this->ChEBI_ID_;
  }

  inline
  ::std::string& transition_threshold::
  ChEBI_ID ()
  {
    return this->ChEBI_ID_;
  }

  inline
  void transition_threshold::
  ChEBI_ID (const ::std::string& x)
  {
    this->ChEBI_ID_ = x;
    this->ChEBI_ID_present_ = true;
  }

  inline
  bool transition_threshold::
  MeSH_ID_present () const
  {
    return this->MeSH_ID_present_;
  }

  inline
  void transition_threshold::
  MeSH_ID_present (bool x)
  {
    this->MeSH_ID_present_ = x;
  }

  inline
  const ::std::string& transition_threshold::
  MeSH_ID () const
  {
    return this->MeSH_ID_;
  }

  inline
  ::std::string& transition_threshold::
  MeSH_ID ()
  {
    return this->MeSH_ID_;
  }

  inline
  void transition_threshold::
  MeSH_ID (const ::std::string& x)
  {
    this->MeSH_ID_ = x;
    this->MeSH_ID_present_ = true;
  }

  inline
  bool transition_threshold::
  DrugBank_ID_present () const
  {
    return this->DrugBank_ID_present_;
  }

  inline
  void transition_threshold::
  DrugBank_ID_present (bool x)
  {
    this->DrugBank_ID_present_ = x;
  }

  inline
  const ::std::string& transition_threshold::
  DrugBank_ID () const
  {
    return this->DrugBank_ID_;
  }

  inline
  ::std::string& transition_threshold::
  DrugBank_ID ()
  {
    return this->DrugBank_ID_;
  }

  inline
  void transition_threshold::
  DrugBank_ID (const ::std::string& x)
  {
    this->DrugBank_ID_ = x;
    this->DrugBank_ID_present_ = true;
  }

  inline
  bool transition_threshold::
  GMO_ID_present () const
  {
    return this->GMO_ID_present_;
  }

  inline
  void transition_threshold::
  GMO_ID_present (bool x)
  {
    this->GMO_ID_present_ = x;
  }

  inline
  const ::std::string& transition_threshold::
  GMO_ID () const
  {
    return this->GMO_ID_;
  }

  inline
  ::std::string& transition_threshold::
  GMO_ID ()
  {
    return this->GMO_ID_;
  }

  inline
  void transition_threshold::
  GMO_ID (const ::std::string& x)
  {
    this->GMO_ID_ = x;
    this->GMO_ID_present_ = true;
  }

  inline
  bool transition_threshold::
  GO_ID_present () const
  {
    return this->GO_ID_present_;
  }

  inline
  void transition_threshold::
  GO_ID_present (bool x)
  {
    this->GO_ID_present_ = x;
  }

  inline
  const ::std::string& transition_threshold::
  GO_ID () const
  {
    return this->GO_ID_;
  }

  inline
  ::std::string& transition_threshold::
  GO_ID ()
  {
    return this->GO_ID_;
  }

  inline
  void transition_threshold::
  GO_ID (const ::std::string& x)
  {
    this->GO_ID_ = x;
    this->GO_ID_present_ = true;
  }

  inline
  bool transition_threshold::
  UniProt_ID_present () const
  {
    return this->UniProt_ID_present_;
  }

  inline
  void transition_threshold::
  UniProt_ID_present (bool x)
  {
    this->UniProt_ID_present_ = x;
  }

  inline
  const ::std::string& transition_threshold::
  UniProt_ID () const
  {
    return this->UniProt_ID_;
  }

  inline
  ::std::string& transition_threshold::
  UniProt_ID ()
  {
    return this->UniProt_ID_;
  }

  inline
  void transition_threshold::
  UniProt_ID (const ::std::string& x)
  {
    this->UniProt_ID_ = x;
    this->UniProt_ID_present_ = true;
  }

  inline
  bool transition_threshold::
  PR_ID_present () const
  {
    return this->PR_ID_present_;
  }

  inline
  void transition_threshold::
  PR_ID_present (bool x)
  {
    this->PR_ID_present_ = x;
  }

  inline
  const ::std::string& transition_threshold::
  PR_ID () const
  {
    return this->PR_ID_;
  }

  inline
  ::std::string& transition_threshold::
  PR_ID ()
  {
    return this->PR_ID_;
  }

  inline
  void transition_threshold::
  PR_ID (const ::std::string& x)
  {
    this->PR_ID_ = x;
    this->PR_ID_present_ = true;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // VARIABLES_IPP
