// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell_cycle-simpl.hpp"

namespace cell_cycle
{
  // death_type_simpl
  //

  death_type_simpl::
  death_type_simpl ()
  : death_type_sskel (0)
  {
  }

  void death_type_simpl::
  pre (const ::cell_cycle::death_type& x)
  {
    this->death_type_simpl_state_ = &x;
  }

  void death_type_simpl::
  _serialize_content ()
  {
    this->_characters (this->death_type_simpl_state_->string ());
  }

  // death_rate_type_simpl
  //

  death_rate_type_simpl::
  death_rate_type_simpl ()
  : death_rate_type_sskel (&base_impl_)
  {
  }

  void death_rate_type_simpl::
  pre (const ::cell_cycle::death_rate_type& x)
  {
    this->base_impl_.pre (x);
    this->death_rate_type_simpl_state_.death_rate_type_ = &x;
  }

  const ::cell_cycle::death_type& death_rate_type_simpl::
  type ()
  {
    return this->death_rate_type_simpl_state_.death_rate_type_->type ();
  }

  // cell_cycle_arrest_simpl
  //

  void cell_cycle_arrest_simpl::
  pre (const ::cell_cycle::cell_cycle_arrest& x)
  {
    this->cell_cycle_arrest_simpl_state_.cell_cycle_arrest_ = &x;
  }

  bool cell_cycle_arrest_simpl::
  condition_present ()
  {
    return this->cell_cycle_arrest_simpl_state_.cell_cycle_arrest_->condition_present ();
  }

  const ::cell_cycle::arrest_condition& cell_cycle_arrest_simpl::
  condition ()
  {
    return this->cell_cycle_arrest_simpl_state_.cell_cycle_arrest_->condition ();
  }

  // transition_simpl
  //

  void transition_simpl::
  pre (const ::cell_cycle::transition& x)
  {
    this->transition_simpl_state_.transition_ = &x;
    this->transition_simpl_state_.threshold_ = 
    this->transition_simpl_state_.transition_->threshold ().begin ();
    this->transition_simpl_state_.threshold_end_ = 
    this->transition_simpl_state_.transition_->threshold ().end ();
  }

  bool transition_simpl::
  checkpoint_failure_probability_present ()
  {
    return this->transition_simpl_state_.transition_->checkpoint_failure_probability_present ();
  }

  const ::common::units_decimal& transition_simpl::
  checkpoint_failure_probability ()
  {
    return this->transition_simpl_state_.transition_->checkpoint_failure_probability ();
  }

  bool transition_simpl::
  subsequent_phase_present ()
  {
    return this->transition_simpl_state_.transition_->subsequent_phase_present ();
  }

  unsigned long long transition_simpl::
  subsequent_phase ()
  {
    return this->transition_simpl_state_.transition_->subsequent_phase ();
  }

  bool transition_simpl::
  threshold_next ()
  {
    return this->transition_simpl_state_.threshold_ != 
    this->transition_simpl_state_.threshold_end_;
  }

  const ::variables::transition_threshold& transition_simpl::
  threshold ()
  {
    return *this->transition_simpl_state_.threshold_++;
  }

  bool transition_simpl::
  transition_rate_present ()
  {
    return this->transition_simpl_state_.transition_->transition_rate_present ();
  }

  const ::common::units_decimal& transition_simpl::
  transition_rate ()
  {
    return this->transition_simpl_state_.transition_->transition_rate ();
  }

  // cell_cycle_phase_simpl
  //

  void cell_cycle_phase_simpl::
  pre (const ::cell_cycle::cell_cycle_phase& x)
  {
    this->cell_cycle_phase_simpl_state_.cell_cycle_phase_ = &x;
    this->cell_cycle_phase_simpl_state_.death_rate_ = 
    this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->death_rate ().begin ();
    this->cell_cycle_phase_simpl_state_.death_rate_end_ = 
    this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->death_rate ().end ();
    this->cell_cycle_phase_simpl_state_.transition_ = 
    this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->transition ().begin ();
    this->cell_cycle_phase_simpl_state_.transition_end_ = 
    this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->transition ().end ();
    this->cell_cycle_phase_simpl_state_.cell_part_ = 
    this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->cell_part ().begin ();
    this->cell_cycle_phase_simpl_state_.cell_part_end_ = 
    this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->cell_part ().end ();
  }

  ::std::string cell_cycle_phase_simpl::
  name ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->name ();
  }

  bool cell_cycle_phase_simpl::
  ID_present ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->ID_present ();
  }

  unsigned long long cell_cycle_phase_simpl::
  ID ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->ID ();
  }

  bool cell_cycle_phase_simpl::
  birth_rate_present ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->birth_rate_present ();
  }

  const ::common::units_decimal_nonnegative& cell_cycle_phase_simpl::
  birth_rate ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->birth_rate ();
  }

  bool cell_cycle_phase_simpl::
  duration_present ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->duration_present ();
  }

  const ::common::units_decimal_nonnegative& cell_cycle_phase_simpl::
  duration ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->duration ();
  }

  bool cell_cycle_phase_simpl::
  death_rate_next ()
  {
    return this->cell_cycle_phase_simpl_state_.death_rate_ != 
    this->cell_cycle_phase_simpl_state_.death_rate_end_;
  }

  const ::cell_cycle::death_rate_type& cell_cycle_phase_simpl::
  death_rate ()
  {
    return *this->cell_cycle_phase_simpl_state_.death_rate_++;
  }

  bool cell_cycle_phase_simpl::
  net_birth_rate_present ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->net_birth_rate_present ();
  }

  const ::common::units_decimal& cell_cycle_phase_simpl::
  net_birth_rate ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->net_birth_rate ();
  }

  bool cell_cycle_phase_simpl::
  population_doubling_time_present ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->population_doubling_time_present ();
  }

  const ::common::units_decimal_nonnegative& cell_cycle_phase_simpl::
  population_doubling_time ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->population_doubling_time ();
  }

  bool cell_cycle_phase_simpl::
  cell_cycle_arrest_present ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->cell_cycle_arrest_present ();
  }

  const ::cell_cycle::cell_cycle_arrest& cell_cycle_phase_simpl::
  cell_cycle_arrest ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->cell_cycle_arrest ();
  }

  bool cell_cycle_phase_simpl::
  transition_next ()
  {
    return this->cell_cycle_phase_simpl_state_.transition_ != 
    this->cell_cycle_phase_simpl_state_.transition_end_;
  }

  const ::cell_cycle::transition& cell_cycle_phase_simpl::
  transition ()
  {
    return *this->cell_cycle_phase_simpl_state_.transition_++;
  }

  bool cell_cycle_phase_simpl::
  cell_part_next ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_part_ != 
    this->cell_cycle_phase_simpl_state_.cell_part_end_;
  }

  const ::phenotype_base::cell_parts& cell_cycle_phase_simpl::
  cell_part ()
  {
    return *this->cell_cycle_phase_simpl_state_.cell_part_++;
  }

  bool cell_cycle_phase_simpl::
  custom_present ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->custom_present ();
  }

  const ::common::custom& cell_cycle_phase_simpl::
  custom ()
  {
    return this->cell_cycle_phase_simpl_state_.cell_cycle_phase_->custom ();
  }

  // summary_elements_simpl
  //

  void summary_elements_simpl::
  pre (const ::cell_cycle::summary_elements& x)
  {
    this->summary_elements_simpl_state_.summary_elements_ = &x;
    this->summary_elements_simpl_state_.death_rate_ = 
    this->summary_elements_simpl_state_.summary_elements_->death_rate ().begin ();
    this->summary_elements_simpl_state_.death_rate_end_ = 
    this->summary_elements_simpl_state_.summary_elements_->death_rate ().end ();
  }

  bool summary_elements_simpl::
  birth_rate_present ()
  {
    return this->summary_elements_simpl_state_.summary_elements_->birth_rate_present ();
  }

  const ::common::units_decimal_nonnegative& summary_elements_simpl::
  birth_rate ()
  {
    return this->summary_elements_simpl_state_.summary_elements_->birth_rate ();
  }

  bool summary_elements_simpl::
  duration_present ()
  {
    return this->summary_elements_simpl_state_.summary_elements_->duration_present ();
  }

  const ::common::units_decimal_nonnegative& summary_elements_simpl::
  duration ()
  {
    return this->summary_elements_simpl_state_.summary_elements_->duration ();
  }

  bool summary_elements_simpl::
  death_rate_next ()
  {
    return this->summary_elements_simpl_state_.death_rate_ != 
    this->summary_elements_simpl_state_.death_rate_end_;
  }

  const ::cell_cycle::death_rate_type& summary_elements_simpl::
  death_rate ()
  {
    return *this->summary_elements_simpl_state_.death_rate_++;
  }

  bool summary_elements_simpl::
  net_birth_rate_present ()
  {
    return this->summary_elements_simpl_state_.summary_elements_->net_birth_rate_present ();
  }

  const ::common::units_decimal& summary_elements_simpl::
  net_birth_rate ()
  {
    return this->summary_elements_simpl_state_.summary_elements_->net_birth_rate ();
  }

  bool summary_elements_simpl::
  population_doubling_time_present ()
  {
    return this->summary_elements_simpl_state_.summary_elements_->population_doubling_time_present ();
  }

  const ::common::units_decimal_nonnegative& summary_elements_simpl::
  population_doubling_time ()
  {
    return this->summary_elements_simpl_state_.summary_elements_->population_doubling_time ();
  }

  // cell_cycle_simpl
  //

  void cell_cycle_simpl::
  pre (const ::cell_cycle::cell_cycle& x)
  {
    this->cell_cycle_simpl_state_.cell_cycle_ = &x;
    this->cell_cycle_simpl_state_.cell_cycle_phase_ = 
    this->cell_cycle_simpl_state_.cell_cycle_->cell_cycle_phase ().begin ();
    this->cell_cycle_simpl_state_.cell_cycle_phase_end_ = 
    this->cell_cycle_simpl_state_.cell_cycle_->cell_cycle_phase ().end ();
    this->cell_cycle_simpl_state_.cell_death_ = 
    this->cell_cycle_simpl_state_.cell_cycle_->cell_death ().begin ();
    this->cell_cycle_simpl_state_.cell_death_end_ = 
    this->cell_cycle_simpl_state_.cell_cycle_->cell_death ().end ();
  }

  ::std::string cell_cycle_simpl::
  model ()
  {
    return this->cell_cycle_simpl_state_.cell_cycle_->model ();
  }

  bool cell_cycle_simpl::
  ID_present ()
  {
    return this->cell_cycle_simpl_state_.cell_cycle_->ID_present ();
  }

  unsigned long long cell_cycle_simpl::
  ID ()
  {
    return this->cell_cycle_simpl_state_.cell_cycle_->ID ();
  }

  bool cell_cycle_simpl::
  cell_cycle_phase_next ()
  {
    return this->cell_cycle_simpl_state_.cell_cycle_phase_ != 
    this->cell_cycle_simpl_state_.cell_cycle_phase_end_;
  }

  const ::cell_cycle::cell_cycle_phase& cell_cycle_simpl::
  cell_cycle_phase ()
  {
    return *this->cell_cycle_simpl_state_.cell_cycle_phase_++;
  }

  bool cell_cycle_simpl::
  cell_death_next ()
  {
    return this->cell_cycle_simpl_state_.cell_death_ != 
    this->cell_cycle_simpl_state_.cell_death_end_;
  }

  const ::cell_cycle::cell_death& cell_cycle_simpl::
  cell_death ()
  {
    return *this->cell_cycle_simpl_state_.cell_death_++;
  }

  bool cell_cycle_simpl::
  summary_elements_present ()
  {
    return this->cell_cycle_simpl_state_.cell_cycle_->summary_elements_present ();
  }

  const ::cell_cycle::summary_elements& cell_cycle_simpl::
  summary_elements ()
  {
    return this->cell_cycle_simpl_state_.cell_cycle_->summary_elements ();
  }

  bool cell_cycle_simpl::
  custom_present ()
  {
    return this->cell_cycle_simpl_state_.cell_cycle_->custom_present ();
  }

  const ::common::custom& cell_cycle_simpl::
  custom ()
  {
    return this->cell_cycle_simpl_state_.cell_cycle_->custom ();
  }

  // cell_death_simpl
  //

  void cell_death_simpl::
  pre (const ::cell_cycle::cell_death& x)
  {
    this->cell_death_simpl_state_.cell_death_ = &x;
    this->cell_death_simpl_state_.cell_part_ = 
    this->cell_death_simpl_state_.cell_death_->cell_part ().begin ();
    this->cell_death_simpl_state_.cell_part_end_ = 
    this->cell_death_simpl_state_.cell_death_->cell_part ().end ();
  }

  const ::cell_cycle::death_type& cell_death_simpl::
  type ()
  {
    return this->cell_death_simpl_state_.cell_death_->type ();
  }

  bool cell_death_simpl::
  ID_present ()
  {
    return this->cell_death_simpl_state_.cell_death_->ID_present ();
  }

  unsigned long long cell_death_simpl::
  ID ()
  {
    return this->cell_death_simpl_state_.cell_death_->ID ();
  }

  const ::common::units_decimal& cell_death_simpl::
  duration ()
  {
    return this->cell_death_simpl_state_.cell_death_->duration ();
  }

  bool cell_death_simpl::
  cell_part_next ()
  {
    return this->cell_death_simpl_state_.cell_part_ != 
    this->cell_death_simpl_state_.cell_part_end_;
  }

  const ::phenotype_base::cell_parts& cell_death_simpl::
  cell_part ()
  {
    return *this->cell_death_simpl_state_.cell_part_++;
  }

  bool cell_death_simpl::
  custom_present ()
  {
    return this->cell_death_simpl_state_.cell_death_->custom_present ();
  }

  const ::common::custom& cell_death_simpl::
  custom ()
  {
    return this->cell_death_simpl_state_.cell_death_->custom ();
  }

  // arrest_type_simpl
  //

  arrest_type_simpl::
  arrest_type_simpl ()
  : arrest_type_sskel (0)
  {
  }

  void arrest_type_simpl::
  pre (const ::cell_cycle::arrest_type& x)
  {
    this->arrest_type_simpl_state_ = &x;
  }

  void arrest_type_simpl::
  _serialize_content ()
  {
    this->_characters (this->arrest_type_simpl_state_->string ());
  }

  // arrest_condition_simpl
  //

  arrest_condition_simpl::
  arrest_condition_simpl ()
  : arrest_condition_sskel (&base_impl_)
  {
  }

  void arrest_condition_simpl::
  pre (const ::cell_cycle::arrest_condition& x)
  {
    this->base_impl_.pre (x);
    this->arrest_condition_simpl_state_.arrest_condition_ = &x;
  }

  bool arrest_condition_simpl::
  type_present ()
  {
    return this->arrest_condition_simpl_state_.arrest_condition_->type_present ();
  }

  const ::cell_cycle::arrest_type& arrest_condition_simpl::
  type ()
  {
    return this->arrest_condition_simpl_state_.arrest_condition_->type ();
  }

  // cycles_and_deaths_simpl
  //

  void cycles_and_deaths_simpl::
  pre (const ::cell_cycle::cycles_and_deaths& x)
  {
    this->cycles_and_deaths_simpl_state_.cycles_and_deaths_ = &x;
    this->cycles_and_deaths_simpl_state_.cell_cycle_ = 
    this->cycles_and_deaths_simpl_state_.cycles_and_deaths_->cell_cycle ().begin ();
    this->cycles_and_deaths_simpl_state_.cell_cycle_end_ = 
    this->cycles_and_deaths_simpl_state_.cycles_and_deaths_->cell_cycle ().end ();
    this->cycles_and_deaths_simpl_state_.cell_death_ = 
    this->cycles_and_deaths_simpl_state_.cycles_and_deaths_->cell_death ().begin ();
    this->cycles_and_deaths_simpl_state_.cell_death_end_ = 
    this->cycles_and_deaths_simpl_state_.cycles_and_deaths_->cell_death ().end ();
  }

  bool cycles_and_deaths_simpl::
  cell_cycle_next ()
  {
    return this->cycles_and_deaths_simpl_state_.cell_cycle_ != 
    this->cycles_and_deaths_simpl_state_.cell_cycle_end_;
  }

  const ::cell_cycle::cell_cycle& cycles_and_deaths_simpl::
  cell_cycle ()
  {
    return *this->cycles_and_deaths_simpl_state_.cell_cycle_++;
  }

  bool cycles_and_deaths_simpl::
  cell_death_next ()
  {
    return this->cycles_and_deaths_simpl_state_.cell_death_ != 
    this->cycles_and_deaths_simpl_state_.cell_death_end_;
  }

  const ::cell_cycle::cell_death& cycles_and_deaths_simpl::
  cell_death ()
  {
    return *this->cycles_and_deaths_simpl_state_.cell_death_++;
  }
}

// Begin epilogue.
//
//
// End epilogue.

