// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "microenvironment.hpp"

#include <stdlib.h>
#include <new>

#include <xsde/cxx/guard.hxx>

namespace microenvironment
{
  // domain
  //

  domain::
  domain ()
  {
    this->name_present_ = false;
    this->variables_ = 0;
    this->experimental_condition_ = 0;
    this->mesh_ = 0;
    this->data_ = 0;
    this->custom_ = 0;
  }

  domain::
  ~domain ()
  {
    delete this->variables_;
    delete this->experimental_condition_;
    delete this->mesh_;
    delete this->data_;
    delete this->custom_;
  }

  void domain::
  _copy (domain& c) const
  {
    XSDE_UNUSED (c);

    if (this->name_present ())
      c.name (this->name ());

    if (this->variables_present ())
    {
      ::variables::list_of_variables* m = this->variables ()._clone ();
      c.variables (m);
    }

    if (this->experimental_condition_present ())
    {
      ::variables::experimental_conditions* m = this->experimental_condition ()._clone ();
      c.experimental_condition (m);
    }

    if (this->mesh_present ())
    {
      ::mesh::mesh* m = this->mesh ()._clone ();
      c.mesh (m);
    }

    if (this->data_present ())
    {
      ::variables::data* m = this->data ()._clone ();
      c.data (m);
    }

    if (this->custom_present ())
    {
      ::common::custom* m = this->custom ()._clone ();
      c.custom (m);
    }
  }

  domain* domain::
  _clone () const
  {
    domain* c = new domain;
    ::xsde::cxx::guard< domain > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }

  // microenvironment
  //

  microenvironment::
  microenvironment ()
  {
    this->custom_ = 0;
  }

  microenvironment::
  ~microenvironment ()
  {
    delete this->custom_;
  }

  void microenvironment::
  _copy (microenvironment& c) const
  {
    XSDE_UNUSED (c);

    this->domain ().copy (c.domain ());

    this->vascular_network ().copy (c.vascular_network ());

    this->basement_membrane ().copy (c.basement_membrane ());

    if (this->custom_present ())
    {
      ::common::custom* m = this->custom ()._clone ();
      c.custom (m);
    }
  }

  microenvironment* microenvironment::
  _clone () const
  {
    microenvironment* c = new microenvironment;
    ::xsde::cxx::guard< microenvironment > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

