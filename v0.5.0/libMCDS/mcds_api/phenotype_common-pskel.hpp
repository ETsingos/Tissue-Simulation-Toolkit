// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_COMMON_PSKEL_HPP
#define PHENOTYPE_COMMON_PSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
namespace phenotype_common
{
  class adhesion_pskel;
  class rolling_observation_pskel;
  class friction_pskel;
  class mechanics_pskel;
  class indentation_observation_pskel;
  class motility_pskel;
  class motility_types_pskel;
  class timescale_pskel;
  class transport_processes_pskel;
  class transport_variable_pskel;
  class geometrical_parameters_pskel;
  class lengths_pskel;
  class areas_3D_pskel;
  class areas_2D_pskel;
  class volumes_pskel;
  class geometrical_properties_pskel;
  class cross_section_pskel;
  class mass_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/parser/map.hxx>
#include <xsde/cxx/parser/substitution-map-callback.hxx>
#include <xsde/cxx/parser/substitution-map-load.hxx>
#include <xsde/cxx/parser/validating/inheritance-map-load.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "phenotype_common.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser map interface and default implementation.
  //
  using ::xsde::cxx::parser::parser_map;
  using ::xsde::cxx::parser::parser_map_impl;

  // Parser substitution map callack.
  //
  using ::xsde::cxx::parser::parser_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::parser::parser_smap_buckets;
  using ::xsde::cxx::parser::parser_smap_elements;
  using ::xsde::cxx::parser::validating::parser_imap_buckets;
  using ::xsde::cxx::parser::validating::parser_imap_elements;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "common-pskel.hpp"

#include "variables-pskel.hpp"

namespace phenotype_common
{
  class adhesion_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    adhesion_bond_breaking_rate (::common::units_decimal*);

    virtual void
    adhesion_bond_formation_rate (::common::units_decimal*);

    virtual void
    adhesion_spring_constant (::common::units_decimal_nonnegative*);

    virtual void
    adhesion_receptor_density (::common::units_decimal_nonnegative*);

    virtual void
    surface_binding_energy (::common::units_decimal*);

    virtual void
    number_of_adhered_cells (::common::units_decimal_nonnegative*);

    virtual void
    maximum_number_of_adhered_cells (const ::common::units_unsignedShort&);

    virtual void
    adhered_surface_area (::common::units_decimal_nonnegative*);

    virtual void
    maximum_adhered_surface_area (::common::units_decimal_nonnegative*);

    virtual void
    adhesion_force_per_surface_area (::common::units_decimal*);

    virtual void
    adhesion_probability (::common::units_fraction*);

    virtual void
    detachment_proability (::common::units_fraction*);

    virtual void
    rolling_observation (::phenotype_common::rolling_observation*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::adhesion*
    post_adhesion () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_pskel& /* adhesion_bond_breaking_rate */,
             ::common::units_decimal_pskel& /* adhesion_bond_formation_rate */,
             ::common::units_decimal_nonnegative_pskel& /* adhesion_spring_constant */,
             ::common::units_decimal_nonnegative_pskel& /* adhesion_receptor_density */,
             ::common::units_decimal_pskel& /* surface_binding_energy */,
             ::common::units_decimal_nonnegative_pskel& /* number_of_adhered_cells */,
             ::common::units_unsignedShort_pskel& /* maximum_number_of_adhered_cells */,
             ::common::units_decimal_nonnegative_pskel& /* adhered_surface_area */,
             ::common::units_decimal_nonnegative_pskel& /* maximum_adhered_surface_area */,
             ::common::units_decimal_pskel& /* adhesion_force_per_surface_area */,
             ::common::units_fraction_pskel& /* adhesion_probability */,
             ::common::units_fraction_pskel& /* detachment_proability */,
             ::phenotype_common::rolling_observation_pskel& /* rolling_observation */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* adhesion_bond_breaking_rate */,
                 ::xml_schema::parser_map& /* adhesion_bond_formation_rate */,
                 ::xml_schema::parser_map& /* adhesion_spring_constant */,
                 ::xml_schema::parser_map& /* adhesion_receptor_density */,
                 ::xml_schema::parser_map& /* surface_binding_energy */,
                 ::xml_schema::parser_map& /* number_of_adhered_cells */,
                 ::xml_schema::parser_map& /* maximum_number_of_adhered_cells */,
                 ::xml_schema::parser_map& /* adhered_surface_area */,
                 ::xml_schema::parser_map& /* maximum_adhered_surface_area */,
                 ::xml_schema::parser_map& /* adhesion_force_per_surface_area */,
                 ::xml_schema::parser_map& /* adhesion_probability */,
                 ::xml_schema::parser_map& /* detachment_proability */,
                 ::xml_schema::parser_map& /* rolling_observation */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    adhesion_bond_breaking_rate_parser (::common::units_decimal_pskel&);

    void
    adhesion_bond_breaking_rate_parser (::xml_schema::parser_map&);

    void
    adhesion_bond_formation_rate_parser (::common::units_decimal_pskel&);

    void
    adhesion_bond_formation_rate_parser (::xml_schema::parser_map&);

    void
    adhesion_spring_constant_parser (::common::units_decimal_nonnegative_pskel&);

    void
    adhesion_spring_constant_parser (::xml_schema::parser_map&);

    void
    adhesion_receptor_density_parser (::common::units_decimal_nonnegative_pskel&);

    void
    adhesion_receptor_density_parser (::xml_schema::parser_map&);

    void
    surface_binding_energy_parser (::common::units_decimal_pskel&);

    void
    surface_binding_energy_parser (::xml_schema::parser_map&);

    void
    number_of_adhered_cells_parser (::common::units_decimal_nonnegative_pskel&);

    void
    number_of_adhered_cells_parser (::xml_schema::parser_map&);

    void
    maximum_number_of_adhered_cells_parser (::common::units_unsignedShort_pskel&);

    void
    maximum_number_of_adhered_cells_parser (::xml_schema::parser_map&);

    void
    adhered_surface_area_parser (::common::units_decimal_nonnegative_pskel&);

    void
    adhered_surface_area_parser (::xml_schema::parser_map&);

    void
    maximum_adhered_surface_area_parser (::common::units_decimal_nonnegative_pskel&);

    void
    maximum_adhered_surface_area_parser (::xml_schema::parser_map&);

    void
    adhesion_force_per_surface_area_parser (::common::units_decimal_pskel&);

    void
    adhesion_force_per_surface_area_parser (::xml_schema::parser_map&);

    void
    adhesion_probability_parser (::common::units_fraction_pskel&);

    void
    adhesion_probability_parser (::xml_schema::parser_map&);

    void
    detachment_proability_parser (::common::units_fraction_pskel&);

    void
    detachment_proability_parser (::xml_schema::parser_map&);

    void
    rolling_observation_parser (::phenotype_common::rolling_observation_pskel&);

    void
    rolling_observation_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    adhesion_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    adhesion_pskel* adhesion_impl_;
    adhesion_pskel (adhesion_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_pskel* adhesion_bond_breaking_rate_parser_;
    ::xml_schema::parser_map* adhesion_bond_breaking_rate_parser_map_;

    ::common::units_decimal_pskel* adhesion_bond_formation_rate_parser_;
    ::xml_schema::parser_map* adhesion_bond_formation_rate_parser_map_;

    ::common::units_decimal_nonnegative_pskel* adhesion_spring_constant_parser_;
    ::xml_schema::parser_map* adhesion_spring_constant_parser_map_;

    ::common::units_decimal_nonnegative_pskel* adhesion_receptor_density_parser_;
    ::xml_schema::parser_map* adhesion_receptor_density_parser_map_;

    ::common::units_decimal_pskel* surface_binding_energy_parser_;
    ::xml_schema::parser_map* surface_binding_energy_parser_map_;

    ::common::units_decimal_nonnegative_pskel* number_of_adhered_cells_parser_;
    ::xml_schema::parser_map* number_of_adhered_cells_parser_map_;

    ::common::units_unsignedShort_pskel* maximum_number_of_adhered_cells_parser_;
    ::xml_schema::parser_map* maximum_number_of_adhered_cells_parser_map_;

    ::common::units_decimal_nonnegative_pskel* adhered_surface_area_parser_;
    ::xml_schema::parser_map* adhered_surface_area_parser_map_;

    ::common::units_decimal_nonnegative_pskel* maximum_adhered_surface_area_parser_;
    ::xml_schema::parser_map* maximum_adhered_surface_area_parser_map_;

    ::common::units_decimal_pskel* adhesion_force_per_surface_area_parser_;
    ::xml_schema::parser_map* adhesion_force_per_surface_area_parser_map_;

    ::common::units_fraction_pskel* adhesion_probability_parser_;
    ::xml_schema::parser_map* adhesion_probability_parser_map_;

    ::common::units_fraction_pskel* detachment_proability_parser_;
    ::xml_schema::parser_map* detachment_proability_parser_map_;

    ::phenotype_common::rolling_observation_pskel* rolling_observation_parser_;
    ::xml_schema::parser_map* rolling_observation_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::adhesion_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class rolling_observation_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    rolling_velocity (::common::units_decimal*);

    virtual void
    shear_stress (::common::units_decimal*);

    virtual ::phenotype_common::rolling_observation*
    post_rolling_observation () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_pskel& /* rolling_velocity */,
             ::common::units_decimal_pskel& /* shear_stress */);

    void
    parser_maps (::xml_schema::parser_map& /* rolling_velocity */,
                 ::xml_schema::parser_map& /* shear_stress */);

    // Individual element parsers.
    //
    void
    rolling_velocity_parser (::common::units_decimal_pskel&);

    void
    rolling_velocity_parser (::xml_schema::parser_map&);

    void
    shear_stress_parser (::common::units_decimal_pskel&);

    void
    shear_stress_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    rolling_observation_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    rolling_observation_pskel* rolling_observation_impl_;
    rolling_observation_pskel (rolling_observation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_pskel* rolling_velocity_parser_;
    ::xml_schema::parser_map* rolling_velocity_parser_map_;

    ::common::units_decimal_pskel* shear_stress_parser_;
    ::xml_schema::parser_map* shear_stress_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::rolling_observation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class friction_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    compression (::common::units_decimal_nonnegative*);

    virtual void
    ECM (::common::units_decimal_nonnegative*);

    virtual void
    shear (::common::units_decimal_nonnegative*);

    virtual ::phenotype_common::friction*
    post_friction () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_nonnegative_pskel& /* compression */,
             ::common::units_decimal_nonnegative_pskel& /* ECM */,
             ::common::units_decimal_nonnegative_pskel& /* shear */);

    void
    parser_maps (::xml_schema::parser_map& /* compression */,
                 ::xml_schema::parser_map& /* ECM */,
                 ::xml_schema::parser_map& /* shear */);

    // Individual element parsers.
    //
    void
    compression_parser (::common::units_decimal_nonnegative_pskel&);

    void
    compression_parser (::xml_schema::parser_map&);

    void
    ECM_parser (::common::units_decimal_nonnegative_pskel&);

    void
    ECM_parser (::xml_schema::parser_map&);

    void
    shear_parser (::common::units_decimal_nonnegative_pskel&);

    void
    shear_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    friction_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    friction_pskel* friction_impl_;
    friction_pskel (friction_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_nonnegative_pskel* compression_parser_;
    ::xml_schema::parser_map* compression_parser_map_;

    ::common::units_decimal_nonnegative_pskel* ECM_parser_;
    ::xml_schema::parser_map* ECM_parser_map_;

    ::common::units_decimal_nonnegative_pskel* shear_parser_;
    ::xml_schema::parser_map* shear_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::friction_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class mechanics_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    friction (::phenotype_common::friction*);

    virtual void
    maximum_cell_deformation (::common::units_decimal*);

    virtual void
    mechanical_pressure (::common::units_decimal*);

    virtual void
    indentation_observation (::phenotype_common::indentation_observation*);

    virtual void
    poisson_ratio (::common::units_decimal*);

    virtual void
    youngs_modulus (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::mechanics*
    post_mechanics () = 0;

    // Parser construction API.
    //
    void
    parsers (::phenotype_common::friction_pskel& /* friction */,
             ::common::units_decimal_pskel& /* maximum_cell_deformation */,
             ::common::units_decimal_pskel& /* mechanical_pressure */,
             ::phenotype_common::indentation_observation_pskel& /* indentation_observation */,
             ::common::units_decimal_pskel& /* poisson_ratio */,
             ::common::units_decimal_pskel& /* youngs_modulus */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* friction */,
                 ::xml_schema::parser_map& /* maximum_cell_deformation */,
                 ::xml_schema::parser_map& /* mechanical_pressure */,
                 ::xml_schema::parser_map& /* indentation_observation */,
                 ::xml_schema::parser_map& /* poisson_ratio */,
                 ::xml_schema::parser_map& /* youngs_modulus */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    friction_parser (::phenotype_common::friction_pskel&);

    void
    friction_parser (::xml_schema::parser_map&);

    void
    maximum_cell_deformation_parser (::common::units_decimal_pskel&);

    void
    maximum_cell_deformation_parser (::xml_schema::parser_map&);

    void
    mechanical_pressure_parser (::common::units_decimal_pskel&);

    void
    mechanical_pressure_parser (::xml_schema::parser_map&);

    void
    indentation_observation_parser (::phenotype_common::indentation_observation_pskel&);

    void
    indentation_observation_parser (::xml_schema::parser_map&);

    void
    poisson_ratio_parser (::common::units_decimal_pskel&);

    void
    poisson_ratio_parser (::xml_schema::parser_map&);

    void
    youngs_modulus_parser (::common::units_decimal_pskel&);

    void
    youngs_modulus_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    mechanics_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    mechanics_pskel* mechanics_impl_;
    mechanics_pskel (mechanics_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::phenotype_common::friction_pskel* friction_parser_;
    ::xml_schema::parser_map* friction_parser_map_;

    ::common::units_decimal_pskel* maximum_cell_deformation_parser_;
    ::xml_schema::parser_map* maximum_cell_deformation_parser_map_;

    ::common::units_decimal_pskel* mechanical_pressure_parser_;
    ::xml_schema::parser_map* mechanical_pressure_parser_map_;

    ::phenotype_common::indentation_observation_pskel* indentation_observation_parser_;
    ::xml_schema::parser_map* indentation_observation_parser_map_;

    ::common::units_decimal_pskel* poisson_ratio_parser_;
    ::xml_schema::parser_map* poisson_ratio_parser_map_;

    ::common::units_decimal_pskel* youngs_modulus_parser_;
    ::xml_schema::parser_map* youngs_modulus_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::mechanics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class indentation_observation_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    depth (::common::units_decimal*);

    virtual void
    poisson_ratio (::common::units_decimal*);

    virtual void
    youngs_modulus (::common::units_decimal*);

    virtual ::phenotype_common::indentation_observation*
    post_indentation_observation () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_pskel& /* depth */,
             ::common::units_decimal_pskel& /* poisson_ratio */,
             ::common::units_decimal_pskel& /* youngs_modulus */);

    void
    parser_maps (::xml_schema::parser_map& /* depth */,
                 ::xml_schema::parser_map& /* poisson_ratio */,
                 ::xml_schema::parser_map& /* youngs_modulus */);

    // Individual element parsers.
    //
    void
    depth_parser (::common::units_decimal_pskel&);

    void
    depth_parser (::xml_schema::parser_map&);

    void
    poisson_ratio_parser (::common::units_decimal_pskel&);

    void
    poisson_ratio_parser (::xml_schema::parser_map&);

    void
    youngs_modulus_parser (::common::units_decimal_pskel&);

    void
    youngs_modulus_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    indentation_observation_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    indentation_observation_pskel* indentation_observation_impl_;
    indentation_observation_pskel (indentation_observation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_pskel* depth_parser_;
    ::xml_schema::parser_map* depth_parser_map_;

    ::common::units_decimal_pskel* poisson_ratio_parser_;
    ::xml_schema::parser_map* poisson_ratio_parser_map_;

    ::common::units_decimal_pskel* youngs_modulus_parser_;
    ::xml_schema::parser_map* youngs_modulus_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::indentation_observation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class motility_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    unrestricted (::phenotype_common::motility_types*);

    virtual void
    restricted (::phenotype_common::motility_types*);

    virtual ::phenotype_common::motility*
    post_motility () = 0;

    // Parser construction API.
    //
    void
    parsers (::phenotype_common::motility_types_pskel& /* unrestricted */,
             ::phenotype_common::motility_types_pskel& /* restricted */);

    void
    parser_maps (::xml_schema::parser_map& /* unrestricted */,
                 ::xml_schema::parser_map& /* restricted */);

    // Individual element parsers.
    //
    void
    unrestricted_parser (::phenotype_common::motility_types_pskel&);

    void
    unrestricted_parser (::xml_schema::parser_map&);

    void
    restricted_parser (::phenotype_common::motility_types_pskel&);

    void
    restricted_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    motility_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    motility_pskel* motility_impl_;
    motility_pskel (motility_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::phenotype_common::motility_types_pskel* unrestricted_parser_;
    ::xml_schema::parser_map* unrestricted_parser_map_;

    ::phenotype_common::motility_types_pskel* restricted_parser_;
    ::xml_schema::parser_map* restricted_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::motility_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class motility_types_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    timescale (::phenotype_common::timescale*);

    virtual void
    restriction (::variables::experimental_conditions*);

    virtual void
    net_displacement (::common::units_decimal*);

    virtual void
    total_displacement (::common::units_decimal_nonnegative*);

    virtual void
    mean_square_displacement (::common::units_decimal_nonnegative*);

    virtual void
    mean_speed (::common::units_decimal*);

    virtual void
    net_speed (::common::units_decimal*);

    virtual void
    persistence (::common::units_decimal*);

    virtual void
    mean_path_length (::common::units_decimal*);

    virtual void
    diffusion_coefficient (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::motility_types*
    post_motility_types () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* ID */,
             ::phenotype_common::timescale_pskel& /* timescale */,
             ::variables::experimental_conditions_pskel& /* restriction */,
             ::common::units_decimal_pskel& /* net_displacement */,
             ::common::units_decimal_nonnegative_pskel& /* total_displacement */,
             ::common::units_decimal_nonnegative_pskel& /* mean_square_displacement */,
             ::common::units_decimal_pskel& /* mean_speed */,
             ::common::units_decimal_pskel& /* net_speed */,
             ::common::units_decimal_pskel& /* persistence */,
             ::common::units_decimal_pskel& /* mean_path_length */,
             ::common::units_decimal_pskel& /* diffusion_coefficient */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* timescale */,
                 ::xml_schema::parser_map& /* restriction */,
                 ::xml_schema::parser_map& /* net_displacement */,
                 ::xml_schema::parser_map& /* total_displacement */,
                 ::xml_schema::parser_map& /* mean_square_displacement */,
                 ::xml_schema::parser_map& /* mean_speed */,
                 ::xml_schema::parser_map& /* net_speed */,
                 ::xml_schema::parser_map& /* persistence */,
                 ::xml_schema::parser_map& /* mean_path_length */,
                 ::xml_schema::parser_map& /* diffusion_coefficient */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_int_pskel&);

    // Individual element parsers.
    //
    void
    timescale_parser (::phenotype_common::timescale_pskel&);

    void
    timescale_parser (::xml_schema::parser_map&);

    void
    restriction_parser (::variables::experimental_conditions_pskel&);

    void
    restriction_parser (::xml_schema::parser_map&);

    void
    net_displacement_parser (::common::units_decimal_pskel&);

    void
    net_displacement_parser (::xml_schema::parser_map&);

    void
    total_displacement_parser (::common::units_decimal_nonnegative_pskel&);

    void
    total_displacement_parser (::xml_schema::parser_map&);

    void
    mean_square_displacement_parser (::common::units_decimal_nonnegative_pskel&);

    void
    mean_square_displacement_parser (::xml_schema::parser_map&);

    void
    mean_speed_parser (::common::units_decimal_pskel&);

    void
    mean_speed_parser (::xml_schema::parser_map&);

    void
    net_speed_parser (::common::units_decimal_pskel&);

    void
    net_speed_parser (::xml_schema::parser_map&);

    void
    persistence_parser (::common::units_decimal_pskel&);

    void
    persistence_parser (::xml_schema::parser_map&);

    void
    mean_path_length_parser (::common::units_decimal_pskel&);

    void
    mean_path_length_parser (::xml_schema::parser_map&);

    void
    diffusion_coefficient_parser (::common::units_decimal_pskel&);

    void
    diffusion_coefficient_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    motility_types_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    motility_types_pskel* motility_types_impl_;
    motility_types_pskel (motility_types_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* ID_parser_;
    ::phenotype_common::timescale_pskel* timescale_parser_;
    ::xml_schema::parser_map* timescale_parser_map_;

    ::variables::experimental_conditions_pskel* restriction_parser_;
    ::xml_schema::parser_map* restriction_parser_map_;

    ::common::units_decimal_pskel* net_displacement_parser_;
    ::xml_schema::parser_map* net_displacement_parser_map_;

    ::common::units_decimal_nonnegative_pskel* total_displacement_parser_;
    ::xml_schema::parser_map* total_displacement_parser_map_;

    ::common::units_decimal_nonnegative_pskel* mean_square_displacement_parser_;
    ::xml_schema::parser_map* mean_square_displacement_parser_map_;

    ::common::units_decimal_pskel* mean_speed_parser_;
    ::xml_schema::parser_map* mean_speed_parser_map_;

    ::common::units_decimal_pskel* net_speed_parser_;
    ::xml_schema::parser_map* net_speed_parser_map_;

    ::common::units_decimal_pskel* persistence_parser_;
    ::xml_schema::parser_map* persistence_parser_map_;

    ::common::units_decimal_pskel* mean_path_length_parser_;
    ::xml_schema::parser_map* mean_path_length_parser_map_;

    ::common::units_decimal_pskel* diffusion_coefficient_parser_;
    ::xml_schema::parser_map* diffusion_coefficient_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::motility_types_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class timescale_pskel: public ::common::units_decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    mitotic (bool);

    virtual ::phenotype_common::timescale*
    post_timescale () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */,
             ::xml_schema::boolean_pskel& /* mitotic */);

    // Individual attribute parsers.
    //
    void
    mitotic_parser (::xml_schema::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    timescale_pskel (::common::units_decimal_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_decimal*
    post_units_decimal ();

    protected:
    timescale_pskel* timescale_impl_;
    timescale_pskel (timescale_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::boolean_pskel* mitotic_parser_;
  };

  class transport_processes_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    variable (::phenotype_common::transport_variable*);

    virtual ::phenotype_common::transport_processes*
    post_transport_processes () = 0;

    // Parser construction API.
    //
    void
    parsers (::phenotype_common::transport_variable_pskel& /* variable */);

    void
    parser_maps (::xml_schema::parser_map& /* variable */);

    // Individual element parsers.
    //
    void
    variable_parser (::phenotype_common::transport_variable_pskel&);

    void
    variable_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    transport_processes_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    transport_processes_pskel* transport_processes_impl_;
    transport_processes_pskel (transport_processes_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::phenotype_common::transport_variable_pskel* variable_parser_;
    ::xml_schema::parser_map* variable_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::transport_processes_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class transport_variable_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    name (const ::std::string&);

    virtual void
    units (const ::std::string&);

    virtual void
    ID (unsigned long long);

    virtual void
    type (const ::variables::amount_type&);

    virtual void
    ChEBI_ID (const ::std::string&);

    virtual void
    MeSH_ID (const ::std::string&);

    virtual void
    DrugBank_ID (const ::std::string&);

    virtual void
    GMO_ID (const ::std::string&);

    virtual void
    GO_ID (const ::std::string&);

    virtual void
    UniProt_ID (const ::std::string&);

    virtual void
    PR_ID (const ::std::string&);

    // Elements.
    //
    virtual void
    all_present ();

    virtual void
    export_rate (::common::units_decimal*);

    virtual void
    export_rate_per_unit_surface_area (::common::units_decimal*);

    virtual void
    import_rate (::common::units_decimal*);

    virtual void
    import_rate_per_unit_surface_area (::common::units_decimal*);

    virtual void
    saturation_density (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::transport_variable*
    post_transport_variable () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* units */,
             ::xml_schema::unsigned_long_pskel& /* ID */,
             ::variables::amount_type_pskel& /* type */,
             ::xml_schema::string_pskel& /* ChEBI_ID */,
             ::xml_schema::string_pskel& /* MeSH_ID */,
             ::xml_schema::string_pskel& /* DrugBank_ID */,
             ::xml_schema::string_pskel& /* GMO_ID */,
             ::xml_schema::string_pskel& /* GO_ID */,
             ::xml_schema::string_pskel& /* UniProt_ID */,
             ::xml_schema::string_pskel& /* PR_ID */,
             ::common::units_decimal_pskel& /* export_rate */,
             ::common::units_decimal_pskel& /* export_rate_per_unit_surface_area */,
             ::common::units_decimal_pskel& /* import_rate */,
             ::common::units_decimal_pskel& /* import_rate_per_unit_surface_area */,
             ::common::units_decimal_pskel& /* saturation_density */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* export_rate */,
                 ::xml_schema::parser_map& /* export_rate_per_unit_surface_area */,
                 ::xml_schema::parser_map& /* import_rate */,
                 ::xml_schema::parser_map& /* import_rate_per_unit_surface_area */,
                 ::xml_schema::parser_map& /* saturation_density */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    units_parser (::xml_schema::string_pskel&);

    void
    ID_parser (::xml_schema::unsigned_long_pskel&);

    void
    type_parser (::variables::amount_type_pskel&);

    void
    ChEBI_ID_parser (::xml_schema::string_pskel&);

    void
    MeSH_ID_parser (::xml_schema::string_pskel&);

    void
    DrugBank_ID_parser (::xml_schema::string_pskel&);

    void
    GMO_ID_parser (::xml_schema::string_pskel&);

    void
    GO_ID_parser (::xml_schema::string_pskel&);

    void
    UniProt_ID_parser (::xml_schema::string_pskel&);

    void
    PR_ID_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    export_rate_parser (::common::units_decimal_pskel&);

    void
    export_rate_parser (::xml_schema::parser_map&);

    void
    export_rate_per_unit_surface_area_parser (::common::units_decimal_pskel&);

    void
    export_rate_per_unit_surface_area_parser (::xml_schema::parser_map&);

    void
    import_rate_parser (::common::units_decimal_pskel&);

    void
    import_rate_parser (::xml_schema::parser_map&);

    void
    import_rate_per_unit_surface_area_parser (::common::units_decimal_pskel&);

    void
    import_rate_per_unit_surface_area_parser (::xml_schema::parser_map&);

    void
    saturation_density_parser (::common::units_decimal_pskel&);

    void
    saturation_density_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    transport_variable_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    transport_variable_pskel* transport_variable_impl_;
    transport_variable_pskel (transport_variable_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* units_parser_;
    ::xml_schema::unsigned_long_pskel* ID_parser_;
    ::variables::amount_type_pskel* type_parser_;
    ::xml_schema::string_pskel* ChEBI_ID_parser_;
    ::xml_schema::string_pskel* MeSH_ID_parser_;
    ::xml_schema::string_pskel* DrugBank_ID_parser_;
    ::xml_schema::string_pskel* GMO_ID_parser_;
    ::xml_schema::string_pskel* GO_ID_parser_;
    ::xml_schema::string_pskel* UniProt_ID_parser_;
    ::xml_schema::string_pskel* PR_ID_parser_;
    ::common::units_decimal_pskel* export_rate_parser_;
    ::xml_schema::parser_map* export_rate_parser_map_;

    ::common::units_decimal_pskel* export_rate_per_unit_surface_area_parser_;
    ::xml_schema::parser_map* export_rate_per_unit_surface_area_parser_map_;

    ::common::units_decimal_pskel* import_rate_parser_;
    ::xml_schema::parser_map* import_rate_parser_map_;

    ::common::units_decimal_pskel* import_rate_per_unit_surface_area_parser_;
    ::xml_schema::parser_map* import_rate_per_unit_surface_area_parser_map_;

    ::common::units_decimal_pskel* saturation_density_parser_;
    ::xml_schema::parser_map* saturation_density_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::transport_variable_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[6UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class geometrical_parameters_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    aspect_ratio (::common::units_decimal_nonnegative*);

    virtual void
    circularity (::common::units_decimal_nonnegative*);

    virtual void
    eccentricity (::common::units_decimal_nonnegative*);

    virtual void
    sphericity (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::geometrical_parameters*
    post_geometrical_parameters () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::common::units_decimal_nonnegative_pskel& /* aspect_ratio */,
             ::common::units_decimal_nonnegative_pskel& /* circularity */,
             ::common::units_decimal_nonnegative_pskel& /* eccentricity */,
             ::common::units_decimal_nonnegative_pskel& /* sphericity */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* aspect_ratio */,
                 ::xml_schema::parser_map& /* circularity */,
                 ::xml_schema::parser_map& /* eccentricity */,
                 ::xml_schema::parser_map& /* sphericity */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    aspect_ratio_parser (::common::units_decimal_nonnegative_pskel&);

    void
    aspect_ratio_parser (::xml_schema::parser_map&);

    void
    circularity_parser (::common::units_decimal_nonnegative_pskel&);

    void
    circularity_parser (::xml_schema::parser_map&);

    void
    eccentricity_parser (::common::units_decimal_nonnegative_pskel&);

    void
    eccentricity_parser (::xml_schema::parser_map&);

    void
    sphericity_parser (::common::units_decimal_nonnegative_pskel&);

    void
    sphericity_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    geometrical_parameters_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    geometrical_parameters_pskel* geometrical_parameters_impl_;
    geometrical_parameters_pskel (geometrical_parameters_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* units_parser_;
    ::common::units_decimal_nonnegative_pskel* aspect_ratio_parser_;
    ::xml_schema::parser_map* aspect_ratio_parser_map_;

    ::common::units_decimal_nonnegative_pskel* circularity_parser_;
    ::xml_schema::parser_map* circularity_parser_map_;

    ::common::units_decimal_nonnegative_pskel* eccentricity_parser_;
    ::xml_schema::parser_map* eccentricity_parser_map_;

    ::common::units_decimal_nonnegative_pskel* sphericity_parser_;
    ::xml_schema::parser_map* sphericity_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::geometrical_parameters_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[5UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class lengths_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    diameter (::common::units_decimal_nonnegative*);

    virtual void
    major_axis (::common::units_decimal_nonnegative*);

    virtual void
    minor_axis (::common::units_decimal_nonnegative*);

    virtual void
    perimeter (::common::units_decimal_nonnegative*);

    virtual void
    radius (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::lengths*
    post_lengths () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::common::units_decimal_nonnegative_pskel& /* diameter */,
             ::common::units_decimal_nonnegative_pskel& /* major_axis */,
             ::common::units_decimal_nonnegative_pskel& /* minor_axis */,
             ::common::units_decimal_nonnegative_pskel& /* perimeter */,
             ::common::units_decimal_nonnegative_pskel& /* radius */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* diameter */,
                 ::xml_schema::parser_map& /* major_axis */,
                 ::xml_schema::parser_map& /* minor_axis */,
                 ::xml_schema::parser_map& /* perimeter */,
                 ::xml_schema::parser_map& /* radius */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    diameter_parser (::common::units_decimal_nonnegative_pskel&);

    void
    diameter_parser (::xml_schema::parser_map&);

    void
    major_axis_parser (::common::units_decimal_nonnegative_pskel&);

    void
    major_axis_parser (::xml_schema::parser_map&);

    void
    minor_axis_parser (::common::units_decimal_nonnegative_pskel&);

    void
    minor_axis_parser (::xml_schema::parser_map&);

    void
    perimeter_parser (::common::units_decimal_nonnegative_pskel&);

    void
    perimeter_parser (::xml_schema::parser_map&);

    void
    radius_parser (::common::units_decimal_nonnegative_pskel&);

    void
    radius_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    lengths_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    lengths_pskel* lengths_impl_;
    lengths_pskel (lengths_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* units_parser_;
    ::common::units_decimal_nonnegative_pskel* diameter_parser_;
    ::xml_schema::parser_map* diameter_parser_map_;

    ::common::units_decimal_nonnegative_pskel* major_axis_parser_;
    ::xml_schema::parser_map* major_axis_parser_map_;

    ::common::units_decimal_nonnegative_pskel* minor_axis_parser_;
    ::xml_schema::parser_map* minor_axis_parser_map_;

    ::common::units_decimal_nonnegative_pskel* perimeter_parser_;
    ::xml_schema::parser_map* perimeter_parser_map_;

    ::common::units_decimal_nonnegative_pskel* radius_parser_;
    ::xml_schema::parser_map* radius_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::lengths_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[6UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class areas_3D_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    free_surface_area (::common::units_decimal_nonnegative*);

    virtual void
    total_surface_area (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::areas_3D*
    post_areas_3D () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::common::units_decimal_nonnegative_pskel& /* free_surface_area */,
             ::common::units_decimal_nonnegative_pskel& /* total_surface_area */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* free_surface_area */,
                 ::xml_schema::parser_map& /* total_surface_area */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    free_surface_area_parser (::common::units_decimal_nonnegative_pskel&);

    void
    free_surface_area_parser (::xml_schema::parser_map&);

    void
    total_surface_area_parser (::common::units_decimal_nonnegative_pskel&);

    void
    total_surface_area_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    areas_3D_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    areas_3D_pskel* areas_3D_impl_;
    areas_3D_pskel (areas_3D_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* units_parser_;
    ::common::units_decimal_nonnegative_pskel* free_surface_area_parser_;
    ::xml_schema::parser_map* free_surface_area_parser_map_;

    ::common::units_decimal_nonnegative_pskel* total_surface_area_parser_;
    ::xml_schema::parser_map* total_surface_area_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::areas_3D_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[3UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class areas_2D_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    total_area (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::areas_2D*
    post_areas_2D () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::common::units_decimal_nonnegative_pskel& /* total_area */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* total_area */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    total_area_parser (::common::units_decimal_nonnegative_pskel&);

    void
    total_area_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    areas_2D_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    areas_2D_pskel* areas_2D_impl_;
    areas_2D_pskel (areas_2D_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* units_parser_;
    ::common::units_decimal_nonnegative_pskel* total_area_parser_;
    ::xml_schema::parser_map* total_area_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::areas_2D_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[2UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class volumes_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    fluid_volume (::common::units_decimal_nonnegative*);

    virtual void
    fluid_volume_fraction (::common::units_fraction*);

    virtual void
    solid_calcified_volume (::common::units_decimal_nonnegative*);

    virtual void
    solid_volume (::common::units_decimal_nonnegative*);

    virtual void
    solid_volume_fraction (::common::units_fraction*);

    virtual void
    total_volume (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::volumes*
    post_volumes () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::common::units_decimal_nonnegative_pskel& /* fluid_volume */,
             ::common::units_fraction_pskel& /* fluid_volume_fraction */,
             ::common::units_decimal_nonnegative_pskel& /* solid_calcified_volume */,
             ::common::units_decimal_nonnegative_pskel& /* solid_volume */,
             ::common::units_fraction_pskel& /* solid_volume_fraction */,
             ::common::units_decimal_nonnegative_pskel& /* total_volume */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* fluid_volume */,
                 ::xml_schema::parser_map& /* fluid_volume_fraction */,
                 ::xml_schema::parser_map& /* solid_calcified_volume */,
                 ::xml_schema::parser_map& /* solid_volume */,
                 ::xml_schema::parser_map& /* solid_volume_fraction */,
                 ::xml_schema::parser_map& /* total_volume */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    units_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    fluid_volume_parser (::common::units_decimal_nonnegative_pskel&);

    void
    fluid_volume_parser (::xml_schema::parser_map&);

    void
    fluid_volume_fraction_parser (::common::units_fraction_pskel&);

    void
    fluid_volume_fraction_parser (::xml_schema::parser_map&);

    void
    solid_calcified_volume_parser (::common::units_decimal_nonnegative_pskel&);

    void
    solid_calcified_volume_parser (::xml_schema::parser_map&);

    void
    solid_volume_parser (::common::units_decimal_nonnegative_pskel&);

    void
    solid_volume_parser (::xml_schema::parser_map&);

    void
    solid_volume_fraction_parser (::common::units_fraction_pskel&);

    void
    solid_volume_fraction_parser (::xml_schema::parser_map&);

    void
    total_volume_parser (::common::units_decimal_nonnegative_pskel&);

    void
    total_volume_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    volumes_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    volumes_pskel* volumes_impl_;
    volumes_pskel (volumes_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* units_parser_;
    ::common::units_decimal_nonnegative_pskel* fluid_volume_parser_;
    ::xml_schema::parser_map* fluid_volume_parser_map_;

    ::common::units_fraction_pskel* fluid_volume_fraction_parser_;
    ::xml_schema::parser_map* fluid_volume_fraction_parser_map_;

    ::common::units_decimal_nonnegative_pskel* solid_calcified_volume_parser_;
    ::xml_schema::parser_map* solid_calcified_volume_parser_map_;

    ::common::units_decimal_nonnegative_pskel* solid_volume_parser_;
    ::xml_schema::parser_map* solid_volume_parser_map_;

    ::common::units_fraction_pskel* solid_volume_fraction_parser_;
    ::xml_schema::parser_map* solid_volume_fraction_parser_map_;

    ::common::units_decimal_nonnegative_pskel* total_volume_parser_;
    ::xml_schema::parser_map* total_volume_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::volumes_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[7UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class geometrical_properties_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    parameters (::phenotype_common::geometrical_parameters*);

    virtual void
    lengths (::phenotype_common::lengths*);

    virtual void
    areas (::phenotype_common::areas_3D*);

    virtual void
    volumes (::phenotype_common::volumes*);

    virtual void
    cross_section (::phenotype_common::cross_section*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::geometrical_properties*
    post_geometrical_properties () = 0;

    // Parser construction API.
    //
    void
    parsers (::phenotype_common::geometrical_parameters_pskel& /* parameters */,
             ::phenotype_common::lengths_pskel& /* lengths */,
             ::phenotype_common::areas_3D_pskel& /* areas */,
             ::phenotype_common::volumes_pskel& /* volumes */,
             ::phenotype_common::cross_section_pskel& /* cross_section */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* parameters */,
                 ::xml_schema::parser_map& /* lengths */,
                 ::xml_schema::parser_map& /* areas */,
                 ::xml_schema::parser_map& /* volumes */,
                 ::xml_schema::parser_map& /* cross_section */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    parameters_parser (::phenotype_common::geometrical_parameters_pskel&);

    void
    parameters_parser (::xml_schema::parser_map&);

    void
    lengths_parser (::phenotype_common::lengths_pskel&);

    void
    lengths_parser (::xml_schema::parser_map&);

    void
    areas_parser (::phenotype_common::areas_3D_pskel&);

    void
    areas_parser (::xml_schema::parser_map&);

    void
    volumes_parser (::phenotype_common::volumes_pskel&);

    void
    volumes_parser (::xml_schema::parser_map&);

    void
    cross_section_parser (::phenotype_common::cross_section_pskel&);

    void
    cross_section_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    geometrical_properties_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    geometrical_properties_pskel* geometrical_properties_impl_;
    geometrical_properties_pskel (geometrical_properties_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::phenotype_common::geometrical_parameters_pskel* parameters_parser_;
    ::xml_schema::parser_map* parameters_parser_map_;

    ::phenotype_common::lengths_pskel* lengths_parser_;
    ::xml_schema::parser_map* lengths_parser_map_;

    ::phenotype_common::areas_3D_pskel* areas_parser_;
    ::xml_schema::parser_map* areas_parser_map_;

    ::phenotype_common::volumes_pskel* volumes_parser_;
    ::xml_schema::parser_map* volumes_parser_map_;

    ::phenotype_common::cross_section_pskel* cross_section_parser_;
    ::xml_schema::parser_map* cross_section_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::geometrical_properties_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class cross_section_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    parameters (::phenotype_common::geometrical_parameters*);

    virtual void
    lengths (::phenotype_common::lengths*);

    virtual void
    areas (::phenotype_common::areas_2D*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::cross_section*
    post_cross_section () = 0;

    // Parser construction API.
    //
    void
    parsers (::phenotype_common::geometrical_parameters_pskel& /* parameters */,
             ::phenotype_common::lengths_pskel& /* lengths */,
             ::phenotype_common::areas_2D_pskel& /* areas */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* parameters */,
                 ::xml_schema::parser_map& /* lengths */,
                 ::xml_schema::parser_map& /* areas */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    parameters_parser (::phenotype_common::geometrical_parameters_pskel&);

    void
    parameters_parser (::xml_schema::parser_map&);

    void
    lengths_parser (::phenotype_common::lengths_pskel&);

    void
    lengths_parser (::xml_schema::parser_map&);

    void
    areas_parser (::phenotype_common::areas_2D_pskel&);

    void
    areas_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cross_section_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    cross_section_pskel* cross_section_impl_;
    cross_section_pskel (cross_section_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::phenotype_common::geometrical_parameters_pskel* parameters_parser_;
    ::xml_schema::parser_map* parameters_parser_map_;

    ::phenotype_common::lengths_pskel* lengths_parser_;
    ::xml_schema::parser_map* lengths_parser_map_;

    ::phenotype_common::areas_2D_pskel* areas_parser_;
    ::xml_schema::parser_map* areas_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::cross_section_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class mass_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    biomass (::common::units_decimal_nonnegative*);

    virtual void
    fluid_mass (::common::units_decimal_nonnegative*);

    virtual void
    total_mass (::common::units_decimal_nonnegative*);

    virtual ::phenotype_common::mass*
    post_mass () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_nonnegative_pskel& /* biomass */,
             ::common::units_decimal_nonnegative_pskel& /* fluid_mass */,
             ::common::units_decimal_nonnegative_pskel& /* total_mass */);

    void
    parser_maps (::xml_schema::parser_map& /* biomass */,
                 ::xml_schema::parser_map& /* fluid_mass */,
                 ::xml_schema::parser_map& /* total_mass */);

    // Individual element parsers.
    //
    void
    biomass_parser (::common::units_decimal_nonnegative_pskel&);

    void
    biomass_parser (::xml_schema::parser_map&);

    void
    fluid_mass_parser (::common::units_decimal_nonnegative_pskel&);

    void
    fluid_mass_parser (::xml_schema::parser_map&);

    void
    total_mass_parser (::common::units_decimal_nonnegative_pskel&);

    void
    total_mass_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    mass_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    mass_pskel* mass_impl_;
    mass_pskel (mass_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_nonnegative_pskel* biomass_parser_;
    ::xml_schema::parser_map* biomass_parser_map_;

    ::common::units_decimal_nonnegative_pskel* fluid_mass_parser_;
    ::xml_schema::parser_map* fluid_mass_parser_map_;

    ::common::units_decimal_nonnegative_pskel* total_mass_parser_;
    ::xml_schema::parser_map* total_mass_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::phenotype_common::mass_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[3UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };
}

#include "phenotype_common-pskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PHENOTYPE_COMMON_PSKEL_HPP
