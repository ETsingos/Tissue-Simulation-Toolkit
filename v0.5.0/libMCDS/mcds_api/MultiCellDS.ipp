// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MULTI_CELL_DS_IPP
#define MULTI_CELL_DS_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

#include "metadata.ipp"

#include "cell_line.ipp"

#include "cell.ipp"

#include "microenvironment.ipp"

// MCDS_type
//

inline
MCDS_type::
MCDS_type ()
{
}

inline
MCDS_type::
MCDS_type (value_type v)
{
  value_ = v;
}

inline
void MCDS_type::
value (value_type v)
{
  value_ = v;
}

// MultiCellDS
//

inline
bool MultiCellDS::
version_present () const
{
  return this->version_present_;
}

inline
void MultiCellDS::
version_present (bool x)
{
  this->version_present_ = x;
}

inline
const ::std::string& MultiCellDS::
version () const
{
  return this->version_;
}

inline
::std::string& MultiCellDS::
version ()
{
  return this->version_;
}

inline
void MultiCellDS::
version (const ::std::string& x)
{
  this->version_ = x;
  this->version_present_ = true;
}

inline
bool MultiCellDS::
type_present () const
{
  return this->type_present_;
}

inline
void MultiCellDS::
type_present (bool x)
{
  this->type_present_ = x;
}

inline
const ::MCDS_type& MultiCellDS::
type () const
{
  return this->type_;
}

inline
::MCDS_type& MultiCellDS::
type ()
{
  return this->type_;
}

inline
void MultiCellDS::
type (const ::MCDS_type& x)
{
  this->type_ = x;
  this->type_present_ = true;
}

inline
const MultiCellDS::cell_line_sequence& MultiCellDS::
cell_line () const
{
  return this->cell_line_;
}

inline
MultiCellDS::cell_line_sequence& MultiCellDS::
cell_line ()
{
  return this->cell_line_;
}

inline
bool MultiCellDS::
metadata_present () const
{
  return this->metadata_ != 0;
}

inline
const ::metadata::metadata& MultiCellDS::
metadata () const
{
  return *this->metadata_;
}

inline
::metadata::metadata& MultiCellDS::
metadata ()
{
  return *this->metadata_;
}

inline
void MultiCellDS::
metadata (::metadata::metadata* x)
{
  delete this->metadata_;
  this->metadata_ = x;
}

inline
::metadata::metadata* MultiCellDS::
metadata_detach ()
{
  ::metadata::metadata* r = this->metadata_;
  this->metadata_ = 0;
  return r;
}

inline
bool MultiCellDS::
microenvironment_present () const
{
  return this->microenvironment_ != 0;
}

inline
const ::microenvironment::microenvironment& MultiCellDS::
microenvironment () const
{
  return *this->microenvironment_;
}

inline
::microenvironment::microenvironment& MultiCellDS::
microenvironment ()
{
  return *this->microenvironment_;
}

inline
void MultiCellDS::
microenvironment (::microenvironment::microenvironment* x)
{
  delete this->microenvironment_;
  this->microenvironment_ = x;
}

inline
::microenvironment::microenvironment* MultiCellDS::
microenvironment_detach ()
{
  ::microenvironment::microenvironment* r = this->microenvironment_;
  this->microenvironment_ = 0;
  return r;
}

inline
bool MultiCellDS::
cellular_information_present () const
{
  return this->cellular_information_ != 0;
}

inline
const ::cell::cellular_information& MultiCellDS::
cellular_information () const
{
  return *this->cellular_information_;
}

inline
::cell::cellular_information& MultiCellDS::
cellular_information ()
{
  return *this->cellular_information_;
}

inline
void MultiCellDS::
cellular_information (::cell::cellular_information* x)
{
  delete this->cellular_information_;
  this->cellular_information_ = x;
}

inline
::cell::cellular_information* MultiCellDS::
cellular_information_detach ()
{
  ::cell::cellular_information* r = this->cellular_information_;
  this->cellular_information_ = 0;
  return r;
}

// Begin epilogue.
//
//
// End epilogue.

#endif // MULTI_CELL_DS_IPP
