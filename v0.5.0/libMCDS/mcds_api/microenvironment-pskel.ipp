// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace microenvironment
{
  // domain_pskel
  //

  inline
  void domain_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  inline
  void domain_pskel::
  variables_parser (::variables::list_of_variables_pskel& p)
  {
    this->variables_parser_ = &p;
  }

  inline
  void domain_pskel::
  variables_parser (::xml_schema::parser_map& m)
  {
    this->variables_parser_map_ = &m;
  }

  inline
  void domain_pskel::
  experimental_condition_parser (::variables::experimental_conditions_pskel& p)
  {
    this->experimental_condition_parser_ = &p;
  }

  inline
  void domain_pskel::
  experimental_condition_parser (::xml_schema::parser_map& m)
  {
    this->experimental_condition_parser_map_ = &m;
  }

  inline
  void domain_pskel::
  mesh_parser (::mesh::mesh_pskel& p)
  {
    this->mesh_parser_ = &p;
  }

  inline
  void domain_pskel::
  mesh_parser (::xml_schema::parser_map& m)
  {
    this->mesh_parser_map_ = &m;
  }

  inline
  void domain_pskel::
  data_parser (::variables::data_pskel& p)
  {
    this->data_parser_ = &p;
  }

  inline
  void domain_pskel::
  data_parser (::xml_schema::parser_map& m)
  {
    this->data_parser_map_ = &m;
  }

  inline
  void domain_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void domain_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void domain_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::variables::list_of_variables_pskel& variables,
           ::variables::experimental_conditions_pskel& experimental_condition,
           ::mesh::mesh_pskel& mesh,
           ::variables::data_pskel& data,
           ::common::custom_pskel& custom)
  {
    this->name_parser_ = &name;
    this->variables_parser_ = &variables;
    this->experimental_condition_parser_ = &experimental_condition;
    this->mesh_parser_ = &mesh;
    this->data_parser_ = &data;
    this->custom_parser_ = &custom;
  }

  inline
  void domain_pskel::
  parser_maps (::xml_schema::parser_map& variables,
               ::xml_schema::parser_map& experimental_condition,
               ::xml_schema::parser_map& mesh,
               ::xml_schema::parser_map& data,
               ::xml_schema::parser_map& custom)
  {
    this->variables_parser_map_ = &variables;
    this->experimental_condition_parser_map_ = &experimental_condition;
    this->mesh_parser_map_ = &mesh;
    this->data_parser_map_ = &data;
    this->custom_parser_map_ = &custom;
  }

  inline
  domain_pskel::
  domain_pskel ()
  : domain_impl_ (0),
    name_parser_ (0),
    variables_parser_ (0),
    variables_parser_map_ (0),
    experimental_condition_parser_ (0),
    experimental_condition_parser_map_ (0),
    mesh_parser_ (0),
    mesh_parser_map_ (0),
    data_parser_ (0),
    data_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (5UL, v_all_first_)
  {
  }

  inline
  domain_pskel::
  domain_pskel (domain_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    domain_impl_ (impl),
    name_parser_ (0),
    variables_parser_ (0),
    variables_parser_map_ (0),
    experimental_condition_parser_ (0),
    experimental_condition_parser_map_ (0),
    mesh_parser_ (0),
    mesh_parser_map_ (0),
    data_parser_ (0),
    data_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (5UL, v_all_first_)
  {
  }

  // microenvironment_pskel
  //

  inline
  void microenvironment_pskel::
  domain_parser (::microenvironment::domain_pskel& p)
  {
    this->domain_parser_ = &p;
  }

  inline
  void microenvironment_pskel::
  domain_parser (::xml_schema::parser_map& m)
  {
    this->domain_parser_map_ = &m;
  }

  inline
  void microenvironment_pskel::
  vascular_network_parser (::vascular::vascular_network_pskel& p)
  {
    this->vascular_network_parser_ = &p;
  }

  inline
  void microenvironment_pskel::
  vascular_network_parser (::xml_schema::parser_map& m)
  {
    this->vascular_network_parser_map_ = &m;
  }

  inline
  void microenvironment_pskel::
  basement_membrane_parser (::basement::basement_membrane_pskel& p)
  {
    this->basement_membrane_parser_ = &p;
  }

  inline
  void microenvironment_pskel::
  basement_membrane_parser (::xml_schema::parser_map& m)
  {
    this->basement_membrane_parser_map_ = &m;
  }

  inline
  void microenvironment_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void microenvironment_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void microenvironment_pskel::
  parsers (::microenvironment::domain_pskel& domain,
           ::vascular::vascular_network_pskel& vascular_network,
           ::basement::basement_membrane_pskel& basement_membrane,
           ::common::custom_pskel& custom)
  {
    this->domain_parser_ = &domain;
    this->vascular_network_parser_ = &vascular_network;
    this->basement_membrane_parser_ = &basement_membrane;
    this->custom_parser_ = &custom;
  }

  inline
  void microenvironment_pskel::
  parser_maps (::xml_schema::parser_map& domain,
               ::xml_schema::parser_map& vascular_network,
               ::xml_schema::parser_map& basement_membrane,
               ::xml_schema::parser_map& custom)
  {
    this->domain_parser_map_ = &domain;
    this->vascular_network_parser_map_ = &vascular_network;
    this->basement_membrane_parser_map_ = &basement_membrane;
    this->custom_parser_map_ = &custom;
  }

  inline
  microenvironment_pskel::
  microenvironment_pskel ()
  : microenvironment_impl_ (0),
    domain_parser_ (0),
    domain_parser_map_ (0),
    vascular_network_parser_ (0),
    vascular_network_parser_map_ (0),
    basement_membrane_parser_ (0),
    basement_membrane_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  microenvironment_pskel::
  microenvironment_pskel (microenvironment_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    microenvironment_impl_ (impl),
    domain_parser_ (0),
    domain_parser_map_ (0),
    vascular_network_parser_ (0),
    vascular_network_parser_map_ (0),
    basement_membrane_parser_ (0),
    basement_membrane_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

