// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_CYCLE_SSKEL_HPP
#define CELL_CYCLE_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_SERIALIZER_VALIDATION
#error the XSD/e runtime uses validation while the generated code does not (reconfigure the runtime or remove --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace cell_cycle
{
  class death_type_sskel;
  class death_rate_type_sskel;
  class cell_cycle_arrest_sskel;
  class transition_sskel;
  class cell_cycle_phase_sskel;
  class summary_elements_sskel;
  class cell_cycle_sskel;
  class cell_death_sskel;
  class arrest_type_sskel;
  class arrest_condition_sskel;
  class cycles_and_deaths_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>

#include <xsde/cxx/serializer/non-validating/serializer.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "cell_cycle.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::non_validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::non_validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::non_validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::non_validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::non_validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::non_validating::byte_sskel;
  using ::xsde::cxx::serializer::non_validating::byte_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::non_validating::short_sskel;
  using ::xsde::cxx::serializer::non_validating::short_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::non_validating::int_sskel;
  using ::xsde::cxx::serializer::non_validating::int_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::non_validating::long_sskel;
  using ::xsde::cxx::serializer::non_validating::long_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::non_validating::integer_sskel;
  using ::xsde::cxx::serializer::non_validating::integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::boolean_sskel;
  using ::xsde::cxx::serializer::non_validating::boolean_simpl;

  using ::xsde::cxx::serializer::non_validating::float_sskel;
  using ::xsde::cxx::serializer::non_validating::float_simpl;

  using ::xsde::cxx::serializer::non_validating::double_sskel;
  using ::xsde::cxx::serializer::non_validating::double_simpl;

  using ::xsde::cxx::serializer::non_validating::decimal_sskel;
  using ::xsde::cxx::serializer::non_validating::decimal_simpl;

  using ::xsde::cxx::serializer::non_validating::string_sskel;
  using ::xsde::cxx::serializer::non_validating::string_simpl;

  using ::xsde::cxx::serializer::non_validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::non_validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::non_validating::token_sskel;
  using ::xsde::cxx::serializer::non_validating::token_simpl;

  using ::xsde::cxx::serializer::non_validating::name_sskel;
  using ::xsde::cxx::serializer::non_validating::name_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::non_validating::ncname_sskel;
  using ::xsde::cxx::serializer::non_validating::ncname_simpl;

  using ::xsde::cxx::serializer::non_validating::language_sskel;
  using ::xsde::cxx::serializer::non_validating::language_simpl;

  using ::xsde::cxx::serializer::non_validating::id_sskel;
  using ::xsde::cxx::serializer::non_validating::id_simpl;

  using ::xsde::cxx::serializer::non_validating::idref_sskel;
  using ::xsde::cxx::serializer::non_validating::idref_simpl;

  using ::xsde::cxx::serializer::non_validating::idrefs_sskel;
  using ::xsde::cxx::serializer::non_validating::idrefs_simpl;

  using ::xsde::cxx::serializer::non_validating::uri_sskel;
  using ::xsde::cxx::serializer::non_validating::uri_simpl;

  using ::xsde::cxx::serializer::non_validating::qname_sskel;
  using ::xsde::cxx::serializer::non_validating::qname_simpl;

  using ::xsde::cxx::serializer::non_validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::date_sskel;
  using ::xsde::cxx::serializer::non_validating::date_simpl;

  using ::xsde::cxx::serializer::non_validating::date_time_sskel;
  using ::xsde::cxx::serializer::non_validating::date_time_simpl;

  using ::xsde::cxx::serializer::non_validating::duration_sskel;
  using ::xsde::cxx::serializer::non_validating::duration_simpl;

  using ::xsde::cxx::serializer::non_validating::gday_sskel;
  using ::xsde::cxx::serializer::non_validating::gday_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::non_validating::time_sskel;
  using ::xsde::cxx::serializer::non_validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "common-sskel.hpp"

#include "variables-sskel.hpp"

#include "phenotype_base-sskel.hpp"

namespace cell_cycle
{
  class death_type_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::death_type&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    death_type_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    death_type_sskel* death_type_impl_;
    death_type_sskel (death_type_sskel*, void*);
  };

  class death_rate_type_sskel: public ::common::units_decimal_nonnegative_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::death_rate_type&) = 0;

    // Attributes.
    //
    virtual const ::cell_cycle::death_type&
    type () = 0;

    virtual bool
    any_attribute_next ();

    virtual void
    any_attribute (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any_attribute ();

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::cell_cycle::death_type_sskel& /* type */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::cell_cycle::death_type_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    death_rate_type_sskel (::common::units_decimal_nonnegative_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_decimal_nonnegative&);

    virtual void
    _serialize_attributes ();

    protected:
    death_rate_type_sskel* death_rate_type_impl_;
    death_rate_type_sskel (death_rate_type_sskel*, void*);

    protected:
    ::cell_cycle::death_type_sskel* type_serializer_;
  };

  class cell_cycle_arrest_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::cell_cycle_arrest&) = 0;

    // Elements.
    //
    virtual bool
    condition_present ();

    virtual const ::cell_cycle::arrest_condition&
    condition () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::cell_cycle::arrest_condition_sskel& /* condition */);

    void
    serializer_maps (::xml_schema::serializer_map& /* condition */);

    // Individual element serializers.
    //
    void
    condition_serializer (::cell_cycle::arrest_condition_sskel&);

    void
    condition_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_cycle_arrest_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    cell_cycle_arrest_sskel* cell_cycle_arrest_impl_;
    cell_cycle_arrest_sskel (cell_cycle_arrest_sskel*, void*);

    protected:
    ::cell_cycle::arrest_condition_sskel* condition_serializer_;
    ::xml_schema::serializer_map* condition_serializer_map_;
  };

  class transition_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::transition&) = 0;

    // Elements.
    //
    virtual bool
    checkpoint_failure_probability_present ();

    virtual const ::common::units_decimal&
    checkpoint_failure_probability () = 0;

    virtual bool
    subsequent_phase_present ();

    virtual unsigned long long
    subsequent_phase () = 0;

    virtual bool
    threshold_next ();

    virtual const ::variables::transition_threshold&
    threshold () = 0;

    virtual bool
    transition_rate_present ();

    virtual const ::common::units_decimal&
    transition_rate () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_sskel& /* checkpoint_failure_probability */,
                 ::xml_schema::unsigned_long_sskel& /* subsequent_phase */,
                 ::variables::transition_threshold_sskel& /* threshold */,
                 ::common::units_decimal_sskel& /* transition_rate */);

    void
    serializer_maps (::xml_schema::serializer_map& /* checkpoint_failure_probability */,
                     ::xml_schema::serializer_map& /* subsequent_phase */,
                     ::xml_schema::serializer_map& /* threshold */,
                     ::xml_schema::serializer_map& /* transition_rate */);

    // Individual element serializers.
    //
    void
    checkpoint_failure_probability_serializer (::common::units_decimal_sskel&);

    void
    checkpoint_failure_probability_serializer (::xml_schema::serializer_map&);

    void
    subsequent_phase_serializer (::xml_schema::unsigned_long_sskel&);

    void
    subsequent_phase_serializer (::xml_schema::serializer_map&);

    void
    threshold_serializer (::variables::transition_threshold_sskel&);

    void
    threshold_serializer (::xml_schema::serializer_map&);

    void
    transition_rate_serializer (::common::units_decimal_sskel&);

    void
    transition_rate_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    transition_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    transition_sskel* transition_impl_;
    transition_sskel (transition_sskel*, void*);

    protected:
    ::common::units_decimal_sskel* checkpoint_failure_probability_serializer_;
    ::xml_schema::serializer_map* checkpoint_failure_probability_serializer_map_;

    ::xml_schema::unsigned_long_sskel* subsequent_phase_serializer_;
    ::xml_schema::serializer_map* subsequent_phase_serializer_map_;

    ::variables::transition_threshold_sskel* threshold_serializer_;
    ::xml_schema::serializer_map* threshold_serializer_map_;

    ::common::units_decimal_sskel* transition_rate_serializer_;
    ::xml_schema::serializer_map* transition_rate_serializer_map_;
  };

  class cell_cycle_phase_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::cell_cycle_phase&) = 0;

    // Attributes.
    //
    virtual ::std::string
    name () = 0;

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID () = 0;

    virtual bool
    any_attribute_next ();

    virtual void
    any_attribute (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any_attribute ();

    // Elements.
    //
    virtual bool
    birth_rate_present ();

    virtual const ::common::units_decimal_nonnegative&
    birth_rate () = 0;

    virtual bool
    duration_present ();

    virtual const ::common::units_decimal_nonnegative&
    duration () = 0;

    virtual bool
    death_rate_next ();

    virtual const ::cell_cycle::death_rate_type&
    death_rate () = 0;

    virtual bool
    net_birth_rate_present ();

    virtual const ::common::units_decimal&
    net_birth_rate () = 0;

    virtual bool
    population_doubling_time_present ();

    virtual const ::common::units_decimal_nonnegative&
    population_doubling_time () = 0;

    virtual bool
    cell_cycle_arrest_present ();

    virtual const ::cell_cycle::cell_cycle_arrest&
    cell_cycle_arrest () = 0;

    virtual bool
    transition_next ();

    virtual const ::cell_cycle::transition&
    transition () = 0;

    virtual bool
    cell_part_next ();

    virtual const ::phenotype_base::cell_parts&
    cell_part () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* name */,
                 ::xml_schema::unsigned_long_sskel& /* ID */,
                 ::common::units_decimal_nonnegative_sskel& /* birth_rate */,
                 ::common::units_decimal_nonnegative_sskel& /* duration */,
                 ::cell_cycle::death_rate_type_sskel& /* death_rate */,
                 ::common::units_decimal_sskel& /* net_birth_rate */,
                 ::common::units_decimal_nonnegative_sskel& /* population_doubling_time */,
                 ::cell_cycle::cell_cycle_arrest_sskel& /* cell_cycle_arrest */,
                 ::cell_cycle::transition_sskel& /* transition */,
                 ::phenotype_base::cell_parts_sskel& /* cell_part */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* birth_rate */,
                     ::xml_schema::serializer_map& /* duration */,
                     ::xml_schema::serializer_map& /* death_rate */,
                     ::xml_schema::serializer_map& /* net_birth_rate */,
                     ::xml_schema::serializer_map& /* population_doubling_time */,
                     ::xml_schema::serializer_map& /* cell_cycle_arrest */,
                     ::xml_schema::serializer_map& /* transition */,
                     ::xml_schema::serializer_map& /* cell_part */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    name_serializer (::xml_schema::string_sskel&);

    void
    ID_serializer (::xml_schema::unsigned_long_sskel&);

    // Individual element serializers.
    //
    void
    birth_rate_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    birth_rate_serializer (::xml_schema::serializer_map&);

    void
    duration_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    duration_serializer (::xml_schema::serializer_map&);

    void
    death_rate_serializer (::cell_cycle::death_rate_type_sskel&);

    void
    death_rate_serializer (::xml_schema::serializer_map&);

    void
    net_birth_rate_serializer (::common::units_decimal_sskel&);

    void
    net_birth_rate_serializer (::xml_schema::serializer_map&);

    void
    population_doubling_time_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    population_doubling_time_serializer (::xml_schema::serializer_map&);

    void
    cell_cycle_arrest_serializer (::cell_cycle::cell_cycle_arrest_sskel&);

    void
    cell_cycle_arrest_serializer (::xml_schema::serializer_map&);

    void
    transition_serializer (::cell_cycle::transition_sskel&);

    void
    transition_serializer (::xml_schema::serializer_map&);

    void
    cell_part_serializer (::phenotype_base::cell_parts_sskel&);

    void
    cell_part_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_cycle_phase_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    cell_cycle_phase_sskel* cell_cycle_phase_impl_;
    cell_cycle_phase_sskel (cell_cycle_phase_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::unsigned_long_sskel* ID_serializer_;
    ::common::units_decimal_nonnegative_sskel* birth_rate_serializer_;
    ::xml_schema::serializer_map* birth_rate_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* duration_serializer_;
    ::xml_schema::serializer_map* duration_serializer_map_;

    ::cell_cycle::death_rate_type_sskel* death_rate_serializer_;
    ::xml_schema::serializer_map* death_rate_serializer_map_;

    ::common::units_decimal_sskel* net_birth_rate_serializer_;
    ::xml_schema::serializer_map* net_birth_rate_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* population_doubling_time_serializer_;
    ::xml_schema::serializer_map* population_doubling_time_serializer_map_;

    ::cell_cycle::cell_cycle_arrest_sskel* cell_cycle_arrest_serializer_;
    ::xml_schema::serializer_map* cell_cycle_arrest_serializer_map_;

    ::cell_cycle::transition_sskel* transition_serializer_;
    ::xml_schema::serializer_map* transition_serializer_map_;

    ::phenotype_base::cell_parts_sskel* cell_part_serializer_;
    ::xml_schema::serializer_map* cell_part_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class summary_elements_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::summary_elements&) = 0;

    // Elements.
    //
    virtual bool
    birth_rate_present ();

    virtual const ::common::units_decimal_nonnegative&
    birth_rate () = 0;

    virtual bool
    duration_present ();

    virtual const ::common::units_decimal_nonnegative&
    duration () = 0;

    virtual bool
    death_rate_next ();

    virtual const ::cell_cycle::death_rate_type&
    death_rate () = 0;

    virtual bool
    net_birth_rate_present ();

    virtual const ::common::units_decimal&
    net_birth_rate () = 0;

    virtual bool
    population_doubling_time_present ();

    virtual const ::common::units_decimal_nonnegative&
    population_doubling_time () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_nonnegative_sskel& /* birth_rate */,
                 ::common::units_decimal_nonnegative_sskel& /* duration */,
                 ::cell_cycle::death_rate_type_sskel& /* death_rate */,
                 ::common::units_decimal_sskel& /* net_birth_rate */,
                 ::common::units_decimal_nonnegative_sskel& /* population_doubling_time */);

    void
    serializer_maps (::xml_schema::serializer_map& /* birth_rate */,
                     ::xml_schema::serializer_map& /* duration */,
                     ::xml_schema::serializer_map& /* death_rate */,
                     ::xml_schema::serializer_map& /* net_birth_rate */,
                     ::xml_schema::serializer_map& /* population_doubling_time */);

    // Individual element serializers.
    //
    void
    birth_rate_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    birth_rate_serializer (::xml_schema::serializer_map&);

    void
    duration_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    duration_serializer (::xml_schema::serializer_map&);

    void
    death_rate_serializer (::cell_cycle::death_rate_type_sskel&);

    void
    death_rate_serializer (::xml_schema::serializer_map&);

    void
    net_birth_rate_serializer (::common::units_decimal_sskel&);

    void
    net_birth_rate_serializer (::xml_schema::serializer_map&);

    void
    population_doubling_time_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    population_doubling_time_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    summary_elements_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    summary_elements_sskel* summary_elements_impl_;
    summary_elements_sskel (summary_elements_sskel*, void*);

    protected:
    ::common::units_decimal_nonnegative_sskel* birth_rate_serializer_;
    ::xml_schema::serializer_map* birth_rate_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* duration_serializer_;
    ::xml_schema::serializer_map* duration_serializer_map_;

    ::cell_cycle::death_rate_type_sskel* death_rate_serializer_;
    ::xml_schema::serializer_map* death_rate_serializer_map_;

    ::common::units_decimal_sskel* net_birth_rate_serializer_;
    ::xml_schema::serializer_map* net_birth_rate_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* population_doubling_time_serializer_;
    ::xml_schema::serializer_map* population_doubling_time_serializer_map_;
  };

  class cell_cycle_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::cell_cycle&) = 0;

    // Attributes.
    //
    virtual ::std::string
    model () = 0;

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID () = 0;

    virtual bool
    any_attribute_next ();

    virtual void
    any_attribute (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any_attribute ();

    // Elements.
    //
    virtual bool
    cell_cycle_phase_next ();

    virtual const ::cell_cycle::cell_cycle_phase&
    cell_cycle_phase () = 0;

    virtual bool
    cell_death_next ();

    virtual const ::cell_cycle::cell_death&
    cell_death () = 0;

    virtual bool
    summary_elements_present ();

    virtual const ::cell_cycle::summary_elements&
    summary_elements () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* model */,
                 ::xml_schema::unsigned_long_sskel& /* ID */,
                 ::cell_cycle::cell_cycle_phase_sskel& /* cell_cycle_phase */,
                 ::cell_cycle::cell_death_sskel& /* cell_death */,
                 ::cell_cycle::summary_elements_sskel& /* summary_elements */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* cell_cycle_phase */,
                     ::xml_schema::serializer_map& /* cell_death */,
                     ::xml_schema::serializer_map& /* summary_elements */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    model_serializer (::xml_schema::string_sskel&);

    void
    ID_serializer (::xml_schema::unsigned_long_sskel&);

    // Individual element serializers.
    //
    void
    cell_cycle_phase_serializer (::cell_cycle::cell_cycle_phase_sskel&);

    void
    cell_cycle_phase_serializer (::xml_schema::serializer_map&);

    void
    cell_death_serializer (::cell_cycle::cell_death_sskel&);

    void
    cell_death_serializer (::xml_schema::serializer_map&);

    void
    summary_elements_serializer (::cell_cycle::summary_elements_sskel&);

    void
    summary_elements_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_cycle_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    cell_cycle_sskel* cell_cycle_impl_;
    cell_cycle_sskel (cell_cycle_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* model_serializer_;
    ::xml_schema::unsigned_long_sskel* ID_serializer_;
    ::cell_cycle::cell_cycle_phase_sskel* cell_cycle_phase_serializer_;
    ::xml_schema::serializer_map* cell_cycle_phase_serializer_map_;

    ::cell_cycle::cell_death_sskel* cell_death_serializer_;
    ::xml_schema::serializer_map* cell_death_serializer_map_;

    ::cell_cycle::summary_elements_sskel* summary_elements_serializer_;
    ::xml_schema::serializer_map* summary_elements_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class cell_death_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::cell_death&) = 0;

    // Attributes.
    //
    virtual const ::cell_cycle::death_type&
    type () = 0;

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID () = 0;

    virtual bool
    any_attribute_next ();

    virtual void
    any_attribute (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any_attribute ();

    // Elements.
    //
    virtual const ::common::units_decimal&
    duration () = 0;

    virtual bool
    cell_part_next ();

    virtual const ::phenotype_base::cell_parts&
    cell_part () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::cell_cycle::death_type_sskel& /* type */,
                 ::xml_schema::unsigned_long_sskel& /* ID */,
                 ::common::units_decimal_sskel& /* duration */,
                 ::phenotype_base::cell_parts_sskel& /* cell_part */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* duration */,
                     ::xml_schema::serializer_map& /* cell_part */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::cell_cycle::death_type_sskel&);

    void
    ID_serializer (::xml_schema::unsigned_long_sskel&);

    // Individual element serializers.
    //
    void
    duration_serializer (::common::units_decimal_sskel&);

    void
    duration_serializer (::xml_schema::serializer_map&);

    void
    cell_part_serializer (::phenotype_base::cell_parts_sskel&);

    void
    cell_part_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_death_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    cell_death_sskel* cell_death_impl_;
    cell_death_sskel (cell_death_sskel*, void*);

    protected:
    ::cell_cycle::death_type_sskel* type_serializer_;
    ::xml_schema::unsigned_long_sskel* ID_serializer_;
    ::common::units_decimal_sskel* duration_serializer_;
    ::xml_schema::serializer_map* duration_serializer_map_;

    ::phenotype_base::cell_parts_sskel* cell_part_serializer_;
    ::xml_schema::serializer_map* cell_part_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class arrest_type_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::arrest_type&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    arrest_type_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    arrest_type_sskel* arrest_type_impl_;
    arrest_type_sskel (arrest_type_sskel*, void*);
  };

  class arrest_condition_sskel: public ::common::units_decimal_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::arrest_condition&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual const ::cell_cycle::arrest_type&
    type () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::cell_cycle::arrest_type_sskel& /* type */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::cell_cycle::arrest_type_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    arrest_condition_sskel (::common::units_decimal_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_decimal&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    arrest_condition_sskel* arrest_condition_impl_;
    arrest_condition_sskel (arrest_condition_sskel*, void*);

    protected:
    ::cell_cycle::arrest_type_sskel* type_serializer_;
  };

  class cycles_and_deaths_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell_cycle::cycles_and_deaths&) = 0;

    // Elements.
    //
    virtual bool
    cell_cycle_next ();

    virtual const ::cell_cycle::cell_cycle&
    cell_cycle () = 0;

    virtual bool
    cell_death_next ();

    virtual const ::cell_cycle::cell_death&
    cell_death () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::cell_cycle::cell_cycle_sskel& /* cell_cycle */,
                 ::cell_cycle::cell_death_sskel& /* cell_death */);

    void
    serializer_maps (::xml_schema::serializer_map& /* cell_cycle */,
                     ::xml_schema::serializer_map& /* cell_death */);

    // Individual element serializers.
    //
    void
    cell_cycle_serializer (::cell_cycle::cell_cycle_sskel&);

    void
    cell_cycle_serializer (::xml_schema::serializer_map&);

    void
    cell_death_serializer (::cell_cycle::cell_death_sskel&);

    void
    cell_death_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cycles_and_deaths_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    cycles_and_deaths_sskel* cycles_and_deaths_impl_;
    cycles_and_deaths_sskel (cycles_and_deaths_sskel*, void*);

    protected:
    ::cell_cycle::cell_cycle_sskel* cell_cycle_serializer_;
    ::xml_schema::serializer_map* cell_cycle_serializer_map_;

    ::cell_cycle::cell_death_sskel* cell_death_serializer_;
    ::xml_schema::serializer_map* cell_death_serializer_map_;
  };
}

#include "cell_cycle-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // CELL_CYCLE_SSKEL_HPP
