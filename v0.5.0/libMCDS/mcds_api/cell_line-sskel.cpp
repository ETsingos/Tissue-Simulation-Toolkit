// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell_line-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

namespace cell_line
{
  // cell_line_sskel
  //

  bool cell_line_sskel::
  ID_present ()
  {
    return this->cell_line_impl_ ? this->cell_line_impl_->ID_present () : false;
  }

  bool cell_line_sskel::
  label_present ()
  {
    return this->cell_line_impl_ ? this->cell_line_impl_->label_present () : false;
  }

  bool cell_line_sskel::
  curated_present ()
  {
    return this->cell_line_impl_ ? this->cell_line_impl_->curated_present () : false;
  }

  bool cell_line_sskel::
  metadata_present ()
  {
    return this->cell_line_impl_ ? this->cell_line_impl_->metadata_present () : false;
  }

  bool cell_line_sskel::
  phenotype_dataset_next ()
  {
    return this->cell_line_impl_ ? this->cell_line_impl_->phenotype_dataset_next () : false;
  }

  bool cell_line_sskel::
  custom_present ()
  {
    return this->cell_line_impl_ ? this->cell_line_impl_->custom_present () : false;
  }

  void cell_line_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    if (this->label_serializer_)
      this->label_serializer_->_reset ();

    if (this->curated_serializer_)
      this->curated_serializer_->_reset ();

    this->resetting_ = true;

    if (this->metadata_serializer_)
      this->metadata_serializer_->_reset ();

    if (this->metadata_serializer_map_)
      this->metadata_serializer_map_->reset ();

    if (this->phenotype_dataset_serializer_)
      this->phenotype_dataset_serializer_->_reset ();

    if (this->phenotype_dataset_serializer_map_)
      this->phenotype_dataset_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_line_sskel::
  _static_type ()
  {
    return "cell_line cell_line";
  }

  const char* cell_line_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cell_line_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      const ::std::string& r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    // label
    //
    if (this->label_present ())
    {
      const ::std::string& r = this->label ();

      if (this->label_serializer_)
      {
        this->label_serializer_->pre (r);
        this->_start_attribute ("label");
        this->label_serializer_->_pre_impl (ctx);
        this->label_serializer_->_serialize_content ();
        this->label_serializer_->_post_impl ();
        this->_end_attribute ();
        this->label_serializer_->post ();
      }
    }

    // curated
    //
    if (this->curated_present ())
    {
      bool r = this->curated ();

      if (this->curated_serializer_)
      {
        this->curated_serializer_->pre (r);
        this->_start_attribute ("curated");
        this->curated_serializer_->_pre_impl (ctx);
        this->curated_serializer_->_serialize_content ();
        this->curated_serializer_->_post_impl ();
        this->_end_attribute ();
        this->curated_serializer_->post ();
      }
    }
  }

  void cell_line_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // metadata
    //
    if (this->metadata_present ())
    {
      ctx.type_id (0);
      const ::metadata::metadata& r = this->metadata ();

      const void* t = ctx.type_id ();
      ::metadata::metadata_sskel* s = 0;

      if (t == 0 && this->metadata_serializer_ != 0)
        s = this->metadata_serializer_;
      else if (this->metadata_serializer_map_ != 0)
        s = static_cast< ::metadata::metadata_sskel* > (
          this->metadata_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::metadata::metadata_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("metadata");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // phenotype_dataset
    //
    while (this->phenotype_dataset_next ())
    {
      ctx.type_id (0);
      const ::phenotype_dataset::phenotype_dataset& r = this->phenotype_dataset ();

      const void* t = ctx.type_id ();
      ::phenotype_dataset::phenotype_dataset_sskel* s = 0;

      if (t == 0 && this->phenotype_dataset_serializer_ != 0)
        s = this->phenotype_dataset_serializer_;
      else if (this->phenotype_dataset_serializer_map_ != 0)
        s = static_cast< ::phenotype_dataset::phenotype_dataset_sskel* > (
          this->phenotype_dataset_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_dataset::phenotype_dataset_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("phenotype_dataset");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // DCLs_sskel
  //

  void DCLs_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->cell_line_serializer_)
      this->cell_line_serializer_->_reset ();

    if (this->cell_line_serializer_map_)
      this->cell_line_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* DCLs_sskel::
  _static_type ()
  {
    return "DCLs cell_line";
  }

  const char* DCLs_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void DCLs_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // cell_line
    //
    while (this->cell_line_next ())
    {
      ctx.type_id (0);
      const ::cell_line::cell_line& r = this->cell_line ();

      const void* t = ctx.type_id ();
      ::cell_line::cell_line_sskel* s = 0;

      if (t == 0 && this->cell_line_serializer_ != 0)
        s = this->cell_line_serializer_;
      else if (this->cell_line_serializer_map_ != 0)
        s = static_cast< ::cell_line::cell_line_sskel* > (
          this->cell_line_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_line::cell_line_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_line");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

