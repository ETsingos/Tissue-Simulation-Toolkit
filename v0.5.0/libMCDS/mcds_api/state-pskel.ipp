// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace state
{
  // phase_name_pskel
  //

  inline
  void phase_name_pskel::
  GO_ID_parser (::xml_schema::string_pskel& p)
  {
    this->GO_ID_parser_ = &p;
  }

  inline
  void phase_name_pskel::
  parsers (::xml_schema::string_pskel& GO_ID)
  {
    this->GO_ID_parser_ = &GO_ID;
  }

  inline
  phase_name_pskel::
  phase_name_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    phase_name_impl_ (0),
    GO_ID_parser_ (0)
  {
  }

  inline
  phase_name_pskel::
  phase_name_pskel (phase_name_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    phase_name_impl_ (impl),
    GO_ID_parser_ (0)
  {
  }

  // phase_pskel
  //

  inline
  void phase_pskel::
  model_name_parser (::xml_schema::string_pskel& p)
  {
    this->model_name_parser_ = &p;
  }

  inline
  void phase_pskel::
  model_name_parser (::xml_schema::parser_map& m)
  {
    this->model_name_parser_map_ = &m;
  }

  inline
  void phase_pskel::
  phase_name_parser (::state::phase_name_pskel& p)
  {
    this->phase_name_parser_ = &p;
  }

  inline
  void phase_pskel::
  phase_name_parser (::xml_schema::parser_map& m)
  {
    this->phase_name_parser_map_ = &m;
  }

  inline
  void phase_pskel::
  cell_cycle_model_index_parser (::xml_schema::unsigned_short_pskel& p)
  {
    this->cell_cycle_model_index_parser_ = &p;
  }

  inline
  void phase_pskel::
  cell_cycle_model_index_parser (::xml_schema::parser_map& m)
  {
    this->cell_cycle_model_index_parser_map_ = &m;
  }

  inline
  void phase_pskel::
  cell_cycle_phase_index_parser (::xml_schema::unsigned_short_pskel& p)
  {
    this->cell_cycle_phase_index_parser_ = &p;
  }

  inline
  void phase_pskel::
  cell_cycle_phase_index_parser (::xml_schema::parser_map& m)
  {
    this->cell_cycle_phase_index_parser_map_ = &m;
  }

  inline
  void phase_pskel::
  elapsed_time_parser (::common::units_decimal_pskel& p)
  {
    this->elapsed_time_parser_ = &p;
  }

  inline
  void phase_pskel::
  elapsed_time_parser (::xml_schema::parser_map& m)
  {
    this->elapsed_time_parser_map_ = &m;
  }

  inline
  void phase_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void phase_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void phase_pskel::
  parsers (::xml_schema::string_pskel& model_name,
           ::state::phase_name_pskel& phase_name,
           ::xml_schema::unsigned_short_pskel& cell_cycle_model_index,
           ::xml_schema::unsigned_short_pskel& cell_cycle_phase_index,
           ::common::units_decimal_pskel& elapsed_time,
           ::common::custom_pskel& custom)
  {
    this->model_name_parser_ = &model_name;
    this->phase_name_parser_ = &phase_name;
    this->cell_cycle_model_index_parser_ = &cell_cycle_model_index;
    this->cell_cycle_phase_index_parser_ = &cell_cycle_phase_index;
    this->elapsed_time_parser_ = &elapsed_time;
    this->custom_parser_ = &custom;
  }

  inline
  void phase_pskel::
  parser_maps (::xml_schema::parser_map& model_name,
               ::xml_schema::parser_map& phase_name,
               ::xml_schema::parser_map& cell_cycle_model_index,
               ::xml_schema::parser_map& cell_cycle_phase_index,
               ::xml_schema::parser_map& elapsed_time,
               ::xml_schema::parser_map& custom)
  {
    this->model_name_parser_map_ = &model_name;
    this->phase_name_parser_map_ = &phase_name;
    this->cell_cycle_model_index_parser_map_ = &cell_cycle_model_index;
    this->cell_cycle_phase_index_parser_map_ = &cell_cycle_phase_index;
    this->elapsed_time_parser_map_ = &elapsed_time;
    this->custom_parser_map_ = &custom;
  }

  inline
  phase_pskel::
  phase_pskel ()
  : phase_impl_ (0),
    model_name_parser_ (0),
    model_name_parser_map_ (0),
    phase_name_parser_ (0),
    phase_name_parser_map_ (0),
    cell_cycle_model_index_parser_ (0),
    cell_cycle_model_index_parser_map_ (0),
    cell_cycle_phase_index_parser_ (0),
    cell_cycle_phase_index_parser_map_ (0),
    elapsed_time_parser_ (0),
    elapsed_time_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_)
  {
  }

  inline
  phase_pskel::
  phase_pskel (phase_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    phase_impl_ (impl),
    model_name_parser_ (0),
    model_name_parser_map_ (0),
    phase_name_parser_ (0),
    phase_name_parser_map_ (0),
    cell_cycle_model_index_parser_ (0),
    cell_cycle_model_index_parser_map_ (0),
    cell_cycle_phase_index_parser_ (0),
    cell_cycle_phase_index_parser_map_ (0),
    elapsed_time_parser_ (0),
    elapsed_time_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_)
  {
  }

  // orientation_formalism_pskel
  //

  inline
  orientation_formalism_pskel::
  orientation_formalism_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    orientation_formalism_impl_ (0)
  {
    this->_enumeration_facet (_xsde_orientation_formalism_pskel_enums_, 7UL);
  }

  inline
  orientation_formalism_pskel::
  orientation_formalism_pskel (orientation_formalism_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    orientation_formalism_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_orientation_formalism_pskel_enums_, 7UL);
  }

  // orientation_pskel
  //

  inline
  void orientation_pskel::
  formalism_parser (::state::orientation_formalism_pskel& p)
  {
    this->formalism_parser_ = &p;
  }

  inline
  void orientation_pskel::
  parsers (::xml_schema::double_pskel& double_list_pskel_item,
           ::xml_schema::string_pskel& units,
           ::xml_schema::string_pskel& measurement_type,
           ::xml_schema::double_pskel& uncertainty,
           ::xml_schema::double_pskel& negative_uncertainty,
           ::xml_schema::double_pskel& positive_uncertainty,
           ::xml_schema::double_pskel& uncertainty_percentage,
           ::xml_schema::double_pskel& negative_uncertainty_percentage,
           ::xml_schema::double_pskel& positive_uncertainty_percentage,
           ::xml_schema::double_pskel& median,
           ::xml_schema::double_pskel& standard_deviation,
           ::common::two_doubles_pskel& interquartile_range,
           ::common::two_doubles_pskel& range,
           ::xml_schema::double_pskel& min,
           ::xml_schema::double_pskel& max,
           ::xml_schema::double_pskel& standard_error,
           ::xml_schema::double_pskel& standard_error_of_the_mean,
           ::xml_schema::int_pskel& number_obs,
           ::xml_schema::double_pskel& skewnesss,
           ::xml_schema::double_pskel& kurtosis,
           ::state::orientation_formalism_pskel& formalism)
  {
    this->_xsde_item_ = &double_list_pskel_item;
    this->units_parser_ = &units;
    this->measurement_type_parser_ = &measurement_type;
    this->uncertainty_parser_ = &uncertainty;
    this->negative_uncertainty_parser_ = &negative_uncertainty;
    this->positive_uncertainty_parser_ = &positive_uncertainty;
    this->uncertainty_percentage_parser_ = &uncertainty_percentage;
    this->negative_uncertainty_percentage_parser_ = &negative_uncertainty_percentage;
    this->positive_uncertainty_percentage_parser_ = &positive_uncertainty_percentage;
    this->median_parser_ = &median;
    this->standard_deviation_parser_ = &standard_deviation;
    this->interquartile_range_parser_ = &interquartile_range;
    this->range_parser_ = &range;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->standard_error_parser_ = &standard_error;
    this->standard_error_of_the_mean_parser_ = &standard_error_of_the_mean;
    this->number_obs_parser_ = &number_obs;
    this->skewnesss_parser_ = &skewnesss;
    this->kurtosis_parser_ = &kurtosis;
    this->formalism_parser_ = &formalism;
  }

  inline
  orientation_pskel::
  orientation_pskel (::common::units_double_list_pskel* tiein)
  : ::common::units_double_list_pskel (tiein, 0),
    orientation_impl_ (0),
    formalism_parser_ (0)
  {
  }

  inline
  orientation_pskel::
  orientation_pskel (orientation_pskel* impl, void*)
  : ::common::units_double_list_pskel (impl, 0),
    orientation_impl_ (impl),
    formalism_parser_ (0)
  {
  }

  // cell_parts_pskel
  //

  inline
  void cell_parts_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  orientation_parser (::state::orientation_pskel& p)
  {
    this->orientation_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  orientation_parser (::xml_schema::parser_map& m)
  {
    this->orientation_parser_map_ = &m;
  }

  inline
  void cell_parts_pskel::
  position_parser (::common::units_double_list_pskel& p)
  {
    this->position_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  position_parser (::xml_schema::parser_map& m)
  {
    this->position_parser_map_ = &m;
  }

  inline
  void cell_parts_pskel::
  velocity_parser (::common::units_double_list_pskel& p)
  {
    this->velocity_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  velocity_parser (::xml_schema::parser_map& m)
  {
    this->velocity_parser_map_ = &m;
  }

  inline
  void cell_parts_pskel::
  voxels_parser (::mesh::int_list_xpath_pskel& p)
  {
    this->voxels_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  voxels_parser (::xml_schema::parser_map& m)
  {
    this->voxels_parser_map_ = &m;
  }

  inline
  void cell_parts_pskel::
  cell_part_parser (::state::cell_parts_pskel& p)
  {
    this->cell_part_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  cell_part_parser (::xml_schema::parser_map& m)
  {
    this->cell_part_parser_map_ = &m;
  }

  inline
  void cell_parts_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void cell_parts_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::unsigned_int_pskel& ID,
           ::state::orientation_pskel& orientation,
           ::common::units_double_list_pskel& position,
           ::common::units_double_list_pskel& velocity,
           ::mesh::int_list_xpath_pskel& voxels,
           ::state::cell_parts_pskel& cell_part,
           ::common::custom_pskel& custom)
  {
    this->name_parser_ = &name;
    this->ID_parser_ = &ID;
    this->orientation_parser_ = &orientation;
    this->position_parser_ = &position;
    this->velocity_parser_ = &velocity;
    this->voxels_parser_ = &voxels;
    this->cell_part_parser_ = &cell_part;
    this->custom_parser_ = &custom;
  }

  inline
  void cell_parts_pskel::
  parser_maps (::xml_schema::parser_map& orientation,
               ::xml_schema::parser_map& position,
               ::xml_schema::parser_map& velocity,
               ::xml_schema::parser_map& voxels,
               ::xml_schema::parser_map& cell_part,
               ::xml_schema::parser_map& custom)
  {
    this->orientation_parser_map_ = &orientation;
    this->position_parser_map_ = &position;
    this->velocity_parser_map_ = &velocity;
    this->voxels_parser_map_ = &voxels;
    this->cell_part_parser_map_ = &cell_part;
    this->custom_parser_map_ = &custom;
  }

  inline
  cell_parts_pskel::
  cell_parts_pskel ()
  : cell_parts_impl_ (0),
    name_parser_ (0),
    ID_parser_ (0),
    orientation_parser_ (0),
    orientation_parser_map_ (0),
    position_parser_ (0),
    position_parser_map_ (0),
    velocity_parser_ (0),
    velocity_parser_map_ (0),
    voxels_parser_ (0),
    voxels_parser_map_ (0),
    cell_part_parser_ (0),
    cell_part_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  inline
  cell_parts_pskel::
  cell_parts_pskel (cell_parts_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    cell_parts_impl_ (impl),
    name_parser_ (0),
    ID_parser_ (0),
    orientation_parser_ (0),
    orientation_parser_map_ (0),
    position_parser_ (0),
    position_parser_map_ (0),
    velocity_parser_ (0),
    velocity_parser_map_ (0),
    voxels_parser_ (0),
    voxels_parser_map_ (0),
    cell_part_parser_ (0),
    cell_part_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // state_pskel
  //

  inline
  void state_pskel::
  orientation_parser (::state::orientation_pskel& p)
  {
    this->orientation_parser_ = &p;
  }

  inline
  void state_pskel::
  orientation_parser (::xml_schema::parser_map& m)
  {
    this->orientation_parser_map_ = &m;
  }

  inline
  void state_pskel::
  position_parser (::common::units_double_list_pskel& p)
  {
    this->position_parser_ = &p;
  }

  inline
  void state_pskel::
  position_parser (::xml_schema::parser_map& m)
  {
    this->position_parser_map_ = &m;
  }

  inline
  void state_pskel::
  velocity_parser (::common::units_double_list_pskel& p)
  {
    this->velocity_parser_ = &p;
  }

  inline
  void state_pskel::
  velocity_parser (::xml_schema::parser_map& m)
  {
    this->velocity_parser_map_ = &m;
  }

  inline
  void state_pskel::
  voxels_parser (::mesh::int_list_xpath_pskel& p)
  {
    this->voxels_parser_ = &p;
  }

  inline
  void state_pskel::
  voxels_parser (::xml_schema::parser_map& m)
  {
    this->voxels_parser_map_ = &m;
  }

  inline
  void state_pskel::
  cell_part_parser (::state::cell_parts_pskel& p)
  {
    this->cell_part_parser_ = &p;
  }

  inline
  void state_pskel::
  cell_part_parser (::xml_schema::parser_map& m)
  {
    this->cell_part_parser_map_ = &m;
  }

  inline
  void state_pskel::
  phase_parser (::state::phase_pskel& p)
  {
    this->phase_parser_ = &p;
  }

  inline
  void state_pskel::
  phase_parser (::xml_schema::parser_map& m)
  {
    this->phase_parser_map_ = &m;
  }

  inline
  void state_pskel::
  adhered_cells_parser (::state::list_of_adhered_cells_pskel& p)
  {
    this->adhered_cells_parser_ = &p;
  }

  inline
  void state_pskel::
  adhered_cells_parser (::xml_schema::parser_map& m)
  {
    this->adhered_cells_parser_map_ = &m;
  }

  inline
  void state_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void state_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void state_pskel::
  parsers (::state::orientation_pskel& orientation,
           ::common::units_double_list_pskel& position,
           ::common::units_double_list_pskel& velocity,
           ::mesh::int_list_xpath_pskel& voxels,
           ::state::cell_parts_pskel& cell_part,
           ::state::phase_pskel& phase,
           ::state::list_of_adhered_cells_pskel& adhered_cells,
           ::common::custom_pskel& custom)
  {
    this->orientation_parser_ = &orientation;
    this->position_parser_ = &position;
    this->velocity_parser_ = &velocity;
    this->voxels_parser_ = &voxels;
    this->cell_part_parser_ = &cell_part;
    this->phase_parser_ = &phase;
    this->adhered_cells_parser_ = &adhered_cells;
    this->custom_parser_ = &custom;
  }

  inline
  void state_pskel::
  parser_maps (::xml_schema::parser_map& orientation,
               ::xml_schema::parser_map& position,
               ::xml_schema::parser_map& velocity,
               ::xml_schema::parser_map& voxels,
               ::xml_schema::parser_map& cell_part,
               ::xml_schema::parser_map& phase,
               ::xml_schema::parser_map& adhered_cells,
               ::xml_schema::parser_map& custom)
  {
    this->orientation_parser_map_ = &orientation;
    this->position_parser_map_ = &position;
    this->velocity_parser_map_ = &velocity;
    this->voxels_parser_map_ = &voxels;
    this->cell_part_parser_map_ = &cell_part;
    this->phase_parser_map_ = &phase;
    this->adhered_cells_parser_map_ = &adhered_cells;
    this->custom_parser_map_ = &custom;
  }

  inline
  state_pskel::
  state_pskel ()
  : state_impl_ (0),
    orientation_parser_ (0),
    orientation_parser_map_ (0),
    position_parser_ (0),
    position_parser_map_ (0),
    velocity_parser_ (0),
    velocity_parser_map_ (0),
    voxels_parser_ (0),
    voxels_parser_map_ (0),
    cell_part_parser_ (0),
    cell_part_parser_map_ (0),
    phase_parser_ (0),
    phase_parser_map_ (0),
    adhered_cells_parser_ (0),
    adhered_cells_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  state_pskel::
  state_pskel (state_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    state_impl_ (impl),
    orientation_parser_ (0),
    orientation_parser_map_ (0),
    position_parser_ (0),
    position_parser_map_ (0),
    velocity_parser_ (0),
    velocity_parser_map_ (0),
    voxels_parser_ (0),
    voxels_parser_map_ (0),
    cell_part_parser_ (0),
    cell_part_parser_map_ (0),
    phase_parser_ (0),
    phase_parser_map_ (0),
    adhered_cells_parser_ (0),
    adhered_cells_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // adhered_cell_pskel
  //

  inline
  void adhered_cell_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void adhered_cell_pskel::
  ID_parser (::xml_schema::parser_map& m)
  {
    this->ID_parser_map_ = &m;
  }

  inline
  void adhered_cell_pskel::
  contact_area_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->contact_area_parser_ = &p;
  }

  inline
  void adhered_cell_pskel::
  contact_area_parser (::xml_schema::parser_map& m)
  {
    this->contact_area_parser_map_ = &m;
  }

  inline
  void adhered_cell_pskel::
  contact_parser (::phenotype_common::cross_section_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  inline
  void adhered_cell_pskel::
  contact_parser (::xml_schema::parser_map& m)
  {
    this->contact_parser_map_ = &m;
  }

  inline
  void adhered_cell_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void adhered_cell_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void adhered_cell_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::common::units_decimal_nonnegative_pskel& contact_area,
           ::phenotype_common::cross_section_pskel& contact,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->contact_area_parser_ = &contact_area;
    this->contact_parser_ = &contact;
    this->custom_parser_ = &custom;
  }

  inline
  void adhered_cell_pskel::
  parser_maps (::xml_schema::parser_map& ID,
               ::xml_schema::parser_map& contact_area,
               ::xml_schema::parser_map& contact,
               ::xml_schema::parser_map& custom)
  {
    this->ID_parser_map_ = &ID;
    this->contact_area_parser_map_ = &contact_area;
    this->contact_parser_map_ = &contact;
    this->custom_parser_map_ = &custom;
  }

  inline
  adhered_cell_pskel::
  adhered_cell_pskel ()
  : adhered_cell_impl_ (0),
    ID_parser_ (0),
    ID_parser_map_ (0),
    contact_area_parser_ (0),
    contact_area_parser_map_ (0),
    contact_parser_ (0),
    contact_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  adhered_cell_pskel::
  adhered_cell_pskel (adhered_cell_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    adhered_cell_impl_ (impl),
    ID_parser_ (0),
    ID_parser_map_ (0),
    contact_area_parser_ (0),
    contact_area_parser_map_ (0),
    contact_parser_ (0),
    contact_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // list_of_adhered_cells_pskel
  //

  inline
  void list_of_adhered_cells_pskel::
  adhered_cell_parser (::state::adhered_cell_pskel& p)
  {
    this->adhered_cell_parser_ = &p;
  }

  inline
  void list_of_adhered_cells_pskel::
  adhered_cell_parser (::xml_schema::parser_map& m)
  {
    this->adhered_cell_parser_map_ = &m;
  }

  inline
  void list_of_adhered_cells_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void list_of_adhered_cells_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void list_of_adhered_cells_pskel::
  parsers (::state::adhered_cell_pskel& adhered_cell,
           ::common::custom_pskel& custom)
  {
    this->adhered_cell_parser_ = &adhered_cell;
    this->custom_parser_ = &custom;
  }

  inline
  void list_of_adhered_cells_pskel::
  parser_maps (::xml_schema::parser_map& adhered_cell,
               ::xml_schema::parser_map& custom)
  {
    this->adhered_cell_parser_map_ = &adhered_cell;
    this->custom_parser_map_ = &custom;
  }

  inline
  list_of_adhered_cells_pskel::
  list_of_adhered_cells_pskel ()
  : list_of_adhered_cells_impl_ (0),
    adhered_cell_parser_ (0),
    adhered_cell_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  list_of_adhered_cells_pskel::
  list_of_adhered_cells_pskel (list_of_adhered_cells_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    list_of_adhered_cells_impl_ (impl),
    adhered_cell_parser_ (0),
    adhered_cell_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

