// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "microenvironment-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace microenvironment
{
  // domain_pimpl
  //

  domain_pimpl::
  domain_pimpl (bool b)
  {
    this->domain_pimpl_base_ = b;
    this->domain_pimpl_state_.domain_ = 0;
  }

  domain_pimpl::
  ~domain_pimpl ()
  {
    if (!this->domain_pimpl_base_ && this->domain_pimpl_state_.domain_)
      delete this->domain_pimpl_state_.domain_;
  }

  void domain_pimpl::
  _reset ()
  {
    domain_pskel::_reset ();

    if (!this->domain_pimpl_base_ && this->domain_pimpl_state_.domain_)
    {
      delete this->domain_pimpl_state_.domain_;
      this->domain_pimpl_state_.domain_ = 0;
    }
  }

  void domain_pimpl::
  pre_impl (::microenvironment::domain* x)
  {
    this->domain_pimpl_state_.domain_ = x;
  }

  void domain_pimpl::
  pre ()
  {
    ::microenvironment::domain* x = new ::microenvironment::domain;
    this->pre_impl (x);
  }

  void domain_pimpl::
  name (const ::std::string& x)
  {
    this->domain_pimpl_state_.domain_->name (x);
  }

  void domain_pimpl::
  variables (::variables::list_of_variables* x)
  {
    this->domain_pimpl_state_.domain_->variables (x);
  }

  void domain_pimpl::
  experimental_condition (::variables::experimental_conditions* x)
  {
    this->domain_pimpl_state_.domain_->experimental_condition (x);
  }

  void domain_pimpl::
  mesh (::mesh::mesh* x)
  {
    this->domain_pimpl_state_.domain_->mesh (x);
  }

  void domain_pimpl::
  data (::variables::data* x)
  {
    this->domain_pimpl_state_.domain_->data (x);
  }

  void domain_pimpl::
  custom (::common::custom* x)
  {
    this->domain_pimpl_state_.domain_->custom (x);
  }

  ::microenvironment::domain* domain_pimpl::
  post_domain ()
  {
    ::microenvironment::domain* r = this->domain_pimpl_state_.domain_;
    this->domain_pimpl_state_.domain_ = 0;
    return r;
  }

  // microenvironment_pimpl
  //

  microenvironment_pimpl::
  microenvironment_pimpl (bool b)
  {
    this->microenvironment_pimpl_base_ = b;
    this->microenvironment_pimpl_state_.microenvironment_ = 0;
  }

  microenvironment_pimpl::
  ~microenvironment_pimpl ()
  {
    if (!this->microenvironment_pimpl_base_ && this->microenvironment_pimpl_state_.microenvironment_)
      delete this->microenvironment_pimpl_state_.microenvironment_;
  }

  void microenvironment_pimpl::
  _reset ()
  {
    microenvironment_pskel::_reset ();

    if (!this->microenvironment_pimpl_base_ && this->microenvironment_pimpl_state_.microenvironment_)
    {
      delete this->microenvironment_pimpl_state_.microenvironment_;
      this->microenvironment_pimpl_state_.microenvironment_ = 0;
    }
  }

  void microenvironment_pimpl::
  pre_impl (::microenvironment::microenvironment* x)
  {
    this->microenvironment_pimpl_state_.microenvironment_ = x;
  }

  void microenvironment_pimpl::
  pre ()
  {
    ::microenvironment::microenvironment* x = new ::microenvironment::microenvironment;
    this->pre_impl (x);
  }

  void microenvironment_pimpl::
  domain (::microenvironment::domain* x)
  {
    this->microenvironment_pimpl_state_.microenvironment_->domain ().push_back (x);
  }

  void microenvironment_pimpl::
  vascular_network (::vascular::vascular_network* x)
  {
    this->microenvironment_pimpl_state_.microenvironment_->vascular_network ().push_back (x);
  }

  void microenvironment_pimpl::
  basement_membrane (::basement::basement_membrane* x)
  {
    this->microenvironment_pimpl_state_.microenvironment_->basement_membrane ().push_back (x);
  }

  void microenvironment_pimpl::
  custom (::common::custom* x)
  {
    this->microenvironment_pimpl_state_.microenvironment_->custom (x);
  }

  ::microenvironment::microenvironment* microenvironment_pimpl::
  post_microenvironment ()
  {
    ::microenvironment::microenvironment* r = this->microenvironment_pimpl_state_.microenvironment_;
    this->microenvironment_pimpl_state_.microenvironment_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

