// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "metadata-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace metadata
{
  // URL_pimpl
  //

  URL_pimpl::
  URL_pimpl ()
  : URL_pskel (&base_impl_)
  {
  }

  void URL_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->URL_pimpl_state_.URL_ = ::metadata::URL ();
  }

  ::metadata::URL URL_pimpl::
  post_URL ()
  {
    static_cast< ::std::string& > (this->URL_pimpl_state_.URL_) = 
    this->base_impl_.post_string ();
    return this->URL_pimpl_state_.URL_;
  }

  // orcid_identifier_pimpl
  //

  void orcid_identifier_pimpl::
  pre ()
  {
    this->orcid_identifier_pimpl_state_.orcid_identifier_ = ::metadata::orcid_identifier ();
  }

  void orcid_identifier_pimpl::
  path (const ::std::string& x)
  {
    this->orcid_identifier_pimpl_state_.orcid_identifier_.path (x);
  }

  void orcid_identifier_pimpl::
  given_names (const ::std::string& x)
  {
    this->orcid_identifier_pimpl_state_.orcid_identifier_.given_names (x);
  }

  void orcid_identifier_pimpl::
  family_name (const ::std::string& x)
  {
    this->orcid_identifier_pimpl_state_.orcid_identifier_.family_name (x);
  }

  void orcid_identifier_pimpl::
  email (const ::std::string& x)
  {
    this->orcid_identifier_pimpl_state_.orcid_identifier_.email (x);
  }

  void orcid_identifier_pimpl::
  url (const ::metadata::URL& x)
  {
    this->orcid_identifier_pimpl_state_.orcid_identifier_.url (x);
  }

  void orcid_identifier_pimpl::
  organization_name (const ::std::string& x)
  {
    this->orcid_identifier_pimpl_state_.orcid_identifier_.organization_name (x);
  }

  void orcid_identifier_pimpl::
  department_name (const ::std::string& x)
  {
    this->orcid_identifier_pimpl_state_.orcid_identifier_.department_name (x);
  }

  ::metadata::orcid_identifier orcid_identifier_pimpl::
  post_orcid_identifier ()
  {
    return this->orcid_identifier_pimpl_state_.orcid_identifier_;
  }

  // orcid_person_pimpl
  //

  orcid_person_pimpl::
  orcid_person_pimpl (bool b)
  {
    this->orcid_person_pimpl_base_ = b;
    this->orcid_person_pimpl_state_.orcid_person_ = 0;
  }

  orcid_person_pimpl::
  ~orcid_person_pimpl ()
  {
    if (!this->orcid_person_pimpl_base_ && this->orcid_person_pimpl_state_.orcid_person_)
      delete this->orcid_person_pimpl_state_.orcid_person_;
  }

  void orcid_person_pimpl::
  _reset ()
  {
    orcid_person_pskel::_reset ();

    if (!this->orcid_person_pimpl_base_ && this->orcid_person_pimpl_state_.orcid_person_)
    {
      delete this->orcid_person_pimpl_state_.orcid_person_;
      this->orcid_person_pimpl_state_.orcid_person_ = 0;
    }
  }

  void orcid_person_pimpl::
  pre_impl (::metadata::orcid_person* x)
  {
    this->orcid_person_pimpl_state_.orcid_person_ = x;
  }

  void orcid_person_pimpl::
  pre ()
  {
    ::metadata::orcid_person* x = new ::metadata::orcid_person;
    this->pre_impl (x);
  }

  void orcid_person_pimpl::
  orcid_identifier (const ::metadata::orcid_identifier& x)
  {
    this->orcid_person_pimpl_state_.orcid_person_->orcid_identifier ().push_back (x);
  }

  ::metadata::orcid_person* orcid_person_pimpl::
  post_orcid_person ()
  {
    ::metadata::orcid_person* r = this->orcid_person_pimpl_state_.orcid_person_;
    this->orcid_person_pimpl_state_.orcid_person_ = 0;
    return r;
  }

  // classification_pimpl
  //

  void classification_pimpl::
  pre ()
  {
    this->classification_pimpl_state_.classification_ = ::metadata::classification ();
  }

  void classification_pimpl::
  classification_number (const ::std::string& x)
  {
    this->classification_pimpl_state_.classification_.classification_number (x);
  }

  void classification_pimpl::
  line (unsigned int x)
  {
    this->classification_pimpl_state_.classification_.line (x);
  }

  void classification_pimpl::
  variant (unsigned int x)
  {
    this->classification_pimpl_state_.classification_.variant (x);
  }

  void classification_pimpl::
  branch (unsigned int x)
  {
    this->classification_pimpl_state_.classification_.branch (x);
  }

  void classification_pimpl::
  version (unsigned int x)
  {
    this->classification_pimpl_state_.classification_.version (x);
  }

  ::metadata::classification classification_pimpl::
  post_classification ()
  {
    return this->classification_pimpl_state_.classification_;
  }

  // curation_pimpl
  //

  curation_pimpl::
  curation_pimpl (bool b)
  {
    this->curation_pimpl_base_ = b;
    this->curation_pimpl_state_.curation_ = 0;
  }

  curation_pimpl::
  ~curation_pimpl ()
  {
    if (!this->curation_pimpl_base_ && this->curation_pimpl_state_.curation_)
      delete this->curation_pimpl_state_.curation_;
  }

  void curation_pimpl::
  _reset ()
  {
    curation_pskel::_reset ();

    if (!this->curation_pimpl_base_ && this->curation_pimpl_state_.curation_)
    {
      delete this->curation_pimpl_state_.curation_;
      this->curation_pimpl_state_.curation_ = 0;
    }
  }

  void curation_pimpl::
  pre_impl (::metadata::curation* x)
  {
    this->curation_pimpl_state_.curation_ = x;
  }

  void curation_pimpl::
  pre ()
  {
    ::metadata::curation* x = new ::metadata::curation;
    this->pre_impl (x);
  }

  void curation_pimpl::
  curated (bool x)
  {
    this->curation_pimpl_state_.curation_->curated (x);
  }

  void curation_pimpl::
  created (const ::xml_schema::date_time& x)
  {
    this->curation_pimpl_state_.curation_->created (x);
  }

  void curation_pimpl::
  last_modified (const ::xml_schema::date_time& x)
  {
    this->curation_pimpl_state_.curation_->last_modified (x);
  }

  void curation_pimpl::
  choice_arm (choice_arm_tag t)
  {
    this->curation_pimpl_state_.curation_->choice_arm (
      static_cast< ::metadata::curation::choice_arm_tag > (t));
  }

  void curation_pimpl::
  classification (const ::metadata::classification& x)
  {
    this->curation_pimpl_state_.curation_->classification (x);
  }

  void curation_pimpl::
  version (const ::std::string& x)
  {
    this->curation_pimpl_state_.curation_->version (x);
  }

  void curation_pimpl::
  creator (::metadata::orcid_person* x)
  {
    this->curation_pimpl_state_.curation_->creator (x);
  }

  void curation_pimpl::
  current_contact (::metadata::orcid_person* x)
  {
    this->curation_pimpl_state_.curation_->current_contact (x);
  }

  void curation_pimpl::
  curator (::metadata::orcid_person* x)
  {
    this->curation_pimpl_state_.curation_->curator (x);
  }

  void curation_pimpl::
  last_modified_by (::metadata::orcid_person* x)
  {
    this->curation_pimpl_state_.curation_->last_modified_by (x);
  }

  ::metadata::curation* curation_pimpl::
  post_curation ()
  {
    ::metadata::curation* r = this->curation_pimpl_state_.curation_;
    this->curation_pimpl_state_.curation_ = 0;
    return r;
  }

  // citation_pimpl
  //

  citation_pimpl::
  citation_pimpl (bool b)
  {
    this->citation_pimpl_base_ = b;
    this->citation_pimpl_state_.citation_ = 0;
  }

  citation_pimpl::
  ~citation_pimpl ()
  {
    if (!this->citation_pimpl_base_ && this->citation_pimpl_state_.citation_)
      delete this->citation_pimpl_state_.citation_;
  }

  void citation_pimpl::
  _reset ()
  {
    citation_pskel::_reset ();

    if (!this->citation_pimpl_base_ && this->citation_pimpl_state_.citation_)
    {
      delete this->citation_pimpl_state_.citation_;
      this->citation_pimpl_state_.citation_ = 0;
    }
  }

  void citation_pimpl::
  pre_impl (::metadata::citation* x)
  {
    this->citation_pimpl_state_.citation_ = x;
  }

  void citation_pimpl::
  pre ()
  {
    ::metadata::citation* x = new ::metadata::citation;
    this->pre_impl (x);
  }

  void citation_pimpl::
  text (const ::std::string& x)
  {
    this->citation_pimpl_state_.citation_->text (x);
  }

  void citation_pimpl::
  DOI (const ::std::string& x)
  {
    this->citation_pimpl_state_.citation_->DOI (x);
  }

  void citation_pimpl::
  URL (const ::metadata::URL& x)
  {
    this->citation_pimpl_state_.citation_->URL ().push_back (x);
  }

  void citation_pimpl::
  PMID (const ::std::string& x)
  {
    this->citation_pimpl_state_.citation_->PMID (x);
  }

  void citation_pimpl::
  PMCID (const ::std::string& x)
  {
    this->citation_pimpl_state_.citation_->PMCID (x);
  }

  void citation_pimpl::
  arXiv (const ::std::string& x)
  {
    this->citation_pimpl_state_.citation_->arXiv (x);
  }

  void citation_pimpl::
  notes (const ::std::string& x)
  {
    this->citation_pimpl_state_.citation_->notes (x);
  }

  void citation_pimpl::
  custom (::common::custom* x)
  {
    this->citation_pimpl_state_.citation_->custom (x);
  }

  ::metadata::citation* citation_pimpl::
  post_citation ()
  {
    ::metadata::citation* r = this->citation_pimpl_state_.citation_;
    this->citation_pimpl_state_.citation_ = 0;
    return r;
  }

  // data_origin_pimpl
  //

  data_origin_pimpl::
  data_origin_pimpl (bool b)
  {
    this->data_origin_pimpl_base_ = b;
    this->data_origin_pimpl_state_.data_origin_ = 0;
  }

  data_origin_pimpl::
  ~data_origin_pimpl ()
  {
    if (!this->data_origin_pimpl_base_ && this->data_origin_pimpl_state_.data_origin_)
      delete this->data_origin_pimpl_state_.data_origin_;
  }

  void data_origin_pimpl::
  _reset ()
  {
    data_origin_pskel::_reset ();

    if (!this->data_origin_pimpl_base_ && this->data_origin_pimpl_state_.data_origin_)
    {
      delete this->data_origin_pimpl_state_.data_origin_;
      this->data_origin_pimpl_state_.data_origin_ = 0;
    }
  }

  void data_origin_pimpl::
  pre_impl (::metadata::data_origin* x)
  {
    this->data_origin_pimpl_state_.data_origin_ = x;
  }

  void data_origin_pimpl::
  pre ()
  {
    ::metadata::data_origin* x = new ::metadata::data_origin;
    this->pre_impl (x);
  }

  void data_origin_pimpl::
  ID (unsigned long long x)
  {
    this->data_origin_pimpl_state_.data_origin_->ID (x);
  }

  void data_origin_pimpl::
  instrumentation_information (const ::std::string& x)
  {
    this->data_origin_pimpl_state_.data_origin_->instrumentation_information (x);
  }

  void data_origin_pimpl::
  experimental_protocol (const ::std::string& x)
  {
    this->data_origin_pimpl_state_.data_origin_->experimental_protocol (x);
  }

  void data_origin_pimpl::
  citation (::metadata::citation* x)
  {
    this->data_origin_pimpl_state_.data_origin_->citation ().push_back (x);
  }

  void data_origin_pimpl::
  xpath (const ::std::string& x)
  {
    this->data_origin_pimpl_state_.data_origin_->xpath (x);
  }

  void data_origin_pimpl::
  notes (const ::std::string& x)
  {
    this->data_origin_pimpl_state_.data_origin_->notes (x);
  }

  void data_origin_pimpl::
  custom (::common::custom* x)
  {
    this->data_origin_pimpl_state_.data_origin_->custom (x);
  }

  ::metadata::data_origin* data_origin_pimpl::
  post_data_origin ()
  {
    ::metadata::data_origin* r = this->data_origin_pimpl_state_.data_origin_;
    this->data_origin_pimpl_state_.data_origin_ = 0;
    return r;
  }

  // data_origins_pimpl
  //

  data_origins_pimpl::
  data_origins_pimpl (bool b)
  {
    this->data_origins_pimpl_base_ = b;
    this->data_origins_pimpl_state_.data_origins_ = 0;
  }

  data_origins_pimpl::
  ~data_origins_pimpl ()
  {
    if (!this->data_origins_pimpl_base_ && this->data_origins_pimpl_state_.data_origins_)
      delete this->data_origins_pimpl_state_.data_origins_;
  }

  void data_origins_pimpl::
  _reset ()
  {
    data_origins_pskel::_reset ();

    if (!this->data_origins_pimpl_base_ && this->data_origins_pimpl_state_.data_origins_)
    {
      delete this->data_origins_pimpl_state_.data_origins_;
      this->data_origins_pimpl_state_.data_origins_ = 0;
    }
  }

  void data_origins_pimpl::
  pre_impl (::metadata::data_origins* x)
  {
    this->data_origins_pimpl_state_.data_origins_ = x;
  }

  void data_origins_pimpl::
  pre ()
  {
    ::metadata::data_origins* x = new ::metadata::data_origins;
    this->pre_impl (x);
  }

  void data_origins_pimpl::
  data_origin (::metadata::data_origin* x)
  {
    this->data_origins_pimpl_state_.data_origins_->data_origin ().push_back (x);
  }

  void data_origins_pimpl::
  custom (::common::custom* x)
  {
    this->data_origins_pimpl_state_.data_origins_->custom (x);
  }

  ::metadata::data_origins* data_origins_pimpl::
  post_data_origins ()
  {
    ::metadata::data_origins* r = this->data_origins_pimpl_state_.data_origins_;
    this->data_origins_pimpl_state_.data_origins_ = 0;
    return r;
  }

  // data_analysis_pimpl
  //

  data_analysis_pimpl::
  data_analysis_pimpl (bool b)
  {
    this->data_analysis_pimpl_base_ = b;
    this->data_analysis_pimpl_state_.data_analysis_ = 0;
  }

  data_analysis_pimpl::
  ~data_analysis_pimpl ()
  {
    if (!this->data_analysis_pimpl_base_ && this->data_analysis_pimpl_state_.data_analysis_)
      delete this->data_analysis_pimpl_state_.data_analysis_;
  }

  void data_analysis_pimpl::
  _reset ()
  {
    data_analysis_pskel::_reset ();

    if (!this->data_analysis_pimpl_base_ && this->data_analysis_pimpl_state_.data_analysis_)
    {
      delete this->data_analysis_pimpl_state_.data_analysis_;
      this->data_analysis_pimpl_state_.data_analysis_ = 0;
    }
  }

  void data_analysis_pimpl::
  pre_impl (::metadata::data_analysis* x)
  {
    this->data_analysis_pimpl_state_.data_analysis_ = x;
  }

  void data_analysis_pimpl::
  pre ()
  {
    ::metadata::data_analysis* x = new ::metadata::data_analysis;
    this->pre_impl (x);
  }

  void data_analysis_pimpl::
  URL (const ::metadata::URL& x)
  {
    this->data_analysis_pimpl_state_.data_analysis_->URL (x);
  }

  void data_analysis_pimpl::
  citation (::metadata::citation* x)
  {
    this->data_analysis_pimpl_state_.data_analysis_->citation (x);
  }

  void data_analysis_pimpl::
  software (::metadata::software* x)
  {
    this->data_analysis_pimpl_state_.data_analysis_->software (x);
  }

  void data_analysis_pimpl::
  xpath (const ::std::string& x)
  {
    this->data_analysis_pimpl_state_.data_analysis_->xpath (x);
  }

  void data_analysis_pimpl::
  notes (const ::std::string& x)
  {
    this->data_analysis_pimpl_state_.data_analysis_->notes (x);
  }

  void data_analysis_pimpl::
  custom (::common::custom* x)
  {
    this->data_analysis_pimpl_state_.data_analysis_->custom (x);
  }

  ::metadata::data_analysis* data_analysis_pimpl::
  post_data_analysis ()
  {
    ::metadata::data_analysis* r = this->data_analysis_pimpl_state_.data_analysis_;
    this->data_analysis_pimpl_state_.data_analysis_ = 0;
    return r;
  }

  // software_pimpl
  //

  software_pimpl::
  software_pimpl (bool b)
  {
    this->software_pimpl_base_ = b;
    this->software_pimpl_state_.software_ = 0;
  }

  software_pimpl::
  ~software_pimpl ()
  {
    if (!this->software_pimpl_base_ && this->software_pimpl_state_.software_)
      delete this->software_pimpl_state_.software_;
  }

  void software_pimpl::
  _reset ()
  {
    software_pskel::_reset ();

    if (!this->software_pimpl_base_ && this->software_pimpl_state_.software_)
    {
      delete this->software_pimpl_state_.software_;
      this->software_pimpl_state_.software_ = 0;
    }
  }

  void software_pimpl::
  pre_impl (::metadata::software* x)
  {
    this->software_pimpl_state_.software_ = x;
  }

  void software_pimpl::
  pre ()
  {
    ::metadata::software* x = new ::metadata::software;
    this->pre_impl (x);
  }

  void software_pimpl::
  software_name (const ::std::string& x)
  {
    this->software_pimpl_state_.software_->software_name (x);
  }

  void software_pimpl::
  software_version (const ::std::string& x)
  {
    this->software_pimpl_state_.software_->software_version (x);
  }

  void software_pimpl::
  software_input_configuration (::common::custom* x)
  {
    this->software_pimpl_state_.software_->software_input_configuration (x);
  }

  void software_pimpl::
  name (const ::std::string& x)
  {
    this->software_pimpl_state_.software_->name (x);
  }

  void software_pimpl::
  version (const ::std::string& x)
  {
    this->software_pimpl_state_.software_->version (x);
  }

  void software_pimpl::
  input_configuration (::common::custom* x)
  {
    this->software_pimpl_state_.software_->input_configuration (x);
  }

  void software_pimpl::
  URL (const ::metadata::URL& x)
  {
    this->software_pimpl_state_.software_->URL (x);
  }

  void software_pimpl::
  creator (::metadata::orcid_person* x)
  {
    this->software_pimpl_state_.software_->creator (x);
  }

  void software_pimpl::
  citation (::metadata::citation* x)
  {
    this->software_pimpl_state_.software_->citation (x);
  }

  void software_pimpl::
  user (::metadata::orcid_person* x)
  {
    this->software_pimpl_state_.software_->user (x);
  }

  void software_pimpl::
  custom (::common::custom* x)
  {
    this->software_pimpl_state_.software_->custom (x);
  }

  ::metadata::software* software_pimpl::
  post_software ()
  {
    ::metadata::software* r = this->software_pimpl_state_.software_;
    this->software_pimpl_state_.software_ = 0;
    return r;
  }

  // patient_derived_pimpl
  //

  patient_derived_pimpl::
  patient_derived_pimpl ()
  : patient_derived_pskel (&base_impl_)
  {
  }

  void patient_derived_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->patient_derived_pimpl_state_.patient_derived_ = ::metadata::patient_derived ();
  }

  void patient_derived_pimpl::
  patient_ID (const ::std::string& x)
  {
    this->patient_derived_pimpl_state_.patient_derived_.patient_ID (x);
  }

  ::metadata::patient_derived patient_derived_pimpl::
  post_patient_derived ()
  {
    static_cast< ::xml_schema::boolean_base& > (this->patient_derived_pimpl_state_.patient_derived_) = 
    this->base_impl_.post_boolean ();
    return this->patient_derived_pimpl_state_.patient_derived_;
  }

  // species_pimpl
  //

  species_pimpl::
  species_pimpl ()
  : species_pskel (&base_impl_)
  {
  }

  void species_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->species_pimpl_state_.species_ = ::metadata::species ();
  }

  void species_pimpl::
  MeSH_ID (const ::std::string& x)
  {
    this->species_pimpl_state_.species_.MeSH_ID (x);
  }

  ::metadata::species species_pimpl::
  post_species ()
  {
    static_cast< ::std::string& > (this->species_pimpl_state_.species_) = 
    this->base_impl_.post_string ();
    return this->species_pimpl_state_.species_;
  }

  // disease_pimpl
  //

  disease_pimpl::
  disease_pimpl ()
  : disease_pskel (&base_impl_)
  {
  }

  void disease_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->disease_pimpl_state_.disease_ = ::metadata::disease ();
  }

  void disease_pimpl::
  EFO_ID (const ::std::string& x)
  {
    this->disease_pimpl_state_.disease_.EFO_ID (x);
  }

  void disease_pimpl::
  DOID_ID (const ::std::string& x)
  {
    this->disease_pimpl_state_.disease_.DOID_ID (x);
  }

  ::metadata::disease disease_pimpl::
  post_disease ()
  {
    static_cast< ::std::string& > (this->disease_pimpl_state_.disease_) = 
    this->base_impl_.post_string ();
    return this->disease_pimpl_state_.disease_;
  }

  // cell_origin_pimpl
  //

  cell_origin_pimpl::
  cell_origin_pimpl (bool b)
  {
    this->cell_origin_pimpl_base_ = b;
    this->cell_origin_pimpl_state_.cell_origin_ = 0;
  }

  cell_origin_pimpl::
  ~cell_origin_pimpl ()
  {
    if (!this->cell_origin_pimpl_base_ && this->cell_origin_pimpl_state_.cell_origin_)
      delete this->cell_origin_pimpl_state_.cell_origin_;
  }

  void cell_origin_pimpl::
  _reset ()
  {
    cell_origin_pskel::_reset ();

    if (!this->cell_origin_pimpl_base_ && this->cell_origin_pimpl_state_.cell_origin_)
    {
      delete this->cell_origin_pimpl_state_.cell_origin_;
      this->cell_origin_pimpl_state_.cell_origin_ = 0;
    }
  }

  void cell_origin_pimpl::
  pre_impl (::metadata::cell_origin* x)
  {
    this->cell_origin_pimpl_state_.cell_origin_ = x;
  }

  void cell_origin_pimpl::
  pre ()
  {
    ::metadata::cell_origin* x = new ::metadata::cell_origin;
    this->pre_impl (x);
  }

  void cell_origin_pimpl::
  BTO_ID (const ::std::string& x)
  {
    this->cell_origin_pimpl_state_.cell_origin_->BTO_ID (x);
  }

  void cell_origin_pimpl::
  CLO_ID (const ::std::string& x)
  {
    this->cell_origin_pimpl_state_.cell_origin_->CLO_ID (x);
  }

  void cell_origin_pimpl::
  species (const ::metadata::species& x)
  {
    this->cell_origin_pimpl_state_.cell_origin_->species (x);
  }

  void cell_origin_pimpl::
  strain (const ::std::string& x)
  {
    this->cell_origin_pimpl_state_.cell_origin_->strain (x);
  }

  void cell_origin_pimpl::
  organ (const ::std::string& x)
  {
    this->cell_origin_pimpl_state_.cell_origin_->organ (x);
  }

  void cell_origin_pimpl::
  disease (const ::metadata::disease& x)
  {
    this->cell_origin_pimpl_state_.cell_origin_->disease (x);
  }

  void cell_origin_pimpl::
  morphology (const ::std::string& x)
  {
    this->cell_origin_pimpl_state_.cell_origin_->morphology (x);
  }

  void cell_origin_pimpl::
  patient_derived (const ::metadata::patient_derived& x)
  {
    this->cell_origin_pimpl_state_.cell_origin_->patient_derived (x);
  }

  void cell_origin_pimpl::
  custom (::common::custom* x)
  {
    this->cell_origin_pimpl_state_.cell_origin_->custom (x);
  }

  ::metadata::cell_origin* cell_origin_pimpl::
  post_cell_origin ()
  {
    ::metadata::cell_origin* r = this->cell_origin_pimpl_state_.cell_origin_;
    this->cell_origin_pimpl_state_.cell_origin_ = 0;
    return r;
  }

  // MultiCellDB_pimpl
  //

  void MultiCellDB_pimpl::
  pre ()
  {
    this->MultiCellDB_pimpl_state_.MultiCellDB_ = ::metadata::MultiCellDB ();
  }

  void MultiCellDB_pimpl::
  ID (const ::std::string& x)
  {
    this->MultiCellDB_pimpl_state_.MultiCellDB_.ID (x);
  }

  void MultiCellDB_pimpl::
  name (const ::std::string& x)
  {
    this->MultiCellDB_pimpl_state_.MultiCellDB_.name (x);
  }

  ::metadata::MultiCellDB MultiCellDB_pimpl::
  post_MultiCellDB ()
  {
    return this->MultiCellDB_pimpl_state_.MultiCellDB_;
  }

  // rights_pimpl
  //

  rights_pimpl::
  rights_pimpl (bool b)
  {
    this->rights_pimpl_base_ = b;
    this->rights_pimpl_state_.rights_ = 0;
  }

  rights_pimpl::
  ~rights_pimpl ()
  {
    if (!this->rights_pimpl_base_ && this->rights_pimpl_state_.rights_)
      delete this->rights_pimpl_state_.rights_;
  }

  void rights_pimpl::
  _reset ()
  {
    rights_pskel::_reset ();

    if (!this->rights_pimpl_base_ && this->rights_pimpl_state_.rights_)
    {
      delete this->rights_pimpl_state_.rights_;
      this->rights_pimpl_state_.rights_ = 0;
    }
  }

  void rights_pimpl::
  pre_impl (::metadata::rights* x)
  {
    this->rights_pimpl_state_.rights_ = x;
  }

  void rights_pimpl::
  pre ()
  {
    ::metadata::rights* x = new ::metadata::rights;
    this->pre_impl (x);
  }

  void rights_pimpl::
  license (::metadata::license* x)
  {
    this->rights_pimpl_state_.rights_->license ().push_back (x);
  }

  void rights_pimpl::
  custom (::common::custom* x)
  {
    this->rights_pimpl_state_.rights_->custom (x);
  }

  ::metadata::rights* rights_pimpl::
  post_rights ()
  {
    ::metadata::rights* r = this->rights_pimpl_state_.rights_;
    this->rights_pimpl_state_.rights_ = 0;
    return r;
  }

  // license_pimpl
  //

  license_pimpl::
  license_pimpl (bool b)
  {
    this->license_pimpl_base_ = b;
    this->license_pimpl_state_.license_ = 0;
  }

  license_pimpl::
  ~license_pimpl ()
  {
    if (!this->license_pimpl_base_ && this->license_pimpl_state_.license_)
      delete this->license_pimpl_state_.license_;
  }

  void license_pimpl::
  _reset ()
  {
    license_pskel::_reset ();

    if (!this->license_pimpl_base_ && this->license_pimpl_state_.license_)
    {
      delete this->license_pimpl_state_.license_;
      this->license_pimpl_state_.license_ = 0;
    }
  }

  void license_pimpl::
  pre_impl (::metadata::license* x)
  {
    this->license_pimpl_state_.license_ = x;
  }

  void license_pimpl::
  pre ()
  {
    ::metadata::license* x = new ::metadata::license;
    this->pre_impl (x);
  }

  void license_pimpl::
  LicenseDocument (::metadata::LicenseDocument* x)
  {
    this->license_pimpl_state_.license_->LicenseDocument (x);
  }

  void license_pimpl::
  notes (const ::std::string& x)
  {
    this->license_pimpl_state_.license_->notes (x);
  }

  void license_pimpl::
  custom (::common::custom* x)
  {
    this->license_pimpl_state_.license_->custom (x);
  }

  ::metadata::license* license_pimpl::
  post_license ()
  {
    ::metadata::license* r = this->license_pimpl_state_.license_;
    this->license_pimpl_state_.license_ = 0;
    return r;
  }

  // LicenseDocument_pimpl
  //

  LicenseDocument_pimpl::
  LicenseDocument_pimpl (bool b)
  {
    this->LicenseDocument_pimpl_base_ = b;
    this->LicenseDocument_pimpl_state_.LicenseDocument_ = 0;
  }

  LicenseDocument_pimpl::
  ~LicenseDocument_pimpl ()
  {
    if (!this->LicenseDocument_pimpl_base_ && this->LicenseDocument_pimpl_state_.LicenseDocument_)
      delete this->LicenseDocument_pimpl_state_.LicenseDocument_;
  }

  void LicenseDocument_pimpl::
  _reset ()
  {
    LicenseDocument_pskel::_reset ();

    if (!this->LicenseDocument_pimpl_base_ && this->LicenseDocument_pimpl_state_.LicenseDocument_)
    {
      delete this->LicenseDocument_pimpl_state_.LicenseDocument_;
      this->LicenseDocument_pimpl_state_.LicenseDocument_ = 0;
    }
  }

  void LicenseDocument_pimpl::
  pre_impl (::metadata::LicenseDocument* x)
  {
    this->LicenseDocument_pimpl_state_.LicenseDocument_ = x;
  }

  void LicenseDocument_pimpl::
  pre ()
  {
    ::metadata::LicenseDocument* x = new ::metadata::LicenseDocument;
    this->pre_impl (x);
  }

  void LicenseDocument_pimpl::
  name (const ::std::string& x)
  {
    this->LicenseDocument_pimpl_state_.LicenseDocument_->name (x);
  }

  void LicenseDocument_pimpl::
  URL (const ::metadata::URL& x)
  {
    this->LicenseDocument_pimpl_state_.LicenseDocument_->URL (x);
  }

  void LicenseDocument_pimpl::
  custom (::common::custom* x)
  {
    this->LicenseDocument_pimpl_state_.LicenseDocument_->custom (x);
  }

  ::metadata::LicenseDocument* LicenseDocument_pimpl::
  post_LicenseDocument ()
  {
    ::metadata::LicenseDocument* r = this->LicenseDocument_pimpl_state_.LicenseDocument_;
    this->LicenseDocument_pimpl_state_.LicenseDocument_ = 0;
    return r;
  }

  // metadata_pimpl
  //

  metadata_pimpl::
  metadata_pimpl (bool b)
  {
    this->metadata_pimpl_base_ = b;
    this->metadata_pimpl_state_.metadata_ = 0;
  }

  metadata_pimpl::
  ~metadata_pimpl ()
  {
    if (!this->metadata_pimpl_base_ && this->metadata_pimpl_state_.metadata_)
      delete this->metadata_pimpl_state_.metadata_;
  }

  void metadata_pimpl::
  _reset ()
  {
    metadata_pskel::_reset ();

    if (!this->metadata_pimpl_base_ && this->metadata_pimpl_state_.metadata_)
    {
      delete this->metadata_pimpl_state_.metadata_;
      this->metadata_pimpl_state_.metadata_ = 0;
    }
  }

  void metadata_pimpl::
  pre_impl (::metadata::metadata* x)
  {
    this->metadata_pimpl_state_.metadata_ = x;
  }

  void metadata_pimpl::
  pre ()
  {
    ::metadata::metadata* x = new ::metadata::metadata;
    this->pre_impl (x);
  }

  void metadata_pimpl::
  MultiCellDB (const ::metadata::MultiCellDB& x)
  {
    this->metadata_pimpl_state_.metadata_->MultiCellDB (x);
  }

  void metadata_pimpl::
  description (const ::std::string& x)
  {
    this->metadata_pimpl_state_.metadata_->description (x);
  }

  void metadata_pimpl::
  software (::metadata::software* x)
  {
    this->metadata_pimpl_state_.metadata_->software (x);
  }

  void metadata_pimpl::
  citation (::metadata::citation* x)
  {
    this->metadata_pimpl_state_.metadata_->citation (x);
  }

  void metadata_pimpl::
  curation (::metadata::curation* x)
  {
    this->metadata_pimpl_state_.metadata_->curation (x);
  }

  void metadata_pimpl::
  data_origins (::metadata::data_origins* x)
  {
    this->metadata_pimpl_state_.metadata_->data_origins (x);
  }

  void metadata_pimpl::
  data_analysis (::metadata::data_analysis* x)
  {
    this->metadata_pimpl_state_.metadata_->data_analysis ().push_back (x);
  }

  void metadata_pimpl::
  rights (::metadata::rights* x)
  {
    this->metadata_pimpl_state_.metadata_->rights (x);
  }

  void metadata_pimpl::
  cell_origin (::metadata::cell_origin* x)
  {
    this->metadata_pimpl_state_.metadata_->cell_origin (x);
  }

  void metadata_pimpl::
  current_time (::common::units_decimal_nonnegative* x)
  {
    this->metadata_pimpl_state_.metadata_->current_time (x);
  }

  void metadata_pimpl::
  current_runtime (::common::units_decimal_nonnegative* x)
  {
    this->metadata_pimpl_state_.metadata_->current_runtime (x);
  }

  void metadata_pimpl::
  created (const ::xml_schema::date_time& x)
  {
    this->metadata_pimpl_state_.metadata_->created (x);
  }

  void metadata_pimpl::
  last_modified (const ::xml_schema::date_time& x)
  {
    this->metadata_pimpl_state_.metadata_->last_modified (x);
  }

  void metadata_pimpl::
  notes (const ::std::string& x)
  {
    this->metadata_pimpl_state_.metadata_->notes (x);
  }

  void metadata_pimpl::
  custom (::common::custom* x)
  {
    this->metadata_pimpl_state_.metadata_->custom (x);
  }

  ::metadata::metadata* metadata_pimpl::
  post_metadata ()
  {
    ::metadata::metadata* r = this->metadata_pimpl_state_.metadata_;
    this->metadata_pimpl_state_.metadata_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

