// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "mesh-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

namespace mesh
{
  // bounding_box_sskel
  //

  bool bounding_box_sskel::
  type_present ()
  {
    return this->bounding_box_impl_ ? this->bounding_box_impl_->type_present () : false;
  }

  void bounding_box_sskel::
  _reset ()
  {
    typedef ::common::units_double_list_sskel base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();
  }

  const char* bounding_box_sskel::
  _static_type ()
  {
    return "bounding_box mesh";
  }

  const char* bounding_box_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void bounding_box_sskel::
  pre (const ::common::units_double_list& x)
  {
    assert (this->units_double_list_impl_);
    this->units_double_list_impl_->pre (x);
  }

  ::std::string bounding_box_sskel::
  units ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->units ();
  }

  ::std::string bounding_box_sskel::
  measurement_type ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->measurement_type ();
  }

  double bounding_box_sskel::
  uncertainty ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->uncertainty ();
  }

  double bounding_box_sskel::
  negative_uncertainty ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->negative_uncertainty ();
  }

  double bounding_box_sskel::
  positive_uncertainty ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->positive_uncertainty ();
  }

  double bounding_box_sskel::
  uncertainty_percentage ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->uncertainty_percentage ();
  }

  double bounding_box_sskel::
  negative_uncertainty_percentage ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->negative_uncertainty_percentage ();
  }

  double bounding_box_sskel::
  positive_uncertainty_percentage ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->positive_uncertainty_percentage ();
  }

  double bounding_box_sskel::
  median ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->median ();
  }

  double bounding_box_sskel::
  standard_deviation ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->standard_deviation ();
  }

  const ::common::two_doubles& bounding_box_sskel::
  interquartile_range ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->interquartile_range ();
  }

  const ::common::two_doubles& bounding_box_sskel::
  range ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->range ();
  }

  double bounding_box_sskel::
  min ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->min ();
  }

  double bounding_box_sskel::
  max ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->max ();
  }

  double bounding_box_sskel::
  standard_error ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->standard_error ();
  }

  double bounding_box_sskel::
  standard_error_of_the_mean ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->standard_error_of_the_mean ();
  }

  int bounding_box_sskel::
  number_obs ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->number_obs ();
  }

  double bounding_box_sskel::
  skewnesss ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->skewnesss ();
  }

  double bounding_box_sskel::
  kurtosis ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->kurtosis ();
  }

  void bounding_box_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::units_double_list_sskel base;
    base::_serialize_attributes ();

    // type
    //
    if (this->type_present ())
    {
      const ::std::string& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);
        this->type_serializer_->_serialize_content ();
        this->type_serializer_->_post_impl ();
        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }
  }

  // mesh_sskel
  //

  bool mesh_sskel::
  type_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->type_present () : false;
  }

  bool mesh_sskel::
  uniform_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->uniform_present () : false;
  }

  bool mesh_sskel::
  regular_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->regular_present () : false;
  }

  bool mesh_sskel::
  units_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->units_present () : false;
  }

  bool mesh_sskel::
  bounding_box_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->bounding_box_present () : false;
  }

  bool mesh_sskel::
  x_coordinates_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->x_coordinates_present () : false;
  }

  bool mesh_sskel::
  y_coordinates_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->y_coordinates_present () : false;
  }

  bool mesh_sskel::
  z_coordinates_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->z_coordinates_present () : false;
  }

  bool mesh_sskel::
  voxels_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->voxels_present () : false;
  }

  bool mesh_sskel::
  custom_present ()
  {
    return this->mesh_impl_ ? this->mesh_impl_->custom_present () : false;
  }

  void mesh_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    if (this->uniform_serializer_)
      this->uniform_serializer_->_reset ();

    if (this->regular_serializer_)
      this->regular_serializer_->_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();

    this->resetting_ = true;

    if (this->bounding_box_serializer_)
      this->bounding_box_serializer_->_reset ();

    if (this->bounding_box_serializer_map_)
      this->bounding_box_serializer_map_->reset ();

    if (this->x_coordinates_serializer_)
      this->x_coordinates_serializer_->_reset ();

    if (this->x_coordinates_serializer_map_)
      this->x_coordinates_serializer_map_->reset ();

    if (this->y_coordinates_serializer_)
      this->y_coordinates_serializer_->_reset ();

    if (this->y_coordinates_serializer_map_)
      this->y_coordinates_serializer_map_->reset ();

    if (this->z_coordinates_serializer_)
      this->z_coordinates_serializer_->_reset ();

    if (this->z_coordinates_serializer_map_)
      this->z_coordinates_serializer_map_->reset ();

    if (this->voxels_serializer_)
      this->voxels_serializer_->_reset ();

    if (this->voxels_serializer_map_)
      this->voxels_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* mesh_sskel::
  _static_type ()
  {
    return "mesh mesh";
  }

  const char* mesh_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void mesh_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // type
    //
    if (this->type_present ())
    {
      const ::std::string& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);
        this->type_serializer_->_serialize_content ();
        this->type_serializer_->_post_impl ();
        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }

    // uniform
    //
    if (this->uniform_present ())
    {
      bool r = this->uniform ();

      if (this->uniform_serializer_)
      {
        this->uniform_serializer_->pre (r);
        this->_start_attribute ("uniform");
        this->uniform_serializer_->_pre_impl (ctx);
        this->uniform_serializer_->_serialize_content ();
        this->uniform_serializer_->_post_impl ();
        this->_end_attribute ();
        this->uniform_serializer_->post ();
      }
    }

    // regular
    //
    if (this->regular_present ())
    {
      bool r = this->regular ();

      if (this->regular_serializer_)
      {
        this->regular_serializer_->pre (r);
        this->_start_attribute ("regular");
        this->regular_serializer_->_pre_impl (ctx);
        this->regular_serializer_->_serialize_content ();
        this->regular_serializer_->_post_impl ();
        this->_end_attribute ();
        this->regular_serializer_->post ();
      }
    }

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);
        this->units_serializer_->_serialize_content ();
        this->units_serializer_->_post_impl ();
        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }
  }

  void mesh_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // bounding_box
    //
    if (this->bounding_box_present ())
    {
      ctx.type_id (0);
      const ::mesh::bounding_box& r = this->bounding_box ();

      const void* t = ctx.type_id ();
      ::mesh::bounding_box_sskel* s = 0;

      if (t == 0 && this->bounding_box_serializer_ != 0)
        s = this->bounding_box_serializer_;
      else if (this->bounding_box_serializer_map_ != 0)
        s = static_cast< ::mesh::bounding_box_sskel* > (
          this->bounding_box_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::mesh::bounding_box_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("bounding_box");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // x_coordinates
    //
    if (this->x_coordinates_present ())
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->x_coordinates ();

      const void* t = ctx.type_id ();
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->x_coordinates_serializer_ != 0)
        s = this->x_coordinates_serializer_;
      else if (this->x_coordinates_serializer_map_ != 0)
        s = static_cast< ::common::units_double_list_sskel* > (
          this->x_coordinates_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_double_list_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("x_coordinates");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // y_coordinates
    //
    if (this->y_coordinates_present ())
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->y_coordinates ();

      const void* t = ctx.type_id ();
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->y_coordinates_serializer_ != 0)
        s = this->y_coordinates_serializer_;
      else if (this->y_coordinates_serializer_map_ != 0)
        s = static_cast< ::common::units_double_list_sskel* > (
          this->y_coordinates_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_double_list_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("y_coordinates");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // z_coordinates
    //
    if (this->z_coordinates_present ())
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->z_coordinates ();

      const void* t = ctx.type_id ();
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->z_coordinates_serializer_ != 0)
        s = this->z_coordinates_serializer_;
      else if (this->z_coordinates_serializer_map_ != 0)
        s = static_cast< ::common::units_double_list_sskel* > (
          this->z_coordinates_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_double_list_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("z_coordinates");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // voxels
    //
    if (this->voxels_present ())
    {
      ctx.type_id (0);
      const ::mesh::list_of_voxels& r = this->voxels ();

      const void* t = ctx.type_id ();
      ::mesh::list_of_voxels_sskel* s = 0;

      if (t == 0 && this->voxels_serializer_ != 0)
        s = this->voxels_serializer_;
      else if (this->voxels_serializer_map_ != 0)
        s = static_cast< ::mesh::list_of_voxels_sskel* > (
          this->voxels_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::mesh::list_of_voxels_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("voxels");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // list_of_voxels_sskel
  //

  bool list_of_voxels_sskel::
  type_present ()
  {
    return this->list_of_voxels_impl_ ? this->list_of_voxels_impl_->type_present () : false;
  }

  bool list_of_voxels_sskel::
  filename_present ()
  {
    return this->list_of_voxels_impl_ ? this->list_of_voxels_impl_->filename_present () : false;
  }

  bool list_of_voxels_sskel::
  custom_present ()
  {
    return this->list_of_voxels_impl_ ? this->list_of_voxels_impl_->custom_present () : false;
  }

  void list_of_voxels_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    this->resetting_ = true;

    if (this->filename_serializer_)
      this->filename_serializer_->_reset ();

    if (this->filename_serializer_map_)
      this->filename_serializer_map_->reset ();

    if (this->voxel_serializer_)
      this->voxel_serializer_->_reset ();

    if (this->voxel_serializer_map_)
      this->voxel_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_voxels_sskel::
  _static_type ()
  {
    return "list_of_voxels mesh";
  }

  const char* list_of_voxels_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void list_of_voxels_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // type
    //
    if (this->type_present ())
    {
      const ::common::data_storage_formats& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);
        this->type_serializer_->_serialize_content ();
        this->type_serializer_->_post_impl ();
        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }
  }

  void list_of_voxels_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // filename
    //
    if (this->filename_present ())
    {
      ctx.type_id (0);
      const ::std::string& r = this->filename ();

      const void* t = ctx.type_id ();
      ::xml_schema::string_sskel* s = 0;

      if (t == 0 && this->filename_serializer_ != 0)
        s = this->filename_serializer_;
      else if (this->filename_serializer_map_ != 0)
        s = static_cast< ::xml_schema::string_sskel* > (
          this->filename_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::xml_schema::string_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("filename");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // voxel
    //
    while (this->voxel_next ())
    {
      ctx.type_id (0);
      const ::mesh::voxel& r = this->voxel ();

      const void* t = ctx.type_id ();
      ::mesh::voxel_sskel* s = 0;

      if (t == 0 && this->voxel_serializer_ != 0)
        s = this->voxel_serializer_;
      else if (this->voxel_serializer_map_ != 0)
        s = static_cast< ::mesh::voxel_sskel* > (
          this->voxel_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::mesh::voxel_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("voxel");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // voxel_sskel
  //

  bool voxel_sskel::
  ID_present ()
  {
    return this->voxel_impl_ ? this->voxel_impl_->ID_present () : false;
  }

  bool voxel_sskel::
  type_present ()
  {
    return this->voxel_impl_ ? this->voxel_impl_->type_present () : false;
  }

  bool voxel_sskel::
  custom_present ()
  {
    return this->voxel_impl_ ? this->voxel_impl_->custom_present () : false;
  }

  void voxel_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    this->resetting_ = true;

    if (this->center_serializer_)
      this->center_serializer_->_reset ();

    if (this->center_serializer_map_)
      this->center_serializer_map_->reset ();

    if (this->volume_serializer_)
      this->volume_serializer_->_reset ();

    if (this->volume_serializer_map_)
      this->volume_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* voxel_sskel::
  _static_type ()
  {
    return "voxel mesh";
  }

  const char* voxel_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void voxel_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    // type
    //
    if (this->type_present ())
    {
      const ::std::string& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);
        this->type_serializer_->_serialize_content ();
        this->type_serializer_->_post_impl ();
        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }
  }

  void voxel_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // center
    //
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->center ();

      const void* t = ctx.type_id ();
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->center_serializer_ != 0)
        s = this->center_serializer_;
      else if (this->center_serializer_map_ != 0)
        s = static_cast< ::common::units_double_list_sskel* > (
          this->center_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_double_list_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("center");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // volume
    //
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->volume ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->volume_serializer_ != 0)
        s = this->volume_serializer_;
      else if (this->volume_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_nonnegative_sskel* > (
          this->volume_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_nonnegative_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("volume");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // node_sskel
  //

  bool node_sskel::
  ID_present ()
  {
    return this->node_impl_ ? this->node_impl_->ID_present () : false;
  }

  bool node_sskel::
  custom_present ()
  {
    return this->node_impl_ ? this->node_impl_->custom_present () : false;
  }

  void node_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->position_serializer_)
      this->position_serializer_->_reset ();

    if (this->position_serializer_map_)
      this->position_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* node_sskel::
  _static_type ()
  {
    return "node mesh";
  }

  const char* node_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void node_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }
  }

  void node_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // position
    //
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->position ();

      const void* t = ctx.type_id ();
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->position_serializer_ != 0)
        s = this->position_serializer_;
      else if (this->position_serializer_map_ != 0)
        s = static_cast< ::common::units_double_list_sskel* > (
          this->position_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_double_list_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("position");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // edge_sskel
  //

  bool edge_sskel::
  ID_present ()
  {
    return this->edge_impl_ ? this->edge_impl_->ID_present () : false;
  }

  void edge_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->node_ID_serializer_)
      this->node_ID_serializer_->_reset ();

    if (this->node_ID_serializer_map_)
      this->node_ID_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* edge_sskel::
  _static_type ()
  {
    return "edge mesh";
  }

  const char* edge_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void edge_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }
  }

  void edge_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // node_ID
    //
    while (this->node_ID_next ())
    {
      ctx.type_id (0);
      unsigned int r = this->node_ID ();

      const void* t = ctx.type_id ();
      ::xml_schema::unsigned_int_sskel* s = 0;

      if (t == 0 && this->node_ID_serializer_ != 0)
        s = this->node_ID_serializer_;
      else if (this->node_ID_serializer_map_ != 0)
        s = static_cast< ::xml_schema::unsigned_int_sskel* > (
          this->node_ID_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::xml_schema::unsigned_int_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("node_ID");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // face_sskel
  //

  bool face_sskel::
  ID_present ()
  {
    return this->face_impl_ ? this->face_impl_->ID_present () : false;
  }

  void face_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->edge_ID_serializer_)
      this->edge_ID_serializer_->_reset ();

    if (this->edge_ID_serializer_map_)
      this->edge_ID_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* face_sskel::
  _static_type ()
  {
    return "face mesh";
  }

  const char* face_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void face_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }
  }

  void face_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // edge_ID
    //
    while (this->edge_ID_next ())
    {
      ctx.type_id (0);
      unsigned int r = this->edge_ID ();

      const void* t = ctx.type_id ();
      ::xml_schema::unsigned_int_sskel* s = 0;

      if (t == 0 && this->edge_ID_serializer_ != 0)
        s = this->edge_ID_serializer_;
      else if (this->edge_ID_serializer_map_ != 0)
        s = static_cast< ::xml_schema::unsigned_int_sskel* > (
          this->edge_ID_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::xml_schema::unsigned_int_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("edge_ID");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // int_list_xpath_sskel
  //

  bool int_list_xpath_sskel::
  xpath_present ()
  {
    return this->int_list_xpath_impl_ ? this->int_list_xpath_impl_->xpath_present () : false;
  }

  bool int_list_xpath_sskel::
  grouping_number_present ()
  {
    return this->int_list_xpath_impl_ ? this->int_list_xpath_impl_->grouping_number_present () : false;
  }

  void int_list_xpath_sskel::
  _reset ()
  {
    typedef ::common::unsigned_int_list_sskel base;
    base::_reset ();

    if (this->xpath_serializer_)
      this->xpath_serializer_->_reset ();

    if (this->grouping_number_serializer_)
      this->grouping_number_serializer_->_reset ();
  }

  const char* int_list_xpath_sskel::
  _static_type ()
  {
    return "int_list_xpath mesh";
  }

  const char* int_list_xpath_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void int_list_xpath_sskel::
  pre (const ::common::unsigned_int_list& x)
  {
    assert (this->unsigned_int_list_impl_);
    this->unsigned_int_list_impl_->pre (x);
  }

  unsigned int int_list_xpath_sskel::
  item ()
  {
    assert (this->unsigned_int_list_impl_);
    return this->unsigned_int_list_impl_->item ();
  }

  void int_list_xpath_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::unsigned_int_list_sskel base;
    base::_serialize_attributes ();

    // xpath
    //
    if (this->xpath_present ())
    {
      const ::std::string& r = this->xpath ();

      if (this->xpath_serializer_)
      {
        this->xpath_serializer_->pre (r);
        this->_start_attribute ("xpath");
        this->xpath_serializer_->_pre_impl (ctx);
        this->xpath_serializer_->_serialize_content ();
        this->xpath_serializer_->_post_impl ();
        this->_end_attribute ();
        this->xpath_serializer_->post ();
      }
    }

    // grouping_number
    //
    if (this->grouping_number_present ())
    {
      unsigned short r = this->grouping_number ();

      if (this->grouping_number_serializer_)
      {
        this->grouping_number_serializer_->pre (r);
        this->_start_attribute ("grouping_number");
        this->grouping_number_serializer_->_pre_impl (ctx);
        this->grouping_number_serializer_->_serialize_content ();
        this->grouping_number_serializer_->_post_impl ();
        this->_end_attribute ();
        this->grouping_number_serializer_->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

