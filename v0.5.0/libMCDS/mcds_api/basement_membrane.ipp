// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef BASEMENT_MEMBRANE_IPP
#define BASEMENT_MEMBRANE_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

#include "mesh.ipp"

namespace basement
{
  // basement_edge
  //

  inline
  const ::common::units_decimal_nonnegative& basement_edge::
  tensile_strength () const
  {
    return *this->tensile_strength_;
  }

  inline
  ::common::units_decimal_nonnegative& basement_edge::
  tensile_strength ()
  {
    return *this->tensile_strength_;
  }

  inline
  void basement_edge::
  tensile_strength (::common::units_decimal_nonnegative* x)
  {
    delete this->tensile_strength_;
    this->tensile_strength_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* basement_edge::
  tensile_strength_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->tensile_strength_;
    this->tensile_strength_ = 0;
    return r;
  }

  inline
  const ::common::custom& basement_edge::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& basement_edge::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void basement_edge::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* basement_edge::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // basement_face
  //

  inline
  const ::common::units_decimal_nonnegative& basement_face::
  thickness () const
  {
    return *this->thickness_;
  }

  inline
  ::common::units_decimal_nonnegative& basement_face::
  thickness ()
  {
    return *this->thickness_;
  }

  inline
  void basement_face::
  thickness (::common::units_decimal_nonnegative* x)
  {
    delete this->thickness_;
    this->thickness_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* basement_face::
  thickness_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->thickness_;
    this->thickness_ = 0;
    return r;
  }

  inline
  const ::common::custom& basement_face::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& basement_face::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void basement_face::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* basement_face::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // nodes
  //

  inline
  const ::mesh::node& nodes::
  node () const
  {
    return *this->node_;
  }

  inline
  ::mesh::node& nodes::
  node ()
  {
    return *this->node_;
  }

  inline
  void nodes::
  node (::mesh::node* x)
  {
    delete this->node_;
    this->node_ = x;
  }

  inline
  ::mesh::node* nodes::
  node_detach ()
  {
    ::mesh::node* r = this->node_;
    this->node_ = 0;
    return r;
  }

  inline
  const ::common::custom& nodes::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& nodes::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void nodes::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* nodes::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // egdes
  //

  inline
  const ::basement::basement_edge& egdes::
  edge () const
  {
    return *this->edge_;
  }

  inline
  ::basement::basement_edge& egdes::
  edge ()
  {
    return *this->edge_;
  }

  inline
  void egdes::
  edge (::basement::basement_edge* x)
  {
    delete this->edge_;
    this->edge_ = x;
  }

  inline
  ::basement::basement_edge* egdes::
  edge_detach ()
  {
    ::basement::basement_edge* r = this->edge_;
    this->edge_ = 0;
    return r;
  }

  inline
  const ::common::custom& egdes::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& egdes::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void egdes::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* egdes::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // faces
  //

  inline
  const ::basement::basement_face& faces::
  face () const
  {
    return *this->face_;
  }

  inline
  ::basement::basement_face& faces::
  face ()
  {
    return *this->face_;
  }

  inline
  void faces::
  face (::basement::basement_face* x)
  {
    delete this->face_;
    this->face_ = x;
  }

  inline
  ::basement::basement_face* faces::
  face_detach ()
  {
    ::basement::basement_face* r = this->face_;
    this->face_ = 0;
    return r;
  }

  inline
  const ::common::custom& faces::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& faces::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void faces::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* faces::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // basement_membrane
  //

  inline
  bool basement_membrane::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void basement_membrane::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned int basement_membrane::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned int& basement_membrane::
  ID ()
  {
    return this->ID_;
  }

  inline
  void basement_membrane::
  ID (unsigned int x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  const ::basement::nodes& basement_membrane::
  nodes () const
  {
    return *this->nodes_;
  }

  inline
  ::basement::nodes& basement_membrane::
  nodes ()
  {
    return *this->nodes_;
  }

  inline
  void basement_membrane::
  nodes (::basement::nodes* x)
  {
    delete this->nodes_;
    this->nodes_ = x;
  }

  inline
  ::basement::nodes* basement_membrane::
  nodes_detach ()
  {
    ::basement::nodes* r = this->nodes_;
    this->nodes_ = 0;
    return r;
  }

  inline
  const ::basement::egdes& basement_membrane::
  edges () const
  {
    return *this->edges_;
  }

  inline
  ::basement::egdes& basement_membrane::
  edges ()
  {
    return *this->edges_;
  }

  inline
  void basement_membrane::
  edges (::basement::egdes* x)
  {
    delete this->edges_;
    this->edges_ = x;
  }

  inline
  ::basement::egdes* basement_membrane::
  edges_detach ()
  {
    ::basement::egdes* r = this->edges_;
    this->edges_ = 0;
    return r;
  }

  inline
  const ::basement::faces& basement_membrane::
  faces () const
  {
    return *this->faces_;
  }

  inline
  ::basement::faces& basement_membrane::
  faces ()
  {
    return *this->faces_;
  }

  inline
  void basement_membrane::
  faces (::basement::faces* x)
  {
    delete this->faces_;
    this->faces_ = x;
  }

  inline
  ::basement::faces* basement_membrane::
  faces_detach ()
  {
    ::basement::faces* r = this->faces_;
    this->faces_ = 0;
    return r;
  }

  inline
  const ::common::custom& basement_membrane::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& basement_membrane::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void basement_membrane::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* basement_membrane::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // BASEMENT_MEMBRANE_IPP
