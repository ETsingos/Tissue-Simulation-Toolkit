// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_DATASET_HPP
#define PHENOTYPE_DATASET_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "phenotype_dataset-fwd.hpp"

#ifndef XSDE_DONT_INCLUDE_INLINE
#define XSDE_DONT_INCLUDE_INLINE

#include "common.hpp"

#include "microenvironment.hpp"

#include "phenotype.hpp"

#include "phenotype_base.hpp"

#undef XSDE_DONT_INCLUDE_INLINE
#else

#include "common.hpp"

#include "microenvironment.hpp"

#include "phenotype.hpp"

#include "phenotype_base.hpp"

#endif // XSDE_DONT_INCLUDE_INLINE

namespace phenotype_dataset
{
  // phenotype_dataset (variable-length)
  //
  class phenotype_dataset
  {
    private:
    phenotype_dataset (const phenotype_dataset&);
    phenotype_dataset& operator= (const phenotype_dataset&);

    public:
    phenotype_dataset ();

    phenotype_dataset*
    _clone () const;

    ~phenotype_dataset ();

    // keywords
    //
    bool
    keywords_present () const;

    void
    keywords_present (bool);

    const ::std::string&
    keywords () const;

    ::std::string&
    keywords ();

    void
    keywords (const ::std::string&);

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    unsigned long long
    ID () const;

    unsigned long long&
    ID ();

    void
    ID (unsigned long long);

    // microenvironment
    //
    bool
    microenvironment_present () const;

    const ::microenvironment::microenvironment&
    microenvironment () const;

    ::microenvironment::microenvironment&
    microenvironment ();

    void
    microenvironment (::microenvironment::microenvironment*);

    ::microenvironment::microenvironment*
    microenvironment_detach ();

    // phenotype
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::phenotype::phenotype > phenotype_sequence;
    typedef phenotype_sequence::iterator phenotype_iterator;
    typedef phenotype_sequence::const_iterator phenotype_const_iterator;

    const phenotype_sequence&
    phenotype () const;

    phenotype_sequence&
    phenotype ();

    // cell_part
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::phenotype_base::cell_parts > cell_part_sequence;
    typedef cell_part_sequence::iterator cell_part_iterator;
    typedef cell_part_sequence::const_iterator cell_part_const_iterator;

    const cell_part_sequence&
    cell_part () const;

    cell_part_sequence&
    cell_part ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (phenotype_dataset&) const;

    private:
    ::std::string keywords_;
    unsigned char keywords_present_;
    unsigned long long ID_;
    unsigned char ID_present_;
    ::microenvironment::microenvironment* microenvironment_;
    phenotype_sequence phenotype_;
    cell_part_sequence cell_part_;
    ::common::custom* custom_;
  };
}

#ifndef XSDE_DONT_INCLUDE_INLINE

#include "common.ipp"

#include "microenvironment.ipp"

#include "phenotype.ipp"

#include "phenotype_base.ipp"

#endif // XSDE_DONT_INCLUDE_INLINE

#ifndef XSDE_DONT_INCLUDE_INLINE
#include "phenotype_dataset.ipp"
#endif // XSDE_DONT_INCLUDE_INLINE

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PHENOTYPE_DATASET_HPP
