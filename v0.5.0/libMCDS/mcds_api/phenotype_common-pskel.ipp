// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace phenotype_common
{
  // adhesion_pskel
  //

  inline
  void adhesion_pskel::
  adhesion_bond_breaking_rate_parser (::common::units_decimal_pskel& p)
  {
    this->adhesion_bond_breaking_rate_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  adhesion_bond_breaking_rate_parser (::xml_schema::parser_map& m)
  {
    this->adhesion_bond_breaking_rate_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  adhesion_bond_formation_rate_parser (::common::units_decimal_pskel& p)
  {
    this->adhesion_bond_formation_rate_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  adhesion_bond_formation_rate_parser (::xml_schema::parser_map& m)
  {
    this->adhesion_bond_formation_rate_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  adhesion_spring_constant_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->adhesion_spring_constant_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  adhesion_spring_constant_parser (::xml_schema::parser_map& m)
  {
    this->adhesion_spring_constant_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  adhesion_receptor_density_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->adhesion_receptor_density_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  adhesion_receptor_density_parser (::xml_schema::parser_map& m)
  {
    this->adhesion_receptor_density_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  surface_binding_energy_parser (::common::units_decimal_pskel& p)
  {
    this->surface_binding_energy_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  surface_binding_energy_parser (::xml_schema::parser_map& m)
  {
    this->surface_binding_energy_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  number_of_adhered_cells_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->number_of_adhered_cells_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  number_of_adhered_cells_parser (::xml_schema::parser_map& m)
  {
    this->number_of_adhered_cells_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  maximum_number_of_adhered_cells_parser (::common::units_unsignedShort_pskel& p)
  {
    this->maximum_number_of_adhered_cells_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  maximum_number_of_adhered_cells_parser (::xml_schema::parser_map& m)
  {
    this->maximum_number_of_adhered_cells_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  adhered_surface_area_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->adhered_surface_area_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  adhered_surface_area_parser (::xml_schema::parser_map& m)
  {
    this->adhered_surface_area_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  maximum_adhered_surface_area_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->maximum_adhered_surface_area_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  maximum_adhered_surface_area_parser (::xml_schema::parser_map& m)
  {
    this->maximum_adhered_surface_area_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  adhesion_force_per_surface_area_parser (::common::units_decimal_pskel& p)
  {
    this->adhesion_force_per_surface_area_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  adhesion_force_per_surface_area_parser (::xml_schema::parser_map& m)
  {
    this->adhesion_force_per_surface_area_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  adhesion_probability_parser (::common::units_fraction_pskel& p)
  {
    this->adhesion_probability_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  adhesion_probability_parser (::xml_schema::parser_map& m)
  {
    this->adhesion_probability_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  detachment_proability_parser (::common::units_fraction_pskel& p)
  {
    this->detachment_proability_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  detachment_proability_parser (::xml_schema::parser_map& m)
  {
    this->detachment_proability_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  rolling_observation_parser (::phenotype_common::rolling_observation_pskel& p)
  {
    this->rolling_observation_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  rolling_observation_parser (::xml_schema::parser_map& m)
  {
    this->rolling_observation_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void adhesion_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void adhesion_pskel::
  parsers (::common::units_decimal_pskel& adhesion_bond_breaking_rate,
           ::common::units_decimal_pskel& adhesion_bond_formation_rate,
           ::common::units_decimal_nonnegative_pskel& adhesion_spring_constant,
           ::common::units_decimal_nonnegative_pskel& adhesion_receptor_density,
           ::common::units_decimal_pskel& surface_binding_energy,
           ::common::units_decimal_nonnegative_pskel& number_of_adhered_cells,
           ::common::units_unsignedShort_pskel& maximum_number_of_adhered_cells,
           ::common::units_decimal_nonnegative_pskel& adhered_surface_area,
           ::common::units_decimal_nonnegative_pskel& maximum_adhered_surface_area,
           ::common::units_decimal_pskel& adhesion_force_per_surface_area,
           ::common::units_fraction_pskel& adhesion_probability,
           ::common::units_fraction_pskel& detachment_proability,
           ::phenotype_common::rolling_observation_pskel& rolling_observation,
           ::common::custom_pskel& custom)
  {
    this->adhesion_bond_breaking_rate_parser_ = &adhesion_bond_breaking_rate;
    this->adhesion_bond_formation_rate_parser_ = &adhesion_bond_formation_rate;
    this->adhesion_spring_constant_parser_ = &adhesion_spring_constant;
    this->adhesion_receptor_density_parser_ = &adhesion_receptor_density;
    this->surface_binding_energy_parser_ = &surface_binding_energy;
    this->number_of_adhered_cells_parser_ = &number_of_adhered_cells;
    this->maximum_number_of_adhered_cells_parser_ = &maximum_number_of_adhered_cells;
    this->adhered_surface_area_parser_ = &adhered_surface_area;
    this->maximum_adhered_surface_area_parser_ = &maximum_adhered_surface_area;
    this->adhesion_force_per_surface_area_parser_ = &adhesion_force_per_surface_area;
    this->adhesion_probability_parser_ = &adhesion_probability;
    this->detachment_proability_parser_ = &detachment_proability;
    this->rolling_observation_parser_ = &rolling_observation;
    this->custom_parser_ = &custom;
  }

  inline
  void adhesion_pskel::
  parser_maps (::xml_schema::parser_map& adhesion_bond_breaking_rate,
               ::xml_schema::parser_map& adhesion_bond_formation_rate,
               ::xml_schema::parser_map& adhesion_spring_constant,
               ::xml_schema::parser_map& adhesion_receptor_density,
               ::xml_schema::parser_map& surface_binding_energy,
               ::xml_schema::parser_map& number_of_adhered_cells,
               ::xml_schema::parser_map& maximum_number_of_adhered_cells,
               ::xml_schema::parser_map& adhered_surface_area,
               ::xml_schema::parser_map& maximum_adhered_surface_area,
               ::xml_schema::parser_map& adhesion_force_per_surface_area,
               ::xml_schema::parser_map& adhesion_probability,
               ::xml_schema::parser_map& detachment_proability,
               ::xml_schema::parser_map& rolling_observation,
               ::xml_schema::parser_map& custom)
  {
    this->adhesion_bond_breaking_rate_parser_map_ = &adhesion_bond_breaking_rate;
    this->adhesion_bond_formation_rate_parser_map_ = &adhesion_bond_formation_rate;
    this->adhesion_spring_constant_parser_map_ = &adhesion_spring_constant;
    this->adhesion_receptor_density_parser_map_ = &adhesion_receptor_density;
    this->surface_binding_energy_parser_map_ = &surface_binding_energy;
    this->number_of_adhered_cells_parser_map_ = &number_of_adhered_cells;
    this->maximum_number_of_adhered_cells_parser_map_ = &maximum_number_of_adhered_cells;
    this->adhered_surface_area_parser_map_ = &adhered_surface_area;
    this->maximum_adhered_surface_area_parser_map_ = &maximum_adhered_surface_area;
    this->adhesion_force_per_surface_area_parser_map_ = &adhesion_force_per_surface_area;
    this->adhesion_probability_parser_map_ = &adhesion_probability;
    this->detachment_proability_parser_map_ = &detachment_proability;
    this->rolling_observation_parser_map_ = &rolling_observation;
    this->custom_parser_map_ = &custom;
  }

  inline
  adhesion_pskel::
  adhesion_pskel ()
  : adhesion_impl_ (0),
    adhesion_bond_breaking_rate_parser_ (0),
    adhesion_bond_breaking_rate_parser_map_ (0),
    adhesion_bond_formation_rate_parser_ (0),
    adhesion_bond_formation_rate_parser_map_ (0),
    adhesion_spring_constant_parser_ (0),
    adhesion_spring_constant_parser_map_ (0),
    adhesion_receptor_density_parser_ (0),
    adhesion_receptor_density_parser_map_ (0),
    surface_binding_energy_parser_ (0),
    surface_binding_energy_parser_map_ (0),
    number_of_adhered_cells_parser_ (0),
    number_of_adhered_cells_parser_map_ (0),
    maximum_number_of_adhered_cells_parser_ (0),
    maximum_number_of_adhered_cells_parser_map_ (0),
    adhered_surface_area_parser_ (0),
    adhered_surface_area_parser_map_ (0),
    maximum_adhered_surface_area_parser_ (0),
    maximum_adhered_surface_area_parser_map_ (0),
    adhesion_force_per_surface_area_parser_ (0),
    adhesion_force_per_surface_area_parser_map_ (0),
    adhesion_probability_parser_ (0),
    adhesion_probability_parser_map_ (0),
    detachment_proability_parser_ (0),
    detachment_proability_parser_map_ (0),
    rolling_observation_parser_ (0),
    rolling_observation_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  adhesion_pskel::
  adhesion_pskel (adhesion_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    adhesion_impl_ (impl),
    adhesion_bond_breaking_rate_parser_ (0),
    adhesion_bond_breaking_rate_parser_map_ (0),
    adhesion_bond_formation_rate_parser_ (0),
    adhesion_bond_formation_rate_parser_map_ (0),
    adhesion_spring_constant_parser_ (0),
    adhesion_spring_constant_parser_map_ (0),
    adhesion_receptor_density_parser_ (0),
    adhesion_receptor_density_parser_map_ (0),
    surface_binding_energy_parser_ (0),
    surface_binding_energy_parser_map_ (0),
    number_of_adhered_cells_parser_ (0),
    number_of_adhered_cells_parser_map_ (0),
    maximum_number_of_adhered_cells_parser_ (0),
    maximum_number_of_adhered_cells_parser_map_ (0),
    adhered_surface_area_parser_ (0),
    adhered_surface_area_parser_map_ (0),
    maximum_adhered_surface_area_parser_ (0),
    maximum_adhered_surface_area_parser_map_ (0),
    adhesion_force_per_surface_area_parser_ (0),
    adhesion_force_per_surface_area_parser_map_ (0),
    adhesion_probability_parser_ (0),
    adhesion_probability_parser_map_ (0),
    detachment_proability_parser_ (0),
    detachment_proability_parser_map_ (0),
    rolling_observation_parser_ (0),
    rolling_observation_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // rolling_observation_pskel
  //

  inline
  void rolling_observation_pskel::
  rolling_velocity_parser (::common::units_decimal_pskel& p)
  {
    this->rolling_velocity_parser_ = &p;
  }

  inline
  void rolling_observation_pskel::
  rolling_velocity_parser (::xml_schema::parser_map& m)
  {
    this->rolling_velocity_parser_map_ = &m;
  }

  inline
  void rolling_observation_pskel::
  shear_stress_parser (::common::units_decimal_pskel& p)
  {
    this->shear_stress_parser_ = &p;
  }

  inline
  void rolling_observation_pskel::
  shear_stress_parser (::xml_schema::parser_map& m)
  {
    this->shear_stress_parser_map_ = &m;
  }

  inline
  void rolling_observation_pskel::
  parsers (::common::units_decimal_pskel& rolling_velocity,
           ::common::units_decimal_pskel& shear_stress)
  {
    this->rolling_velocity_parser_ = &rolling_velocity;
    this->shear_stress_parser_ = &shear_stress;
  }

  inline
  void rolling_observation_pskel::
  parser_maps (::xml_schema::parser_map& rolling_velocity,
               ::xml_schema::parser_map& shear_stress)
  {
    this->rolling_velocity_parser_map_ = &rolling_velocity;
    this->shear_stress_parser_map_ = &shear_stress;
  }

  inline
  rolling_observation_pskel::
  rolling_observation_pskel ()
  : rolling_observation_impl_ (0),
    rolling_velocity_parser_ (0),
    rolling_velocity_parser_map_ (0),
    shear_stress_parser_ (0),
    shear_stress_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  rolling_observation_pskel::
  rolling_observation_pskel (rolling_observation_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    rolling_observation_impl_ (impl),
    rolling_velocity_parser_ (0),
    rolling_velocity_parser_map_ (0),
    shear_stress_parser_ (0),
    shear_stress_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // friction_pskel
  //

  inline
  void friction_pskel::
  compression_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->compression_parser_ = &p;
  }

  inline
  void friction_pskel::
  compression_parser (::xml_schema::parser_map& m)
  {
    this->compression_parser_map_ = &m;
  }

  inline
  void friction_pskel::
  ECM_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->ECM_parser_ = &p;
  }

  inline
  void friction_pskel::
  ECM_parser (::xml_schema::parser_map& m)
  {
    this->ECM_parser_map_ = &m;
  }

  inline
  void friction_pskel::
  shear_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->shear_parser_ = &p;
  }

  inline
  void friction_pskel::
  shear_parser (::xml_schema::parser_map& m)
  {
    this->shear_parser_map_ = &m;
  }

  inline
  void friction_pskel::
  parsers (::common::units_decimal_nonnegative_pskel& compression,
           ::common::units_decimal_nonnegative_pskel& ECM,
           ::common::units_decimal_nonnegative_pskel& shear)
  {
    this->compression_parser_ = &compression;
    this->ECM_parser_ = &ECM;
    this->shear_parser_ = &shear;
  }

  inline
  void friction_pskel::
  parser_maps (::xml_schema::parser_map& compression,
               ::xml_schema::parser_map& ECM,
               ::xml_schema::parser_map& shear)
  {
    this->compression_parser_map_ = &compression;
    this->ECM_parser_map_ = &ECM;
    this->shear_parser_map_ = &shear;
  }

  inline
  friction_pskel::
  friction_pskel ()
  : friction_impl_ (0),
    compression_parser_ (0),
    compression_parser_map_ (0),
    ECM_parser_ (0),
    ECM_parser_map_ (0),
    shear_parser_ (0),
    shear_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  friction_pskel::
  friction_pskel (friction_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    friction_impl_ (impl),
    compression_parser_ (0),
    compression_parser_map_ (0),
    ECM_parser_ (0),
    ECM_parser_map_ (0),
    shear_parser_ (0),
    shear_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // mechanics_pskel
  //

  inline
  void mechanics_pskel::
  friction_parser (::phenotype_common::friction_pskel& p)
  {
    this->friction_parser_ = &p;
  }

  inline
  void mechanics_pskel::
  friction_parser (::xml_schema::parser_map& m)
  {
    this->friction_parser_map_ = &m;
  }

  inline
  void mechanics_pskel::
  maximum_cell_deformation_parser (::common::units_decimal_pskel& p)
  {
    this->maximum_cell_deformation_parser_ = &p;
  }

  inline
  void mechanics_pskel::
  maximum_cell_deformation_parser (::xml_schema::parser_map& m)
  {
    this->maximum_cell_deformation_parser_map_ = &m;
  }

  inline
  void mechanics_pskel::
  mechanical_pressure_parser (::common::units_decimal_pskel& p)
  {
    this->mechanical_pressure_parser_ = &p;
  }

  inline
  void mechanics_pskel::
  mechanical_pressure_parser (::xml_schema::parser_map& m)
  {
    this->mechanical_pressure_parser_map_ = &m;
  }

  inline
  void mechanics_pskel::
  indentation_observation_parser (::phenotype_common::indentation_observation_pskel& p)
  {
    this->indentation_observation_parser_ = &p;
  }

  inline
  void mechanics_pskel::
  indentation_observation_parser (::xml_schema::parser_map& m)
  {
    this->indentation_observation_parser_map_ = &m;
  }

  inline
  void mechanics_pskel::
  poisson_ratio_parser (::common::units_decimal_pskel& p)
  {
    this->poisson_ratio_parser_ = &p;
  }

  inline
  void mechanics_pskel::
  poisson_ratio_parser (::xml_schema::parser_map& m)
  {
    this->poisson_ratio_parser_map_ = &m;
  }

  inline
  void mechanics_pskel::
  youngs_modulus_parser (::common::units_decimal_pskel& p)
  {
    this->youngs_modulus_parser_ = &p;
  }

  inline
  void mechanics_pskel::
  youngs_modulus_parser (::xml_schema::parser_map& m)
  {
    this->youngs_modulus_parser_map_ = &m;
  }

  inline
  void mechanics_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void mechanics_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void mechanics_pskel::
  parsers (::phenotype_common::friction_pskel& friction,
           ::common::units_decimal_pskel& maximum_cell_deformation,
           ::common::units_decimal_pskel& mechanical_pressure,
           ::phenotype_common::indentation_observation_pskel& indentation_observation,
           ::common::units_decimal_pskel& poisson_ratio,
           ::common::units_decimal_pskel& youngs_modulus,
           ::common::custom_pskel& custom)
  {
    this->friction_parser_ = &friction;
    this->maximum_cell_deformation_parser_ = &maximum_cell_deformation;
    this->mechanical_pressure_parser_ = &mechanical_pressure;
    this->indentation_observation_parser_ = &indentation_observation;
    this->poisson_ratio_parser_ = &poisson_ratio;
    this->youngs_modulus_parser_ = &youngs_modulus;
    this->custom_parser_ = &custom;
  }

  inline
  void mechanics_pskel::
  parser_maps (::xml_schema::parser_map& friction,
               ::xml_schema::parser_map& maximum_cell_deformation,
               ::xml_schema::parser_map& mechanical_pressure,
               ::xml_schema::parser_map& indentation_observation,
               ::xml_schema::parser_map& poisson_ratio,
               ::xml_schema::parser_map& youngs_modulus,
               ::xml_schema::parser_map& custom)
  {
    this->friction_parser_map_ = &friction;
    this->maximum_cell_deformation_parser_map_ = &maximum_cell_deformation;
    this->mechanical_pressure_parser_map_ = &mechanical_pressure;
    this->indentation_observation_parser_map_ = &indentation_observation;
    this->poisson_ratio_parser_map_ = &poisson_ratio;
    this->youngs_modulus_parser_map_ = &youngs_modulus;
    this->custom_parser_map_ = &custom;
  }

  inline
  mechanics_pskel::
  mechanics_pskel ()
  : mechanics_impl_ (0),
    friction_parser_ (0),
    friction_parser_map_ (0),
    maximum_cell_deformation_parser_ (0),
    maximum_cell_deformation_parser_map_ (0),
    mechanical_pressure_parser_ (0),
    mechanical_pressure_parser_map_ (0),
    indentation_observation_parser_ (0),
    indentation_observation_parser_map_ (0),
    poisson_ratio_parser_ (0),
    poisson_ratio_parser_map_ (0),
    youngs_modulus_parser_ (0),
    youngs_modulus_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  mechanics_pskel::
  mechanics_pskel (mechanics_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    mechanics_impl_ (impl),
    friction_parser_ (0),
    friction_parser_map_ (0),
    maximum_cell_deformation_parser_ (0),
    maximum_cell_deformation_parser_map_ (0),
    mechanical_pressure_parser_ (0),
    mechanical_pressure_parser_map_ (0),
    indentation_observation_parser_ (0),
    indentation_observation_parser_map_ (0),
    poisson_ratio_parser_ (0),
    poisson_ratio_parser_map_ (0),
    youngs_modulus_parser_ (0),
    youngs_modulus_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // indentation_observation_pskel
  //

  inline
  void indentation_observation_pskel::
  depth_parser (::common::units_decimal_pskel& p)
  {
    this->depth_parser_ = &p;
  }

  inline
  void indentation_observation_pskel::
  depth_parser (::xml_schema::parser_map& m)
  {
    this->depth_parser_map_ = &m;
  }

  inline
  void indentation_observation_pskel::
  poisson_ratio_parser (::common::units_decimal_pskel& p)
  {
    this->poisson_ratio_parser_ = &p;
  }

  inline
  void indentation_observation_pskel::
  poisson_ratio_parser (::xml_schema::parser_map& m)
  {
    this->poisson_ratio_parser_map_ = &m;
  }

  inline
  void indentation_observation_pskel::
  youngs_modulus_parser (::common::units_decimal_pskel& p)
  {
    this->youngs_modulus_parser_ = &p;
  }

  inline
  void indentation_observation_pskel::
  youngs_modulus_parser (::xml_schema::parser_map& m)
  {
    this->youngs_modulus_parser_map_ = &m;
  }

  inline
  void indentation_observation_pskel::
  parsers (::common::units_decimal_pskel& depth,
           ::common::units_decimal_pskel& poisson_ratio,
           ::common::units_decimal_pskel& youngs_modulus)
  {
    this->depth_parser_ = &depth;
    this->poisson_ratio_parser_ = &poisson_ratio;
    this->youngs_modulus_parser_ = &youngs_modulus;
  }

  inline
  void indentation_observation_pskel::
  parser_maps (::xml_schema::parser_map& depth,
               ::xml_schema::parser_map& poisson_ratio,
               ::xml_schema::parser_map& youngs_modulus)
  {
    this->depth_parser_map_ = &depth;
    this->poisson_ratio_parser_map_ = &poisson_ratio;
    this->youngs_modulus_parser_map_ = &youngs_modulus;
  }

  inline
  indentation_observation_pskel::
  indentation_observation_pskel ()
  : indentation_observation_impl_ (0),
    depth_parser_ (0),
    depth_parser_map_ (0),
    poisson_ratio_parser_ (0),
    poisson_ratio_parser_map_ (0),
    youngs_modulus_parser_ (0),
    youngs_modulus_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  indentation_observation_pskel::
  indentation_observation_pskel (indentation_observation_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    indentation_observation_impl_ (impl),
    depth_parser_ (0),
    depth_parser_map_ (0),
    poisson_ratio_parser_ (0),
    poisson_ratio_parser_map_ (0),
    youngs_modulus_parser_ (0),
    youngs_modulus_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // motility_pskel
  //

  inline
  void motility_pskel::
  unrestricted_parser (::phenotype_common::motility_types_pskel& p)
  {
    this->unrestricted_parser_ = &p;
  }

  inline
  void motility_pskel::
  unrestricted_parser (::xml_schema::parser_map& m)
  {
    this->unrestricted_parser_map_ = &m;
  }

  inline
  void motility_pskel::
  restricted_parser (::phenotype_common::motility_types_pskel& p)
  {
    this->restricted_parser_ = &p;
  }

  inline
  void motility_pskel::
  restricted_parser (::xml_schema::parser_map& m)
  {
    this->restricted_parser_map_ = &m;
  }

  inline
  void motility_pskel::
  parsers (::phenotype_common::motility_types_pskel& unrestricted,
           ::phenotype_common::motility_types_pskel& restricted)
  {
    this->unrestricted_parser_ = &unrestricted;
    this->restricted_parser_ = &restricted;
  }

  inline
  void motility_pskel::
  parser_maps (::xml_schema::parser_map& unrestricted,
               ::xml_schema::parser_map& restricted)
  {
    this->unrestricted_parser_map_ = &unrestricted;
    this->restricted_parser_map_ = &restricted;
  }

  inline
  motility_pskel::
  motility_pskel ()
  : motility_impl_ (0),
    unrestricted_parser_ (0),
    unrestricted_parser_map_ (0),
    restricted_parser_ (0),
    restricted_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  motility_pskel::
  motility_pskel (motility_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    motility_impl_ (impl),
    unrestricted_parser_ (0),
    unrestricted_parser_map_ (0),
    restricted_parser_ (0),
    restricted_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // motility_types_pskel
  //

  inline
  void motility_types_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  timescale_parser (::phenotype_common::timescale_pskel& p)
  {
    this->timescale_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  timescale_parser (::xml_schema::parser_map& m)
  {
    this->timescale_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  restriction_parser (::variables::experimental_conditions_pskel& p)
  {
    this->restriction_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  restriction_parser (::xml_schema::parser_map& m)
  {
    this->restriction_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  net_displacement_parser (::common::units_decimal_pskel& p)
  {
    this->net_displacement_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  net_displacement_parser (::xml_schema::parser_map& m)
  {
    this->net_displacement_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  total_displacement_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->total_displacement_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  total_displacement_parser (::xml_schema::parser_map& m)
  {
    this->total_displacement_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  mean_square_displacement_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->mean_square_displacement_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  mean_square_displacement_parser (::xml_schema::parser_map& m)
  {
    this->mean_square_displacement_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  mean_speed_parser (::common::units_decimal_pskel& p)
  {
    this->mean_speed_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  mean_speed_parser (::xml_schema::parser_map& m)
  {
    this->mean_speed_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  net_speed_parser (::common::units_decimal_pskel& p)
  {
    this->net_speed_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  net_speed_parser (::xml_schema::parser_map& m)
  {
    this->net_speed_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  persistence_parser (::common::units_decimal_pskel& p)
  {
    this->persistence_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  persistence_parser (::xml_schema::parser_map& m)
  {
    this->persistence_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  mean_path_length_parser (::common::units_decimal_pskel& p)
  {
    this->mean_path_length_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  mean_path_length_parser (::xml_schema::parser_map& m)
  {
    this->mean_path_length_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  diffusion_coefficient_parser (::common::units_decimal_pskel& p)
  {
    this->diffusion_coefficient_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  diffusion_coefficient_parser (::xml_schema::parser_map& m)
  {
    this->diffusion_coefficient_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void motility_types_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void motility_types_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::phenotype_common::timescale_pskel& timescale,
           ::variables::experimental_conditions_pskel& restriction,
           ::common::units_decimal_pskel& net_displacement,
           ::common::units_decimal_nonnegative_pskel& total_displacement,
           ::common::units_decimal_nonnegative_pskel& mean_square_displacement,
           ::common::units_decimal_pskel& mean_speed,
           ::common::units_decimal_pskel& net_speed,
           ::common::units_decimal_pskel& persistence,
           ::common::units_decimal_pskel& mean_path_length,
           ::common::units_decimal_pskel& diffusion_coefficient,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->timescale_parser_ = &timescale;
    this->restriction_parser_ = &restriction;
    this->net_displacement_parser_ = &net_displacement;
    this->total_displacement_parser_ = &total_displacement;
    this->mean_square_displacement_parser_ = &mean_square_displacement;
    this->mean_speed_parser_ = &mean_speed;
    this->net_speed_parser_ = &net_speed;
    this->persistence_parser_ = &persistence;
    this->mean_path_length_parser_ = &mean_path_length;
    this->diffusion_coefficient_parser_ = &diffusion_coefficient;
    this->custom_parser_ = &custom;
  }

  inline
  void motility_types_pskel::
  parser_maps (::xml_schema::parser_map& timescale,
               ::xml_schema::parser_map& restriction,
               ::xml_schema::parser_map& net_displacement,
               ::xml_schema::parser_map& total_displacement,
               ::xml_schema::parser_map& mean_square_displacement,
               ::xml_schema::parser_map& mean_speed,
               ::xml_schema::parser_map& net_speed,
               ::xml_schema::parser_map& persistence,
               ::xml_schema::parser_map& mean_path_length,
               ::xml_schema::parser_map& diffusion_coefficient,
               ::xml_schema::parser_map& custom)
  {
    this->timescale_parser_map_ = &timescale;
    this->restriction_parser_map_ = &restriction;
    this->net_displacement_parser_map_ = &net_displacement;
    this->total_displacement_parser_map_ = &total_displacement;
    this->mean_square_displacement_parser_map_ = &mean_square_displacement;
    this->mean_speed_parser_map_ = &mean_speed;
    this->net_speed_parser_map_ = &net_speed;
    this->persistence_parser_map_ = &persistence;
    this->mean_path_length_parser_map_ = &mean_path_length;
    this->diffusion_coefficient_parser_map_ = &diffusion_coefficient;
    this->custom_parser_map_ = &custom;
  }

  inline
  motility_types_pskel::
  motility_types_pskel ()
  : motility_types_impl_ (0),
    ID_parser_ (0),
    timescale_parser_ (0),
    timescale_parser_map_ (0),
    restriction_parser_ (0),
    restriction_parser_map_ (0),
    net_displacement_parser_ (0),
    net_displacement_parser_map_ (0),
    total_displacement_parser_ (0),
    total_displacement_parser_map_ (0),
    mean_square_displacement_parser_ (0),
    mean_square_displacement_parser_map_ (0),
    mean_speed_parser_ (0),
    mean_speed_parser_map_ (0),
    net_speed_parser_ (0),
    net_speed_parser_map_ (0),
    persistence_parser_ (0),
    persistence_parser_map_ (0),
    mean_path_length_parser_ (0),
    mean_path_length_parser_map_ (0),
    diffusion_coefficient_parser_ (0),
    diffusion_coefficient_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  motility_types_pskel::
  motility_types_pskel (motility_types_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    motility_types_impl_ (impl),
    ID_parser_ (0),
    timescale_parser_ (0),
    timescale_parser_map_ (0),
    restriction_parser_ (0),
    restriction_parser_map_ (0),
    net_displacement_parser_ (0),
    net_displacement_parser_map_ (0),
    total_displacement_parser_ (0),
    total_displacement_parser_map_ (0),
    mean_square_displacement_parser_ (0),
    mean_square_displacement_parser_map_ (0),
    mean_speed_parser_ (0),
    mean_speed_parser_map_ (0),
    net_speed_parser_ (0),
    net_speed_parser_map_ (0),
    persistence_parser_ (0),
    persistence_parser_map_ (0),
    mean_path_length_parser_ (0),
    mean_path_length_parser_map_ (0),
    diffusion_coefficient_parser_ (0),
    diffusion_coefficient_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // timescale_pskel
  //

  inline
  void timescale_pskel::
  mitotic_parser (::xml_schema::boolean_pskel& p)
  {
    this->mitotic_parser_ = &p;
  }

  inline
  void timescale_pskel::
  parsers (::xml_schema::string_pskel& units,
           ::xml_schema::string_pskel& measurement_type,
           ::xml_schema::double_pskel& uncertainty,
           ::xml_schema::double_pskel& negative_uncertainty,
           ::xml_schema::double_pskel& positive_uncertainty,
           ::xml_schema::double_pskel& uncertainty_percentage,
           ::xml_schema::double_pskel& negative_uncertainty_percentage,
           ::xml_schema::double_pskel& positive_uncertainty_percentage,
           ::xml_schema::double_pskel& median,
           ::xml_schema::double_pskel& standard_deviation,
           ::common::two_doubles_pskel& interquartile_range,
           ::common::two_doubles_pskel& range,
           ::xml_schema::double_pskel& min,
           ::xml_schema::double_pskel& max,
           ::xml_schema::double_pskel& standard_error,
           ::xml_schema::double_pskel& standard_error_of_the_mean,
           ::xml_schema::int_pskel& number_obs,
           ::xml_schema::double_pskel& skewnesss,
           ::xml_schema::double_pskel& kurtosis,
           ::xml_schema::boolean_pskel& mitotic)
  {
    this->units_parser_ = &units;
    this->measurement_type_parser_ = &measurement_type;
    this->uncertainty_parser_ = &uncertainty;
    this->negative_uncertainty_parser_ = &negative_uncertainty;
    this->positive_uncertainty_parser_ = &positive_uncertainty;
    this->uncertainty_percentage_parser_ = &uncertainty_percentage;
    this->negative_uncertainty_percentage_parser_ = &negative_uncertainty_percentage;
    this->positive_uncertainty_percentage_parser_ = &positive_uncertainty_percentage;
    this->median_parser_ = &median;
    this->standard_deviation_parser_ = &standard_deviation;
    this->interquartile_range_parser_ = &interquartile_range;
    this->range_parser_ = &range;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->standard_error_parser_ = &standard_error;
    this->standard_error_of_the_mean_parser_ = &standard_error_of_the_mean;
    this->number_obs_parser_ = &number_obs;
    this->skewnesss_parser_ = &skewnesss;
    this->kurtosis_parser_ = &kurtosis;
    this->mitotic_parser_ = &mitotic;
  }

  inline
  timescale_pskel::
  timescale_pskel (::common::units_decimal_pskel* tiein)
  : ::common::units_decimal_pskel (tiein, 0),
    timescale_impl_ (0),
    mitotic_parser_ (0)
  {
  }

  inline
  timescale_pskel::
  timescale_pskel (timescale_pskel* impl, void*)
  : ::common::units_decimal_pskel (impl, 0),
    timescale_impl_ (impl),
    mitotic_parser_ (0)
  {
  }

  // transport_processes_pskel
  //

  inline
  void transport_processes_pskel::
  variable_parser (::phenotype_common::transport_variable_pskel& p)
  {
    this->variable_parser_ = &p;
  }

  inline
  void transport_processes_pskel::
  variable_parser (::xml_schema::parser_map& m)
  {
    this->variable_parser_map_ = &m;
  }

  inline
  void transport_processes_pskel::
  parsers (::phenotype_common::transport_variable_pskel& variable)
  {
    this->variable_parser_ = &variable;
  }

  inline
  void transport_processes_pskel::
  parser_maps (::xml_schema::parser_map& variable)
  {
    this->variable_parser_map_ = &variable;
  }

  inline
  transport_processes_pskel::
  transport_processes_pskel ()
  : transport_processes_impl_ (0),
    variable_parser_ (0),
    variable_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  transport_processes_pskel::
  transport_processes_pskel (transport_processes_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    transport_processes_impl_ (impl),
    variable_parser_ (0),
    variable_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // transport_variable_pskel
  //

  inline
  void transport_variable_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  units_parser (::xml_schema::string_pskel& p)
  {
    this->units_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  ID_parser (::xml_schema::unsigned_long_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  type_parser (::variables::amount_type_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  ChEBI_ID_parser (::xml_schema::string_pskel& p)
  {
    this->ChEBI_ID_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  MeSH_ID_parser (::xml_schema::string_pskel& p)
  {
    this->MeSH_ID_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  DrugBank_ID_parser (::xml_schema::string_pskel& p)
  {
    this->DrugBank_ID_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  GMO_ID_parser (::xml_schema::string_pskel& p)
  {
    this->GMO_ID_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  GO_ID_parser (::xml_schema::string_pskel& p)
  {
    this->GO_ID_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  UniProt_ID_parser (::xml_schema::string_pskel& p)
  {
    this->UniProt_ID_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  PR_ID_parser (::xml_schema::string_pskel& p)
  {
    this->PR_ID_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  export_rate_parser (::common::units_decimal_pskel& p)
  {
    this->export_rate_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  export_rate_parser (::xml_schema::parser_map& m)
  {
    this->export_rate_parser_map_ = &m;
  }

  inline
  void transport_variable_pskel::
  export_rate_per_unit_surface_area_parser (::common::units_decimal_pskel& p)
  {
    this->export_rate_per_unit_surface_area_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  export_rate_per_unit_surface_area_parser (::xml_schema::parser_map& m)
  {
    this->export_rate_per_unit_surface_area_parser_map_ = &m;
  }

  inline
  void transport_variable_pskel::
  import_rate_parser (::common::units_decimal_pskel& p)
  {
    this->import_rate_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  import_rate_parser (::xml_schema::parser_map& m)
  {
    this->import_rate_parser_map_ = &m;
  }

  inline
  void transport_variable_pskel::
  import_rate_per_unit_surface_area_parser (::common::units_decimal_pskel& p)
  {
    this->import_rate_per_unit_surface_area_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  import_rate_per_unit_surface_area_parser (::xml_schema::parser_map& m)
  {
    this->import_rate_per_unit_surface_area_parser_map_ = &m;
  }

  inline
  void transport_variable_pskel::
  saturation_density_parser (::common::units_decimal_pskel& p)
  {
    this->saturation_density_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  saturation_density_parser (::xml_schema::parser_map& m)
  {
    this->saturation_density_parser_map_ = &m;
  }

  inline
  void transport_variable_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void transport_variable_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void transport_variable_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& units,
           ::xml_schema::unsigned_long_pskel& ID,
           ::variables::amount_type_pskel& type,
           ::xml_schema::string_pskel& ChEBI_ID,
           ::xml_schema::string_pskel& MeSH_ID,
           ::xml_schema::string_pskel& DrugBank_ID,
           ::xml_schema::string_pskel& GMO_ID,
           ::xml_schema::string_pskel& GO_ID,
           ::xml_schema::string_pskel& UniProt_ID,
           ::xml_schema::string_pskel& PR_ID,
           ::common::units_decimal_pskel& export_rate,
           ::common::units_decimal_pskel& export_rate_per_unit_surface_area,
           ::common::units_decimal_pskel& import_rate,
           ::common::units_decimal_pskel& import_rate_per_unit_surface_area,
           ::common::units_decimal_pskel& saturation_density,
           ::common::custom_pskel& custom)
  {
    this->name_parser_ = &name;
    this->units_parser_ = &units;
    this->ID_parser_ = &ID;
    this->type_parser_ = &type;
    this->ChEBI_ID_parser_ = &ChEBI_ID;
    this->MeSH_ID_parser_ = &MeSH_ID;
    this->DrugBank_ID_parser_ = &DrugBank_ID;
    this->GMO_ID_parser_ = &GMO_ID;
    this->GO_ID_parser_ = &GO_ID;
    this->UniProt_ID_parser_ = &UniProt_ID;
    this->PR_ID_parser_ = &PR_ID;
    this->export_rate_parser_ = &export_rate;
    this->export_rate_per_unit_surface_area_parser_ = &export_rate_per_unit_surface_area;
    this->import_rate_parser_ = &import_rate;
    this->import_rate_per_unit_surface_area_parser_ = &import_rate_per_unit_surface_area;
    this->saturation_density_parser_ = &saturation_density;
    this->custom_parser_ = &custom;
  }

  inline
  void transport_variable_pskel::
  parser_maps (::xml_schema::parser_map& export_rate,
               ::xml_schema::parser_map& export_rate_per_unit_surface_area,
               ::xml_schema::parser_map& import_rate,
               ::xml_schema::parser_map& import_rate_per_unit_surface_area,
               ::xml_schema::parser_map& saturation_density,
               ::xml_schema::parser_map& custom)
  {
    this->export_rate_parser_map_ = &export_rate;
    this->export_rate_per_unit_surface_area_parser_map_ = &export_rate_per_unit_surface_area;
    this->import_rate_parser_map_ = &import_rate;
    this->import_rate_per_unit_surface_area_parser_map_ = &import_rate_per_unit_surface_area;
    this->saturation_density_parser_map_ = &saturation_density;
    this->custom_parser_map_ = &custom;
  }

  inline
  transport_variable_pskel::
  transport_variable_pskel ()
  : transport_variable_impl_ (0),
    name_parser_ (0),
    units_parser_ (0),
    ID_parser_ (0),
    type_parser_ (0),
    ChEBI_ID_parser_ (0),
    MeSH_ID_parser_ (0),
    DrugBank_ID_parser_ (0),
    GMO_ID_parser_ (0),
    GO_ID_parser_ (0),
    UniProt_ID_parser_ (0),
    PR_ID_parser_ (0),
    export_rate_parser_ (0),
    export_rate_parser_map_ (0),
    export_rate_per_unit_surface_area_parser_ (0),
    export_rate_per_unit_surface_area_parser_map_ (0),
    import_rate_parser_ (0),
    import_rate_parser_map_ (0),
    import_rate_per_unit_surface_area_parser_ (0),
    import_rate_per_unit_surface_area_parser_map_ (0),
    saturation_density_parser_ (0),
    saturation_density_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  inline
  transport_variable_pskel::
  transport_variable_pskel (transport_variable_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    transport_variable_impl_ (impl),
    name_parser_ (0),
    units_parser_ (0),
    ID_parser_ (0),
    type_parser_ (0),
    ChEBI_ID_parser_ (0),
    MeSH_ID_parser_ (0),
    DrugBank_ID_parser_ (0),
    GMO_ID_parser_ (0),
    GO_ID_parser_ (0),
    UniProt_ID_parser_ (0),
    PR_ID_parser_ (0),
    export_rate_parser_ (0),
    export_rate_parser_map_ (0),
    export_rate_per_unit_surface_area_parser_ (0),
    export_rate_per_unit_surface_area_parser_map_ (0),
    import_rate_parser_ (0),
    import_rate_parser_map_ (0),
    import_rate_per_unit_surface_area_parser_ (0),
    import_rate_per_unit_surface_area_parser_map_ (0),
    saturation_density_parser_ (0),
    saturation_density_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // geometrical_parameters_pskel
  //

  inline
  void geometrical_parameters_pskel::
  units_parser (::xml_schema::string_pskel& p)
  {
    this->units_parser_ = &p;
  }

  inline
  void geometrical_parameters_pskel::
  aspect_ratio_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->aspect_ratio_parser_ = &p;
  }

  inline
  void geometrical_parameters_pskel::
  aspect_ratio_parser (::xml_schema::parser_map& m)
  {
    this->aspect_ratio_parser_map_ = &m;
  }

  inline
  void geometrical_parameters_pskel::
  circularity_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->circularity_parser_ = &p;
  }

  inline
  void geometrical_parameters_pskel::
  circularity_parser (::xml_schema::parser_map& m)
  {
    this->circularity_parser_map_ = &m;
  }

  inline
  void geometrical_parameters_pskel::
  eccentricity_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->eccentricity_parser_ = &p;
  }

  inline
  void geometrical_parameters_pskel::
  eccentricity_parser (::xml_schema::parser_map& m)
  {
    this->eccentricity_parser_map_ = &m;
  }

  inline
  void geometrical_parameters_pskel::
  sphericity_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->sphericity_parser_ = &p;
  }

  inline
  void geometrical_parameters_pskel::
  sphericity_parser (::xml_schema::parser_map& m)
  {
    this->sphericity_parser_map_ = &m;
  }

  inline
  void geometrical_parameters_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void geometrical_parameters_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void geometrical_parameters_pskel::
  parsers (::xml_schema::string_pskel& units,
           ::common::units_decimal_nonnegative_pskel& aspect_ratio,
           ::common::units_decimal_nonnegative_pskel& circularity,
           ::common::units_decimal_nonnegative_pskel& eccentricity,
           ::common::units_decimal_nonnegative_pskel& sphericity,
           ::common::custom_pskel& custom)
  {
    this->units_parser_ = &units;
    this->aspect_ratio_parser_ = &aspect_ratio;
    this->circularity_parser_ = &circularity;
    this->eccentricity_parser_ = &eccentricity;
    this->sphericity_parser_ = &sphericity;
    this->custom_parser_ = &custom;
  }

  inline
  void geometrical_parameters_pskel::
  parser_maps (::xml_schema::parser_map& aspect_ratio,
               ::xml_schema::parser_map& circularity,
               ::xml_schema::parser_map& eccentricity,
               ::xml_schema::parser_map& sphericity,
               ::xml_schema::parser_map& custom)
  {
    this->aspect_ratio_parser_map_ = &aspect_ratio;
    this->circularity_parser_map_ = &circularity;
    this->eccentricity_parser_map_ = &eccentricity;
    this->sphericity_parser_map_ = &sphericity;
    this->custom_parser_map_ = &custom;
  }

  inline
  geometrical_parameters_pskel::
  geometrical_parameters_pskel ()
  : geometrical_parameters_impl_ (0),
    units_parser_ (0),
    aspect_ratio_parser_ (0),
    aspect_ratio_parser_map_ (0),
    circularity_parser_ (0),
    circularity_parser_map_ (0),
    eccentricity_parser_ (0),
    eccentricity_parser_map_ (0),
    sphericity_parser_ (0),
    sphericity_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (5UL, v_all_first_)
  {
  }

  inline
  geometrical_parameters_pskel::
  geometrical_parameters_pskel (geometrical_parameters_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    geometrical_parameters_impl_ (impl),
    units_parser_ (0),
    aspect_ratio_parser_ (0),
    aspect_ratio_parser_map_ (0),
    circularity_parser_ (0),
    circularity_parser_map_ (0),
    eccentricity_parser_ (0),
    eccentricity_parser_map_ (0),
    sphericity_parser_ (0),
    sphericity_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (5UL, v_all_first_)
  {
  }

  // lengths_pskel
  //

  inline
  void lengths_pskel::
  units_parser (::xml_schema::string_pskel& p)
  {
    this->units_parser_ = &p;
  }

  inline
  void lengths_pskel::
  diameter_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->diameter_parser_ = &p;
  }

  inline
  void lengths_pskel::
  diameter_parser (::xml_schema::parser_map& m)
  {
    this->diameter_parser_map_ = &m;
  }

  inline
  void lengths_pskel::
  major_axis_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->major_axis_parser_ = &p;
  }

  inline
  void lengths_pskel::
  major_axis_parser (::xml_schema::parser_map& m)
  {
    this->major_axis_parser_map_ = &m;
  }

  inline
  void lengths_pskel::
  minor_axis_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->minor_axis_parser_ = &p;
  }

  inline
  void lengths_pskel::
  minor_axis_parser (::xml_schema::parser_map& m)
  {
    this->minor_axis_parser_map_ = &m;
  }

  inline
  void lengths_pskel::
  perimeter_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->perimeter_parser_ = &p;
  }

  inline
  void lengths_pskel::
  perimeter_parser (::xml_schema::parser_map& m)
  {
    this->perimeter_parser_map_ = &m;
  }

  inline
  void lengths_pskel::
  radius_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->radius_parser_ = &p;
  }

  inline
  void lengths_pskel::
  radius_parser (::xml_schema::parser_map& m)
  {
    this->radius_parser_map_ = &m;
  }

  inline
  void lengths_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void lengths_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void lengths_pskel::
  parsers (::xml_schema::string_pskel& units,
           ::common::units_decimal_nonnegative_pskel& diameter,
           ::common::units_decimal_nonnegative_pskel& major_axis,
           ::common::units_decimal_nonnegative_pskel& minor_axis,
           ::common::units_decimal_nonnegative_pskel& perimeter,
           ::common::units_decimal_nonnegative_pskel& radius,
           ::common::custom_pskel& custom)
  {
    this->units_parser_ = &units;
    this->diameter_parser_ = &diameter;
    this->major_axis_parser_ = &major_axis;
    this->minor_axis_parser_ = &minor_axis;
    this->perimeter_parser_ = &perimeter;
    this->radius_parser_ = &radius;
    this->custom_parser_ = &custom;
  }

  inline
  void lengths_pskel::
  parser_maps (::xml_schema::parser_map& diameter,
               ::xml_schema::parser_map& major_axis,
               ::xml_schema::parser_map& minor_axis,
               ::xml_schema::parser_map& perimeter,
               ::xml_schema::parser_map& radius,
               ::xml_schema::parser_map& custom)
  {
    this->diameter_parser_map_ = &diameter;
    this->major_axis_parser_map_ = &major_axis;
    this->minor_axis_parser_map_ = &minor_axis;
    this->perimeter_parser_map_ = &perimeter;
    this->radius_parser_map_ = &radius;
    this->custom_parser_map_ = &custom;
  }

  inline
  lengths_pskel::
  lengths_pskel ()
  : lengths_impl_ (0),
    units_parser_ (0),
    diameter_parser_ (0),
    diameter_parser_map_ (0),
    major_axis_parser_ (0),
    major_axis_parser_map_ (0),
    minor_axis_parser_ (0),
    minor_axis_parser_map_ (0),
    perimeter_parser_ (0),
    perimeter_parser_map_ (0),
    radius_parser_ (0),
    radius_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_)
  {
  }

  inline
  lengths_pskel::
  lengths_pskel (lengths_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    lengths_impl_ (impl),
    units_parser_ (0),
    diameter_parser_ (0),
    diameter_parser_map_ (0),
    major_axis_parser_ (0),
    major_axis_parser_map_ (0),
    minor_axis_parser_ (0),
    minor_axis_parser_map_ (0),
    perimeter_parser_ (0),
    perimeter_parser_map_ (0),
    radius_parser_ (0),
    radius_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_)
  {
  }

  // areas_3D_pskel
  //

  inline
  void areas_3D_pskel::
  units_parser (::xml_schema::string_pskel& p)
  {
    this->units_parser_ = &p;
  }

  inline
  void areas_3D_pskel::
  free_surface_area_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->free_surface_area_parser_ = &p;
  }

  inline
  void areas_3D_pskel::
  free_surface_area_parser (::xml_schema::parser_map& m)
  {
    this->free_surface_area_parser_map_ = &m;
  }

  inline
  void areas_3D_pskel::
  total_surface_area_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->total_surface_area_parser_ = &p;
  }

  inline
  void areas_3D_pskel::
  total_surface_area_parser (::xml_schema::parser_map& m)
  {
    this->total_surface_area_parser_map_ = &m;
  }

  inline
  void areas_3D_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void areas_3D_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void areas_3D_pskel::
  parsers (::xml_schema::string_pskel& units,
           ::common::units_decimal_nonnegative_pskel& free_surface_area,
           ::common::units_decimal_nonnegative_pskel& total_surface_area,
           ::common::custom_pskel& custom)
  {
    this->units_parser_ = &units;
    this->free_surface_area_parser_ = &free_surface_area;
    this->total_surface_area_parser_ = &total_surface_area;
    this->custom_parser_ = &custom;
  }

  inline
  void areas_3D_pskel::
  parser_maps (::xml_schema::parser_map& free_surface_area,
               ::xml_schema::parser_map& total_surface_area,
               ::xml_schema::parser_map& custom)
  {
    this->free_surface_area_parser_map_ = &free_surface_area;
    this->total_surface_area_parser_map_ = &total_surface_area;
    this->custom_parser_map_ = &custom;
  }

  inline
  areas_3D_pskel::
  areas_3D_pskel ()
  : areas_3D_impl_ (0),
    units_parser_ (0),
    free_surface_area_parser_ (0),
    free_surface_area_parser_map_ (0),
    total_surface_area_parser_ (0),
    total_surface_area_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (3UL, v_all_first_)
  {
  }

  inline
  areas_3D_pskel::
  areas_3D_pskel (areas_3D_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    areas_3D_impl_ (impl),
    units_parser_ (0),
    free_surface_area_parser_ (0),
    free_surface_area_parser_map_ (0),
    total_surface_area_parser_ (0),
    total_surface_area_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (3UL, v_all_first_)
  {
  }

  // areas_2D_pskel
  //

  inline
  void areas_2D_pskel::
  units_parser (::xml_schema::string_pskel& p)
  {
    this->units_parser_ = &p;
  }

  inline
  void areas_2D_pskel::
  total_area_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->total_area_parser_ = &p;
  }

  inline
  void areas_2D_pskel::
  total_area_parser (::xml_schema::parser_map& m)
  {
    this->total_area_parser_map_ = &m;
  }

  inline
  void areas_2D_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void areas_2D_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void areas_2D_pskel::
  parsers (::xml_schema::string_pskel& units,
           ::common::units_decimal_nonnegative_pskel& total_area,
           ::common::custom_pskel& custom)
  {
    this->units_parser_ = &units;
    this->total_area_parser_ = &total_area;
    this->custom_parser_ = &custom;
  }

  inline
  void areas_2D_pskel::
  parser_maps (::xml_schema::parser_map& total_area,
               ::xml_schema::parser_map& custom)
  {
    this->total_area_parser_map_ = &total_area;
    this->custom_parser_map_ = &custom;
  }

  inline
  areas_2D_pskel::
  areas_2D_pskel ()
  : areas_2D_impl_ (0),
    units_parser_ (0),
    total_area_parser_ (0),
    total_area_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (2UL, v_all_first_)
  {
  }

  inline
  areas_2D_pskel::
  areas_2D_pskel (areas_2D_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    areas_2D_impl_ (impl),
    units_parser_ (0),
    total_area_parser_ (0),
    total_area_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (2UL, v_all_first_)
  {
  }

  // volumes_pskel
  //

  inline
  void volumes_pskel::
  units_parser (::xml_schema::string_pskel& p)
  {
    this->units_parser_ = &p;
  }

  inline
  void volumes_pskel::
  fluid_volume_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->fluid_volume_parser_ = &p;
  }

  inline
  void volumes_pskel::
  fluid_volume_parser (::xml_schema::parser_map& m)
  {
    this->fluid_volume_parser_map_ = &m;
  }

  inline
  void volumes_pskel::
  fluid_volume_fraction_parser (::common::units_fraction_pskel& p)
  {
    this->fluid_volume_fraction_parser_ = &p;
  }

  inline
  void volumes_pskel::
  fluid_volume_fraction_parser (::xml_schema::parser_map& m)
  {
    this->fluid_volume_fraction_parser_map_ = &m;
  }

  inline
  void volumes_pskel::
  solid_calcified_volume_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->solid_calcified_volume_parser_ = &p;
  }

  inline
  void volumes_pskel::
  solid_calcified_volume_parser (::xml_schema::parser_map& m)
  {
    this->solid_calcified_volume_parser_map_ = &m;
  }

  inline
  void volumes_pskel::
  solid_volume_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->solid_volume_parser_ = &p;
  }

  inline
  void volumes_pskel::
  solid_volume_parser (::xml_schema::parser_map& m)
  {
    this->solid_volume_parser_map_ = &m;
  }

  inline
  void volumes_pskel::
  solid_volume_fraction_parser (::common::units_fraction_pskel& p)
  {
    this->solid_volume_fraction_parser_ = &p;
  }

  inline
  void volumes_pskel::
  solid_volume_fraction_parser (::xml_schema::parser_map& m)
  {
    this->solid_volume_fraction_parser_map_ = &m;
  }

  inline
  void volumes_pskel::
  total_volume_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->total_volume_parser_ = &p;
  }

  inline
  void volumes_pskel::
  total_volume_parser (::xml_schema::parser_map& m)
  {
    this->total_volume_parser_map_ = &m;
  }

  inline
  void volumes_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void volumes_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void volumes_pskel::
  parsers (::xml_schema::string_pskel& units,
           ::common::units_decimal_nonnegative_pskel& fluid_volume,
           ::common::units_fraction_pskel& fluid_volume_fraction,
           ::common::units_decimal_nonnegative_pskel& solid_calcified_volume,
           ::common::units_decimal_nonnegative_pskel& solid_volume,
           ::common::units_fraction_pskel& solid_volume_fraction,
           ::common::units_decimal_nonnegative_pskel& total_volume,
           ::common::custom_pskel& custom)
  {
    this->units_parser_ = &units;
    this->fluid_volume_parser_ = &fluid_volume;
    this->fluid_volume_fraction_parser_ = &fluid_volume_fraction;
    this->solid_calcified_volume_parser_ = &solid_calcified_volume;
    this->solid_volume_parser_ = &solid_volume;
    this->solid_volume_fraction_parser_ = &solid_volume_fraction;
    this->total_volume_parser_ = &total_volume;
    this->custom_parser_ = &custom;
  }

  inline
  void volumes_pskel::
  parser_maps (::xml_schema::parser_map& fluid_volume,
               ::xml_schema::parser_map& fluid_volume_fraction,
               ::xml_schema::parser_map& solid_calcified_volume,
               ::xml_schema::parser_map& solid_volume,
               ::xml_schema::parser_map& solid_volume_fraction,
               ::xml_schema::parser_map& total_volume,
               ::xml_schema::parser_map& custom)
  {
    this->fluid_volume_parser_map_ = &fluid_volume;
    this->fluid_volume_fraction_parser_map_ = &fluid_volume_fraction;
    this->solid_calcified_volume_parser_map_ = &solid_calcified_volume;
    this->solid_volume_parser_map_ = &solid_volume;
    this->solid_volume_fraction_parser_map_ = &solid_volume_fraction;
    this->total_volume_parser_map_ = &total_volume;
    this->custom_parser_map_ = &custom;
  }

  inline
  volumes_pskel::
  volumes_pskel ()
  : volumes_impl_ (0),
    units_parser_ (0),
    fluid_volume_parser_ (0),
    fluid_volume_parser_map_ (0),
    fluid_volume_fraction_parser_ (0),
    fluid_volume_fraction_parser_map_ (0),
    solid_calcified_volume_parser_ (0),
    solid_calcified_volume_parser_map_ (0),
    solid_volume_parser_ (0),
    solid_volume_parser_map_ (0),
    solid_volume_fraction_parser_ (0),
    solid_volume_fraction_parser_map_ (0),
    total_volume_parser_ (0),
    total_volume_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (7UL, v_all_first_)
  {
  }

  inline
  volumes_pskel::
  volumes_pskel (volumes_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    volumes_impl_ (impl),
    units_parser_ (0),
    fluid_volume_parser_ (0),
    fluid_volume_parser_map_ (0),
    fluid_volume_fraction_parser_ (0),
    fluid_volume_fraction_parser_map_ (0),
    solid_calcified_volume_parser_ (0),
    solid_calcified_volume_parser_map_ (0),
    solid_volume_parser_ (0),
    solid_volume_parser_map_ (0),
    solid_volume_fraction_parser_ (0),
    solid_volume_fraction_parser_map_ (0),
    total_volume_parser_ (0),
    total_volume_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (7UL, v_all_first_)
  {
  }

  // geometrical_properties_pskel
  //

  inline
  void geometrical_properties_pskel::
  parameters_parser (::phenotype_common::geometrical_parameters_pskel& p)
  {
    this->parameters_parser_ = &p;
  }

  inline
  void geometrical_properties_pskel::
  parameters_parser (::xml_schema::parser_map& m)
  {
    this->parameters_parser_map_ = &m;
  }

  inline
  void geometrical_properties_pskel::
  lengths_parser (::phenotype_common::lengths_pskel& p)
  {
    this->lengths_parser_ = &p;
  }

  inline
  void geometrical_properties_pskel::
  lengths_parser (::xml_schema::parser_map& m)
  {
    this->lengths_parser_map_ = &m;
  }

  inline
  void geometrical_properties_pskel::
  areas_parser (::phenotype_common::areas_3D_pskel& p)
  {
    this->areas_parser_ = &p;
  }

  inline
  void geometrical_properties_pskel::
  areas_parser (::xml_schema::parser_map& m)
  {
    this->areas_parser_map_ = &m;
  }

  inline
  void geometrical_properties_pskel::
  volumes_parser (::phenotype_common::volumes_pskel& p)
  {
    this->volumes_parser_ = &p;
  }

  inline
  void geometrical_properties_pskel::
  volumes_parser (::xml_schema::parser_map& m)
  {
    this->volumes_parser_map_ = &m;
  }

  inline
  void geometrical_properties_pskel::
  cross_section_parser (::phenotype_common::cross_section_pskel& p)
  {
    this->cross_section_parser_ = &p;
  }

  inline
  void geometrical_properties_pskel::
  cross_section_parser (::xml_schema::parser_map& m)
  {
    this->cross_section_parser_map_ = &m;
  }

  inline
  void geometrical_properties_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void geometrical_properties_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void geometrical_properties_pskel::
  parsers (::phenotype_common::geometrical_parameters_pskel& parameters,
           ::phenotype_common::lengths_pskel& lengths,
           ::phenotype_common::areas_3D_pskel& areas,
           ::phenotype_common::volumes_pskel& volumes,
           ::phenotype_common::cross_section_pskel& cross_section,
           ::common::custom_pskel& custom)
  {
    this->parameters_parser_ = &parameters;
    this->lengths_parser_ = &lengths;
    this->areas_parser_ = &areas;
    this->volumes_parser_ = &volumes;
    this->cross_section_parser_ = &cross_section;
    this->custom_parser_ = &custom;
  }

  inline
  void geometrical_properties_pskel::
  parser_maps (::xml_schema::parser_map& parameters,
               ::xml_schema::parser_map& lengths,
               ::xml_schema::parser_map& areas,
               ::xml_schema::parser_map& volumes,
               ::xml_schema::parser_map& cross_section,
               ::xml_schema::parser_map& custom)
  {
    this->parameters_parser_map_ = &parameters;
    this->lengths_parser_map_ = &lengths;
    this->areas_parser_map_ = &areas;
    this->volumes_parser_map_ = &volumes;
    this->cross_section_parser_map_ = &cross_section;
    this->custom_parser_map_ = &custom;
  }

  inline
  geometrical_properties_pskel::
  geometrical_properties_pskel ()
  : geometrical_properties_impl_ (0),
    parameters_parser_ (0),
    parameters_parser_map_ (0),
    lengths_parser_ (0),
    lengths_parser_map_ (0),
    areas_parser_ (0),
    areas_parser_map_ (0),
    volumes_parser_ (0),
    volumes_parser_map_ (0),
    cross_section_parser_ (0),
    cross_section_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  geometrical_properties_pskel::
  geometrical_properties_pskel (geometrical_properties_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    geometrical_properties_impl_ (impl),
    parameters_parser_ (0),
    parameters_parser_map_ (0),
    lengths_parser_ (0),
    lengths_parser_map_ (0),
    areas_parser_ (0),
    areas_parser_map_ (0),
    volumes_parser_ (0),
    volumes_parser_map_ (0),
    cross_section_parser_ (0),
    cross_section_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // cross_section_pskel
  //

  inline
  void cross_section_pskel::
  parameters_parser (::phenotype_common::geometrical_parameters_pskel& p)
  {
    this->parameters_parser_ = &p;
  }

  inline
  void cross_section_pskel::
  parameters_parser (::xml_schema::parser_map& m)
  {
    this->parameters_parser_map_ = &m;
  }

  inline
  void cross_section_pskel::
  lengths_parser (::phenotype_common::lengths_pskel& p)
  {
    this->lengths_parser_ = &p;
  }

  inline
  void cross_section_pskel::
  lengths_parser (::xml_schema::parser_map& m)
  {
    this->lengths_parser_map_ = &m;
  }

  inline
  void cross_section_pskel::
  areas_parser (::phenotype_common::areas_2D_pskel& p)
  {
    this->areas_parser_ = &p;
  }

  inline
  void cross_section_pskel::
  areas_parser (::xml_schema::parser_map& m)
  {
    this->areas_parser_map_ = &m;
  }

  inline
  void cross_section_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void cross_section_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void cross_section_pskel::
  parsers (::phenotype_common::geometrical_parameters_pskel& parameters,
           ::phenotype_common::lengths_pskel& lengths,
           ::phenotype_common::areas_2D_pskel& areas,
           ::common::custom_pskel& custom)
  {
    this->parameters_parser_ = &parameters;
    this->lengths_parser_ = &lengths;
    this->areas_parser_ = &areas;
    this->custom_parser_ = &custom;
  }

  inline
  void cross_section_pskel::
  parser_maps (::xml_schema::parser_map& parameters,
               ::xml_schema::parser_map& lengths,
               ::xml_schema::parser_map& areas,
               ::xml_schema::parser_map& custom)
  {
    this->parameters_parser_map_ = &parameters;
    this->lengths_parser_map_ = &lengths;
    this->areas_parser_map_ = &areas;
    this->custom_parser_map_ = &custom;
  }

  inline
  cross_section_pskel::
  cross_section_pskel ()
  : cross_section_impl_ (0),
    parameters_parser_ (0),
    parameters_parser_map_ (0),
    lengths_parser_ (0),
    lengths_parser_map_ (0),
    areas_parser_ (0),
    areas_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  cross_section_pskel::
  cross_section_pskel (cross_section_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    cross_section_impl_ (impl),
    parameters_parser_ (0),
    parameters_parser_map_ (0),
    lengths_parser_ (0),
    lengths_parser_map_ (0),
    areas_parser_ (0),
    areas_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // mass_pskel
  //

  inline
  void mass_pskel::
  biomass_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->biomass_parser_ = &p;
  }

  inline
  void mass_pskel::
  biomass_parser (::xml_schema::parser_map& m)
  {
    this->biomass_parser_map_ = &m;
  }

  inline
  void mass_pskel::
  fluid_mass_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->fluid_mass_parser_ = &p;
  }

  inline
  void mass_pskel::
  fluid_mass_parser (::xml_schema::parser_map& m)
  {
    this->fluid_mass_parser_map_ = &m;
  }

  inline
  void mass_pskel::
  total_mass_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->total_mass_parser_ = &p;
  }

  inline
  void mass_pskel::
  total_mass_parser (::xml_schema::parser_map& m)
  {
    this->total_mass_parser_map_ = &m;
  }

  inline
  void mass_pskel::
  parsers (::common::units_decimal_nonnegative_pskel& biomass,
           ::common::units_decimal_nonnegative_pskel& fluid_mass,
           ::common::units_decimal_nonnegative_pskel& total_mass)
  {
    this->biomass_parser_ = &biomass;
    this->fluid_mass_parser_ = &fluid_mass;
    this->total_mass_parser_ = &total_mass;
  }

  inline
  void mass_pskel::
  parser_maps (::xml_schema::parser_map& biomass,
               ::xml_schema::parser_map& fluid_mass,
               ::xml_schema::parser_map& total_mass)
  {
    this->biomass_parser_map_ = &biomass;
    this->fluid_mass_parser_map_ = &fluid_mass;
    this->total_mass_parser_map_ = &total_mass;
  }

  inline
  mass_pskel::
  mass_pskel ()
  : mass_impl_ (0),
    biomass_parser_ (0),
    biomass_parser_map_ (0),
    fluid_mass_parser_ (0),
    fluid_mass_parser_map_ (0),
    total_mass_parser_ (0),
    total_mass_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (3UL, v_all_first_)
  {
  }

  inline
  mass_pskel::
  mass_pskel (mass_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    mass_impl_ (impl),
    biomass_parser_ (0),
    biomass_parser_map_ (0),
    fluid_mass_parser_ (0),
    fluid_mass_parser_map_ (0),
    total_mass_parser_ (0),
    total_mass_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (3UL, v_all_first_)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

