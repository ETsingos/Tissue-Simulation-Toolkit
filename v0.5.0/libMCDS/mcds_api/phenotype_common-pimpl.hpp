// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_COMMON_PIMPL_HPP
#define PHENOTYPE_COMMON_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define PHENOTYPE_COMMON_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "phenotype_common-pskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-pimpl.hpp"

#include "variables-pimpl.hpp"

namespace phenotype_common
{
  class adhesion_pimpl: public adhesion_pskel
  {
    public:
    adhesion_pimpl (bool = false);

    ~adhesion_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    adhesion_bond_breaking_rate (::common::units_decimal*);

    virtual void
    adhesion_bond_formation_rate (::common::units_decimal*);

    virtual void
    adhesion_spring_constant (::common::units_decimal_nonnegative*);

    virtual void
    adhesion_receptor_density (::common::units_decimal_nonnegative*);

    virtual void
    surface_binding_energy (::common::units_decimal*);

    virtual void
    number_of_adhered_cells (::common::units_decimal_nonnegative*);

    virtual void
    maximum_number_of_adhered_cells (const ::common::units_unsignedShort&);

    virtual void
    adhered_surface_area (::common::units_decimal_nonnegative*);

    virtual void
    maximum_adhered_surface_area (::common::units_decimal_nonnegative*);

    virtual void
    adhesion_force_per_surface_area (::common::units_decimal*);

    virtual void
    adhesion_probability (::common::units_fraction*);

    virtual void
    detachment_proability (::common::units_fraction*);

    virtual void
    rolling_observation (::phenotype_common::rolling_observation*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::adhesion*
    post_adhesion ();

    public:
    void
    pre_impl (::phenotype_common::adhesion*);

    public:
    struct adhesion_pimpl_state
    {
      ::phenotype_common::adhesion* adhesion_;
    };

    adhesion_pimpl_state adhesion_pimpl_state_;
    bool adhesion_pimpl_base_;
  };

  class rolling_observation_pimpl: public rolling_observation_pskel
  {
    public:
    rolling_observation_pimpl (bool = false);

    ~rolling_observation_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    rolling_velocity (::common::units_decimal*);

    virtual void
    shear_stress (::common::units_decimal*);

    virtual ::phenotype_common::rolling_observation*
    post_rolling_observation ();

    public:
    void
    pre_impl (::phenotype_common::rolling_observation*);

    public:
    struct rolling_observation_pimpl_state
    {
      ::phenotype_common::rolling_observation* rolling_observation_;
    };

    rolling_observation_pimpl_state rolling_observation_pimpl_state_;
    bool rolling_observation_pimpl_base_;
  };

  class friction_pimpl: public friction_pskel
  {
    public:
    friction_pimpl (bool = false);

    ~friction_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    compression (::common::units_decimal_nonnegative*);

    virtual void
    ECM (::common::units_decimal_nonnegative*);

    virtual void
    shear (::common::units_decimal_nonnegative*);

    virtual ::phenotype_common::friction*
    post_friction ();

    public:
    void
    pre_impl (::phenotype_common::friction*);

    public:
    struct friction_pimpl_state
    {
      ::phenotype_common::friction* friction_;
    };

    friction_pimpl_state friction_pimpl_state_;
    bool friction_pimpl_base_;
  };

  class mechanics_pimpl: public mechanics_pskel
  {
    public:
    mechanics_pimpl (bool = false);

    ~mechanics_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    friction (::phenotype_common::friction*);

    virtual void
    maximum_cell_deformation (::common::units_decimal*);

    virtual void
    mechanical_pressure (::common::units_decimal*);

    virtual void
    indentation_observation (::phenotype_common::indentation_observation*);

    virtual void
    poisson_ratio (::common::units_decimal*);

    virtual void
    youngs_modulus (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::mechanics*
    post_mechanics ();

    public:
    void
    pre_impl (::phenotype_common::mechanics*);

    public:
    struct mechanics_pimpl_state
    {
      ::phenotype_common::mechanics* mechanics_;
    };

    mechanics_pimpl_state mechanics_pimpl_state_;
    bool mechanics_pimpl_base_;
  };

  class indentation_observation_pimpl: public indentation_observation_pskel
  {
    public:
    indentation_observation_pimpl (bool = false);

    ~indentation_observation_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    depth (::common::units_decimal*);

    virtual void
    poisson_ratio (::common::units_decimal*);

    virtual void
    youngs_modulus (::common::units_decimal*);

    virtual ::phenotype_common::indentation_observation*
    post_indentation_observation ();

    public:
    void
    pre_impl (::phenotype_common::indentation_observation*);

    public:
    struct indentation_observation_pimpl_state
    {
      ::phenotype_common::indentation_observation* indentation_observation_;
    };

    indentation_observation_pimpl_state indentation_observation_pimpl_state_;
    bool indentation_observation_pimpl_base_;
  };

  class motility_pimpl: public motility_pskel
  {
    public:
    motility_pimpl (bool = false);

    ~motility_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    unrestricted (::phenotype_common::motility_types*);

    virtual void
    restricted (::phenotype_common::motility_types*);

    virtual ::phenotype_common::motility*
    post_motility ();

    public:
    void
    pre_impl (::phenotype_common::motility*);

    public:
    struct motility_pimpl_state
    {
      ::phenotype_common::motility* motility_;
    };

    motility_pimpl_state motility_pimpl_state_;
    bool motility_pimpl_base_;
  };

  class motility_types_pimpl: public motility_types_pskel
  {
    public:
    motility_types_pimpl (bool = false);

    ~motility_types_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    timescale (::phenotype_common::timescale*);

    virtual void
    restriction (::variables::experimental_conditions*);

    virtual void
    net_displacement (::common::units_decimal*);

    virtual void
    total_displacement (::common::units_decimal_nonnegative*);

    virtual void
    mean_square_displacement (::common::units_decimal_nonnegative*);

    virtual void
    mean_speed (::common::units_decimal*);

    virtual void
    net_speed (::common::units_decimal*);

    virtual void
    persistence (::common::units_decimal*);

    virtual void
    mean_path_length (::common::units_decimal*);

    virtual void
    diffusion_coefficient (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::motility_types*
    post_motility_types ();

    public:
    void
    pre_impl (::phenotype_common::motility_types*);

    public:
    struct motility_types_pimpl_state
    {
      ::phenotype_common::motility_types* motility_types_;
    };

    motility_types_pimpl_state motility_types_pimpl_state_;
    bool motility_types_pimpl_base_;
  };

  class timescale_pimpl: public timescale_pskel
  {
    public:
    timescale_pimpl (bool = false);

    ~timescale_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    mitotic (bool);

    virtual ::phenotype_common::timescale*
    post_timescale ();

    public:
    void
    pre_impl (::phenotype_common::timescale*);

    public:
    ::common::units_decimal_pimpl base_impl_;

    public:
    struct timescale_pimpl_state
    {
      ::phenotype_common::timescale* timescale_;
    };

    timescale_pimpl_state timescale_pimpl_state_;
    bool timescale_pimpl_base_;
  };

  class transport_processes_pimpl: public transport_processes_pskel
  {
    public:
    transport_processes_pimpl (bool = false);

    ~transport_processes_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    variable (::phenotype_common::transport_variable*);

    virtual ::phenotype_common::transport_processes*
    post_transport_processes ();

    public:
    void
    pre_impl (::phenotype_common::transport_processes*);

    public:
    struct transport_processes_pimpl_state
    {
      ::phenotype_common::transport_processes* transport_processes_;
    };

    transport_processes_pimpl_state transport_processes_pimpl_state_;
    bool transport_processes_pimpl_base_;
  };

  class transport_variable_pimpl: public transport_variable_pskel
  {
    public:
    transport_variable_pimpl (bool = false);

    ~transport_variable_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    name (const ::std::string&);

    virtual void
    units (const ::std::string&);

    virtual void
    ID (unsigned long long);

    virtual void
    type (const ::variables::amount_type&);

    virtual void
    ChEBI_ID (const ::std::string&);

    virtual void
    MeSH_ID (const ::std::string&);

    virtual void
    DrugBank_ID (const ::std::string&);

    virtual void
    GMO_ID (const ::std::string&);

    virtual void
    GO_ID (const ::std::string&);

    virtual void
    UniProt_ID (const ::std::string&);

    virtual void
    PR_ID (const ::std::string&);

    // Elements.
    //
    virtual void
    all_present ();

    virtual void
    export_rate (::common::units_decimal*);

    virtual void
    export_rate_per_unit_surface_area (::common::units_decimal*);

    virtual void
    import_rate (::common::units_decimal*);

    virtual void
    import_rate_per_unit_surface_area (::common::units_decimal*);

    virtual void
    saturation_density (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::transport_variable*
    post_transport_variable ();

    public:
    void
    pre_impl (::phenotype_common::transport_variable*);

    public:
    struct transport_variable_pimpl_state
    {
      ::phenotype_common::transport_variable* transport_variable_;
    };

    transport_variable_pimpl_state transport_variable_pimpl_state_;
    bool transport_variable_pimpl_base_;
  };

  class geometrical_parameters_pimpl: public geometrical_parameters_pskel
  {
    public:
    geometrical_parameters_pimpl (bool = false);

    ~geometrical_parameters_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    aspect_ratio (::common::units_decimal_nonnegative*);

    virtual void
    circularity (::common::units_decimal_nonnegative*);

    virtual void
    eccentricity (::common::units_decimal_nonnegative*);

    virtual void
    sphericity (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::geometrical_parameters*
    post_geometrical_parameters ();

    public:
    void
    pre_impl (::phenotype_common::geometrical_parameters*);

    public:
    struct geometrical_parameters_pimpl_state
    {
      ::phenotype_common::geometrical_parameters* geometrical_parameters_;
    };

    geometrical_parameters_pimpl_state geometrical_parameters_pimpl_state_;
    bool geometrical_parameters_pimpl_base_;
  };

  class lengths_pimpl: public lengths_pskel
  {
    public:
    lengths_pimpl (bool = false);

    ~lengths_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    diameter (::common::units_decimal_nonnegative*);

    virtual void
    major_axis (::common::units_decimal_nonnegative*);

    virtual void
    minor_axis (::common::units_decimal_nonnegative*);

    virtual void
    perimeter (::common::units_decimal_nonnegative*);

    virtual void
    radius (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::lengths*
    post_lengths ();

    public:
    void
    pre_impl (::phenotype_common::lengths*);

    public:
    struct lengths_pimpl_state
    {
      ::phenotype_common::lengths* lengths_;
    };

    lengths_pimpl_state lengths_pimpl_state_;
    bool lengths_pimpl_base_;
  };

  class areas_3D_pimpl: public areas_3D_pskel
  {
    public:
    areas_3D_pimpl (bool = false);

    ~areas_3D_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    free_surface_area (::common::units_decimal_nonnegative*);

    virtual void
    total_surface_area (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::areas_3D*
    post_areas_3D ();

    public:
    void
    pre_impl (::phenotype_common::areas_3D*);

    public:
    struct areas_3D_pimpl_state
    {
      ::phenotype_common::areas_3D* areas_3D_;
    };

    areas_3D_pimpl_state areas_3D_pimpl_state_;
    bool areas_3D_pimpl_base_;
  };

  class areas_2D_pimpl: public areas_2D_pskel
  {
    public:
    areas_2D_pimpl (bool = false);

    ~areas_2D_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    total_area (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::areas_2D*
    post_areas_2D ();

    public:
    void
    pre_impl (::phenotype_common::areas_2D*);

    public:
    struct areas_2D_pimpl_state
    {
      ::phenotype_common::areas_2D* areas_2D_;
    };

    areas_2D_pimpl_state areas_2D_pimpl_state_;
    bool areas_2D_pimpl_base_;
  };

  class volumes_pimpl: public volumes_pskel
  {
    public:
    volumes_pimpl (bool = false);

    ~volumes_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    fluid_volume (::common::units_decimal_nonnegative*);

    virtual void
    fluid_volume_fraction (::common::units_fraction*);

    virtual void
    solid_calcified_volume (::common::units_decimal_nonnegative*);

    virtual void
    solid_volume (::common::units_decimal_nonnegative*);

    virtual void
    solid_volume_fraction (::common::units_fraction*);

    virtual void
    total_volume (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::volumes*
    post_volumes ();

    public:
    void
    pre_impl (::phenotype_common::volumes*);

    public:
    struct volumes_pimpl_state
    {
      ::phenotype_common::volumes* volumes_;
    };

    volumes_pimpl_state volumes_pimpl_state_;
    bool volumes_pimpl_base_;
  };

  class geometrical_properties_pimpl: public geometrical_properties_pskel
  {
    public:
    geometrical_properties_pimpl (bool = false);

    ~geometrical_properties_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    parameters (::phenotype_common::geometrical_parameters*);

    virtual void
    lengths (::phenotype_common::lengths*);

    virtual void
    areas (::phenotype_common::areas_3D*);

    virtual void
    volumes (::phenotype_common::volumes*);

    virtual void
    cross_section (::phenotype_common::cross_section*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::geometrical_properties*
    post_geometrical_properties ();

    public:
    void
    pre_impl (::phenotype_common::geometrical_properties*);

    public:
    struct geometrical_properties_pimpl_state
    {
      ::phenotype_common::geometrical_properties* geometrical_properties_;
    };

    geometrical_properties_pimpl_state geometrical_properties_pimpl_state_;
    bool geometrical_properties_pimpl_base_;
  };

  class cross_section_pimpl: public cross_section_pskel
  {
    public:
    cross_section_pimpl (bool = false);

    ~cross_section_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    parameters (::phenotype_common::geometrical_parameters*);

    virtual void
    lengths (::phenotype_common::lengths*);

    virtual void
    areas (::phenotype_common::areas_2D*);

    virtual void
    custom (::common::custom*);

    virtual ::phenotype_common::cross_section*
    post_cross_section ();

    public:
    void
    pre_impl (::phenotype_common::cross_section*);

    public:
    struct cross_section_pimpl_state
    {
      ::phenotype_common::cross_section* cross_section_;
    };

    cross_section_pimpl_state cross_section_pimpl_state_;
    bool cross_section_pimpl_base_;
  };

  class mass_pimpl: public mass_pskel
  {
    public:
    mass_pimpl (bool = false);

    ~mass_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    biomass (::common::units_decimal_nonnegative*);

    virtual void
    fluid_mass (::common::units_decimal_nonnegative*);

    virtual void
    total_mass (::common::units_decimal_nonnegative*);

    virtual ::phenotype_common::mass*
    post_mass ();

    public:
    void
    pre_impl (::phenotype_common::mass*);

    public:
    struct mass_pimpl_state
    {
      ::phenotype_common::mass* mass_;
    };

    mass_pimpl_state mass_pimpl_state_;
    bool mass_pimpl_base_;
  };
}

#ifdef PHENOTYPE_COMMON_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PHENOTYPE_COMMON_PIMPL_HPP
