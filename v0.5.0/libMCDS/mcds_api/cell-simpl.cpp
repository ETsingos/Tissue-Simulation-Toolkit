// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell-simpl.hpp"

namespace cell
{
  // population_definition_simpl
  //

  void population_definition_simpl::
  pre (const ::cell::population_definition& x)
  {
    this->population_definition_simpl_state_.population_definition_ = &x;
  }

  bool population_definition_simpl::
  ID_present ()
  {
    return this->population_definition_simpl_state_.population_definition_->ID_present ();
  }

  unsigned int population_definition_simpl::
  ID ()
  {
    return this->population_definition_simpl_state_.population_definition_->ID ();
  }

  bool population_definition_simpl::
  name_present ()
  {
    return this->population_definition_simpl_state_.population_definition_->name_present ();
  }

  ::std::string population_definition_simpl::
  name ()
  {
    return this->population_definition_simpl_state_.population_definition_->name ();
  }

  bool population_definition_simpl::
  units_present ()
  {
    return this->population_definition_simpl_state_.population_definition_->units_present ();
  }

  ::std::string population_definition_simpl::
  units ()
  {
    return this->population_definition_simpl_state_.population_definition_->units ();
  }

  bool population_definition_simpl::
  phenotype_dataset_present ()
  {
    return this->population_definition_simpl_state_.population_definition_->phenotype_dataset_present ();
  }

  const ::phenotype_dataset::phenotype_dataset& population_definition_simpl::
  phenotype_dataset ()
  {
    return this->population_definition_simpl_state_.population_definition_->phenotype_dataset ();
  }

  bool population_definition_simpl::
  custom_present ()
  {
    return this->population_definition_simpl_state_.population_definition_->custom_present ();
  }

  const ::common::custom& population_definition_simpl::
  custom ()
  {
    return this->population_definition_simpl_state_.population_definition_->custom ();
  }

  // population_definitions_simpl
  //

  void population_definitions_simpl::
  pre (const ::cell::population_definitions& x)
  {
    this->population_definitions_simpl_state_.population_definitions_ = &x;
    this->population_definitions_simpl_state_.population_definition_ = 
    this->population_definitions_simpl_state_.population_definitions_->population_definition ().begin ();
    this->population_definitions_simpl_state_.population_definition_end_ = 
    this->population_definitions_simpl_state_.population_definitions_->population_definition ().end ();
  }

  bool population_definitions_simpl::
  population_definition_next ()
  {
    return this->population_definitions_simpl_state_.population_definition_ != 
    this->population_definitions_simpl_state_.population_definition_end_;
  }

  const ::cell::population_definition& population_definitions_simpl::
  population_definition ()
  {
    return *this->population_definitions_simpl_state_.population_definition_++;
  }

  bool population_definitions_simpl::
  custom_present ()
  {
    return this->population_definitions_simpl_state_.population_definitions_->custom_present ();
  }

  const ::common::custom& population_definitions_simpl::
  custom ()
  {
    return this->population_definitions_simpl_state_.population_definitions_->custom ();
  }

  // cell_simpl
  //

  void cell_simpl::
  pre (const ::cell::cell& x)
  {
    this->cell_simpl_state_.cell_ = &x;
  }

  bool cell_simpl::
  ID_present ()
  {
    return this->cell_simpl_state_.cell_->ID_present ();
  }

  unsigned int cell_simpl::
  ID ()
  {
    return this->cell_simpl_state_.cell_->ID ();
  }

  bool cell_simpl::
  phenotype_dataset_present ()
  {
    return this->cell_simpl_state_.cell_->phenotype_dataset_present ();
  }

  const ::phenotype_dataset::phenotype_dataset& cell_simpl::
  phenotype_dataset ()
  {
    return this->cell_simpl_state_.cell_->phenotype_dataset ();
  }

  bool cell_simpl::
  state_present ()
  {
    return this->cell_simpl_state_.cell_->state_present ();
  }

  const ::state::state& cell_simpl::
  state ()
  {
    return this->cell_simpl_state_.cell_->state ();
  }

  bool cell_simpl::
  custom_present ()
  {
    return this->cell_simpl_state_.cell_->custom_present ();
  }

  const ::common::custom& cell_simpl::
  custom ()
  {
    return this->cell_simpl_state_.cell_->custom ();
  }

  // cell_population_individual_simpl
  //

  void cell_population_individual_simpl::
  pre (const ::cell::cell_population_individual& x)
  {
    this->cell_population_individual_simpl_state_.cell_population_individual_ = &x;
    this->cell_population_individual_simpl_state_.cell_ = 
    this->cell_population_individual_simpl_state_.cell_population_individual_->cell ().begin ();
    this->cell_population_individual_simpl_state_.cell_end_ = 
    this->cell_population_individual_simpl_state_.cell_population_individual_->cell ().end ();
  }

  bool cell_population_individual_simpl::
  type_present ()
  {
    return this->cell_population_individual_simpl_state_.cell_population_individual_->type_present ();
  }

  ::std::string cell_population_individual_simpl::
  type ()
  {
    return this->cell_population_individual_simpl_state_.cell_population_individual_->type ();
  }

  bool cell_population_individual_simpl::
  population_ID_present ()
  {
    return this->cell_population_individual_simpl_state_.cell_population_individual_->population_ID_present ();
  }

  unsigned int cell_population_individual_simpl::
  population_ID ()
  {
    return this->cell_population_individual_simpl_state_.cell_population_individual_->population_ID ();
  }

  bool cell_population_individual_simpl::
  cell_next ()
  {
    return this->cell_population_individual_simpl_state_.cell_ != 
    this->cell_population_individual_simpl_state_.cell_end_;
  }

  const ::cell::cell& cell_population_individual_simpl::
  cell ()
  {
    return *this->cell_population_individual_simpl_state_.cell_++;
  }

  bool cell_population_individual_simpl::
  custom_present ()
  {
    return this->cell_population_individual_simpl_state_.cell_population_individual_->custom_present ();
  }

  const ::common::custom& cell_population_individual_simpl::
  custom ()
  {
    return this->cell_population_individual_simpl_state_.cell_population_individual_->custom ();
  }

  // cell_population_aggregate_simpl
  //

  void cell_population_aggregate_simpl::
  pre (const ::cell::cell_population_aggregate& x)
  {
    this->cell_population_aggregate_simpl_state_.cell_population_aggregate_ = &x;
  }

  bool cell_population_aggregate_simpl::
  type_present ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->type_present ();
  }

  ::std::string cell_population_aggregate_simpl::
  type ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->type ();
  }

  bool cell_population_aggregate_simpl::
  population_ID_present ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->population_ID_present ();
  }

  unsigned int cell_population_aggregate_simpl::
  population_ID ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->population_ID ();
  }

  bool cell_population_aggregate_simpl::
  value_present ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->value_present ();
  }

  const ::common::units_decimal& cell_population_aggregate_simpl::
  value ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->value ();
  }

  bool cell_population_aggregate_simpl::
  sequence_present ()
  {
    if (this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->sequence_present ())
    {
      return true;
    }
    else
      return false;
  }

  bool cell_population_aggregate_simpl::
  phenotype_dataset_present ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->sequence ().phenotype_dataset_present ();
  }

  const ::phenotype_dataset::phenotype_dataset& cell_population_aggregate_simpl::
  phenotype_dataset ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->sequence ().phenotype_dataset ();
  }

  bool cell_population_aggregate_simpl::
  state_present ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->sequence ().state_present ();
  }

  const ::state::state& cell_population_aggregate_simpl::
  state ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->sequence ().state ();
  }

  bool cell_population_aggregate_simpl::
  custom_present ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->sequence ().custom_present ();
  }

  const ::common::custom& cell_population_aggregate_simpl::
  custom ()
  {
    return this->cell_population_aggregate_simpl_state_.cell_population_aggregate_->sequence ().custom ();
  }

  // population_vector_simpl
  //

  void population_vector_simpl::
  pre (const ::cell::population_vector& x)
  {
    this->population_vector_simpl_state_.population_vector_ = &x;
    this->population_vector_simpl_state_.cell_population_ = 
    this->population_vector_simpl_state_.population_vector_->cell_population ().begin ();
    this->population_vector_simpl_state_.cell_population_end_ = 
    this->population_vector_simpl_state_.population_vector_->cell_population ().end ();
  }

  bool population_vector_simpl::
  voxel_ID_present ()
  {
    return this->population_vector_simpl_state_.population_vector_->voxel_ID_present ();
  }

  const ::common::unsigned_int_list& population_vector_simpl::
  voxel_ID ()
  {
    return this->population_vector_simpl_state_.population_vector_->voxel_ID ();
  }

  bool population_vector_simpl::
  value_present ()
  {
    return this->population_vector_simpl_state_.population_vector_->value_present ();
  }

  const ::common::units_double_list& population_vector_simpl::
  value ()
  {
    return this->population_vector_simpl_state_.population_vector_->value ();
  }

  bool population_vector_simpl::
  cell_population_next ()
  {
    return this->population_vector_simpl_state_.cell_population_ != 
    this->population_vector_simpl_state_.cell_population_end_;
  }

  const ::cell::cell_population_aggregate& population_vector_simpl::
  cell_population ()
  {
    return *this->population_vector_simpl_state_.cell_population_++;
  }

  bool population_vector_simpl::
  custom_present ()
  {
    return this->population_vector_simpl_state_.population_vector_->custom_present ();
  }

  const ::common::custom& population_vector_simpl::
  custom ()
  {
    return this->population_vector_simpl_state_.population_vector_->custom ();
  }

  // cell_populations_simpl
  //

  void cell_populations_simpl::
  pre (const ::cell::cell_populations& x)
  {
    this->cell_populations_simpl_state_.cell_populations_ = &x;
    this->cell_populations_simpl_state_.population_vector_ = 
    this->cell_populations_simpl_state_.cell_populations_->population_vector ().begin ();
    this->cell_populations_simpl_state_.population_vector_end_ = 
    this->cell_populations_simpl_state_.cell_populations_->population_vector ().end ();
  }

  bool cell_populations_simpl::
  population_vector_next ()
  {
    return this->cell_populations_simpl_state_.population_vector_ != 
    this->cell_populations_simpl_state_.population_vector_end_;
  }

  const ::cell::population_vector& cell_populations_simpl::
  population_vector ()
  {
    return *this->cell_populations_simpl_state_.population_vector_++;
  }

  bool cell_populations_simpl::
  cell_population_present ()
  {
    return this->cell_populations_simpl_state_.cell_populations_->cell_population_present ();
  }

  const ::cell::cell_population_individual& cell_populations_simpl::
  cell_population ()
  {
    return this->cell_populations_simpl_state_.cell_populations_->cell_population ();
  }

  // cellular_information_simpl
  //

  void cellular_information_simpl::
  pre (const ::cell::cellular_information& x)
  {
    this->cellular_information_simpl_state_.cellular_information_ = &x;
  }

  bool cellular_information_simpl::
  DCLs_present ()
  {
    return this->cellular_information_simpl_state_.cellular_information_->DCLs_present ();
  }

  const ::cell_line::DCLs& cellular_information_simpl::
  DCLs ()
  {
    return this->cellular_information_simpl_state_.cellular_information_->DCLs ();
  }

  bool cellular_information_simpl::
  population_definitions_present ()
  {
    return this->cellular_information_simpl_state_.cellular_information_->population_definitions_present ();
  }

  const ::cell::population_definitions& cellular_information_simpl::
  population_definitions ()
  {
    return this->cellular_information_simpl_state_.cellular_information_->population_definitions ();
  }

  bool cellular_information_simpl::
  mesh_present ()
  {
    return this->cellular_information_simpl_state_.cellular_information_->mesh_present ();
  }

  const ::mesh::mesh& cellular_information_simpl::
  mesh ()
  {
    return this->cellular_information_simpl_state_.cellular_information_->mesh ();
  }

  bool cellular_information_simpl::
  cell_populations_present ()
  {
    return this->cellular_information_simpl_state_.cellular_information_->cell_populations_present ();
  }

  const ::cell::cell_populations& cellular_information_simpl::
  cell_populations ()
  {
    return this->cellular_information_simpl_state_.cellular_information_->cell_populations ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

