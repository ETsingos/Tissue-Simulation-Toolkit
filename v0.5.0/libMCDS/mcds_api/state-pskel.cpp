// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "state-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace state
{
  // phase_name_pskel
  //

  void phase_name_pskel::
  GO_ID (const ::std::string& x)
  {
    if (this->phase_name_impl_)
      this->phase_name_impl_->GO_ID (x);
  }

  void phase_name_pskel::
  _reset ()
  {
    typedef ::xml_schema::string_pskel base;
    base::_reset ();

    if (this->GO_ID_parser_)
      this->GO_ID_parser_->_reset ();
  }

  const char* phase_name_pskel::
  _static_type ()
  {
    return "phase_name state";
  }

  const char* phase_name_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_phase_name_pskel_inheritance_map_entry_ (
    phase_name_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string phase_name_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  // phase_pskel
  //

  void phase_pskel::
  model_name (const ::std::string& x)
  {
    if (this->phase_impl_)
      this->phase_impl_->model_name (x);
  }

  void phase_pskel::
  phase_name (const ::state::phase_name& x)
  {
    if (this->phase_impl_)
      this->phase_impl_->phase_name (x);
  }

  void phase_pskel::
  cell_cycle_model_index (unsigned short x)
  {
    if (this->phase_impl_)
      this->phase_impl_->cell_cycle_model_index (x);
  }

  void phase_pskel::
  cell_cycle_phase_index (unsigned short x)
  {
    if (this->phase_impl_)
      this->phase_impl_->cell_cycle_phase_index (x);
  }

  void phase_pskel::
  elapsed_time (::common::units_decimal* x)
  {
    if (this->phase_impl_)
      this->phase_impl_->elapsed_time (x);
  }

  void phase_pskel::
  custom (::common::custom* x)
  {
    if (this->phase_impl_)
      this->phase_impl_->custom (x);
  }

  void phase_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->model_name_parser_)
      this->model_name_parser_->_reset ();

    if (this->model_name_parser_map_)
      this->model_name_parser_map_->reset ();

    if (this->phase_name_parser_)
      this->phase_name_parser_->_reset ();

    if (this->phase_name_parser_map_)
      this->phase_name_parser_map_->reset ();

    if (this->cell_cycle_model_index_parser_)
      this->cell_cycle_model_index_parser_->_reset ();

    if (this->cell_cycle_model_index_parser_map_)
      this->cell_cycle_model_index_parser_map_->reset ();

    if (this->cell_cycle_phase_index_parser_)
      this->cell_cycle_phase_index_parser_->_reset ();

    if (this->cell_cycle_phase_index_parser_map_)
      this->cell_cycle_phase_index_parser_map_->reset ();

    if (this->elapsed_time_parser_)
      this->elapsed_time_parser_->_reset ();

    if (this->elapsed_time_parser_map_)
      this->elapsed_time_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* phase_pskel::
  _static_type ()
  {
    return "phase state";
  }

  const char* phase_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // orientation_formalism_pskel
  //

  const char* orientation_formalism_pskel::
  _static_type ()
  {
    return "orientation_formalism state";
  }

  const char* orientation_formalism_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_orientation_formalism_pskel_inheritance_map_entry_ (
    orientation_formalism_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string orientation_formalism_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const orientation_formalism_pskel::_xsde_orientation_formalism_pskel_enums_[7UL] = 
  {
    "Euler Angles",
    "Polar",
    "Tait-Bryan",
    "Unit Vector",
    "axis-angle",
    "polar",
    "quaternion"
  };

  // orientation_pskel
  //

  void orientation_pskel::
  formalism (const ::state::orientation_formalism& x)
  {
    if (this->orientation_impl_)
      this->orientation_impl_->formalism (x);
  }

  void orientation_pskel::
  _reset ()
  {
    typedef ::common::units_double_list_pskel base;
    base::_reset ();

    if (this->formalism_parser_)
      this->formalism_parser_->_reset ();
  }

  const char* orientation_pskel::
  _static_type ()
  {
    return "orientation state";
  }

  const char* orientation_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_orientation_pskel_inheritance_map_entry_ (
    orientation_pskel::_static_type (),
    ::common::units_double_list_pskel::_static_type ());

  ::common::units_double_list* orientation_pskel::
  post_units_double_list ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->post_units_double_list ();
  }

  // cell_parts_pskel
  //

  void cell_parts_pskel::
  name (const ::std::string& x)
  {
    if (this->cell_parts_impl_)
      this->cell_parts_impl_->name (x);
  }

  void cell_parts_pskel::
  ID (unsigned int x)
  {
    if (this->cell_parts_impl_)
      this->cell_parts_impl_->ID (x);
  }

  void cell_parts_pskel::
  orientation (::state::orientation* x)
  {
    if (this->cell_parts_impl_)
      this->cell_parts_impl_->orientation (x);
  }

  void cell_parts_pskel::
  position (::common::units_double_list* x)
  {
    if (this->cell_parts_impl_)
      this->cell_parts_impl_->position (x);
  }

  void cell_parts_pskel::
  velocity (::common::units_double_list* x)
  {
    if (this->cell_parts_impl_)
      this->cell_parts_impl_->velocity (x);
  }

  void cell_parts_pskel::
  voxels (::mesh::int_list_xpath* x)
  {
    if (this->cell_parts_impl_)
      this->cell_parts_impl_->voxels (x);
  }

  void cell_parts_pskel::
  cell_part (::state::cell_parts* x)
  {
    if (this->cell_parts_impl_)
      this->cell_parts_impl_->cell_part (x);
  }

  void cell_parts_pskel::
  custom (::common::custom* x)
  {
    if (this->cell_parts_impl_)
      this->cell_parts_impl_->custom (x);
  }

  void cell_parts_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->orientation_parser_)
      this->orientation_parser_->_reset ();

    if (this->orientation_parser_map_)
      this->orientation_parser_map_->reset ();

    if (this->position_parser_)
      this->position_parser_->_reset ();

    if (this->position_parser_map_)
      this->position_parser_map_->reset ();

    if (this->velocity_parser_)
      this->velocity_parser_->_reset ();

    if (this->velocity_parser_map_)
      this->velocity_parser_map_->reset ();

    if (this->voxels_parser_)
      this->voxels_parser_->_reset ();

    if (this->voxels_parser_map_)
      this->voxels_parser_map_->reset ();

    if (this->cell_part_parser_)
      this->cell_part_parser_->_reset ();

    if (this->cell_part_parser_map_)
      this->cell_part_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_parts_pskel::
  _static_type ()
  {
    return "cell_parts state";
  }

  const char* cell_parts_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // state_pskel
  //

  void state_pskel::
  orientation (::state::orientation* x)
  {
    if (this->state_impl_)
      this->state_impl_->orientation (x);
  }

  void state_pskel::
  position (::common::units_double_list* x)
  {
    if (this->state_impl_)
      this->state_impl_->position (x);
  }

  void state_pskel::
  velocity (::common::units_double_list* x)
  {
    if (this->state_impl_)
      this->state_impl_->velocity (x);
  }

  void state_pskel::
  voxels (::mesh::int_list_xpath* x)
  {
    if (this->state_impl_)
      this->state_impl_->voxels (x);
  }

  void state_pskel::
  cell_part (::state::cell_parts* x)
  {
    if (this->state_impl_)
      this->state_impl_->cell_part (x);
  }

  void state_pskel::
  phase (::state::phase* x)
  {
    if (this->state_impl_)
      this->state_impl_->phase (x);
  }

  void state_pskel::
  adhered_cells (::state::list_of_adhered_cells* x)
  {
    if (this->state_impl_)
      this->state_impl_->adhered_cells (x);
  }

  void state_pskel::
  custom (::common::custom* x)
  {
    if (this->state_impl_)
      this->state_impl_->custom (x);
  }

  void state_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->orientation_parser_)
      this->orientation_parser_->_reset ();

    if (this->orientation_parser_map_)
      this->orientation_parser_map_->reset ();

    if (this->position_parser_)
      this->position_parser_->_reset ();

    if (this->position_parser_map_)
      this->position_parser_map_->reset ();

    if (this->velocity_parser_)
      this->velocity_parser_->_reset ();

    if (this->velocity_parser_map_)
      this->velocity_parser_map_->reset ();

    if (this->voxels_parser_)
      this->voxels_parser_->_reset ();

    if (this->voxels_parser_map_)
      this->voxels_parser_map_->reset ();

    if (this->cell_part_parser_)
      this->cell_part_parser_->_reset ();

    if (this->cell_part_parser_map_)
      this->cell_part_parser_map_->reset ();

    if (this->phase_parser_)
      this->phase_parser_->_reset ();

    if (this->phase_parser_map_)
      this->phase_parser_map_->reset ();

    if (this->adhered_cells_parser_)
      this->adhered_cells_parser_->_reset ();

    if (this->adhered_cells_parser_map_)
      this->adhered_cells_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* state_pskel::
  _static_type ()
  {
    return "state state";
  }

  const char* state_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // adhered_cell_pskel
  //

  void adhered_cell_pskel::
  ID (unsigned int x)
  {
    if (this->adhered_cell_impl_)
      this->adhered_cell_impl_->ID (x);
  }

  void adhered_cell_pskel::
  contact_area (::common::units_decimal_nonnegative* x)
  {
    if (this->adhered_cell_impl_)
      this->adhered_cell_impl_->contact_area (x);
  }

  void adhered_cell_pskel::
  contact (::phenotype_common::cross_section* x)
  {
    if (this->adhered_cell_impl_)
      this->adhered_cell_impl_->contact (x);
  }

  void adhered_cell_pskel::
  custom (::common::custom* x)
  {
    if (this->adhered_cell_impl_)
      this->adhered_cell_impl_->custom (x);
  }

  void adhered_cell_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->ID_parser_map_)
      this->ID_parser_map_->reset ();

    if (this->contact_area_parser_)
      this->contact_area_parser_->_reset ();

    if (this->contact_area_parser_map_)
      this->contact_area_parser_map_->reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->contact_parser_map_)
      this->contact_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* adhered_cell_pskel::
  _static_type ()
  {
    return "adhered_cell state";
  }

  const char* adhered_cell_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // list_of_adhered_cells_pskel
  //

  void list_of_adhered_cells_pskel::
  adhered_cell (::state::adhered_cell* x)
  {
    if (this->list_of_adhered_cells_impl_)
      this->list_of_adhered_cells_impl_->adhered_cell (x);
  }

  void list_of_adhered_cells_pskel::
  custom (::common::custom* x)
  {
    if (this->list_of_adhered_cells_impl_)
      this->list_of_adhered_cells_impl_->custom (x);
  }

  void list_of_adhered_cells_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->adhered_cell_parser_)
      this->adhered_cell_parser_->_reset ();

    if (this->adhered_cell_parser_map_)
      this->adhered_cell_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_adhered_cells_pskel::
  _static_type ()
  {
    return "list_of_adhered_cells state";
  }

  const char* list_of_adhered_cells_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace state
{
  // Element validation and dispatch functions for phase_pskel.
  //
  bool phase_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool phase_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void phase_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void phase_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void phase_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "model_name" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->model_name_parser_ != 0)
            p = this->model_name_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->model_name_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->model_name_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->model_name_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->model_name_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->model_name (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "phase_name" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::state::phase_name_pskel* p = 0;

          if (t == 0 && this->phase_name_parser_ != 0)
            p = this->phase_name_parser_;
          else
          {
            const char* ts = ::state::phase_name_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->phase_name_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->phase_name_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->phase_name_parser_map_ != 0)
                p = static_cast< ::state::phase_name_pskel* > (
                  this->phase_name_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::state::phase_name_pskel* p =
          static_cast< ::state::phase_name_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::state::phase_name& tmp = p->post_phase_name ();
            this->phase_name (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "cell_cycle_model_index" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::xml_schema::unsigned_short_pskel* p = 0;

          if (t == 0 && this->cell_cycle_model_index_parser_ != 0)
            p = this->cell_cycle_model_index_parser_;
          else
          {
            const char* ts = ::xml_schema::unsigned_short_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->cell_cycle_model_index_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->cell_cycle_model_index_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->cell_cycle_model_index_parser_map_ != 0)
                p = static_cast< ::xml_schema::unsigned_short_pskel* > (
                  this->cell_cycle_model_index_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::unsigned_short_pskel* p =
          static_cast< ::xml_schema::unsigned_short_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            unsigned short tmp = p->post_unsigned_short ();
            this->cell_cycle_model_index (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "cell_cycle_phase_index" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::xml_schema::unsigned_short_pskel* p = 0;

          if (t == 0 && this->cell_cycle_phase_index_parser_ != 0)
            p = this->cell_cycle_phase_index_parser_;
          else
          {
            const char* ts = ::xml_schema::unsigned_short_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->cell_cycle_phase_index_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->cell_cycle_phase_index_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->cell_cycle_phase_index_parser_map_ != 0)
                p = static_cast< ::xml_schema::unsigned_short_pskel* > (
                  this->cell_cycle_phase_index_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::unsigned_short_pskel* p =
          static_cast< ::xml_schema::unsigned_short_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            unsigned short tmp = p->post_unsigned_short ();
            this->cell_cycle_phase_index (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "elapsed_time" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->elapsed_time_parser_ != 0)
            p = this->elapsed_time_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->elapsed_time_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->elapsed_time_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->elapsed_time_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->elapsed_time_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->elapsed_time (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[5UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[5UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for cell_parts_pskel.
  //
  bool cell_parts_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if ((n == "orientation" && ns.empty ()) ||
            (n == "position" && ns.empty ()) ||
            (n == "velocity" && ns.empty ()) ||
            (n == "voxels" && ns.empty ()))
          s = 0UL;
        else if (n == "cell_part" && ns.empty ())
          s = 1UL;
        else if (n == "custom" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_parts_pskel::sequence_1;
          vd->state = s;
          vd->count = 0;

          this->sequence_1 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_parts_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_parts_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_parts_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cell_parts_pskel::
  sequence_1 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        unsigned long s = ~0UL;

        if (n == "orientation" && ns.empty ())
          s = 0UL;
        else if (n == "position" && ns.empty ())
          s = 1UL;
        else if (n == "velocity" && ns.empty ())
          s = 2UL;
        else if (n == "voxels" && ns.empty ())
          s = 3UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = 1UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &cell_parts_pskel::sequence_0;
          vd.state = s;
          vd.count = 0;

          this->sequence_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "cell_part" && ns.empty ())
        {
          if (start)
          {
            ::state::cell_parts_pskel* p = 0;

            if (t == 0 && this->cell_part_parser_ != 0)
              p = this->cell_part_parser_;
            else
            {
              const char* ts = ::state::cell_parts_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_part_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_part_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_part_parser_map_ != 0)
                  p = static_cast< ::state::cell_parts_pskel* > (
                    this->cell_part_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::state::cell_parts_pskel* p =
            static_cast< ::state::cell_parts_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::state::cell_parts* tmp = p->post_cell_parts ();
              this->cell_part (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void cell_parts_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "orientation" && ns.empty ())
        {
          if (start)
          {
            ::state::orientation_pskel* p = 0;

            if (t == 0 && this->orientation_parser_ != 0)
              p = this->orientation_parser_;
            else
            {
              const char* ts = ::state::orientation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->orientation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->orientation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->orientation_parser_map_ != 0)
                  p = static_cast< ::state::orientation_pskel* > (
                    this->orientation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::state::orientation_pskel* p =
            static_cast< ::state::orientation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::state::orientation* tmp = p->post_orientation ();
              this->orientation (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "position" && ns.empty ())
        {
          if (start)
          {
            ::common::units_double_list_pskel* p = 0;

            if (t == 0 && this->position_parser_ != 0)
              p = this->position_parser_;
            else
            {
              const char* ts = ::common::units_double_list_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->position_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->position_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->position_parser_map_ != 0)
                  p = static_cast< ::common::units_double_list_pskel* > (
                    this->position_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_double_list_pskel* p =
            static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_double_list* tmp = p->post_units_double_list ();
              this->position (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "velocity" && ns.empty ())
        {
          if (start)
          {
            ::common::units_double_list_pskel* p = 0;

            if (t == 0 && this->velocity_parser_ != 0)
              p = this->velocity_parser_;
            else
            {
              const char* ts = ::common::units_double_list_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->velocity_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->velocity_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->velocity_parser_map_ != 0)
                  p = static_cast< ::common::units_double_list_pskel* > (
                    this->velocity_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_double_list_pskel* p =
            static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_double_list* tmp = p->post_units_double_list ();
              this->velocity (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "voxels" && ns.empty ())
        {
          if (start)
          {
            ::mesh::int_list_xpath_pskel* p = 0;

            if (t == 0 && this->voxels_parser_ != 0)
              p = this->voxels_parser_;
            else
            {
              const char* ts = ::mesh::int_list_xpath_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->voxels_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->voxels_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->voxels_parser_map_ != 0)
                  p = static_cast< ::mesh::int_list_xpath_pskel* > (
                    this->voxels_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::mesh::int_list_xpath_pskel* p =
            static_cast< ::mesh::int_list_xpath_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::mesh::int_list_xpath* tmp = p->post_int_list_xpath ();
              this->voxels (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for state_pskel.
  //
  bool state_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if ((n == "orientation" && ns.empty ()) ||
            (n == "position" && ns.empty ()) ||
            (n == "velocity" && ns.empty ()) ||
            (n == "voxels" && ns.empty ()))
          s = 0UL;
        else if (n == "cell_part" && ns.empty ())
          s = 1UL;
        else if (n == "phase" && ns.empty ())
          s = 2UL;
        else if (n == "adhered_cells" && ns.empty ())
          s = 3UL;
        else if (n == "custom" && ns.empty ())
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &state_pskel::sequence_1;
          vd->state = s;
          vd->count = 0;

          this->sequence_1 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool state_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void state_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void state_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void state_pskel::
  sequence_1 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        unsigned long s = ~0UL;

        if (n == "orientation" && ns.empty ())
          s = 0UL;
        else if (n == "position" && ns.empty ())
          s = 1UL;
        else if (n == "velocity" && ns.empty ())
          s = 2UL;
        else if (n == "voxels" && ns.empty ())
          s = 3UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = 1UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &state_pskel::sequence_0;
          vd.state = s;
          vd.count = 0;

          this->sequence_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "cell_part" && ns.empty ())
        {
          if (start)
          {
            ::state::cell_parts_pskel* p = 0;

            if (t == 0 && this->cell_part_parser_ != 0)
              p = this->cell_part_parser_;
            else
            {
              const char* ts = ::state::cell_parts_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_part_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_part_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_part_parser_map_ != 0)
                  p = static_cast< ::state::cell_parts_pskel* > (
                    this->cell_part_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::state::cell_parts_pskel* p =
            static_cast< ::state::cell_parts_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::state::cell_parts* tmp = p->post_cell_parts ();
              this->cell_part (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "phase" && ns.empty ())
        {
          if (start)
          {
            ::state::phase_pskel* p = 0;

            if (t == 0 && this->phase_parser_ != 0)
              p = this->phase_parser_;
            else
            {
              const char* ts = ::state::phase_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->phase_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->phase_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->phase_parser_map_ != 0)
                  p = static_cast< ::state::phase_pskel* > (
                    this->phase_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::state::phase_pskel* p =
            static_cast< ::state::phase_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::state::phase* tmp = p->post_phase ();
              this->phase (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "adhered_cells" && ns.empty ())
        {
          if (start)
          {
            ::state::list_of_adhered_cells_pskel* p = 0;

            if (t == 0 && this->adhered_cells_parser_ != 0)
              p = this->adhered_cells_parser_;
            else
            {
              const char* ts = ::state::list_of_adhered_cells_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->adhered_cells_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->adhered_cells_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->adhered_cells_parser_map_ != 0)
                  p = static_cast< ::state::list_of_adhered_cells_pskel* > (
                    this->adhered_cells_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::state::list_of_adhered_cells_pskel* p =
            static_cast< ::state::list_of_adhered_cells_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::state::list_of_adhered_cells* tmp = p->post_list_of_adhered_cells ();
              this->adhered_cells (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void state_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "orientation" && ns.empty ())
        {
          if (start)
          {
            ::state::orientation_pskel* p = 0;

            if (t == 0 && this->orientation_parser_ != 0)
              p = this->orientation_parser_;
            else
            {
              const char* ts = ::state::orientation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->orientation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->orientation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->orientation_parser_map_ != 0)
                  p = static_cast< ::state::orientation_pskel* > (
                    this->orientation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::state::orientation_pskel* p =
            static_cast< ::state::orientation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::state::orientation* tmp = p->post_orientation ();
              this->orientation (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "position" && ns.empty ())
        {
          if (start)
          {
            ::common::units_double_list_pskel* p = 0;

            if (t == 0 && this->position_parser_ != 0)
              p = this->position_parser_;
            else
            {
              const char* ts = ::common::units_double_list_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->position_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->position_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->position_parser_map_ != 0)
                  p = static_cast< ::common::units_double_list_pskel* > (
                    this->position_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_double_list_pskel* p =
            static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_double_list* tmp = p->post_units_double_list ();
              this->position (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "velocity" && ns.empty ())
        {
          if (start)
          {
            ::common::units_double_list_pskel* p = 0;

            if (t == 0 && this->velocity_parser_ != 0)
              p = this->velocity_parser_;
            else
            {
              const char* ts = ::common::units_double_list_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->velocity_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->velocity_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->velocity_parser_map_ != 0)
                  p = static_cast< ::common::units_double_list_pskel* > (
                    this->velocity_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_double_list_pskel* p =
            static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_double_list* tmp = p->post_units_double_list ();
              this->velocity (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "voxels" && ns.empty ())
        {
          if (start)
          {
            ::mesh::int_list_xpath_pskel* p = 0;

            if (t == 0 && this->voxels_parser_ != 0)
              p = this->voxels_parser_;
            else
            {
              const char* ts = ::mesh::int_list_xpath_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->voxels_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->voxels_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->voxels_parser_map_ != 0)
                  p = static_cast< ::mesh::int_list_xpath_pskel* > (
                    this->voxels_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::mesh::int_list_xpath_pskel* p =
            static_cast< ::mesh::int_list_xpath_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::mesh::int_list_xpath* tmp = p->post_int_list_xpath ();
              this->voxels (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for adhered_cell_pskel.
  //
  bool adhered_cell_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "ID" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &adhered_cell_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool adhered_cell_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void adhered_cell_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void adhered_cell_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void adhered_cell_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "ID" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::unsigned_int_pskel* p = 0;

            if (t == 0 && this->ID_parser_ != 0)
              p = this->ID_parser_;
            else
            {
              const char* ts = ::xml_schema::unsigned_int_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->ID_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->ID_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->ID_parser_map_ != 0)
                  p = static_cast< ::xml_schema::unsigned_int_pskel* > (
                    this->ID_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::unsigned_int_pskel* p =
            static_cast< ::xml_schema::unsigned_int_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              unsigned int tmp = p->post_unsigned_int ();
              this->ID (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "contact_area" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->contact_area_parser_ != 0)
              p = this->contact_area_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->contact_area_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->contact_area_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->contact_area_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->contact_area_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->contact_area (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "contact" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::cross_section_pskel* p = 0;

            if (t == 0 && this->contact_parser_ != 0)
              p = this->contact_parser_;
            else
            {
              const char* ts = ::phenotype_common::cross_section_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->contact_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->contact_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->contact_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::cross_section_pskel* > (
                    this->contact_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::cross_section_pskel* p =
            static_cast< ::phenotype_common::cross_section_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::cross_section* tmp = p->post_cross_section ();
              this->contact (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for list_of_adhered_cells_pskel.
  //
  bool list_of_adhered_cells_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "adhered_cell" && ns.empty ())
          s = 0UL;
        else if (n == "custom" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &list_of_adhered_cells_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool list_of_adhered_cells_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void list_of_adhered_cells_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void list_of_adhered_cells_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void list_of_adhered_cells_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "adhered_cell" && ns.empty ())
        {
          if (start)
          {
            ::state::adhered_cell_pskel* p = 0;

            if (t == 0 && this->adhered_cell_parser_ != 0)
              p = this->adhered_cell_parser_;
            else
            {
              const char* ts = ::state::adhered_cell_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->adhered_cell_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->adhered_cell_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->adhered_cell_parser_map_ != 0)
                  p = static_cast< ::state::adhered_cell_pskel* > (
                    this->adhered_cell_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::state::adhered_cell_pskel* p =
            static_cast< ::state::adhered_cell_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::state::adhered_cell* tmp = p->post_adhered_cell ();
              this->adhered_cell (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace state
{
  // Attribute validation and dispatch functions for phase_name_pskel.
  //
  bool phase_name_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "GO_ID" && ns.empty ())
    {
      if (this->GO_ID_parser_)
      {
        this->GO_ID_parser_->pre ();

        this->GO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GO_ID_parser_->post_string ();

          this->GO_ID (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::string_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for orientation_pskel.
  //
  bool orientation_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "formalism" && ns.empty ())
    {
      if (this->formalism_parser_)
      {
        this->formalism_parser_->pre ();

        this->formalism_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->formalism_parser_->_characters (s);

        if (!ctx.error_type ())
          this->formalism_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::state::orientation_formalism& tmp = this->formalism_parser_->post_orientation_formalism ();

          this->formalism (tmp);
        }
      }

      return true;
    }

    typedef ::common::units_double_list_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for cell_parts_pskel.
  //
  bool cell_parts_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  void cell_parts_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void cell_parts_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }
}

namespace state
{
}

// Begin epilogue.
//
//
// End epilogue.

