// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "state-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::serializer::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace state
{
  // phase_name_sskel
  //

  bool phase_name_sskel::
  GO_ID_present ()
  {
    return this->phase_name_impl_ ? this->phase_name_impl_->GO_ID_present () : false;
  }

  void phase_name_sskel::
  _reset ()
  {
    typedef ::xml_schema::string_sskel base;
    base::_reset ();

    if (this->GO_ID_serializer_)
      this->GO_ID_serializer_->_reset ();
  }

  const char* phase_name_sskel::
  _static_type ()
  {
    return "phase_name state";
  }

  const char* phase_name_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_phase_name_sskel_inheritance_map_entry_ (
    phase_name_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void phase_name_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // phase_sskel
  //

  bool phase_sskel::
  model_name_present ()
  {
    return this->phase_impl_ ? this->phase_impl_->model_name_present () : false;
  }

  bool phase_sskel::
  phase_name_present ()
  {
    return this->phase_impl_ ? this->phase_impl_->phase_name_present () : false;
  }

  bool phase_sskel::
  cell_cycle_model_index_present ()
  {
    return this->phase_impl_ ? this->phase_impl_->cell_cycle_model_index_present () : false;
  }

  bool phase_sskel::
  cell_cycle_phase_index_present ()
  {
    return this->phase_impl_ ? this->phase_impl_->cell_cycle_phase_index_present () : false;
  }

  bool phase_sskel::
  elapsed_time_present ()
  {
    return this->phase_impl_ ? this->phase_impl_->elapsed_time_present () : false;
  }

  bool phase_sskel::
  custom_present ()
  {
    return this->phase_impl_ ? this->phase_impl_->custom_present () : false;
  }

  void phase_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->model_name_serializer_)
      this->model_name_serializer_->_reset ();

    if (this->model_name_serializer_map_)
      this->model_name_serializer_map_->reset ();

    if (this->phase_name_serializer_)
      this->phase_name_serializer_->_reset ();

    if (this->phase_name_serializer_map_)
      this->phase_name_serializer_map_->reset ();

    if (this->cell_cycle_model_index_serializer_)
      this->cell_cycle_model_index_serializer_->_reset ();

    if (this->cell_cycle_model_index_serializer_map_)
      this->cell_cycle_model_index_serializer_map_->reset ();

    if (this->cell_cycle_phase_index_serializer_)
      this->cell_cycle_phase_index_serializer_->_reset ();

    if (this->cell_cycle_phase_index_serializer_map_)
      this->cell_cycle_phase_index_serializer_map_->reset ();

    if (this->elapsed_time_serializer_)
      this->elapsed_time_serializer_->_reset ();

    if (this->elapsed_time_serializer_map_)
      this->elapsed_time_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* phase_sskel::
  _static_type ()
  {
    return "phase state";
  }

  const char* phase_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // orientation_formalism_sskel
  //

  const char* orientation_formalism_sskel::
  _static_type ()
  {
    return "orientation_formalism state";
  }

  const char* orientation_formalism_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_orientation_formalism_sskel_inheritance_map_entry_ (
    orientation_formalism_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void orientation_formalism_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  const char* const orientation_formalism_sskel::_xsde_orientation_formalism_sskel_enums_[7UL] = 
  {
    "Euler Angles",
    "Polar",
    "Tait-Bryan",
    "Unit Vector",
    "axis-angle",
    "polar",
    "quaternion"
  };

  // orientation_sskel
  //

  bool orientation_sskel::
  formalism_present ()
  {
    return this->orientation_impl_ ? this->orientation_impl_->formalism_present () : false;
  }

  void orientation_sskel::
  _reset ()
  {
    typedef ::common::units_double_list_sskel base;
    base::_reset ();

    if (this->formalism_serializer_)
      this->formalism_serializer_->_reset ();
  }

  const char* orientation_sskel::
  _static_type ()
  {
    return "orientation state";
  }

  const char* orientation_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_orientation_sskel_inheritance_map_entry_ (
    orientation_sskel::_static_type (),
    ::common::units_double_list_sskel::_static_type ());

  void orientation_sskel::
  pre (const ::common::units_double_list& x)
  {
    assert (this->units_double_list_impl_);
    this->units_double_list_impl_->pre (x);
  }

  ::std::string orientation_sskel::
  units ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->units ();
  }

  ::std::string orientation_sskel::
  measurement_type ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->measurement_type ();
  }

  double orientation_sskel::
  uncertainty ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->uncertainty ();
  }

  double orientation_sskel::
  negative_uncertainty ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->negative_uncertainty ();
  }

  double orientation_sskel::
  positive_uncertainty ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->positive_uncertainty ();
  }

  double orientation_sskel::
  uncertainty_percentage ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->uncertainty_percentage ();
  }

  double orientation_sskel::
  negative_uncertainty_percentage ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->negative_uncertainty_percentage ();
  }

  double orientation_sskel::
  positive_uncertainty_percentage ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->positive_uncertainty_percentage ();
  }

  double orientation_sskel::
  median ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->median ();
  }

  double orientation_sskel::
  standard_deviation ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->standard_deviation ();
  }

  const ::common::two_doubles& orientation_sskel::
  interquartile_range ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->interquartile_range ();
  }

  const ::common::two_doubles& orientation_sskel::
  range ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->range ();
  }

  double orientation_sskel::
  min ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->min ();
  }

  double orientation_sskel::
  max ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->max ();
  }

  double orientation_sskel::
  standard_error ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->standard_error ();
  }

  double orientation_sskel::
  standard_error_of_the_mean ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->standard_error_of_the_mean ();
  }

  int orientation_sskel::
  number_obs ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->number_obs ();
  }

  double orientation_sskel::
  skewnesss ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->skewnesss ();
  }

  double orientation_sskel::
  kurtosis ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->kurtosis ();
  }

  // cell_parts_sskel
  //

  bool cell_parts_sskel::
  ID_present ()
  {
    return this->cell_parts_impl_ ? this->cell_parts_impl_->ID_present () : false;
  }

  bool cell_parts_sskel::
  orientation_present ()
  {
    return this->cell_parts_impl_ ? this->cell_parts_impl_->orientation_present () : false;
  }

  bool cell_parts_sskel::
  position_present ()
  {
    return this->cell_parts_impl_ ? this->cell_parts_impl_->position_present () : false;
  }

  bool cell_parts_sskel::
  velocity_present ()
  {
    return this->cell_parts_impl_ ? this->cell_parts_impl_->velocity_present () : false;
  }

  bool cell_parts_sskel::
  voxels_present ()
  {
    return this->cell_parts_impl_ ? this->cell_parts_impl_->voxels_present () : false;
  }

  bool cell_parts_sskel::
  cell_part_next ()
  {
    return this->cell_parts_impl_ ? this->cell_parts_impl_->cell_part_next () : false;
  }

  bool cell_parts_sskel::
  custom_present ()
  {
    return this->cell_parts_impl_ ? this->cell_parts_impl_->custom_present () : false;
  }

  void cell_parts_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->orientation_serializer_)
      this->orientation_serializer_->_reset ();

    if (this->orientation_serializer_map_)
      this->orientation_serializer_map_->reset ();

    if (this->position_serializer_)
      this->position_serializer_->_reset ();

    if (this->position_serializer_map_)
      this->position_serializer_map_->reset ();

    if (this->velocity_serializer_)
      this->velocity_serializer_->_reset ();

    if (this->velocity_serializer_map_)
      this->velocity_serializer_map_->reset ();

    if (this->voxels_serializer_)
      this->voxels_serializer_->_reset ();

    if (this->voxels_serializer_map_)
      this->voxels_serializer_map_->reset ();

    if (this->cell_part_serializer_)
      this->cell_part_serializer_->_reset ();

    if (this->cell_part_serializer_map_)
      this->cell_part_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_parts_sskel::
  _static_type ()
  {
    return "cell_parts state";
  }

  const char* cell_parts_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // state_sskel
  //

  bool state_sskel::
  orientation_present ()
  {
    return this->state_impl_ ? this->state_impl_->orientation_present () : false;
  }

  bool state_sskel::
  position_present ()
  {
    return this->state_impl_ ? this->state_impl_->position_present () : false;
  }

  bool state_sskel::
  velocity_present ()
  {
    return this->state_impl_ ? this->state_impl_->velocity_present () : false;
  }

  bool state_sskel::
  voxels_present ()
  {
    return this->state_impl_ ? this->state_impl_->voxels_present () : false;
  }

  bool state_sskel::
  cell_part_next ()
  {
    return this->state_impl_ ? this->state_impl_->cell_part_next () : false;
  }

  bool state_sskel::
  phase_present ()
  {
    return this->state_impl_ ? this->state_impl_->phase_present () : false;
  }

  bool state_sskel::
  adhered_cells_present ()
  {
    return this->state_impl_ ? this->state_impl_->adhered_cells_present () : false;
  }

  bool state_sskel::
  custom_present ()
  {
    return this->state_impl_ ? this->state_impl_->custom_present () : false;
  }

  void state_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->orientation_serializer_)
      this->orientation_serializer_->_reset ();

    if (this->orientation_serializer_map_)
      this->orientation_serializer_map_->reset ();

    if (this->position_serializer_)
      this->position_serializer_->_reset ();

    if (this->position_serializer_map_)
      this->position_serializer_map_->reset ();

    if (this->velocity_serializer_)
      this->velocity_serializer_->_reset ();

    if (this->velocity_serializer_map_)
      this->velocity_serializer_map_->reset ();

    if (this->voxels_serializer_)
      this->voxels_serializer_->_reset ();

    if (this->voxels_serializer_map_)
      this->voxels_serializer_map_->reset ();

    if (this->cell_part_serializer_)
      this->cell_part_serializer_->_reset ();

    if (this->cell_part_serializer_map_)
      this->cell_part_serializer_map_->reset ();

    if (this->phase_serializer_)
      this->phase_serializer_->_reset ();

    if (this->phase_serializer_map_)
      this->phase_serializer_map_->reset ();

    if (this->adhered_cells_serializer_)
      this->adhered_cells_serializer_->_reset ();

    if (this->adhered_cells_serializer_map_)
      this->adhered_cells_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* state_sskel::
  _static_type ()
  {
    return "state state";
  }

  const char* state_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // adhered_cell_sskel
  //

  bool adhered_cell_sskel::
  custom_present ()
  {
    return this->adhered_cell_impl_ ? this->adhered_cell_impl_->custom_present () : false;
  }

  void adhered_cell_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    if (this->ID_serializer_map_)
      this->ID_serializer_map_->reset ();

    if (this->contact_area_serializer_)
      this->contact_area_serializer_->_reset ();

    if (this->contact_area_serializer_map_)
      this->contact_area_serializer_map_->reset ();

    if (this->contact_serializer_)
      this->contact_serializer_->_reset ();

    if (this->contact_serializer_map_)
      this->contact_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* adhered_cell_sskel::
  _static_type ()
  {
    return "adhered_cell state";
  }

  const char* adhered_cell_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // list_of_adhered_cells_sskel
  //

  bool list_of_adhered_cells_sskel::
  adhered_cell_next ()
  {
    return this->list_of_adhered_cells_impl_ ? this->list_of_adhered_cells_impl_->adhered_cell_next () : false;
  }

  bool list_of_adhered_cells_sskel::
  custom_present ()
  {
    return this->list_of_adhered_cells_impl_ ? this->list_of_adhered_cells_impl_->custom_present () : false;
  }

  void list_of_adhered_cells_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->adhered_cell_serializer_)
      this->adhered_cell_serializer_->_reset ();

    if (this->adhered_cell_serializer_map_)
      this->adhered_cell_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_adhered_cells_sskel::
  _static_type ()
  {
    return "list_of_adhered_cells state";
  }

  const char* list_of_adhered_cells_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

namespace state
{
  // Element validation and serialization for phase_sskel.
  //
  void phase_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // model_name
    //
    if (this->model_name_present ())
    {
      ctx.type_id (0);
      const ::std::string& r = this->model_name ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::xml_schema::string_sskel* s = 0;

      if (t == 0 && this->model_name_serializer_ != 0)
        s = this->model_name_serializer_;
      else if (this->model_name_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->model_name_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::xml_schema::string_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::xml_schema::string_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("model_name");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // phase_name
    //
    if (this->phase_name_present ())
    {
      ctx.type_id (0);
      const ::state::phase_name& r = this->phase_name ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::state::phase_name_sskel* s = 0;

      if (t == 0 && this->phase_name_serializer_ != 0)
        s = this->phase_name_serializer_;
      else if (this->phase_name_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->phase_name_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::state::phase_name_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::state::phase_name_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("phase_name");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // cell_cycle_model_index
    //
    if (this->cell_cycle_model_index_present ())
    {
      ctx.type_id (0);
      unsigned short r = this->cell_cycle_model_index ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::xml_schema::unsigned_short_sskel* s = 0;

      if (t == 0 && this->cell_cycle_model_index_serializer_ != 0)
        s = this->cell_cycle_model_index_serializer_;
      else if (this->cell_cycle_model_index_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->cell_cycle_model_index_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::xml_schema::unsigned_short_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::xml_schema::unsigned_short_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("cell_cycle_model_index");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // cell_cycle_phase_index
    //
    if (this->cell_cycle_phase_index_present ())
    {
      ctx.type_id (0);
      unsigned short r = this->cell_cycle_phase_index ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::xml_schema::unsigned_short_sskel* s = 0;

      if (t == 0 && this->cell_cycle_phase_index_serializer_ != 0)
        s = this->cell_cycle_phase_index_serializer_;
      else if (this->cell_cycle_phase_index_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->cell_cycle_phase_index_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::xml_schema::unsigned_short_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::xml_schema::unsigned_short_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("cell_cycle_phase_index");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // elapsed_time
    //
    if (this->elapsed_time_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->elapsed_time ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->elapsed_time_serializer_ != 0)
        s = this->elapsed_time_serializer_;
      else if (this->elapsed_time_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->elapsed_time_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("elapsed_time");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for cell_parts_sskel.
  //
  void cell_parts_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // orientation
    //
    if (this->orientation_present ())
    {
      ctx.type_id (0);
      const ::state::orientation& r = this->orientation ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::state::orientation_sskel* s = 0;

      if (t == 0 && this->orientation_serializer_ != 0)
        s = this->orientation_serializer_;
      else if (this->orientation_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->orientation_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::state::orientation_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::state::orientation_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("orientation");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // position
    //
    if (this->position_present ())
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->position ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->position_serializer_ != 0)
        s = this->position_serializer_;
      else if (this->position_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->position_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_double_list_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_double_list_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("position");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // velocity
    //
    if (this->velocity_present ())
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->velocity ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->velocity_serializer_ != 0)
        s = this->velocity_serializer_;
      else if (this->velocity_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->velocity_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_double_list_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_double_list_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("velocity");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // voxels
    //
    if (this->voxels_present ())
    {
      ctx.type_id (0);
      const ::mesh::int_list_xpath& r = this->voxels ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::mesh::int_list_xpath_sskel* s = 0;

      if (t == 0 && this->voxels_serializer_ != 0)
        s = this->voxels_serializer_;
      else if (this->voxels_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->voxels_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::mesh::int_list_xpath_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::mesh::int_list_xpath_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("voxels");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // cell_part
    //
    while (this->cell_part_next ())
    {
      ctx.type_id (0);
      const ::state::cell_parts& r = this->cell_part ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::state::cell_parts_sskel* s = 0;

      if (t == 0 && this->cell_part_serializer_ != 0)
        s = this->cell_part_serializer_;
      else if (this->cell_part_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->cell_part_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::state::cell_parts_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::state::cell_parts_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("cell_part");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for state_sskel.
  //
  void state_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // orientation
    //
    if (this->orientation_present ())
    {
      ctx.type_id (0);
      const ::state::orientation& r = this->orientation ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::state::orientation_sskel* s = 0;

      if (t == 0 && this->orientation_serializer_ != 0)
        s = this->orientation_serializer_;
      else if (this->orientation_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->orientation_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::state::orientation_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::state::orientation_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("orientation");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // position
    //
    if (this->position_present ())
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->position ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->position_serializer_ != 0)
        s = this->position_serializer_;
      else if (this->position_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->position_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_double_list_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_double_list_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("position");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // velocity
    //
    if (this->velocity_present ())
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->velocity ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->velocity_serializer_ != 0)
        s = this->velocity_serializer_;
      else if (this->velocity_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->velocity_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_double_list_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_double_list_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("velocity");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // voxels
    //
    if (this->voxels_present ())
    {
      ctx.type_id (0);
      const ::mesh::int_list_xpath& r = this->voxels ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::mesh::int_list_xpath_sskel* s = 0;

      if (t == 0 && this->voxels_serializer_ != 0)
        s = this->voxels_serializer_;
      else if (this->voxels_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->voxels_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::mesh::int_list_xpath_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::mesh::int_list_xpath_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("voxels");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // cell_part
    //
    while (this->cell_part_next ())
    {
      ctx.type_id (0);
      const ::state::cell_parts& r = this->cell_part ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::state::cell_parts_sskel* s = 0;

      if (t == 0 && this->cell_part_serializer_ != 0)
        s = this->cell_part_serializer_;
      else if (this->cell_part_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->cell_part_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::state::cell_parts_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::state::cell_parts_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("cell_part");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // phase
    //
    if (this->phase_present ())
    {
      ctx.type_id (0);
      const ::state::phase& r = this->phase ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::state::phase_sskel* s = 0;

      if (t == 0 && this->phase_serializer_ != 0)
        s = this->phase_serializer_;
      else if (this->phase_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->phase_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::state::phase_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::state::phase_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("phase");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // adhered_cells
    //
    if (this->adhered_cells_present ())
    {
      ctx.type_id (0);
      const ::state::list_of_adhered_cells& r = this->adhered_cells ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::state::list_of_adhered_cells_sskel* s = 0;

      if (t == 0 && this->adhered_cells_serializer_ != 0)
        s = this->adhered_cells_serializer_;
      else if (this->adhered_cells_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->adhered_cells_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::state::list_of_adhered_cells_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::state::list_of_adhered_cells_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("adhered_cells");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for adhered_cell_sskel.
  //
  void adhered_cell_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    {
      ctx.type_id (0);
      unsigned int r = this->ID ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::xml_schema::unsigned_int_sskel* s = 0;

      if (t == 0 && this->ID_serializer_ != 0)
        s = this->ID_serializer_;
      else if (this->ID_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->ID_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::xml_schema::unsigned_int_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::xml_schema::unsigned_int_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("ID");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // contact_area
    //
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->contact_area ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->contact_area_serializer_ != 0)
        s = this->contact_area_serializer_;
      else if (this->contact_area_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->contact_area_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_nonnegative_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_nonnegative_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("contact_area");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // contact
    //
    {
      ctx.type_id (0);
      const ::phenotype_common::cross_section& r = this->contact ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::phenotype_common::cross_section_sskel* s = 0;

      if (t == 0 && this->contact_serializer_ != 0)
        s = this->contact_serializer_;
      else if (this->contact_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->contact_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::phenotype_common::cross_section_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::phenotype_common::cross_section_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("contact");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for list_of_adhered_cells_sskel.
  //
  void list_of_adhered_cells_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // adhered_cell
    //
    while (this->adhered_cell_next ())
    {
      ctx.type_id (0);
      const ::state::adhered_cell& r = this->adhered_cell ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::state::adhered_cell_sskel* s = 0;

      if (t == 0 && this->adhered_cell_serializer_ != 0)
        s = this->adhered_cell_serializer_;
      else if (this->adhered_cell_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->adhered_cell_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::state::adhered_cell_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::state::adhered_cell_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("adhered_cell");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }
}

namespace state
{
  // Attribute validation and serialization for phase_name_sskel.
  //
  void phase_name_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::xml_schema::string_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // GO_ID
    //
    if (this->GO_ID_present ())
    {
      const ::std::string& r = this->GO_ID ();

      if (this->GO_ID_serializer_)
      {
        this->GO_ID_serializer_->pre (r);
        this->_start_attribute ("GO_ID");
        this->GO_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->GO_ID_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for orientation_sskel.
  //
  void orientation_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::units_double_list_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // formalism
    //
    if (this->formalism_present ())
    {
      const ::state::orientation_formalism& r = this->formalism ();

      if (this->formalism_serializer_)
      {
        this->formalism_serializer_->pre (r);
        this->_start_attribute ("formalism");
        this->formalism_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->formalism_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->formalism_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->formalism_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for cell_parts_sskel.
  //
  void cell_parts_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // name
    //
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->name_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
        return;
      }
    }

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

