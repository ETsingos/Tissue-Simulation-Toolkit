// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VASCULAR_PIMPL_HPP
#define VASCULAR_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define VASCULAR_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "vascular-pskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-pimpl.hpp"

#include "mesh-pimpl.hpp"

#include "variables-pimpl.hpp"

#include "phenotype_common-pimpl.hpp"

namespace vascular
{
  class vascular_node_pimpl: public vascular_node_pskel
  {
    public:
    vascular_node_pimpl (bool = false);

    ~vascular_node_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    boundary_node (bool);

    virtual ::mesh::node*
    post_node ();

    virtual ::vascular::vascular_node*
    post_vascular_node ();

    public:
    void
    pre_impl (::vascular::vascular_node*);

    public:
    ::mesh::node_pimpl base_impl_;

    public:
    struct vascular_node_pimpl_state
    {
      ::vascular::vascular_node* vascular_node_;
    };

    vascular_node_pimpl_state vascular_node_pimpl_state_;
    bool vascular_node_pimpl_base_;
  };

  class list_of_vascular_nodes_pimpl: public list_of_vascular_nodes_pskel
  {
    public:
    list_of_vascular_nodes_pimpl (bool = false);

    ~list_of_vascular_nodes_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    vascular_node (::vascular::vascular_node*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::list_of_vascular_nodes*
    post_list_of_vascular_nodes ();

    public:
    void
    pre_impl (::vascular::list_of_vascular_nodes*);

    public:
    struct list_of_vascular_nodes_pimpl_state
    {
      ::vascular::list_of_vascular_nodes* list_of_vascular_nodes_;
    };

    list_of_vascular_nodes_pimpl_state list_of_vascular_nodes_pimpl_state_first_;
    ::xsde::cxx::stack list_of_vascular_nodes_pimpl_state_;
    bool list_of_vascular_nodes_pimpl_base_;
  };

  class boundary_node_pimpl: public boundary_node_pskel
  {
    public:
    boundary_node_pimpl (bool = false);

    ~boundary_node_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    node_ID (unsigned int);

    // Elements.
    //
    virtual void
    fluid_flow_velocity (::common::units_decimal*);

    virtual void
    variables (::variables::list_of_variables*);

    virtual void
    boundary_conditions (::vascular::boundary_conditions*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::boundary_node*
    post_boundary_node ();

    public:
    void
    pre_impl (::vascular::boundary_node*);

    public:
    struct boundary_node_pimpl_state
    {
      ::vascular::boundary_node* boundary_node_;
    };

    boundary_node_pimpl_state boundary_node_pimpl_state_;
    bool boundary_node_pimpl_base_;
  };

  class list_of_boundary_nodes_pimpl: public list_of_boundary_nodes_pskel
  {
    public:
    list_of_boundary_nodes_pimpl (bool = false);

    ~list_of_boundary_nodes_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    boundary_node (::vascular::boundary_node*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::list_of_boundary_nodes*
    post_list_of_boundary_nodes ();

    public:
    void
    pre_impl (::vascular::list_of_boundary_nodes*);

    public:
    struct list_of_boundary_nodes_pimpl_state
    {
      ::vascular::list_of_boundary_nodes* list_of_boundary_nodes_;
    };

    list_of_boundary_nodes_pimpl_state list_of_boundary_nodes_pimpl_state_;
    bool list_of_boundary_nodes_pimpl_base_;
  };

  class boundary_conditions_pimpl: public boundary_conditions_pskel
  {
    public:
    boundary_conditions_pimpl (bool = false);

    ~boundary_conditions_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    boundary_condition (::vascular::boundary_condition*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::boundary_conditions*
    post_boundary_conditions ();

    public:
    void
    pre_impl (::vascular::boundary_conditions*);

    public:
    struct boundary_conditions_pimpl_state
    {
      ::vascular::boundary_conditions* boundary_conditions_;
    };

    boundary_conditions_pimpl_state boundary_conditions_pimpl_state_;
    bool boundary_conditions_pimpl_base_;
  };

  class boundary_type_pimpl: public boundary_type_pskel
  {
    public:
    boundary_type_pimpl ();

    virtual void
    pre ();

    virtual void
    _characters (const ::xsde::cxx::ro_string&);

    virtual void
    _post ();

    virtual ::vascular::boundary_type
    post_boundary_type ();

    public:
    struct boundary_type_pimpl_state
    {
      ::std::string str_;
    };

    boundary_type_pimpl_state boundary_type_pimpl_state_;
  };

  class boundary_condition_pimpl: public boundary_condition_pskel
  {
    public:
    boundary_condition_pimpl (bool = false);

    ~boundary_condition_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    virtual void
    variable_ID (unsigned int);

    // Elements.
    //
    virtual void
    boundary_type (const ::vascular::boundary_type&);

    virtual void
    value (::common::units_decimal*);

    virtual void
    direction (const ::std::string&);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::boundary_condition*
    post_boundary_condition ();

    public:
    void
    pre_impl (::vascular::boundary_condition*);

    public:
    struct boundary_condition_pimpl_state
    {
      ::vascular::boundary_condition* boundary_condition_;
    };

    boundary_condition_pimpl_state boundary_condition_pimpl_state_;
    bool boundary_condition_pimpl_base_;
  };

  class vascular_segments_pimpl: public vascular_segments_pskel
  {
    public:
    vascular_segments_pimpl (bool = false);

    ~vascular_segments_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    vascular_segment (::vascular::vascular_segment*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::vascular_segments*
    post_vascular_segments ();

    public:
    void
    pre_impl (::vascular::vascular_segments*);

    public:
    struct vascular_segments_pimpl_state
    {
      ::vascular::vascular_segments* vascular_segments_;
    };

    vascular_segments_pimpl_state vascular_segments_pimpl_state_;
    bool vascular_segments_pimpl_base_;
  };

  class vascular_segment_pimpl: public vascular_segment_pskel
  {
    public:
    vascular_segment_pimpl (bool = false);

    ~vascular_segment_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    endpoint_1 (::vascular::endpoint*);

    virtual void
    endpoint_2 (::vascular::endpoint*);

    virtual void
    surface (::vascular::surface_properties*);

    virtual void
    interior (::vascular::volume_properties*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::vascular_segment*
    post_vascular_segment ();

    public:
    void
    pre_impl (::vascular::vascular_segment*);

    public:
    struct vascular_segment_pimpl_state
    {
      ::vascular::vascular_segment* vascular_segment_;
    };

    vascular_segment_pimpl_state vascular_segment_pimpl_state_;
    bool vascular_segment_pimpl_base_;
  };

  class endpoint_pimpl: public endpoint_pskel
  {
    public:
    endpoint_pimpl (bool = false);

    ~endpoint_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    node_ID (unsigned int);

    // Elements.
    //
    virtual void
    lengths (::phenotype_common::lengths*);

    virtual void
    areas (::phenotype_common::areas_2D*);

    virtual void
    fluid_flow_velocity (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::endpoint*
    post_endpoint ();

    public:
    void
    pre_impl (::vascular::endpoint*);

    public:
    struct endpoint_pimpl_state
    {
      ::vascular::endpoint* endpoint_;
    };

    endpoint_pimpl_state endpoint_pimpl_state_;
    bool endpoint_pimpl_base_;
  };

  class surface_properties_pimpl: public surface_properties_pskel
  {
    public:
    surface_properties_pimpl (bool = false);

    ~surface_properties_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    areas (::phenotype_common::areas_3D*);

    virtual void
    fluid_flow_velocity (::common::units_decimal*);

    virtual void
    mechanics (::phenotype_common::mechanics*);

    virtual void
    permeability (::common::units_decimal*);

    virtual void
    surface_proteins (::variables::list_of_variables*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::surface_properties*
    post_surface_properties ();

    public:
    void
    pre_impl (::vascular::surface_properties*);

    public:
    struct surface_properties_pimpl_state
    {
      ::vascular::surface_properties* surface_properties_;
    };

    surface_properties_pimpl_state surface_properties_pimpl_state_;
    bool surface_properties_pimpl_base_;
  };

  class volume_properties_pimpl: public volume_properties_pskel
  {
    public:
    volume_properties_pimpl (bool = false);

    ~volume_properties_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    fluid_flow_velocity (::common::units_decimal*);

    virtual void
    variables (::variables::list_of_variables*);

    virtual void
    volumes (::phenotype_common::volumes*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::volume_properties*
    post_volume_properties ();

    public:
    void
    pre_impl (::vascular::volume_properties*);

    public:
    struct volume_properties_pimpl_state
    {
      ::vascular::volume_properties* volume_properties_;
    };

    volume_properties_pimpl_state volume_properties_pimpl_state_;
    bool volume_properties_pimpl_base_;
  };

  class vascular_network_pimpl: public vascular_network_pskel
  {
    public:
    vascular_network_pimpl (bool = false);

    ~vascular_network_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    virtual void
    keywords (const ::std::string&);

    virtual void
    name (const ::std::string&);

    // Elements.
    //
    virtual void
    vascular_nodes (::vascular::list_of_vascular_nodes*);

    virtual void
    boundary_nodes (::vascular::list_of_boundary_nodes*);

    virtual void
    vascular_segments (::vascular::vascular_segments*);

    virtual void
    voxels (::mesh::int_list_xpath*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::vascular_network*
    post_vascular_network ();

    public:
    void
    pre_impl (::vascular::vascular_network*);

    public:
    struct vascular_network_pimpl_state
    {
      ::vascular::vascular_network* vascular_network_;
    };

    vascular_network_pimpl_state vascular_network_pimpl_state_;
    bool vascular_network_pimpl_base_;
  };
}

#ifdef VASCULAR_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // VASCULAR_PIMPL_HPP
