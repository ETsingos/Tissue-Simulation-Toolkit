// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace basement
{
  // basement_edge_pskel
  //

  inline
  void basement_edge_pskel::
  tensile_strength_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->tensile_strength_parser_ = &p;
  }

  inline
  void basement_edge_pskel::
  tensile_strength_parser (::xml_schema::parser_map& m)
  {
    this->tensile_strength_parser_map_ = &m;
  }

  inline
  void basement_edge_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void basement_edge_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void basement_edge_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::xml_schema::unsigned_int_pskel& node_ID,
           ::common::units_decimal_nonnegative_pskel& tensile_strength,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->node_ID_parser_ = &node_ID;
    this->tensile_strength_parser_ = &tensile_strength;
    this->custom_parser_ = &custom;
  }

  inline
  void basement_edge_pskel::
  parser_maps (::xml_schema::parser_map& node_ID,
               ::xml_schema::parser_map& tensile_strength,
               ::xml_schema::parser_map& custom)
  {
    this->node_ID_parser_map_ = &node_ID;
    this->tensile_strength_parser_map_ = &tensile_strength;
    this->custom_parser_map_ = &custom;
  }

  inline
  basement_edge_pskel::
  basement_edge_pskel (::mesh::edge_pskel* tiein)
  : ::mesh::edge_pskel (tiein, 0),
    basement_edge_impl_ (0),
    tensile_strength_parser_ (0),
    tensile_strength_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  basement_edge_pskel::
  basement_edge_pskel (basement_edge_pskel* impl, void*)
  : ::mesh::edge_pskel (impl, 0),
    basement_edge_impl_ (impl),
    tensile_strength_parser_ (0),
    tensile_strength_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // basement_face_pskel
  //

  inline
  void basement_face_pskel::
  thickness_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->thickness_parser_ = &p;
  }

  inline
  void basement_face_pskel::
  thickness_parser (::xml_schema::parser_map& m)
  {
    this->thickness_parser_map_ = &m;
  }

  inline
  void basement_face_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void basement_face_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void basement_face_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::xml_schema::unsigned_int_pskel& edge_ID,
           ::common::units_decimal_nonnegative_pskel& thickness,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->edge_ID_parser_ = &edge_ID;
    this->thickness_parser_ = &thickness;
    this->custom_parser_ = &custom;
  }

  inline
  void basement_face_pskel::
  parser_maps (::xml_schema::parser_map& edge_ID,
               ::xml_schema::parser_map& thickness,
               ::xml_schema::parser_map& custom)
  {
    this->edge_ID_parser_map_ = &edge_ID;
    this->thickness_parser_map_ = &thickness;
    this->custom_parser_map_ = &custom;
  }

  inline
  basement_face_pskel::
  basement_face_pskel (::mesh::face_pskel* tiein)
  : ::mesh::face_pskel (tiein, 0),
    basement_face_impl_ (0),
    thickness_parser_ (0),
    thickness_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  basement_face_pskel::
  basement_face_pskel (basement_face_pskel* impl, void*)
  : ::mesh::face_pskel (impl, 0),
    basement_face_impl_ (impl),
    thickness_parser_ (0),
    thickness_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // nodes_pskel
  //

  inline
  void nodes_pskel::
  node_parser (::mesh::node_pskel& p)
  {
    this->node_parser_ = &p;
  }

  inline
  void nodes_pskel::
  node_parser (::xml_schema::parser_map& m)
  {
    this->node_parser_map_ = &m;
  }

  inline
  void nodes_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void nodes_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void nodes_pskel::
  parsers (::mesh::node_pskel& node,
           ::common::custom_pskel& custom)
  {
    this->node_parser_ = &node;
    this->custom_parser_ = &custom;
  }

  inline
  void nodes_pskel::
  parser_maps (::xml_schema::parser_map& node,
               ::xml_schema::parser_map& custom)
  {
    this->node_parser_map_ = &node;
    this->custom_parser_map_ = &custom;
  }

  inline
  nodes_pskel::
  nodes_pskel ()
  : nodes_impl_ (0),
    node_parser_ (0),
    node_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  nodes_pskel::
  nodes_pskel (nodes_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    nodes_impl_ (impl),
    node_parser_ (0),
    node_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // egdes_pskel
  //

  inline
  void egdes_pskel::
  edge_parser (::basement::basement_edge_pskel& p)
  {
    this->edge_parser_ = &p;
  }

  inline
  void egdes_pskel::
  edge_parser (::xml_schema::parser_map& m)
  {
    this->edge_parser_map_ = &m;
  }

  inline
  void egdes_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void egdes_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void egdes_pskel::
  parsers (::basement::basement_edge_pskel& edge,
           ::common::custom_pskel& custom)
  {
    this->edge_parser_ = &edge;
    this->custom_parser_ = &custom;
  }

  inline
  void egdes_pskel::
  parser_maps (::xml_schema::parser_map& edge,
               ::xml_schema::parser_map& custom)
  {
    this->edge_parser_map_ = &edge;
    this->custom_parser_map_ = &custom;
  }

  inline
  egdes_pskel::
  egdes_pskel ()
  : egdes_impl_ (0),
    edge_parser_ (0),
    edge_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  egdes_pskel::
  egdes_pskel (egdes_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    egdes_impl_ (impl),
    edge_parser_ (0),
    edge_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // faces_pskel
  //

  inline
  void faces_pskel::
  face_parser (::basement::basement_face_pskel& p)
  {
    this->face_parser_ = &p;
  }

  inline
  void faces_pskel::
  face_parser (::xml_schema::parser_map& m)
  {
    this->face_parser_map_ = &m;
  }

  inline
  void faces_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void faces_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void faces_pskel::
  parsers (::basement::basement_face_pskel& face,
           ::common::custom_pskel& custom)
  {
    this->face_parser_ = &face;
    this->custom_parser_ = &custom;
  }

  inline
  void faces_pskel::
  parser_maps (::xml_schema::parser_map& face,
               ::xml_schema::parser_map& custom)
  {
    this->face_parser_map_ = &face;
    this->custom_parser_map_ = &custom;
  }

  inline
  faces_pskel::
  faces_pskel ()
  : faces_impl_ (0),
    face_parser_ (0),
    face_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  faces_pskel::
  faces_pskel (faces_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    faces_impl_ (impl),
    face_parser_ (0),
    face_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // basement_membrane_pskel
  //

  inline
  void basement_membrane_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void basement_membrane_pskel::
  nodes_parser (::basement::nodes_pskel& p)
  {
    this->nodes_parser_ = &p;
  }

  inline
  void basement_membrane_pskel::
  nodes_parser (::xml_schema::parser_map& m)
  {
    this->nodes_parser_map_ = &m;
  }

  inline
  void basement_membrane_pskel::
  edges_parser (::basement::egdes_pskel& p)
  {
    this->edges_parser_ = &p;
  }

  inline
  void basement_membrane_pskel::
  edges_parser (::xml_schema::parser_map& m)
  {
    this->edges_parser_map_ = &m;
  }

  inline
  void basement_membrane_pskel::
  faces_parser (::basement::faces_pskel& p)
  {
    this->faces_parser_ = &p;
  }

  inline
  void basement_membrane_pskel::
  faces_parser (::xml_schema::parser_map& m)
  {
    this->faces_parser_map_ = &m;
  }

  inline
  void basement_membrane_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void basement_membrane_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void basement_membrane_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::basement::nodes_pskel& nodes,
           ::basement::egdes_pskel& edges,
           ::basement::faces_pskel& faces,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->nodes_parser_ = &nodes;
    this->edges_parser_ = &edges;
    this->faces_parser_ = &faces;
    this->custom_parser_ = &custom;
  }

  inline
  void basement_membrane_pskel::
  parser_maps (::xml_schema::parser_map& nodes,
               ::xml_schema::parser_map& edges,
               ::xml_schema::parser_map& faces,
               ::xml_schema::parser_map& custom)
  {
    this->nodes_parser_map_ = &nodes;
    this->edges_parser_map_ = &edges;
    this->faces_parser_map_ = &faces;
    this->custom_parser_map_ = &custom;
  }

  inline
  basement_membrane_pskel::
  basement_membrane_pskel ()
  : basement_membrane_impl_ (0),
    ID_parser_ (0),
    nodes_parser_ (0),
    nodes_parser_map_ (0),
    edges_parser_ (0),
    edges_parser_map_ (0),
    faces_parser_ (0),
    faces_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  basement_membrane_pskel::
  basement_membrane_pskel (basement_membrane_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    basement_membrane_impl_ (impl),
    ID_parser_ (0),
    nodes_parser_ (0),
    nodes_parser_map_ (0),
    edges_parser_ (0),
    edges_parser_map_ (0),
    faces_parser_ (0),
    faces_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

