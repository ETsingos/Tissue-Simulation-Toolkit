// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "microenvironment-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::serializer::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace microenvironment
{
  // domain_sskel
  //

  bool domain_sskel::
  name_present ()
  {
    return this->domain_impl_ ? this->domain_impl_->name_present () : false;
  }

  bool domain_sskel::
  variables_present ()
  {
    return this->domain_impl_ ? this->domain_impl_->variables_present () : false;
  }

  bool domain_sskel::
  experimental_condition_present ()
  {
    return this->domain_impl_ ? this->domain_impl_->experimental_condition_present () : false;
  }

  bool domain_sskel::
  mesh_present ()
  {
    return this->domain_impl_ ? this->domain_impl_->mesh_present () : false;
  }

  bool domain_sskel::
  data_present ()
  {
    return this->domain_impl_ ? this->domain_impl_->data_present () : false;
  }

  bool domain_sskel::
  custom_present ()
  {
    return this->domain_impl_ ? this->domain_impl_->custom_present () : false;
  }

  void domain_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    this->resetting_ = true;

    if (this->variables_serializer_)
      this->variables_serializer_->_reset ();

    if (this->variables_serializer_map_)
      this->variables_serializer_map_->reset ();

    if (this->experimental_condition_serializer_)
      this->experimental_condition_serializer_->_reset ();

    if (this->experimental_condition_serializer_map_)
      this->experimental_condition_serializer_map_->reset ();

    if (this->mesh_serializer_)
      this->mesh_serializer_->_reset ();

    if (this->mesh_serializer_map_)
      this->mesh_serializer_map_->reset ();

    if (this->data_serializer_)
      this->data_serializer_->_reset ();

    if (this->data_serializer_map_)
      this->data_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* domain_sskel::
  _static_type ()
  {
    return "domain microenvironment";
  }

  const char* domain_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // microenvironment_sskel
  //

  bool microenvironment_sskel::
  domain_next ()
  {
    return this->microenvironment_impl_ ? this->microenvironment_impl_->domain_next () : false;
  }

  bool microenvironment_sskel::
  vascular_network_next ()
  {
    return this->microenvironment_impl_ ? this->microenvironment_impl_->vascular_network_next () : false;
  }

  bool microenvironment_sskel::
  basement_membrane_next ()
  {
    return this->microenvironment_impl_ ? this->microenvironment_impl_->basement_membrane_next () : false;
  }

  bool microenvironment_sskel::
  custom_present ()
  {
    return this->microenvironment_impl_ ? this->microenvironment_impl_->custom_present () : false;
  }

  void microenvironment_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->domain_serializer_)
      this->domain_serializer_->_reset ();

    if (this->domain_serializer_map_)
      this->domain_serializer_map_->reset ();

    if (this->vascular_network_serializer_)
      this->vascular_network_serializer_->_reset ();

    if (this->vascular_network_serializer_map_)
      this->vascular_network_serializer_map_->reset ();

    if (this->basement_membrane_serializer_)
      this->basement_membrane_serializer_->_reset ();

    if (this->basement_membrane_serializer_map_)
      this->basement_membrane_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* microenvironment_sskel::
  _static_type ()
  {
    return "microenvironment microenvironment";
  }

  const char* microenvironment_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

namespace microenvironment
{
  // Element validation and serialization for domain_sskel.
  //
  void domain_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // variables
    //
    if (this->variables_present ())
    {
      ctx.type_id (0);
      const ::variables::list_of_variables& r = this->variables ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::list_of_variables_sskel* s = 0;

      if (t == 0 && this->variables_serializer_ != 0)
        s = this->variables_serializer_;
      else if (this->variables_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->variables_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::list_of_variables_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::list_of_variables_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("variables");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // experimental_condition
    //
    if (this->experimental_condition_present ())
    {
      ctx.type_id (0);
      const ::variables::experimental_conditions& r = this->experimental_condition ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::experimental_conditions_sskel* s = 0;

      if (t == 0 && this->experimental_condition_serializer_ != 0)
        s = this->experimental_condition_serializer_;
      else if (this->experimental_condition_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->experimental_condition_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::experimental_conditions_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::experimental_conditions_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("experimental_condition");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // mesh
    //
    if (this->mesh_present ())
    {
      ctx.type_id (0);
      const ::mesh::mesh& r = this->mesh ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::mesh::mesh_sskel* s = 0;

      if (t == 0 && this->mesh_serializer_ != 0)
        s = this->mesh_serializer_;
      else if (this->mesh_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->mesh_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::mesh::mesh_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::mesh::mesh_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("mesh");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // data
    //
    if (this->data_present ())
    {
      ctx.type_id (0);
      const ::variables::data& r = this->data ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::data_sskel* s = 0;

      if (t == 0 && this->data_serializer_ != 0)
        s = this->data_serializer_;
      else if (this->data_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->data_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::data_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::data_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("data");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for microenvironment_sskel.
  //
  void microenvironment_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // domain
    //
    while (this->domain_next ())
    {
      ctx.type_id (0);
      const ::microenvironment::domain& r = this->domain ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::microenvironment::domain_sskel* s = 0;

      if (t == 0 && this->domain_serializer_ != 0)
        s = this->domain_serializer_;
      else if (this->domain_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->domain_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::microenvironment::domain_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::microenvironment::domain_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("domain");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // vascular_network
    //
    while (this->vascular_network_next ())
    {
      ctx.type_id (0);
      const ::vascular::vascular_network& r = this->vascular_network ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::vascular::vascular_network_sskel* s = 0;

      if (t == 0 && this->vascular_network_serializer_ != 0)
        s = this->vascular_network_serializer_;
      else if (this->vascular_network_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->vascular_network_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::vascular::vascular_network_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::vascular::vascular_network_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("vascular_network");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // basement_membrane
    //
    while (this->basement_membrane_next ())
    {
      ctx.type_id (0);
      const ::basement::basement_membrane& r = this->basement_membrane ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::basement::basement_membrane_sskel* s = 0;

      if (t == 0 && this->basement_membrane_serializer_ != 0)
        s = this->basement_membrane_serializer_;
      else if (this->basement_membrane_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->basement_membrane_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::basement::basement_membrane_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::basement::basement_membrane_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("basement_membrane");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }
}

namespace microenvironment
{
  // Attribute validation and serialization for domain_sskel.
  //
  void domain_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // name
    //
    if (this->name_present ())
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->name_serializer_->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

