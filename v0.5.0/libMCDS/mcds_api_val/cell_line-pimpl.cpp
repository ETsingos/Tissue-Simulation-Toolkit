// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell_line-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace cell_line
{
  // cell_line_pimpl
  //

  cell_line_pimpl::
  cell_line_pimpl (bool b)
  {
    this->cell_line_pimpl_base_ = b;
    this->cell_line_pimpl_state_.cell_line_ = 0;
  }

  cell_line_pimpl::
  ~cell_line_pimpl ()
  {
    if (!this->cell_line_pimpl_base_ && this->cell_line_pimpl_state_.cell_line_)
      delete this->cell_line_pimpl_state_.cell_line_;
  }

  void cell_line_pimpl::
  _reset ()
  {
    cell_line_pskel::_reset ();

    if (!this->cell_line_pimpl_base_ && this->cell_line_pimpl_state_.cell_line_)
    {
      delete this->cell_line_pimpl_state_.cell_line_;
      this->cell_line_pimpl_state_.cell_line_ = 0;
    }
  }

  void cell_line_pimpl::
  pre_impl (::cell_line::cell_line* x)
  {
    this->cell_line_pimpl_state_.cell_line_ = x;
  }

  void cell_line_pimpl::
  pre ()
  {
    ::cell_line::cell_line* x = new ::cell_line::cell_line;
    this->pre_impl (x);
  }

  void cell_line_pimpl::
  ID (const ::std::string& x)
  {
    this->cell_line_pimpl_state_.cell_line_->ID (x);
  }

  void cell_line_pimpl::
  label (const ::std::string& x)
  {
    this->cell_line_pimpl_state_.cell_line_->label (x);
  }

  void cell_line_pimpl::
  curated (bool x)
  {
    this->cell_line_pimpl_state_.cell_line_->curated (x);
  }

  void cell_line_pimpl::
  metadata (::metadata::metadata* x)
  {
    this->cell_line_pimpl_state_.cell_line_->metadata (x);
  }

  void cell_line_pimpl::
  phenotype_dataset (::phenotype_dataset::phenotype_dataset* x)
  {
    this->cell_line_pimpl_state_.cell_line_->phenotype_dataset ().push_back (x);
  }

  void cell_line_pimpl::
  custom (::common::custom* x)
  {
    this->cell_line_pimpl_state_.cell_line_->custom (x);
  }

  ::cell_line::cell_line* cell_line_pimpl::
  post_cell_line ()
  {
    ::cell_line::cell_line* r = this->cell_line_pimpl_state_.cell_line_;
    this->cell_line_pimpl_state_.cell_line_ = 0;
    return r;
  }

  // DCLs_pimpl
  //

  DCLs_pimpl::
  DCLs_pimpl (bool b)
  {
    this->DCLs_pimpl_base_ = b;
    this->DCLs_pimpl_state_.DCLs_ = 0;
  }

  DCLs_pimpl::
  ~DCLs_pimpl ()
  {
    if (!this->DCLs_pimpl_base_ && this->DCLs_pimpl_state_.DCLs_)
      delete this->DCLs_pimpl_state_.DCLs_;
  }

  void DCLs_pimpl::
  _reset ()
  {
    DCLs_pskel::_reset ();

    if (!this->DCLs_pimpl_base_ && this->DCLs_pimpl_state_.DCLs_)
    {
      delete this->DCLs_pimpl_state_.DCLs_;
      this->DCLs_pimpl_state_.DCLs_ = 0;
    }
  }

  void DCLs_pimpl::
  pre_impl (::cell_line::DCLs* x)
  {
    this->DCLs_pimpl_state_.DCLs_ = x;
  }

  void DCLs_pimpl::
  pre ()
  {
    ::cell_line::DCLs* x = new ::cell_line::DCLs;
    this->pre_impl (x);
  }

  void DCLs_pimpl::
  cell_line (::cell_line::cell_line* x)
  {
    this->DCLs_pimpl_state_.DCLs_->cell_line ().push_back (x);
  }

  ::cell_line::DCLs* DCLs_pimpl::
  post_DCLs ()
  {
    ::cell_line::DCLs* r = this->DCLs_pimpl_state_.DCLs_;
    this->DCLs_pimpl_state_.DCLs_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

