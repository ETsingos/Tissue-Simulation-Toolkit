// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MESH_SIMPL_HPP
#define MESH_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define MESH_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "mesh-sskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-simpl.hpp"

namespace mesh
{
  class bounding_box_simpl: public bounding_box_sskel
  {
    public:
    bounding_box_simpl ();

    virtual void
    pre (const ::mesh::bounding_box&);

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual ::std::string
    type ();

    public:
    ::common::units_double_list_simpl base_impl_;

    public:
    struct bounding_box_simpl_state
    {
      const ::mesh::bounding_box* bounding_box_;
    };

    bounding_box_simpl_state bounding_box_simpl_state_;
  };

  class mesh_simpl: public mesh_sskel
  {
    public:
    virtual void
    pre (const ::mesh::mesh&);

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual ::std::string
    type ();

    virtual bool
    uniform_present ();

    virtual bool
    uniform ();

    virtual bool
    regular_present ();

    virtual bool
    regular ();

    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    // Elements.
    //
    virtual bool
    bounding_box_present ();

    virtual const ::mesh::bounding_box&
    bounding_box ();

    virtual bool
    x_coordinates_present ();

    virtual const ::common::units_double_list&
    x_coordinates ();

    virtual bool
    y_coordinates_present ();

    virtual const ::common::units_double_list&
    y_coordinates ();

    virtual bool
    z_coordinates_present ();

    virtual const ::common::units_double_list&
    z_coordinates ();

    virtual bool
    voxels_present ();

    virtual const ::mesh::list_of_voxels&
    voxels ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct mesh_simpl_state
    {
      const ::mesh::mesh* mesh_;
    };

    mesh_simpl_state mesh_simpl_state_;
  };

  class list_of_voxels_simpl: public list_of_voxels_sskel
  {
    public:
    virtual void
    pre (const ::mesh::list_of_voxels&);

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual const ::common::data_storage_formats&
    type ();

    // Elements.
    //
    virtual bool
    filename_present ();

    virtual ::std::string
    filename ();

    virtual bool
    voxel_next ();

    virtual const ::mesh::voxel&
    voxel ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct list_of_voxels_simpl_state
    {
      const ::mesh::list_of_voxels* list_of_voxels_;
      ::mesh::list_of_voxels::voxel_const_iterator voxel_;
      ::mesh::list_of_voxels::voxel_const_iterator voxel_end_;
    };

    list_of_voxels_simpl_state list_of_voxels_simpl_state_;
  };

  class voxel_simpl: public voxel_sskel
  {
    public:
    virtual void
    pre (const ::mesh::voxel&);

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID ();

    virtual bool
    type_present ();

    virtual ::std::string
    type ();

    // Elements.
    //
    virtual const ::common::units_double_list&
    center ();

    virtual const ::common::units_decimal_nonnegative&
    volume ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct voxel_simpl_state
    {
      const ::mesh::voxel* voxel_;
    };

    voxel_simpl_state voxel_simpl_state_;
  };

  class node_simpl: public node_sskel
  {
    public:
    virtual void
    pre (const ::mesh::node&);

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID ();

    // Elements.
    //
    virtual const ::common::units_double_list&
    position ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct node_simpl_state
    {
      const ::mesh::node* node_;
    };

    node_simpl_state node_simpl_state_;
  };

  class edge_simpl: public edge_sskel
  {
    public:
    virtual void
    pre (const ::mesh::edge&);

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID ();

    // Elements.
    //
    virtual bool
    node_ID_next ();

    virtual unsigned int
    node_ID ();

    public:
    struct edge_simpl_state
    {
      const ::mesh::edge* edge_;
      ::mesh::edge::node_ID_const_iterator node_ID_;
      ::mesh::edge::node_ID_const_iterator node_ID_end_;
    };

    edge_simpl_state edge_simpl_state_;
  };

  class face_simpl: public face_sskel
  {
    public:
    virtual void
    pre (const ::mesh::face&);

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID ();

    // Elements.
    //
    virtual bool
    edge_ID_next ();

    virtual unsigned int
    edge_ID ();

    public:
    struct face_simpl_state
    {
      const ::mesh::face* face_;
      ::mesh::face::edge_ID_const_iterator edge_ID_;
      ::mesh::face::edge_ID_const_iterator edge_ID_end_;
    };

    face_simpl_state face_simpl_state_;
  };

  class int_list_xpath_simpl: public int_list_xpath_sskel
  {
    public:
    int_list_xpath_simpl ();

    virtual void
    pre (const ::mesh::int_list_xpath&);

    // Attributes.
    //
    virtual bool
    xpath_present ();

    virtual ::std::string
    xpath ();

    virtual bool
    grouping_number_present ();

    virtual unsigned short
    grouping_number ();

    public:
    ::common::unsigned_int_list_simpl base_impl_;

    public:
    struct int_list_xpath_simpl_state
    {
      const ::mesh::int_list_xpath* int_list_xpath_;
    };

    int_list_xpath_simpl_state int_list_xpath_simpl_state_;
  };
}

#ifdef MESH_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // MESH_SIMPL_HPP
