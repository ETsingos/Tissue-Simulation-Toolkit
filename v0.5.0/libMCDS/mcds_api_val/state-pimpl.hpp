// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef STATE_PIMPL_HPP
#define STATE_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define STATE_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "state-pskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-pimpl.hpp"

#include "phenotype_common-pimpl.hpp"

#include "mesh-pimpl.hpp"

namespace state
{
  class phase_name_pimpl: public phase_name_pskel
  {
    public:
    phase_name_pimpl ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    GO_ID (const ::std::string&);

    virtual ::state::phase_name
    post_phase_name ();

    public:
    ::xml_schema::string_pimpl base_impl_;

    public:
    struct phase_name_pimpl_state
    {
      ::state::phase_name phase_name_;
    };

    phase_name_pimpl_state phase_name_pimpl_state_;
  };

  class phase_pimpl: public phase_pskel
  {
    public:
    phase_pimpl (bool = false);

    ~phase_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    model_name (const ::std::string&);

    virtual void
    phase_name (const ::state::phase_name&);

    virtual void
    cell_cycle_model_index (unsigned short);

    virtual void
    cell_cycle_phase_index (unsigned short);

    virtual void
    elapsed_time (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::state::phase*
    post_phase ();

    public:
    void
    pre_impl (::state::phase*);

    public:
    struct phase_pimpl_state
    {
      ::state::phase* phase_;
    };

    phase_pimpl_state phase_pimpl_state_;
    bool phase_pimpl_base_;
  };

  class orientation_formalism_pimpl: public orientation_formalism_pskel
  {
    public:
    orientation_formalism_pimpl ();

    virtual void
    pre ();

    virtual void
    _characters (const ::xsde::cxx::ro_string&);

    virtual void
    _post ();

    virtual ::state::orientation_formalism
    post_orientation_formalism ();

    public:
    struct orientation_formalism_pimpl_state
    {
      ::std::string str_;
    };

    orientation_formalism_pimpl_state orientation_formalism_pimpl_state_;
  };

  class orientation_pimpl: public orientation_pskel
  {
    public:
    orientation_pimpl (bool = false);

    ~orientation_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    formalism (const ::state::orientation_formalism&);

    virtual ::state::orientation*
    post_orientation ();

    public:
    void
    pre_impl (::state::orientation*);

    public:
    ::common::units_double_list_pimpl base_impl_;

    public:
    struct orientation_pimpl_state
    {
      ::state::orientation* orientation_;
    };

    orientation_pimpl_state orientation_pimpl_state_;
    bool orientation_pimpl_base_;
  };

  class cell_parts_pimpl: public cell_parts_pskel
  {
    public:
    cell_parts_pimpl (bool = false);

    ~cell_parts_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    name (const ::std::string&);

    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    orientation (::state::orientation*);

    virtual void
    position (::common::units_double_list*);

    virtual void
    velocity (::common::units_double_list*);

    virtual void
    voxels (::mesh::int_list_xpath*);

    virtual void
    cell_part (::state::cell_parts*);

    virtual void
    custom (::common::custom*);

    virtual ::state::cell_parts*
    post_cell_parts ();

    public:
    void
    pre_impl (::state::cell_parts*);

    public:
    struct cell_parts_pimpl_state
    {
      ::state::cell_parts* cell_parts_;
    };

    cell_parts_pimpl_state cell_parts_pimpl_state_first_;
    ::xsde::cxx::stack cell_parts_pimpl_state_;
    bool cell_parts_pimpl_base_;
  };

  class state_pimpl: public state_pskel
  {
    public:
    state_pimpl (bool = false);

    ~state_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    orientation (::state::orientation*);

    virtual void
    position (::common::units_double_list*);

    virtual void
    velocity (::common::units_double_list*);

    virtual void
    voxels (::mesh::int_list_xpath*);

    virtual void
    cell_part (::state::cell_parts*);

    virtual void
    phase (::state::phase*);

    virtual void
    adhered_cells (::state::list_of_adhered_cells*);

    virtual void
    custom (::common::custom*);

    virtual ::state::state*
    post_state ();

    public:
    void
    pre_impl (::state::state*);

    public:
    struct state_pimpl_state
    {
      ::state::state* state_;
    };

    state_pimpl_state state_pimpl_state_;
    bool state_pimpl_base_;
  };

  class adhered_cell_pimpl: public adhered_cell_pskel
  {
    public:
    adhered_cell_pimpl (bool = false);

    ~adhered_cell_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    ID (unsigned int);

    virtual void
    contact_area (::common::units_decimal_nonnegative*);

    virtual void
    contact (::phenotype_common::cross_section*);

    virtual void
    custom (::common::custom*);

    virtual ::state::adhered_cell*
    post_adhered_cell ();

    public:
    void
    pre_impl (::state::adhered_cell*);

    public:
    struct adhered_cell_pimpl_state
    {
      ::state::adhered_cell* adhered_cell_;
    };

    adhered_cell_pimpl_state adhered_cell_pimpl_state_;
    bool adhered_cell_pimpl_base_;
  };

  class list_of_adhered_cells_pimpl: public list_of_adhered_cells_pskel
  {
    public:
    list_of_adhered_cells_pimpl (bool = false);

    ~list_of_adhered_cells_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    adhered_cell (::state::adhered_cell*);

    virtual void
    custom (::common::custom*);

    virtual ::state::list_of_adhered_cells*
    post_list_of_adhered_cells ();

    public:
    void
    pre_impl (::state::list_of_adhered_cells*);

    public:
    struct list_of_adhered_cells_pimpl_state
    {
      ::state::list_of_adhered_cells* list_of_adhered_cells_;
    };

    list_of_adhered_cells_pimpl_state list_of_adhered_cells_pimpl_state_;
    bool list_of_adhered_cells_pimpl_base_;
  };
}

#ifdef STATE_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // STATE_PIMPL_HPP
