// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "pkpd-simpl.hpp"

#include <xsde/cxx/serializer/validating/string-common.hxx>

namespace pkpd
{
  // pharmacokinetics_simpl
  //

  void pharmacokinetics_simpl::
  pre (const ::pkpd::pharmacokinetics& x)
  {
    this->pharmacokinetics_simpl_state_.pharmacokinetics_ = &x;
  }

  bool pharmacokinetics_simpl::
  inactivation_rate_present ()
  {
    return this->pharmacokinetics_simpl_state_.pharmacokinetics_->inactivation_rate_present ();
  }

  const ::common::units_decimal& pharmacokinetics_simpl::
  inactivation_rate ()
  {
    return this->pharmacokinetics_simpl_state_.pharmacokinetics_->inactivation_rate ();
  }

  bool pharmacokinetics_simpl::
  half_life_present ()
  {
    return this->pharmacokinetics_simpl_state_.pharmacokinetics_->half_life_present ();
  }

  const ::common::units_decimal& pharmacokinetics_simpl::
  half_life ()
  {
    return this->pharmacokinetics_simpl_state_.pharmacokinetics_->half_life ();
  }

  // drug_simpl
  //

  void drug_simpl::
  pre (const ::pkpd::drug& x)
  {
    this->drug_simpl_state_.drug_ = &x;
  }

  drug_sskel::choice_arm_tag drug_simpl::
  choice_arm ()
  {
    choice_arm_tag t (static_cast< choice_arm_tag > (
                        this->drug_simpl_state_.drug_->choice_arm ()));
    return t;
  }

  const ::pkpd::dose& drug_simpl::
  dose ()
  {
    return this->drug_simpl_state_.drug_->dose ();
  }

  const ::pkpd::pharmacokinetics& drug_simpl::
  pharmacokinetics ()
  {
    return this->drug_simpl_state_.drug_->pharmacokinetics ();
  }

  // drug_dose_simpl
  //

  void drug_dose_simpl::
  pre (const ::pkpd::drug_dose& x)
  {
    this->drug_dose_simpl_state_.drug_dose_ = &x;
  }

  bool drug_dose_simpl::
  ID_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->ID_present ();
  }

  unsigned short drug_dose_simpl::
  ID ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->ID ();
  }

  bool drug_dose_simpl::
  ChEBI_ID_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->ChEBI_ID_present ();
  }

  ::std::string drug_dose_simpl::
  ChEBI_ID ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->ChEBI_ID ();
  }

  bool drug_dose_simpl::
  MeSH_ID_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->MeSH_ID_present ();
  }

  ::std::string drug_dose_simpl::
  MeSH_ID ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->MeSH_ID ();
  }

  bool drug_dose_simpl::
  DrugBank_ID_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->DrugBank_ID_present ();
  }

  ::std::string drug_dose_simpl::
  DrugBank_ID ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->DrugBank_ID ();
  }

  bool drug_dose_simpl::
  GMO_ID_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->GMO_ID_present ();
  }

  ::std::string drug_dose_simpl::
  GMO_ID ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->GMO_ID ();
  }

  bool drug_dose_simpl::
  GO_ID_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->GO_ID_present ();
  }

  ::std::string drug_dose_simpl::
  GO_ID ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->GO_ID ();
  }

  bool drug_dose_simpl::
  UniProt_ID_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->UniProt_ID_present ();
  }

  ::std::string drug_dose_simpl::
  UniProt_ID ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->UniProt_ID ();
  }

  bool drug_dose_simpl::
  PR_ID_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->PR_ID_present ();
  }

  ::std::string drug_dose_simpl::
  PR_ID ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->PR_ID ();
  }

  bool drug_dose_simpl::
  name_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->name_present ();
  }

  ::std::string drug_dose_simpl::
  name ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->name ();
  }

  bool drug_dose_simpl::
  units_present ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->units_present ();
  }

  ::std::string drug_dose_simpl::
  units ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->units ();
  }

  const ::pkpd::dose& drug_dose_simpl::
  dose ()
  {
    return this->drug_dose_simpl_state_.drug_dose_->dose ();
  }

  // drug_pk_simpl
  //

  void drug_pk_simpl::
  pre (const ::pkpd::drug_pk& x)
  {
    this->drug_pk_simpl_state_.drug_pk_ = &x;
  }

  bool drug_pk_simpl::
  ID_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->ID_present ();
  }

  unsigned short drug_pk_simpl::
  ID ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->ID ();
  }

  bool drug_pk_simpl::
  ChEBI_ID_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->ChEBI_ID_present ();
  }

  ::std::string drug_pk_simpl::
  ChEBI_ID ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->ChEBI_ID ();
  }

  bool drug_pk_simpl::
  MeSH_ID_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->MeSH_ID_present ();
  }

  ::std::string drug_pk_simpl::
  MeSH_ID ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->MeSH_ID ();
  }

  bool drug_pk_simpl::
  DrugBank_ID_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->DrugBank_ID_present ();
  }

  ::std::string drug_pk_simpl::
  DrugBank_ID ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->DrugBank_ID ();
  }

  bool drug_pk_simpl::
  GMO_ID_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->GMO_ID_present ();
  }

  ::std::string drug_pk_simpl::
  GMO_ID ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->GMO_ID ();
  }

  bool drug_pk_simpl::
  GO_ID_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->GO_ID_present ();
  }

  ::std::string drug_pk_simpl::
  GO_ID ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->GO_ID ();
  }

  bool drug_pk_simpl::
  UniProt_ID_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->UniProt_ID_present ();
  }

  ::std::string drug_pk_simpl::
  UniProt_ID ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->UniProt_ID ();
  }

  bool drug_pk_simpl::
  PR_ID_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->PR_ID_present ();
  }

  ::std::string drug_pk_simpl::
  PR_ID ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->PR_ID ();
  }

  bool drug_pk_simpl::
  name_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->name_present ();
  }

  ::std::string drug_pk_simpl::
  name ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->name ();
  }

  bool drug_pk_simpl::
  units_present ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->units_present ();
  }

  ::std::string drug_pk_simpl::
  units ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->units ();
  }

  const ::pkpd::pharmacokinetics& drug_pk_simpl::
  pharmacokinetics ()
  {
    return this->drug_pk_simpl_state_.drug_pk_->pharmacokinetics ();
  }

  // dose_simpl
  //

  dose_simpl::
  dose_simpl ()
  : dose_sskel (&base_impl_)
  {
  }

  void dose_simpl::
  pre (const ::pkpd::dose& x)
  {
    this->base_impl_.pre (x);
    this->dose_simpl_state_.dose_ = &x;
  }

  bool dose_simpl::
  type_present ()
  {
    return this->dose_simpl_state_.dose_->type_present ();
  }

  ::std::string dose_simpl::
  type ()
  {
    return this->dose_simpl_state_.dose_->type ();
  }

  // therapy_simpl
  //

  void therapy_simpl::
  pre (const ::pkpd::therapy& x)
  {
    this->therapy_simpl_state_.therapy_ = &x;
    this->therapy_simpl_state_.drug_ = 
    this->therapy_simpl_state_.therapy_->drug ().begin ();
    this->therapy_simpl_state_.drug_end_ = 
    this->therapy_simpl_state_.therapy_->drug ().end ();
  }

  bool therapy_simpl::
  drug_next ()
  {
    return this->therapy_simpl_state_.drug_ != 
    this->therapy_simpl_state_.drug_end_;
  }

  const ::pkpd::drug_dose& therapy_simpl::
  drug ()
  {
    return *this->therapy_simpl_state_.drug_++;
  }

  // response_simpl
  //

  void response_simpl::
  pre (const ::pkpd::response& x)
  {
    this->response_simpl_state_.response_ = &x;
    this->response_simpl_state_.response_observation_ = 
    this->response_simpl_state_.response_->response_observation ().begin ();
    this->response_simpl_state_.response_observation_end_ = 
    this->response_simpl_state_.response_->response_observation ().end ();
  }

  bool response_simpl::
  maximum_birth_inhibition_present ()
  {
    return this->response_simpl_state_.response_->maximum_birth_inhibition_present ();
  }

  const ::common::units_decimal& response_simpl::
  maximum_birth_inhibition ()
  {
    return this->response_simpl_state_.response_->maximum_birth_inhibition ();
  }

  bool response_simpl::
  maximum_birth_inhibition_time_present ()
  {
    return this->response_simpl_state_.response_->maximum_birth_inhibition_time_present ();
  }

  const ::common::units_decimal& response_simpl::
  maximum_birth_inhibition_time ()
  {
    return this->response_simpl_state_.response_->maximum_birth_inhibition_time ();
  }

  bool response_simpl::
  birth_inhibition_recovery_rate_present ()
  {
    return this->response_simpl_state_.response_->birth_inhibition_recovery_rate_present ();
  }

  const ::common::units_decimal& response_simpl::
  birth_inhibition_recovery_rate ()
  {
    return this->response_simpl_state_.response_->birth_inhibition_recovery_rate ();
  }

  bool response_simpl::
  maximum_death_rate_present ()
  {
    return this->response_simpl_state_.response_->maximum_death_rate_present ();
  }

  const ::common::units_decimal& response_simpl::
  maximum_death_rate ()
  {
    return this->response_simpl_state_.response_->maximum_death_rate ();
  }

  bool response_simpl::
  maximum_death_time_present ()
  {
    return this->response_simpl_state_.response_->maximum_death_time_present ();
  }

  const ::common::units_decimal& response_simpl::
  maximum_death_time ()
  {
    return this->response_simpl_state_.response_->maximum_death_time ();
  }

  bool response_simpl::
  death_recovery_rate_present ()
  {
    return this->response_simpl_state_.response_->death_recovery_rate_present ();
  }

  const ::common::units_decimal& response_simpl::
  death_recovery_rate ()
  {
    return this->response_simpl_state_.response_->death_recovery_rate ();
  }

  bool response_simpl::
  response_observation_next ()
  {
    return this->response_simpl_state_.response_observation_ != 
    this->response_simpl_state_.response_observation_end_;
  }

  const ::pkpd::response_observation& response_simpl::
  response_observation ()
  {
    return *this->response_simpl_state_.response_observation_++;
  }

  bool response_simpl::
  custom_present ()
  {
    return this->response_simpl_state_.response_->custom_present ();
  }

  const ::common::custom& response_simpl::
  custom ()
  {
    return this->response_simpl_state_.response_->custom ();
  }

  // response_observation_simpl
  //

  void response_observation_simpl::
  pre (const ::pkpd::response_observation& x)
  {
    this->response_observation_simpl_state_.response_observation_ = &x;
  }

  bool response_observation_simpl::
  time_present ()
  {
    return this->response_observation_simpl_state_.response_observation_->time_present ();
  }

  const ::common::units_decimal& response_observation_simpl::
  time ()
  {
    return this->response_observation_simpl_state_.response_observation_->time ();
  }

  bool response_observation_simpl::
  birth_rate_present ()
  {
    return this->response_observation_simpl_state_.response_observation_->birth_rate_present ();
  }

  const ::common::units_decimal_nonnegative& response_observation_simpl::
  birth_rate ()
  {
    return this->response_observation_simpl_state_.response_observation_->birth_rate ();
  }

  bool response_observation_simpl::
  death_rate_present ()
  {
    return this->response_observation_simpl_state_.response_observation_->death_rate_present ();
  }

  const ::common::units_decimal_nonnegative& response_observation_simpl::
  death_rate ()
  {
    return this->response_observation_simpl_state_.response_observation_->death_rate ();
  }

  bool response_observation_simpl::
  net_birth_rate_present ()
  {
    return this->response_observation_simpl_state_.response_observation_->net_birth_rate_present ();
  }

  const ::common::units_decimal& response_observation_simpl::
  net_birth_rate ()
  {
    return this->response_observation_simpl_state_.response_observation_->net_birth_rate ();
  }

  bool response_observation_simpl::
  net_death_rate_present ()
  {
    return this->response_observation_simpl_state_.response_observation_->net_death_rate_present ();
  }

  const ::common::units_decimal& response_observation_simpl::
  net_death_rate ()
  {
    return this->response_observation_simpl_state_.response_observation_->net_death_rate ();
  }

  bool response_observation_simpl::
  apoptotic_duration_present ()
  {
    return this->response_observation_simpl_state_.response_observation_->apoptotic_duration_present ();
  }

  const ::common::units_decimal& response_observation_simpl::
  apoptotic_duration ()
  {
    return this->response_observation_simpl_state_.response_observation_->apoptotic_duration ();
  }

  bool response_observation_simpl::
  percent_cell_viability_present ()
  {
    return this->response_observation_simpl_state_.response_observation_->percent_cell_viability_present ();
  }

  const ::common::units_decimal& response_observation_simpl::
  percent_cell_viability ()
  {
    return this->response_observation_simpl_state_.response_observation_->percent_cell_viability ();
  }

  bool response_observation_simpl::
  custom_present ()
  {
    return this->response_observation_simpl_state_.response_observation_->custom_present ();
  }

  const ::common::custom& response_observation_simpl::
  custom ()
  {
    return this->response_observation_simpl_state_.response_observation_->custom ();
  }

  // pharmacodynamics_simpl
  //

  void pharmacodynamics_simpl::
  pre (const ::pkpd::pharmacodynamics& x)
  {
    this->pharmacodynamics_simpl_state_.pharmacodynamics_ = &x;
    this->pharmacodynamics_simpl_state_.therapy_measurement_set_ = 
    this->pharmacodynamics_simpl_state_.pharmacodynamics_->therapy_measurement_set ().begin ();
    this->pharmacodynamics_simpl_state_.therapy_measurement_set_end_ = 
    this->pharmacodynamics_simpl_state_.pharmacodynamics_->therapy_measurement_set ().end ();
  }

  bool pharmacodynamics_simpl::
  therapy_measurement_set_next ()
  {
    return this->pharmacodynamics_simpl_state_.therapy_measurement_set_ != 
    this->pharmacodynamics_simpl_state_.therapy_measurement_set_end_;
  }

  const ::pkpd::therapy_measurement_set& pharmacodynamics_simpl::
  therapy_measurement_set ()
  {
    return *this->pharmacodynamics_simpl_state_.therapy_measurement_set_++;
  }

  // therapy_measurement_set_simpl
  //

  void therapy_measurement_set_simpl::
  pre (const ::pkpd::therapy_measurement_set& x)
  {
    this->therapy_measurement_set_simpl_state_.therapy_measurement_set_ = &x;
  }

  bool therapy_measurement_set_simpl::
  ID_present ()
  {
    return this->therapy_measurement_set_simpl_state_.therapy_measurement_set_->ID_present ();
  }

  unsigned short therapy_measurement_set_simpl::
  ID ()
  {
    return this->therapy_measurement_set_simpl_state_.therapy_measurement_set_->ID ();
  }

  const ::pkpd::therapy& therapy_measurement_set_simpl::
  therapy ()
  {
    return this->therapy_measurement_set_simpl_state_.therapy_measurement_set_->therapy ();
  }

  const ::pkpd::response& therapy_measurement_set_simpl::
  response ()
  {
    return this->therapy_measurement_set_simpl_state_.therapy_measurement_set_->response ();
  }

  // PKPD_simpl
  //

  void PKPD_simpl::
  pre (const ::pkpd::PKPD& x)
  {
    this->PKPD_simpl_state_.PKPD_ = &x;
    this->PKPD_simpl_state_.drug_ = 
    this->PKPD_simpl_state_.PKPD_->drug ().begin ();
    this->PKPD_simpl_state_.drug_end_ = 
    this->PKPD_simpl_state_.PKPD_->drug ().end ();
  }

  bool PKPD_simpl::
  drug_next ()
  {
    return this->PKPD_simpl_state_.drug_ != 
    this->PKPD_simpl_state_.drug_end_;
  }

  const ::pkpd::drug_pk& PKPD_simpl::
  drug ()
  {
    return *this->PKPD_simpl_state_.drug_++;
  }

  bool PKPD_simpl::
  pharmacodynamics_present ()
  {
    return this->PKPD_simpl_state_.PKPD_->pharmacodynamics_present ();
  }

  const ::pkpd::pharmacodynamics& PKPD_simpl::
  pharmacodynamics ()
  {
    return this->PKPD_simpl_state_.PKPD_->pharmacodynamics ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

