// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "pkpd-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace pkpd
{
  // pharmacokinetics_pskel
  //

  void pharmacokinetics_pskel::
  inactivation_rate (::common::units_decimal* x)
  {
    if (this->pharmacokinetics_impl_)
      this->pharmacokinetics_impl_->inactivation_rate (x);
  }

  void pharmacokinetics_pskel::
  half_life (::common::units_decimal* x)
  {
    if (this->pharmacokinetics_impl_)
      this->pharmacokinetics_impl_->half_life (x);
  }

  void pharmacokinetics_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->inactivation_rate_parser_)
      this->inactivation_rate_parser_->_reset ();

    if (this->inactivation_rate_parser_map_)
      this->inactivation_rate_parser_map_->reset ();

    if (this->half_life_parser_)
      this->half_life_parser_->_reset ();

    if (this->half_life_parser_map_)
      this->half_life_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* pharmacokinetics_pskel::
  _static_type ()
  {
    return "pharmacokinetics pkpd";
  }

  const char* pharmacokinetics_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // drug_pskel
  //

  void drug_pskel::
  choice_arm (choice_arm_tag x)
  {
    if (this->drug_impl_)
      this->drug_impl_->choice_arm (x);
  }

  void drug_pskel::
  dose (::pkpd::dose* x)
  {
    if (this->drug_impl_)
      this->drug_impl_->dose (x);
  }

  void drug_pskel::
  pharmacokinetics (::pkpd::pharmacokinetics* x)
  {
    if (this->drug_impl_)
      this->drug_impl_->pharmacokinetics (x);
  }

  void drug_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->dose_parser_)
      this->dose_parser_->_reset ();

    if (this->dose_parser_map_)
      this->dose_parser_map_->reset ();

    if (this->pharmacokinetics_parser_)
      this->pharmacokinetics_parser_->_reset ();

    if (this->pharmacokinetics_parser_map_)
      this->pharmacokinetics_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* drug_pskel::
  _static_type ()
  {
    return "drug pkpd";
  }

  const char* drug_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // drug_dose_pskel
  //

  void drug_dose_pskel::
  ID (unsigned short x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->ID (x);
  }

  void drug_dose_pskel::
  ChEBI_ID (const ::std::string& x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->ChEBI_ID (x);
  }

  void drug_dose_pskel::
  MeSH_ID (const ::std::string& x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->MeSH_ID (x);
  }

  void drug_dose_pskel::
  DrugBank_ID (const ::std::string& x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->DrugBank_ID (x);
  }

  void drug_dose_pskel::
  GMO_ID (const ::std::string& x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->GMO_ID (x);
  }

  void drug_dose_pskel::
  GO_ID (const ::std::string& x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->GO_ID (x);
  }

  void drug_dose_pskel::
  UniProt_ID (const ::std::string& x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->UniProt_ID (x);
  }

  void drug_dose_pskel::
  PR_ID (const ::std::string& x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->PR_ID (x);
  }

  void drug_dose_pskel::
  name (const ::std::string& x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->name (x);
  }

  void drug_dose_pskel::
  units (const ::std::string& x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->units (x);
  }

  void drug_dose_pskel::
  dose (::pkpd::dose* x)
  {
    if (this->drug_dose_impl_)
      this->drug_dose_impl_->dose (x);
  }

  void drug_dose_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->ChEBI_ID_parser_)
      this->ChEBI_ID_parser_->_reset ();

    if (this->MeSH_ID_parser_)
      this->MeSH_ID_parser_->_reset ();

    if (this->DrugBank_ID_parser_)
      this->DrugBank_ID_parser_->_reset ();

    if (this->GMO_ID_parser_)
      this->GMO_ID_parser_->_reset ();

    if (this->GO_ID_parser_)
      this->GO_ID_parser_->_reset ();

    if (this->UniProt_ID_parser_)
      this->UniProt_ID_parser_->_reset ();

    if (this->PR_ID_parser_)
      this->PR_ID_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    this->resetting_ = true;

    if (this->dose_parser_)
      this->dose_parser_->_reset ();

    if (this->dose_parser_map_)
      this->dose_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* drug_dose_pskel::
  _static_type ()
  {
    return "drug_dose pkpd";
  }

  const char* drug_dose_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // drug_pk_pskel
  //

  void drug_pk_pskel::
  ID (unsigned short x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->ID (x);
  }

  void drug_pk_pskel::
  ChEBI_ID (const ::std::string& x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->ChEBI_ID (x);
  }

  void drug_pk_pskel::
  MeSH_ID (const ::std::string& x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->MeSH_ID (x);
  }

  void drug_pk_pskel::
  DrugBank_ID (const ::std::string& x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->DrugBank_ID (x);
  }

  void drug_pk_pskel::
  GMO_ID (const ::std::string& x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->GMO_ID (x);
  }

  void drug_pk_pskel::
  GO_ID (const ::std::string& x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->GO_ID (x);
  }

  void drug_pk_pskel::
  UniProt_ID (const ::std::string& x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->UniProt_ID (x);
  }

  void drug_pk_pskel::
  PR_ID (const ::std::string& x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->PR_ID (x);
  }

  void drug_pk_pskel::
  name (const ::std::string& x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->name (x);
  }

  void drug_pk_pskel::
  units (const ::std::string& x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->units (x);
  }

  void drug_pk_pskel::
  pharmacokinetics (::pkpd::pharmacokinetics* x)
  {
    if (this->drug_pk_impl_)
      this->drug_pk_impl_->pharmacokinetics (x);
  }

  void drug_pk_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->ChEBI_ID_parser_)
      this->ChEBI_ID_parser_->_reset ();

    if (this->MeSH_ID_parser_)
      this->MeSH_ID_parser_->_reset ();

    if (this->DrugBank_ID_parser_)
      this->DrugBank_ID_parser_->_reset ();

    if (this->GMO_ID_parser_)
      this->GMO_ID_parser_->_reset ();

    if (this->GO_ID_parser_)
      this->GO_ID_parser_->_reset ();

    if (this->UniProt_ID_parser_)
      this->UniProt_ID_parser_->_reset ();

    if (this->PR_ID_parser_)
      this->PR_ID_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    this->resetting_ = true;

    if (this->pharmacokinetics_parser_)
      this->pharmacokinetics_parser_->_reset ();

    if (this->pharmacokinetics_parser_map_)
      this->pharmacokinetics_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* drug_pk_pskel::
  _static_type ()
  {
    return "drug_pk pkpd";
  }

  const char* drug_pk_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // dose_pskel
  //

  void dose_pskel::
  type (const ::std::string& x)
  {
    if (this->dose_impl_)
      this->dose_impl_->type (x);
  }

  void dose_pskel::
  _reset ()
  {
    typedef ::common::units_decimal_pskel base;
    base::_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();
  }

  const char* dose_pskel::
  _static_type ()
  {
    return "dose pkpd";
  }

  const char* dose_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_dose_pskel_inheritance_map_entry_ (
    dose_pskel::_static_type (),
    ::common::units_decimal_pskel::_static_type ());

  ::common::units_decimal* dose_pskel::
  post_units_decimal ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->post_units_decimal ();
  }

  // therapy_pskel
  //

  void therapy_pskel::
  drug (::pkpd::drug_dose* x)
  {
    if (this->therapy_impl_)
      this->therapy_impl_->drug (x);
  }

  void therapy_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->drug_parser_)
      this->drug_parser_->_reset ();

    if (this->drug_parser_map_)
      this->drug_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* therapy_pskel::
  _static_type ()
  {
    return "therapy pkpd";
  }

  const char* therapy_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // response_pskel
  //

  void response_pskel::
  maximum_birth_inhibition (::common::units_decimal* x)
  {
    if (this->response_impl_)
      this->response_impl_->maximum_birth_inhibition (x);
  }

  void response_pskel::
  maximum_birth_inhibition_time (::common::units_decimal* x)
  {
    if (this->response_impl_)
      this->response_impl_->maximum_birth_inhibition_time (x);
  }

  void response_pskel::
  birth_inhibition_recovery_rate (::common::units_decimal* x)
  {
    if (this->response_impl_)
      this->response_impl_->birth_inhibition_recovery_rate (x);
  }

  void response_pskel::
  maximum_death_rate (::common::units_decimal* x)
  {
    if (this->response_impl_)
      this->response_impl_->maximum_death_rate (x);
  }

  void response_pskel::
  maximum_death_time (::common::units_decimal* x)
  {
    if (this->response_impl_)
      this->response_impl_->maximum_death_time (x);
  }

  void response_pskel::
  death_recovery_rate (::common::units_decimal* x)
  {
    if (this->response_impl_)
      this->response_impl_->death_recovery_rate (x);
  }

  void response_pskel::
  response_observation (::pkpd::response_observation* x)
  {
    if (this->response_impl_)
      this->response_impl_->response_observation (x);
  }

  void response_pskel::
  custom (::common::custom* x)
  {
    if (this->response_impl_)
      this->response_impl_->custom (x);
  }

  void response_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->maximum_birth_inhibition_parser_)
      this->maximum_birth_inhibition_parser_->_reset ();

    if (this->maximum_birth_inhibition_parser_map_)
      this->maximum_birth_inhibition_parser_map_->reset ();

    if (this->maximum_birth_inhibition_time_parser_)
      this->maximum_birth_inhibition_time_parser_->_reset ();

    if (this->maximum_birth_inhibition_time_parser_map_)
      this->maximum_birth_inhibition_time_parser_map_->reset ();

    if (this->birth_inhibition_recovery_rate_parser_)
      this->birth_inhibition_recovery_rate_parser_->_reset ();

    if (this->birth_inhibition_recovery_rate_parser_map_)
      this->birth_inhibition_recovery_rate_parser_map_->reset ();

    if (this->maximum_death_rate_parser_)
      this->maximum_death_rate_parser_->_reset ();

    if (this->maximum_death_rate_parser_map_)
      this->maximum_death_rate_parser_map_->reset ();

    if (this->maximum_death_time_parser_)
      this->maximum_death_time_parser_->_reset ();

    if (this->maximum_death_time_parser_map_)
      this->maximum_death_time_parser_map_->reset ();

    if (this->death_recovery_rate_parser_)
      this->death_recovery_rate_parser_->_reset ();

    if (this->death_recovery_rate_parser_map_)
      this->death_recovery_rate_parser_map_->reset ();

    if (this->response_observation_parser_)
      this->response_observation_parser_->_reset ();

    if (this->response_observation_parser_map_)
      this->response_observation_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* response_pskel::
  _static_type ()
  {
    return "response pkpd";
  }

  const char* response_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // response_observation_pskel
  //

  void response_observation_pskel::
  time (::common::units_decimal* x)
  {
    if (this->response_observation_impl_)
      this->response_observation_impl_->time (x);
  }

  void response_observation_pskel::
  birth_rate (::common::units_decimal_nonnegative* x)
  {
    if (this->response_observation_impl_)
      this->response_observation_impl_->birth_rate (x);
  }

  void response_observation_pskel::
  death_rate (::common::units_decimal_nonnegative* x)
  {
    if (this->response_observation_impl_)
      this->response_observation_impl_->death_rate (x);
  }

  void response_observation_pskel::
  net_birth_rate (::common::units_decimal* x)
  {
    if (this->response_observation_impl_)
      this->response_observation_impl_->net_birth_rate (x);
  }

  void response_observation_pskel::
  net_death_rate (::common::units_decimal* x)
  {
    if (this->response_observation_impl_)
      this->response_observation_impl_->net_death_rate (x);
  }

  void response_observation_pskel::
  apoptotic_duration (::common::units_decimal* x)
  {
    if (this->response_observation_impl_)
      this->response_observation_impl_->apoptotic_duration (x);
  }

  void response_observation_pskel::
  percent_cell_viability (::common::units_decimal* x)
  {
    if (this->response_observation_impl_)
      this->response_observation_impl_->percent_cell_viability (x);
  }

  void response_observation_pskel::
  custom (::common::custom* x)
  {
    if (this->response_observation_impl_)
      this->response_observation_impl_->custom (x);
  }

  void response_observation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->time_parser_)
      this->time_parser_->_reset ();

    if (this->time_parser_map_)
      this->time_parser_map_->reset ();

    if (this->birth_rate_parser_)
      this->birth_rate_parser_->_reset ();

    if (this->birth_rate_parser_map_)
      this->birth_rate_parser_map_->reset ();

    if (this->death_rate_parser_)
      this->death_rate_parser_->_reset ();

    if (this->death_rate_parser_map_)
      this->death_rate_parser_map_->reset ();

    if (this->net_birth_rate_parser_)
      this->net_birth_rate_parser_->_reset ();

    if (this->net_birth_rate_parser_map_)
      this->net_birth_rate_parser_map_->reset ();

    if (this->net_death_rate_parser_)
      this->net_death_rate_parser_->_reset ();

    if (this->net_death_rate_parser_map_)
      this->net_death_rate_parser_map_->reset ();

    if (this->apoptotic_duration_parser_)
      this->apoptotic_duration_parser_->_reset ();

    if (this->apoptotic_duration_parser_map_)
      this->apoptotic_duration_parser_map_->reset ();

    if (this->percent_cell_viability_parser_)
      this->percent_cell_viability_parser_->_reset ();

    if (this->percent_cell_viability_parser_map_)
      this->percent_cell_viability_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* response_observation_pskel::
  _static_type ()
  {
    return "response_observation pkpd";
  }

  const char* response_observation_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // pharmacodynamics_pskel
  //

  void pharmacodynamics_pskel::
  therapy_measurement_set (::pkpd::therapy_measurement_set* x)
  {
    if (this->pharmacodynamics_impl_)
      this->pharmacodynamics_impl_->therapy_measurement_set (x);
  }

  void pharmacodynamics_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->therapy_measurement_set_parser_)
      this->therapy_measurement_set_parser_->_reset ();

    if (this->therapy_measurement_set_parser_map_)
      this->therapy_measurement_set_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* pharmacodynamics_pskel::
  _static_type ()
  {
    return "pharmacodynamics pkpd";
  }

  const char* pharmacodynamics_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // therapy_measurement_set_pskel
  //

  void therapy_measurement_set_pskel::
  ID (unsigned short x)
  {
    if (this->therapy_measurement_set_impl_)
      this->therapy_measurement_set_impl_->ID (x);
  }

  void therapy_measurement_set_pskel::
  therapy (::pkpd::therapy* x)
  {
    if (this->therapy_measurement_set_impl_)
      this->therapy_measurement_set_impl_->therapy (x);
  }

  void therapy_measurement_set_pskel::
  response (::pkpd::response* x)
  {
    if (this->therapy_measurement_set_impl_)
      this->therapy_measurement_set_impl_->response (x);
  }

  void therapy_measurement_set_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->therapy_parser_)
      this->therapy_parser_->_reset ();

    if (this->therapy_parser_map_)
      this->therapy_parser_map_->reset ();

    if (this->response_parser_)
      this->response_parser_->_reset ();

    if (this->response_parser_map_)
      this->response_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* therapy_measurement_set_pskel::
  _static_type ()
  {
    return "therapy_measurement_set pkpd";
  }

  const char* therapy_measurement_set_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // PKPD_pskel
  //

  void PKPD_pskel::
  drug (::pkpd::drug_pk* x)
  {
    if (this->PKPD_impl_)
      this->PKPD_impl_->drug (x);
  }

  void PKPD_pskel::
  pharmacodynamics (::pkpd::pharmacodynamics* x)
  {
    if (this->PKPD_impl_)
      this->PKPD_impl_->pharmacodynamics (x);
  }

  void PKPD_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->drug_parser_)
      this->drug_parser_->_reset ();

    if (this->drug_parser_map_)
      this->drug_parser_map_->reset ();

    if (this->pharmacodynamics_parser_)
      this->pharmacodynamics_parser_->_reset ();

    if (this->pharmacodynamics_parser_map_)
      this->pharmacodynamics_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* PKPD_pskel::
  _static_type ()
  {
    return "PKPD pkpd";
  }

  const char* PKPD_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace pkpd
{
  // Element validation and dispatch functions for pharmacokinetics_pskel.
  //
  bool pharmacokinetics_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "inactivation_rate" && ns.empty ())
          s = 0UL;
        else if (n == "half_life" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &pharmacokinetics_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool pharmacokinetics_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void pharmacokinetics_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void pharmacokinetics_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void pharmacokinetics_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "inactivation_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->inactivation_rate_parser_ != 0)
              p = this->inactivation_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->inactivation_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->inactivation_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->inactivation_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->inactivation_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->inactivation_rate (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "half_life" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->half_life_parser_ != 0)
              p = this->half_life_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->half_life_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->half_life_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->half_life_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->half_life_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->half_life (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for drug_pskel.
  //
  bool drug_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "dose" && ns.empty ())
          s = 0UL;
        else if (n == "pharmacokinetics" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &drug_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_arm (static_cast< choice_arm_tag > (s));
          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool drug_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void drug_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void drug_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void drug_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            const char* t,
            bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (count);
    XSDE_UNUSED (ns);
    XSDE_UNUSED (n);
    XSDE_UNUSED (ctx);
    XSDE_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          ::pkpd::dose_pskel* p = 0;

          if (t == 0 && this->dose_parser_ != 0)
            p = this->dose_parser_;
          else
          {
            const char* ts = ::pkpd::dose_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->dose_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->dose_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->dose_parser_map_ != 0)
                p = static_cast< ::pkpd::dose_pskel* > (
                  this->dose_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::pkpd::dose_pskel* p =
          static_cast< ::pkpd::dose_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::pkpd::dose* tmp = p->post_dose ();
            this->dose (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          ::pkpd::pharmacokinetics_pskel* p = 0;

          if (t == 0 && this->pharmacokinetics_parser_ != 0)
            p = this->pharmacokinetics_parser_;
          else
          {
            const char* ts = ::pkpd::pharmacokinetics_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->pharmacokinetics_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->pharmacokinetics_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->pharmacokinetics_parser_map_ != 0)
                p = static_cast< ::pkpd::pharmacokinetics_pskel* > (
                  this->pharmacokinetics_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::pkpd::pharmacokinetics_pskel* p =
          static_cast< ::pkpd::pharmacokinetics_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::pkpd::pharmacokinetics* tmp = p->post_pharmacokinetics ();
            this->pharmacokinetics (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for drug_dose_pskel.
  //
  bool drug_dose_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "dose" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &drug_dose_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool drug_dose_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void drug_dose_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void drug_dose_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void drug_dose_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "dose" && ns.empty ())
        {
          if (start)
          {
            ::pkpd::dose_pskel* p = 0;

            if (t == 0 && this->dose_parser_ != 0)
              p = this->dose_parser_;
            else
            {
              const char* ts = ::pkpd::dose_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->dose_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->dose_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->dose_parser_map_ != 0)
                  p = static_cast< ::pkpd::dose_pskel* > (
                    this->dose_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pkpd::dose_pskel* p =
            static_cast< ::pkpd::dose_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pkpd::dose* tmp = p->post_dose ();
              this->dose (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for drug_pk_pskel.
  //
  bool drug_pk_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "pharmacokinetics" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &drug_pk_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool drug_pk_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void drug_pk_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void drug_pk_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void drug_pk_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "pharmacokinetics" && ns.empty ())
        {
          if (start)
          {
            ::pkpd::pharmacokinetics_pskel* p = 0;

            if (t == 0 && this->pharmacokinetics_parser_ != 0)
              p = this->pharmacokinetics_parser_;
            else
            {
              const char* ts = ::pkpd::pharmacokinetics_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->pharmacokinetics_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->pharmacokinetics_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->pharmacokinetics_parser_map_ != 0)
                  p = static_cast< ::pkpd::pharmacokinetics_pskel* > (
                    this->pharmacokinetics_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pkpd::pharmacokinetics_pskel* p =
            static_cast< ::pkpd::pharmacokinetics_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pkpd::pharmacokinetics* tmp = p->post_pharmacokinetics ();
              this->pharmacokinetics (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for therapy_pskel.
  //
  bool therapy_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "drug" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &therapy_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool therapy_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void therapy_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void therapy_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void therapy_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "drug" && ns.empty ())
        {
          if (start)
          {
            ::pkpd::drug_dose_pskel* p = 0;

            if (t == 0 && this->drug_parser_ != 0)
              p = this->drug_parser_;
            else
            {
              const char* ts = ::pkpd::drug_dose_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->drug_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->drug_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->drug_parser_map_ != 0)
                  p = static_cast< ::pkpd::drug_dose_pskel* > (
                    this->drug_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pkpd::drug_dose_pskel* p =
            static_cast< ::pkpd::drug_dose_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pkpd::drug_dose* tmp = p->post_drug_dose ();
              this->drug (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for response_pskel.
  //
  bool response_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "maximum_birth_inhibition" && ns.empty ())
          s = 0UL;
        else if (n == "maximum_birth_inhibition_time" && ns.empty ())
          s = 1UL;
        else if (n == "birth_inhibition_recovery_rate" && ns.empty ())
          s = 2UL;
        else if (n == "maximum_death_rate" && ns.empty ())
          s = 3UL;
        else if (n == "maximum_death_time" && ns.empty ())
          s = 4UL;
        else if (n == "death_recovery_rate" && ns.empty ())
          s = 5UL;
        else if (n == "response_observation" && ns.empty ())
          s = 6UL;
        else if (n == "custom" && ns.empty ())
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &response_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool response_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void response_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void response_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void response_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "maximum_birth_inhibition" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->maximum_birth_inhibition_parser_ != 0)
              p = this->maximum_birth_inhibition_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->maximum_birth_inhibition_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->maximum_birth_inhibition_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->maximum_birth_inhibition_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->maximum_birth_inhibition_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->maximum_birth_inhibition (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "maximum_birth_inhibition_time" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->maximum_birth_inhibition_time_parser_ != 0)
              p = this->maximum_birth_inhibition_time_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->maximum_birth_inhibition_time_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->maximum_birth_inhibition_time_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->maximum_birth_inhibition_time_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->maximum_birth_inhibition_time_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->maximum_birth_inhibition_time (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "birth_inhibition_recovery_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->birth_inhibition_recovery_rate_parser_ != 0)
              p = this->birth_inhibition_recovery_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->birth_inhibition_recovery_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->birth_inhibition_recovery_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->birth_inhibition_recovery_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->birth_inhibition_recovery_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->birth_inhibition_recovery_rate (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "maximum_death_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->maximum_death_rate_parser_ != 0)
              p = this->maximum_death_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->maximum_death_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->maximum_death_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->maximum_death_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->maximum_death_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->maximum_death_rate (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "maximum_death_time" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->maximum_death_time_parser_ != 0)
              p = this->maximum_death_time_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->maximum_death_time_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->maximum_death_time_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->maximum_death_time_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->maximum_death_time_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->maximum_death_time (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "death_recovery_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->death_recovery_rate_parser_ != 0)
              p = this->death_recovery_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->death_recovery_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->death_recovery_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->death_recovery_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->death_recovery_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->death_recovery_rate (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "response_observation" && ns.empty ())
        {
          if (start)
          {
            ::pkpd::response_observation_pskel* p = 0;

            if (t == 0 && this->response_observation_parser_ != 0)
              p = this->response_observation_parser_;
            else
            {
              const char* ts = ::pkpd::response_observation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->response_observation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->response_observation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->response_observation_parser_map_ != 0)
                  p = static_cast< ::pkpd::response_observation_pskel* > (
                    this->response_observation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pkpd::response_observation_pskel* p =
            static_cast< ::pkpd::response_observation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pkpd::response_observation* tmp = p->post_response_observation ();
              this->response_observation (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for response_observation_pskel.
  //
  bool response_observation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "time" && ns.empty ())
          s = 0UL;
        else if (n == "birth_rate" && ns.empty ())
          s = 1UL;
        else if (n == "death_rate" && ns.empty ())
          s = 2UL;
        else if (n == "net_birth_rate" && ns.empty ())
          s = 3UL;
        else if (n == "net_death_rate" && ns.empty ())
          s = 4UL;
        else if (n == "apoptotic_duration" && ns.empty ())
          s = 5UL;
        else if (n == "percent_cell_viability" && ns.empty ())
          s = 6UL;
        else if (n == "custom" && ns.empty ())
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &response_observation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool response_observation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void response_observation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void response_observation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void response_observation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "time" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->time_parser_ != 0)
              p = this->time_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->time_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->time_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->time_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->time_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->time (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "birth_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->birth_rate_parser_ != 0)
              p = this->birth_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->birth_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->birth_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->birth_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->birth_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->birth_rate (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "death_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->death_rate_parser_ != 0)
              p = this->death_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->death_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->death_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->death_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->death_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->death_rate (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "net_birth_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->net_birth_rate_parser_ != 0)
              p = this->net_birth_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->net_birth_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->net_birth_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->net_birth_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->net_birth_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->net_birth_rate (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "net_death_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->net_death_rate_parser_ != 0)
              p = this->net_death_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->net_death_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->net_death_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->net_death_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->net_death_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->net_death_rate (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "apoptotic_duration" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->apoptotic_duration_parser_ != 0)
              p = this->apoptotic_duration_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->apoptotic_duration_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->apoptotic_duration_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->apoptotic_duration_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->apoptotic_duration_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->apoptotic_duration (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "percent_cell_viability" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->percent_cell_viability_parser_ != 0)
              p = this->percent_cell_viability_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->percent_cell_viability_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->percent_cell_viability_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->percent_cell_viability_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->percent_cell_viability_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->percent_cell_viability (tmp);
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for pharmacodynamics_pskel.
  //
  bool pharmacodynamics_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "therapy_measurement_set" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &pharmacodynamics_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool pharmacodynamics_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void pharmacodynamics_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void pharmacodynamics_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void pharmacodynamics_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "therapy_measurement_set" && ns.empty ())
        {
          if (start)
          {
            ::pkpd::therapy_measurement_set_pskel* p = 0;

            if (t == 0 && this->therapy_measurement_set_parser_ != 0)
              p = this->therapy_measurement_set_parser_;
            else
            {
              const char* ts = ::pkpd::therapy_measurement_set_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->therapy_measurement_set_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->therapy_measurement_set_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->therapy_measurement_set_parser_map_ != 0)
                  p = static_cast< ::pkpd::therapy_measurement_set_pskel* > (
                    this->therapy_measurement_set_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pkpd::therapy_measurement_set_pskel* p =
            static_cast< ::pkpd::therapy_measurement_set_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pkpd::therapy_measurement_set* tmp = p->post_therapy_measurement_set ();
              this->therapy_measurement_set (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for therapy_measurement_set_pskel.
  //
  bool therapy_measurement_set_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "therapy" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &therapy_measurement_set_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool therapy_measurement_set_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void therapy_measurement_set_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void therapy_measurement_set_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void therapy_measurement_set_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "therapy" && ns.empty ())
        {
          if (start)
          {
            ::pkpd::therapy_pskel* p = 0;

            if (t == 0 && this->therapy_parser_ != 0)
              p = this->therapy_parser_;
            else
            {
              const char* ts = ::pkpd::therapy_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->therapy_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->therapy_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->therapy_parser_map_ != 0)
                  p = static_cast< ::pkpd::therapy_pskel* > (
                    this->therapy_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pkpd::therapy_pskel* p =
            static_cast< ::pkpd::therapy_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pkpd::therapy* tmp = p->post_therapy ();
              this->therapy (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "response" && ns.empty ())
        {
          if (start)
          {
            ::pkpd::response_pskel* p = 0;

            if (t == 0 && this->response_parser_ != 0)
              p = this->response_parser_;
            else
            {
              const char* ts = ::pkpd::response_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->response_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->response_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->response_parser_map_ != 0)
                  p = static_cast< ::pkpd::response_pskel* > (
                    this->response_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pkpd::response_pskel* p =
            static_cast< ::pkpd::response_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pkpd::response* tmp = p->post_response ();
              this->response (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for PKPD_pskel.
  //
  bool PKPD_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "drug" && ns.empty ())
          s = 0UL;
        else if (n == "pharmacodynamics" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &PKPD_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool PKPD_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void PKPD_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void PKPD_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void PKPD_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "drug" && ns.empty ())
        {
          if (start)
          {
            ::pkpd::drug_pk_pskel* p = 0;

            if (t == 0 && this->drug_parser_ != 0)
              p = this->drug_parser_;
            else
            {
              const char* ts = ::pkpd::drug_pk_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->drug_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->drug_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->drug_parser_map_ != 0)
                  p = static_cast< ::pkpd::drug_pk_pskel* > (
                    this->drug_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pkpd::drug_pk_pskel* p =
            static_cast< ::pkpd::drug_pk_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pkpd::drug_pk* tmp = p->post_drug_pk ();
              this->drug (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "pharmacodynamics" && ns.empty ())
        {
          if (start)
          {
            ::pkpd::pharmacodynamics_pskel* p = 0;

            if (t == 0 && this->pharmacodynamics_parser_ != 0)
              p = this->pharmacodynamics_parser_;
            else
            {
              const char* ts = ::pkpd::pharmacodynamics_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->pharmacodynamics_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->pharmacodynamics_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->pharmacodynamics_parser_map_ != 0)
                  p = static_cast< ::pkpd::pharmacodynamics_pskel* > (
                    this->pharmacodynamics_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pkpd::pharmacodynamics_pskel* p =
            static_cast< ::pkpd::pharmacodynamics_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pkpd::pharmacodynamics* tmp = p->post_pharmacodynamics ();
              this->pharmacodynamics (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace pkpd
{
  // Attribute validation and dispatch functions for drug_pskel.
  //
  bool drug_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if (!n.empty ())
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for drug_dose_pskel.
  //
  bool drug_dose_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned short tmp = this->ID_parser_->post_unsigned_short ();

          this->ID (tmp);
        }
      }

      return true;
    }

    if (n == "ChEBI_ID" && ns.empty ())
    {
      if (this->ChEBI_ID_parser_)
      {
        this->ChEBI_ID_parser_->pre ();

        this->ChEBI_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->ChEBI_ID_parser_->post_string ();

          this->ChEBI_ID (tmp);
        }
      }

      return true;
    }

    if (n == "MeSH_ID" && ns.empty ())
    {
      if (this->MeSH_ID_parser_)
      {
        this->MeSH_ID_parser_->pre ();

        this->MeSH_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->MeSH_ID_parser_->post_string ();

          this->MeSH_ID (tmp);
        }
      }

      return true;
    }

    if (n == "DrugBank_ID" && ns.empty ())
    {
      if (this->DrugBank_ID_parser_)
      {
        this->DrugBank_ID_parser_->pre ();

        this->DrugBank_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->DrugBank_ID_parser_->post_string ();

          this->DrugBank_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GMO_ID" && ns.empty ())
    {
      if (this->GMO_ID_parser_)
      {
        this->GMO_ID_parser_->pre ();

        this->GMO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GMO_ID_parser_->post_string ();

          this->GMO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GO_ID" && ns.empty ())
    {
      if (this->GO_ID_parser_)
      {
        this->GO_ID_parser_->pre ();

        this->GO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GO_ID_parser_->post_string ();

          this->GO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "UniProt_ID" && ns.empty ())
    {
      if (this->UniProt_ID_parser_)
      {
        this->UniProt_ID_parser_->pre ();

        this->UniProt_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->UniProt_ID_parser_->post_string ();

          this->UniProt_ID (tmp);
        }
      }

      return true;
    }

    if (n == "PR_ID" && ns.empty ())
    {
      if (this->PR_ID_parser_)
      {
        this->PR_ID_parser_->pre ();

        this->PR_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->PR_ID_parser_->post_string ();

          this->PR_ID (tmp);
        }
      }

      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      return true;
    }

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for drug_pk_pskel.
  //
  bool drug_pk_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned short tmp = this->ID_parser_->post_unsigned_short ();

          this->ID (tmp);
        }
      }

      return true;
    }

    if (n == "ChEBI_ID" && ns.empty ())
    {
      if (this->ChEBI_ID_parser_)
      {
        this->ChEBI_ID_parser_->pre ();

        this->ChEBI_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->ChEBI_ID_parser_->post_string ();

          this->ChEBI_ID (tmp);
        }
      }

      return true;
    }

    if (n == "MeSH_ID" && ns.empty ())
    {
      if (this->MeSH_ID_parser_)
      {
        this->MeSH_ID_parser_->pre ();

        this->MeSH_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->MeSH_ID_parser_->post_string ();

          this->MeSH_ID (tmp);
        }
      }

      return true;
    }

    if (n == "DrugBank_ID" && ns.empty ())
    {
      if (this->DrugBank_ID_parser_)
      {
        this->DrugBank_ID_parser_->pre ();

        this->DrugBank_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->DrugBank_ID_parser_->post_string ();

          this->DrugBank_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GMO_ID" && ns.empty ())
    {
      if (this->GMO_ID_parser_)
      {
        this->GMO_ID_parser_->pre ();

        this->GMO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GMO_ID_parser_->post_string ();

          this->GMO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GO_ID" && ns.empty ())
    {
      if (this->GO_ID_parser_)
      {
        this->GO_ID_parser_->pre ();

        this->GO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GO_ID_parser_->post_string ();

          this->GO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "UniProt_ID" && ns.empty ())
    {
      if (this->UniProt_ID_parser_)
      {
        this->UniProt_ID_parser_->pre ();

        this->UniProt_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->UniProt_ID_parser_->post_string ();

          this->UniProt_ID (tmp);
        }
      }

      return true;
    }

    if (n == "PR_ID" && ns.empty ())
    {
      if (this->PR_ID_parser_)
      {
        this->PR_ID_parser_->pre ();

        this->PR_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->PR_ID_parser_->post_string ();

          this->PR_ID (tmp);
        }
      }

      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      return true;
    }

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for dose_pskel.
  //
  bool dose_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->type_parser_->post_string ();

          this->type (tmp);
        }
      }

      return true;
    }

    typedef ::common::units_decimal_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for therapy_measurement_set_pskel.
  //
  bool therapy_measurement_set_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned short tmp = this->ID_parser_->post_unsigned_short ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  bool therapy_measurement_set_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if (!n.empty ())
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }
}

namespace pkpd
{
}

// Begin epilogue.
//
//
// End epilogue.

