// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VASCULAR_IPP
#define VASCULAR_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

#include "mesh.ipp"

#include "variables.ipp"

#include "phenotype_common.ipp"

namespace vascular
{
  // vascular_node
  //

  inline
  bool vascular_node::
  boundary_node_present () const
  {
    return this->boundary_node_present_;
  }

  inline
  void vascular_node::
  boundary_node_present (bool x)
  {
    this->boundary_node_present_ = x;
  }

  inline
  bool vascular_node::
  boundary_node () const
  {
    return this->boundary_node_;
  }

  inline
  bool& vascular_node::
  boundary_node ()
  {
    return this->boundary_node_;
  }

  inline
  void vascular_node::
  boundary_node (bool x)
  {
    this->boundary_node_ = x;
    this->boundary_node_present_ = true;
  }

  // list_of_vascular_nodes
  //

  inline
  const list_of_vascular_nodes::vascular_node_sequence& list_of_vascular_nodes::
  vascular_node () const
  {
    return this->vascular_node_;
  }

  inline
  list_of_vascular_nodes::vascular_node_sequence& list_of_vascular_nodes::
  vascular_node ()
  {
    return this->vascular_node_;
  }

  inline
  bool list_of_vascular_nodes::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& list_of_vascular_nodes::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& list_of_vascular_nodes::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void list_of_vascular_nodes::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* list_of_vascular_nodes::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // boundary_node
  //

  inline
  bool boundary_node::
  node_ID_present () const
  {
    return this->node_ID_present_;
  }

  inline
  void boundary_node::
  node_ID_present (bool x)
  {
    this->node_ID_present_ = x;
  }

  inline
  unsigned int boundary_node::
  node_ID () const
  {
    return this->node_ID_;
  }

  inline
  unsigned int& boundary_node::
  node_ID ()
  {
    return this->node_ID_;
  }

  inline
  void boundary_node::
  node_ID (unsigned int x)
  {
    this->node_ID_ = x;
    this->node_ID_present_ = true;
  }

  inline
  bool boundary_node::
  fluid_flow_velocity_present () const
  {
    return this->fluid_flow_velocity_ != 0;
  }

  inline
  const ::common::units_decimal& boundary_node::
  fluid_flow_velocity () const
  {
    return *this->fluid_flow_velocity_;
  }

  inline
  ::common::units_decimal& boundary_node::
  fluid_flow_velocity ()
  {
    return *this->fluid_flow_velocity_;
  }

  inline
  void boundary_node::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    delete this->fluid_flow_velocity_;
    this->fluid_flow_velocity_ = x;
  }

  inline
  ::common::units_decimal* boundary_node::
  fluid_flow_velocity_detach ()
  {
    ::common::units_decimal* r = this->fluid_flow_velocity_;
    this->fluid_flow_velocity_ = 0;
    return r;
  }

  inline
  bool boundary_node::
  variables_present () const
  {
    return this->variables_ != 0;
  }

  inline
  const ::variables::list_of_variables& boundary_node::
  variables () const
  {
    return *this->variables_;
  }

  inline
  ::variables::list_of_variables& boundary_node::
  variables ()
  {
    return *this->variables_;
  }

  inline
  void boundary_node::
  variables (::variables::list_of_variables* x)
  {
    delete this->variables_;
    this->variables_ = x;
  }

  inline
  ::variables::list_of_variables* boundary_node::
  variables_detach ()
  {
    ::variables::list_of_variables* r = this->variables_;
    this->variables_ = 0;
    return r;
  }

  inline
  bool boundary_node::
  boundary_conditions_present () const
  {
    return this->boundary_conditions_ != 0;
  }

  inline
  const ::vascular::boundary_conditions& boundary_node::
  boundary_conditions () const
  {
    return *this->boundary_conditions_;
  }

  inline
  ::vascular::boundary_conditions& boundary_node::
  boundary_conditions ()
  {
    return *this->boundary_conditions_;
  }

  inline
  void boundary_node::
  boundary_conditions (::vascular::boundary_conditions* x)
  {
    delete this->boundary_conditions_;
    this->boundary_conditions_ = x;
  }

  inline
  ::vascular::boundary_conditions* boundary_node::
  boundary_conditions_detach ()
  {
    ::vascular::boundary_conditions* r = this->boundary_conditions_;
    this->boundary_conditions_ = 0;
    return r;
  }

  inline
  bool boundary_node::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& boundary_node::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& boundary_node::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void boundary_node::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* boundary_node::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // list_of_boundary_nodes
  //

  inline
  const list_of_boundary_nodes::boundary_node_sequence& list_of_boundary_nodes::
  boundary_node () const
  {
    return this->boundary_node_;
  }

  inline
  list_of_boundary_nodes::boundary_node_sequence& list_of_boundary_nodes::
  boundary_node ()
  {
    return this->boundary_node_;
  }

  inline
  bool list_of_boundary_nodes::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& list_of_boundary_nodes::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& list_of_boundary_nodes::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void list_of_boundary_nodes::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* list_of_boundary_nodes::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // boundary_conditions
  //

  inline
  bool boundary_conditions::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void boundary_conditions::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned int boundary_conditions::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned int& boundary_conditions::
  ID ()
  {
    return this->ID_;
  }

  inline
  void boundary_conditions::
  ID (unsigned int x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  const boundary_conditions::boundary_condition_sequence& boundary_conditions::
  boundary_condition () const
  {
    return this->boundary_condition_;
  }

  inline
  boundary_conditions::boundary_condition_sequence& boundary_conditions::
  boundary_condition ()
  {
    return this->boundary_condition_;
  }

  inline
  bool boundary_conditions::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& boundary_conditions::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& boundary_conditions::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void boundary_conditions::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* boundary_conditions::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // boundary_type
  //

  inline
  boundary_type::
  boundary_type ()
  {
  }

  inline
  boundary_type::
  boundary_type (value_type v)
  {
    value_ = v;
  }

  inline
  void boundary_type::
  value (value_type v)
  {
    value_ = v;
  }

  // boundary_condition
  //

  inline
  bool boundary_condition::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void boundary_condition::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned int boundary_condition::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned int& boundary_condition::
  ID ()
  {
    return this->ID_;
  }

  inline
  void boundary_condition::
  ID (unsigned int x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  unsigned int boundary_condition::
  variable_ID () const
  {
    return this->variable_ID_;
  }

  inline
  unsigned int& boundary_condition::
  variable_ID ()
  {
    return this->variable_ID_;
  }

  inline
  void boundary_condition::
  variable_ID (unsigned int x)
  {
    this->variable_ID_ = x;
  }

  inline
  const ::vascular::boundary_type& boundary_condition::
  boundary_type () const
  {
    return this->boundary_type_;
  }

  inline
  ::vascular::boundary_type& boundary_condition::
  boundary_type ()
  {
    return this->boundary_type_;
  }

  inline
  void boundary_condition::
  boundary_type (const ::vascular::boundary_type& x)
  {
    this->boundary_type_ = x;
  }

  inline
  bool boundary_condition::
  value_present () const
  {
    return this->value_ != 0;
  }

  inline
  const ::common::units_decimal& boundary_condition::
  value () const
  {
    return *this->value_;
  }

  inline
  ::common::units_decimal& boundary_condition::
  value ()
  {
    return *this->value_;
  }

  inline
  void boundary_condition::
  value (::common::units_decimal* x)
  {
    delete this->value_;
    this->value_ = x;
  }

  inline
  ::common::units_decimal* boundary_condition::
  value_detach ()
  {
    ::common::units_decimal* r = this->value_;
    this->value_ = 0;
    return r;
  }

  inline
  bool boundary_condition::
  direction_present () const
  {
    return this->direction_present_;
  }

  inline
  void boundary_condition::
  direction_present (bool x)
  {
    this->direction_present_ = x;
  }

  inline
  const ::std::string& boundary_condition::
  direction () const
  {
    return this->direction_;
  }

  inline
  ::std::string& boundary_condition::
  direction ()
  {
    return this->direction_;
  }

  inline
  void boundary_condition::
  direction (const ::std::string& x)
  {
    this->direction_ = x;
    this->direction_present_ = true;
  }

  inline
  bool boundary_condition::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& boundary_condition::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& boundary_condition::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void boundary_condition::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* boundary_condition::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // vascular_segments
  //

  inline
  const vascular_segments::vascular_segment_sequence& vascular_segments::
  vascular_segment () const
  {
    return this->vascular_segment_;
  }

  inline
  vascular_segments::vascular_segment_sequence& vascular_segments::
  vascular_segment ()
  {
    return this->vascular_segment_;
  }

  inline
  bool vascular_segments::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& vascular_segments::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& vascular_segments::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void vascular_segments::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* vascular_segments::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // vascular_segment
  //

  inline
  const ::vascular::endpoint& vascular_segment::
  endpoint_1 () const
  {
    return *this->endpoint_1_;
  }

  inline
  ::vascular::endpoint& vascular_segment::
  endpoint_1 ()
  {
    return *this->endpoint_1_;
  }

  inline
  void vascular_segment::
  endpoint_1 (::vascular::endpoint* x)
  {
    delete this->endpoint_1_;
    this->endpoint_1_ = x;
  }

  inline
  ::vascular::endpoint* vascular_segment::
  endpoint_1_detach ()
  {
    ::vascular::endpoint* r = this->endpoint_1_;
    this->endpoint_1_ = 0;
    return r;
  }

  inline
  const ::vascular::endpoint& vascular_segment::
  endpoint_2 () const
  {
    return *this->endpoint_2_;
  }

  inline
  ::vascular::endpoint& vascular_segment::
  endpoint_2 ()
  {
    return *this->endpoint_2_;
  }

  inline
  void vascular_segment::
  endpoint_2 (::vascular::endpoint* x)
  {
    delete this->endpoint_2_;
    this->endpoint_2_ = x;
  }

  inline
  ::vascular::endpoint* vascular_segment::
  endpoint_2_detach ()
  {
    ::vascular::endpoint* r = this->endpoint_2_;
    this->endpoint_2_ = 0;
    return r;
  }

  inline
  bool vascular_segment::
  surface_present () const
  {
    return this->surface_ != 0;
  }

  inline
  const ::vascular::surface_properties& vascular_segment::
  surface () const
  {
    return *this->surface_;
  }

  inline
  ::vascular::surface_properties& vascular_segment::
  surface ()
  {
    return *this->surface_;
  }

  inline
  void vascular_segment::
  surface (::vascular::surface_properties* x)
  {
    delete this->surface_;
    this->surface_ = x;
  }

  inline
  ::vascular::surface_properties* vascular_segment::
  surface_detach ()
  {
    ::vascular::surface_properties* r = this->surface_;
    this->surface_ = 0;
    return r;
  }

  inline
  bool vascular_segment::
  interior_present () const
  {
    return this->interior_ != 0;
  }

  inline
  const ::vascular::volume_properties& vascular_segment::
  interior () const
  {
    return *this->interior_;
  }

  inline
  ::vascular::volume_properties& vascular_segment::
  interior ()
  {
    return *this->interior_;
  }

  inline
  void vascular_segment::
  interior (::vascular::volume_properties* x)
  {
    delete this->interior_;
    this->interior_ = x;
  }

  inline
  ::vascular::volume_properties* vascular_segment::
  interior_detach ()
  {
    ::vascular::volume_properties* r = this->interior_;
    this->interior_ = 0;
    return r;
  }

  inline
  bool vascular_segment::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& vascular_segment::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& vascular_segment::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void vascular_segment::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* vascular_segment::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // endpoint
  //

  inline
  bool endpoint::
  node_ID_present () const
  {
    return this->node_ID_present_;
  }

  inline
  void endpoint::
  node_ID_present (bool x)
  {
    this->node_ID_present_ = x;
  }

  inline
  unsigned int endpoint::
  node_ID () const
  {
    return this->node_ID_;
  }

  inline
  unsigned int& endpoint::
  node_ID ()
  {
    return this->node_ID_;
  }

  inline
  void endpoint::
  node_ID (unsigned int x)
  {
    this->node_ID_ = x;
    this->node_ID_present_ = true;
  }

  inline
  bool endpoint::
  lengths_present () const
  {
    return this->lengths_ != 0;
  }

  inline
  const ::phenotype_common::lengths& endpoint::
  lengths () const
  {
    return *this->lengths_;
  }

  inline
  ::phenotype_common::lengths& endpoint::
  lengths ()
  {
    return *this->lengths_;
  }

  inline
  void endpoint::
  lengths (::phenotype_common::lengths* x)
  {
    delete this->lengths_;
    this->lengths_ = x;
  }

  inline
  ::phenotype_common::lengths* endpoint::
  lengths_detach ()
  {
    ::phenotype_common::lengths* r = this->lengths_;
    this->lengths_ = 0;
    return r;
  }

  inline
  bool endpoint::
  areas_present () const
  {
    return this->areas_ != 0;
  }

  inline
  const ::phenotype_common::areas_2D& endpoint::
  areas () const
  {
    return *this->areas_;
  }

  inline
  ::phenotype_common::areas_2D& endpoint::
  areas ()
  {
    return *this->areas_;
  }

  inline
  void endpoint::
  areas (::phenotype_common::areas_2D* x)
  {
    delete this->areas_;
    this->areas_ = x;
  }

  inline
  ::phenotype_common::areas_2D* endpoint::
  areas_detach ()
  {
    ::phenotype_common::areas_2D* r = this->areas_;
    this->areas_ = 0;
    return r;
  }

  inline
  bool endpoint::
  fluid_flow_velocity_present () const
  {
    return this->fluid_flow_velocity_ != 0;
  }

  inline
  const ::common::units_decimal& endpoint::
  fluid_flow_velocity () const
  {
    return *this->fluid_flow_velocity_;
  }

  inline
  ::common::units_decimal& endpoint::
  fluid_flow_velocity ()
  {
    return *this->fluid_flow_velocity_;
  }

  inline
  void endpoint::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    delete this->fluid_flow_velocity_;
    this->fluid_flow_velocity_ = x;
  }

  inline
  ::common::units_decimal* endpoint::
  fluid_flow_velocity_detach ()
  {
    ::common::units_decimal* r = this->fluid_flow_velocity_;
    this->fluid_flow_velocity_ = 0;
    return r;
  }

  inline
  bool endpoint::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& endpoint::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& endpoint::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void endpoint::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* endpoint::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // surface_properties
  //

  inline
  bool surface_properties::
  areas_present () const
  {
    return this->areas_ != 0;
  }

  inline
  const ::phenotype_common::areas_3D& surface_properties::
  areas () const
  {
    return *this->areas_;
  }

  inline
  ::phenotype_common::areas_3D& surface_properties::
  areas ()
  {
    return *this->areas_;
  }

  inline
  void surface_properties::
  areas (::phenotype_common::areas_3D* x)
  {
    delete this->areas_;
    this->areas_ = x;
  }

  inline
  ::phenotype_common::areas_3D* surface_properties::
  areas_detach ()
  {
    ::phenotype_common::areas_3D* r = this->areas_;
    this->areas_ = 0;
    return r;
  }

  inline
  bool surface_properties::
  fluid_flow_velocity_present () const
  {
    return this->fluid_flow_velocity_ != 0;
  }

  inline
  const ::common::units_decimal& surface_properties::
  fluid_flow_velocity () const
  {
    return *this->fluid_flow_velocity_;
  }

  inline
  ::common::units_decimal& surface_properties::
  fluid_flow_velocity ()
  {
    return *this->fluid_flow_velocity_;
  }

  inline
  void surface_properties::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    delete this->fluid_flow_velocity_;
    this->fluid_flow_velocity_ = x;
  }

  inline
  ::common::units_decimal* surface_properties::
  fluid_flow_velocity_detach ()
  {
    ::common::units_decimal* r = this->fluid_flow_velocity_;
    this->fluid_flow_velocity_ = 0;
    return r;
  }

  inline
  bool surface_properties::
  mechanics_present () const
  {
    return this->mechanics_ != 0;
  }

  inline
  const ::phenotype_common::mechanics& surface_properties::
  mechanics () const
  {
    return *this->mechanics_;
  }

  inline
  ::phenotype_common::mechanics& surface_properties::
  mechanics ()
  {
    return *this->mechanics_;
  }

  inline
  void surface_properties::
  mechanics (::phenotype_common::mechanics* x)
  {
    delete this->mechanics_;
    this->mechanics_ = x;
  }

  inline
  ::phenotype_common::mechanics* surface_properties::
  mechanics_detach ()
  {
    ::phenotype_common::mechanics* r = this->mechanics_;
    this->mechanics_ = 0;
    return r;
  }

  inline
  bool surface_properties::
  permeability_present () const
  {
    return this->permeability_ != 0;
  }

  inline
  const ::common::units_decimal& surface_properties::
  permeability () const
  {
    return *this->permeability_;
  }

  inline
  ::common::units_decimal& surface_properties::
  permeability ()
  {
    return *this->permeability_;
  }

  inline
  void surface_properties::
  permeability (::common::units_decimal* x)
  {
    delete this->permeability_;
    this->permeability_ = x;
  }

  inline
  ::common::units_decimal* surface_properties::
  permeability_detach ()
  {
    ::common::units_decimal* r = this->permeability_;
    this->permeability_ = 0;
    return r;
  }

  inline
  bool surface_properties::
  surface_proteins_present () const
  {
    return this->surface_proteins_ != 0;
  }

  inline
  const ::variables::list_of_variables& surface_properties::
  surface_proteins () const
  {
    return *this->surface_proteins_;
  }

  inline
  ::variables::list_of_variables& surface_properties::
  surface_proteins ()
  {
    return *this->surface_proteins_;
  }

  inline
  void surface_properties::
  surface_proteins (::variables::list_of_variables* x)
  {
    delete this->surface_proteins_;
    this->surface_proteins_ = x;
  }

  inline
  ::variables::list_of_variables* surface_properties::
  surface_proteins_detach ()
  {
    ::variables::list_of_variables* r = this->surface_proteins_;
    this->surface_proteins_ = 0;
    return r;
  }

  inline
  bool surface_properties::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& surface_properties::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& surface_properties::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void surface_properties::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* surface_properties::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // volume_properties
  //

  inline
  bool volume_properties::
  fluid_flow_velocity_present () const
  {
    return this->fluid_flow_velocity_ != 0;
  }

  inline
  const ::common::units_decimal& volume_properties::
  fluid_flow_velocity () const
  {
    return *this->fluid_flow_velocity_;
  }

  inline
  ::common::units_decimal& volume_properties::
  fluid_flow_velocity ()
  {
    return *this->fluid_flow_velocity_;
  }

  inline
  void volume_properties::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    delete this->fluid_flow_velocity_;
    this->fluid_flow_velocity_ = x;
  }

  inline
  ::common::units_decimal* volume_properties::
  fluid_flow_velocity_detach ()
  {
    ::common::units_decimal* r = this->fluid_flow_velocity_;
    this->fluid_flow_velocity_ = 0;
    return r;
  }

  inline
  bool volume_properties::
  variables_present () const
  {
    return this->variables_ != 0;
  }

  inline
  const ::variables::list_of_variables& volume_properties::
  variables () const
  {
    return *this->variables_;
  }

  inline
  ::variables::list_of_variables& volume_properties::
  variables ()
  {
    return *this->variables_;
  }

  inline
  void volume_properties::
  variables (::variables::list_of_variables* x)
  {
    delete this->variables_;
    this->variables_ = x;
  }

  inline
  ::variables::list_of_variables* volume_properties::
  variables_detach ()
  {
    ::variables::list_of_variables* r = this->variables_;
    this->variables_ = 0;
    return r;
  }

  inline
  bool volume_properties::
  volumes_present () const
  {
    return this->volumes_ != 0;
  }

  inline
  const ::phenotype_common::volumes& volume_properties::
  volumes () const
  {
    return *this->volumes_;
  }

  inline
  ::phenotype_common::volumes& volume_properties::
  volumes ()
  {
    return *this->volumes_;
  }

  inline
  void volume_properties::
  volumes (::phenotype_common::volumes* x)
  {
    delete this->volumes_;
    this->volumes_ = x;
  }

  inline
  ::phenotype_common::volumes* volume_properties::
  volumes_detach ()
  {
    ::phenotype_common::volumes* r = this->volumes_;
    this->volumes_ = 0;
    return r;
  }

  inline
  bool volume_properties::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& volume_properties::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& volume_properties::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void volume_properties::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* volume_properties::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // vascular_network
  //

  inline
  bool vascular_network::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void vascular_network::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned int vascular_network::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned int& vascular_network::
  ID ()
  {
    return this->ID_;
  }

  inline
  void vascular_network::
  ID (unsigned int x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  bool vascular_network::
  keywords_present () const
  {
    return this->keywords_present_;
  }

  inline
  void vascular_network::
  keywords_present (bool x)
  {
    this->keywords_present_ = x;
  }

  inline
  const ::std::string& vascular_network::
  keywords () const
  {
    return this->keywords_;
  }

  inline
  ::std::string& vascular_network::
  keywords ()
  {
    return this->keywords_;
  }

  inline
  void vascular_network::
  keywords (const ::std::string& x)
  {
    this->keywords_ = x;
    this->keywords_present_ = true;
  }

  inline
  bool vascular_network::
  name_present () const
  {
    return this->name_present_;
  }

  inline
  void vascular_network::
  name_present (bool x)
  {
    this->name_present_ = x;
  }

  inline
  const ::std::string& vascular_network::
  name () const
  {
    return this->name_;
  }

  inline
  ::std::string& vascular_network::
  name ()
  {
    return this->name_;
  }

  inline
  void vascular_network::
  name (const ::std::string& x)
  {
    this->name_ = x;
    this->name_present_ = true;
  }

  inline
  bool vascular_network::
  vascular_nodes_present () const
  {
    return this->vascular_nodes_ != 0;
  }

  inline
  const ::vascular::list_of_vascular_nodes& vascular_network::
  vascular_nodes () const
  {
    return *this->vascular_nodes_;
  }

  inline
  ::vascular::list_of_vascular_nodes& vascular_network::
  vascular_nodes ()
  {
    return *this->vascular_nodes_;
  }

  inline
  void vascular_network::
  vascular_nodes (::vascular::list_of_vascular_nodes* x)
  {
    delete this->vascular_nodes_;
    this->vascular_nodes_ = x;
  }

  inline
  ::vascular::list_of_vascular_nodes* vascular_network::
  vascular_nodes_detach ()
  {
    ::vascular::list_of_vascular_nodes* r = this->vascular_nodes_;
    this->vascular_nodes_ = 0;
    return r;
  }

  inline
  bool vascular_network::
  boundary_nodes_present () const
  {
    return this->boundary_nodes_ != 0;
  }

  inline
  const ::vascular::list_of_boundary_nodes& vascular_network::
  boundary_nodes () const
  {
    return *this->boundary_nodes_;
  }

  inline
  ::vascular::list_of_boundary_nodes& vascular_network::
  boundary_nodes ()
  {
    return *this->boundary_nodes_;
  }

  inline
  void vascular_network::
  boundary_nodes (::vascular::list_of_boundary_nodes* x)
  {
    delete this->boundary_nodes_;
    this->boundary_nodes_ = x;
  }

  inline
  ::vascular::list_of_boundary_nodes* vascular_network::
  boundary_nodes_detach ()
  {
    ::vascular::list_of_boundary_nodes* r = this->boundary_nodes_;
    this->boundary_nodes_ = 0;
    return r;
  }

  inline
  bool vascular_network::
  vascular_segments_present () const
  {
    return this->vascular_segments_ != 0;
  }

  inline
  const ::vascular::vascular_segments& vascular_network::
  vascular_segments () const
  {
    return *this->vascular_segments_;
  }

  inline
  ::vascular::vascular_segments& vascular_network::
  vascular_segments ()
  {
    return *this->vascular_segments_;
  }

  inline
  void vascular_network::
  vascular_segments (::vascular::vascular_segments* x)
  {
    delete this->vascular_segments_;
    this->vascular_segments_ = x;
  }

  inline
  ::vascular::vascular_segments* vascular_network::
  vascular_segments_detach ()
  {
    ::vascular::vascular_segments* r = this->vascular_segments_;
    this->vascular_segments_ = 0;
    return r;
  }

  inline
  bool vascular_network::
  voxels_present () const
  {
    return this->voxels_ != 0;
  }

  inline
  const ::mesh::int_list_xpath& vascular_network::
  voxels () const
  {
    return *this->voxels_;
  }

  inline
  ::mesh::int_list_xpath& vascular_network::
  voxels ()
  {
    return *this->voxels_;
  }

  inline
  void vascular_network::
  voxels (::mesh::int_list_xpath* x)
  {
    delete this->voxels_;
    this->voxels_ = x;
  }

  inline
  ::mesh::int_list_xpath* vascular_network::
  voxels_detach ()
  {
    ::mesh::int_list_xpath* r = this->voxels_;
    this->voxels_ = 0;
    return r;
  }

  inline
  bool vascular_network::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& vascular_network::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& vascular_network::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void vascular_network::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* vascular_network::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // VASCULAR_IPP
