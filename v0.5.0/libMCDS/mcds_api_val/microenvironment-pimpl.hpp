// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MICROENVIRONMENT_PIMPL_HPP
#define MICROENVIRONMENT_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define MICROENVIRONMENT_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "microenvironment-pskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-pimpl.hpp"

#include "mesh-pimpl.hpp"

#include "basement_membrane-pimpl.hpp"

#include "vascular-pimpl.hpp"

#include "variables-pimpl.hpp"

namespace microenvironment
{
  class domain_pimpl: public domain_pskel
  {
    public:
    domain_pimpl (bool = false);

    ~domain_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    name (const ::std::string&);

    // Elements.
    //
    virtual void
    variables (::variables::list_of_variables*);

    virtual void
    experimental_condition (::variables::experimental_conditions*);

    virtual void
    mesh (::mesh::mesh*);

    virtual void
    data (::variables::data*);

    virtual void
    custom (::common::custom*);

    virtual ::microenvironment::domain*
    post_domain ();

    public:
    void
    pre_impl (::microenvironment::domain*);

    public:
    struct domain_pimpl_state
    {
      ::microenvironment::domain* domain_;
    };

    domain_pimpl_state domain_pimpl_state_;
    bool domain_pimpl_base_;
  };

  class microenvironment_pimpl: public microenvironment_pskel
  {
    public:
    microenvironment_pimpl (bool = false);

    ~microenvironment_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    domain (::microenvironment::domain*);

    virtual void
    vascular_network (::vascular::vascular_network*);

    virtual void
    basement_membrane (::basement::basement_membrane*);

    virtual void
    custom (::common::custom*);

    virtual ::microenvironment::microenvironment*
    post_microenvironment ();

    public:
    void
    pre_impl (::microenvironment::microenvironment*);

    public:
    struct microenvironment_pimpl_state
    {
      ::microenvironment::microenvironment* microenvironment_;
    };

    microenvironment_pimpl_state microenvironment_pimpl_state_;
    bool microenvironment_pimpl_base_;
  };
}

#ifdef MICROENVIRONMENT_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // MICROENVIRONMENT_PIMPL_HPP
