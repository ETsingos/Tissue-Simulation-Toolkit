// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "common-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace common
{
  // custom_pskel
  //

  const char* custom_pskel::
  _static_type ()
  {
    return "custom common";
  }

  const char* custom_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // double_list_pskel
  //

  void double_list_pskel::
  item (double x)
  {
    if (this->double_list_impl_)
      this->double_list_impl_->item (x);
  }

  void double_list_pskel::
  _reset ()
  {
    list_base::_reset ();

    if (this->_xsde_item_)
      this->_xsde_item_->_reset ();
  }

  void double_list_pskel::
  _xsde_parse_item (const ::xsde::cxx::ro_string& v)
  {
    if (this->_xsde_item_)
    {
      ::xsde::cxx::parser::context& ctx = this->_context ();

      this->_xsde_item_->pre ();
      this->_xsde_item_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->_xsde_item_->_characters (v);

      if (!ctx.error_type ())
        this->_xsde_item_->_post_impl ();

      if (!ctx.error_type ())
      {
        double tmp = this->_xsde_item_->post_double ();

        this->item (tmp);
      }
    }
  }

  const char* double_list_pskel::
  _static_type ()
  {
    return "double_list common";
  }

  const char* double_list_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // unsigned_int_list_pskel
  //

  void unsigned_int_list_pskel::
  item (unsigned int x)
  {
    if (this->unsigned_int_list_impl_)
      this->unsigned_int_list_impl_->item (x);
  }

  void unsigned_int_list_pskel::
  _reset ()
  {
    list_base::_reset ();

    if (this->_xsde_item_)
      this->_xsde_item_->_reset ();
  }

  void unsigned_int_list_pskel::
  _xsde_parse_item (const ::xsde::cxx::ro_string& v)
  {
    if (this->_xsde_item_)
    {
      ::xsde::cxx::parser::context& ctx = this->_context ();

      this->_xsde_item_->pre ();
      this->_xsde_item_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->_xsde_item_->_characters (v);

      if (!ctx.error_type ())
        this->_xsde_item_->_post_impl ();

      if (!ctx.error_type ())
      {
        unsigned int tmp = this->_xsde_item_->post_unsigned_int ();

        this->item (tmp);
      }
    }
  }

  const char* unsigned_int_list_pskel::
  _static_type ()
  {
    return "unsigned_int_list common";
  }

  const char* unsigned_int_list_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // two_doubles_pskel
  //

  const char* two_doubles_pskel::
  _static_type ()
  {
    return "two_doubles common";
  }

  const char* two_doubles_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_two_doubles_pskel_inheritance_map_entry_ (
    two_doubles_pskel::_static_type (),
    ::common::double_list_pskel::_static_type ());

  ::common::double_list* two_doubles_pskel::
  post_double_list ()
  {
    assert (this->double_list_impl_);
    return this->double_list_impl_->post_double_list ();
  }

  // units_double_list_pskel
  //

  void units_double_list_pskel::
  units (const ::std::string& x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->units (x);
  }

  void units_double_list_pskel::
  measurement_type (const ::std::string& x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->measurement_type (x);
  }

  void units_double_list_pskel::
  uncertainty (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->uncertainty (x);
  }

  void units_double_list_pskel::
  negative_uncertainty (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->negative_uncertainty (x);
  }

  void units_double_list_pskel::
  positive_uncertainty (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->positive_uncertainty (x);
  }

  void units_double_list_pskel::
  uncertainty_percentage (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->uncertainty_percentage (x);
  }

  void units_double_list_pskel::
  negative_uncertainty_percentage (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->negative_uncertainty_percentage (x);
  }

  void units_double_list_pskel::
  positive_uncertainty_percentage (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->positive_uncertainty_percentage (x);
  }

  void units_double_list_pskel::
  median (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->median (x);
  }

  void units_double_list_pskel::
  standard_deviation (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->standard_deviation (x);
  }

  void units_double_list_pskel::
  interquartile_range (::common::two_doubles* x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->interquartile_range (x);
  }

  void units_double_list_pskel::
  range (::common::two_doubles* x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->range (x);
  }

  void units_double_list_pskel::
  min (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->min (x);
  }

  void units_double_list_pskel::
  max (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->max (x);
  }

  void units_double_list_pskel::
  standard_error (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->standard_error (x);
  }

  void units_double_list_pskel::
  standard_error_of_the_mean (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->standard_error_of_the_mean (x);
  }

  void units_double_list_pskel::
  number_obs (int x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->number_obs (x);
  }

  void units_double_list_pskel::
  skewnesss (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->skewnesss (x);
  }

  void units_double_list_pskel::
  kurtosis (double x)
  {
    if (this->units_double_list_impl_)
      this->units_double_list_impl_->kurtosis (x);
  }

  void units_double_list_pskel::
  _reset ()
  {
    typedef ::common::double_list_pskel base;
    base::_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    if (this->measurement_type_parser_)
      this->measurement_type_parser_->_reset ();

    if (this->uncertainty_parser_)
      this->uncertainty_parser_->_reset ();

    if (this->negative_uncertainty_parser_)
      this->negative_uncertainty_parser_->_reset ();

    if (this->positive_uncertainty_parser_)
      this->positive_uncertainty_parser_->_reset ();

    if (this->uncertainty_percentage_parser_)
      this->uncertainty_percentage_parser_->_reset ();

    if (this->negative_uncertainty_percentage_parser_)
      this->negative_uncertainty_percentage_parser_->_reset ();

    if (this->positive_uncertainty_percentage_parser_)
      this->positive_uncertainty_percentage_parser_->_reset ();

    if (this->median_parser_)
      this->median_parser_->_reset ();

    if (this->standard_deviation_parser_)
      this->standard_deviation_parser_->_reset ();

    if (this->interquartile_range_parser_)
      this->interquartile_range_parser_->_reset ();

    if (this->range_parser_)
      this->range_parser_->_reset ();

    if (this->min_parser_)
      this->min_parser_->_reset ();

    if (this->max_parser_)
      this->max_parser_->_reset ();

    if (this->standard_error_parser_)
      this->standard_error_parser_->_reset ();

    if (this->standard_error_of_the_mean_parser_)
      this->standard_error_of_the_mean_parser_->_reset ();

    if (this->number_obs_parser_)
      this->number_obs_parser_->_reset ();

    if (this->skewnesss_parser_)
      this->skewnesss_parser_->_reset ();

    if (this->kurtosis_parser_)
      this->kurtosis_parser_->_reset ();
  }

  const char* units_double_list_pskel::
  _static_type ()
  {
    return "units_double_list common";
  }

  const char* units_double_list_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_units_double_list_pskel_inheritance_map_entry_ (
    units_double_list_pskel::_static_type (),
    ::common::double_list_pskel::_static_type ());

  ::common::double_list* units_double_list_pskel::
  post_double_list ()
  {
    assert (this->double_list_impl_);
    return this->double_list_impl_->post_double_list ();
  }

  // delimited_list_pskel
  //

  void delimited_list_pskel::
  delimiter (const ::std::string& x)
  {
    if (this->delimited_list_impl_)
      this->delimited_list_impl_->delimiter (x);
  }

  void delimited_list_pskel::
  _reset ()
  {
    typedef ::xml_schema::string_pskel base;
    base::_reset ();

    if (this->delimiter_parser_)
      this->delimiter_parser_->_reset ();
  }

  const char* delimited_list_pskel::
  _static_type ()
  {
    return "delimited_list common";
  }

  const char* delimited_list_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_delimited_list_pskel_inheritance_map_entry_ (
    delimited_list_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string delimited_list_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  // units_delimited_list_pskel
  //

  void units_delimited_list_pskel::
  units (const ::std::string& x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->units (x);
  }

  void units_delimited_list_pskel::
  measurement_type (const ::std::string& x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->measurement_type (x);
  }

  void units_delimited_list_pskel::
  uncertainty (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->uncertainty (x);
  }

  void units_delimited_list_pskel::
  negative_uncertainty (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->negative_uncertainty (x);
  }

  void units_delimited_list_pskel::
  positive_uncertainty (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->positive_uncertainty (x);
  }

  void units_delimited_list_pskel::
  uncertainty_percentage (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->uncertainty_percentage (x);
  }

  void units_delimited_list_pskel::
  negative_uncertainty_percentage (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->negative_uncertainty_percentage (x);
  }

  void units_delimited_list_pskel::
  positive_uncertainty_percentage (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->positive_uncertainty_percentage (x);
  }

  void units_delimited_list_pskel::
  median (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->median (x);
  }

  void units_delimited_list_pskel::
  standard_deviation (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->standard_deviation (x);
  }

  void units_delimited_list_pskel::
  interquartile_range (::common::two_doubles* x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->interquartile_range (x);
  }

  void units_delimited_list_pskel::
  range (::common::two_doubles* x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->range (x);
  }

  void units_delimited_list_pskel::
  min (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->min (x);
  }

  void units_delimited_list_pskel::
  max (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->max (x);
  }

  void units_delimited_list_pskel::
  standard_error (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->standard_error (x);
  }

  void units_delimited_list_pskel::
  standard_error_of_the_mean (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->standard_error_of_the_mean (x);
  }

  void units_delimited_list_pskel::
  number_obs (int x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->number_obs (x);
  }

  void units_delimited_list_pskel::
  skewnesss (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->skewnesss (x);
  }

  void units_delimited_list_pskel::
  kurtosis (double x)
  {
    if (this->units_delimited_list_impl_)
      this->units_delimited_list_impl_->kurtosis (x);
  }

  void units_delimited_list_pskel::
  _reset ()
  {
    typedef ::common::delimited_list_pskel base;
    base::_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    if (this->measurement_type_parser_)
      this->measurement_type_parser_->_reset ();

    if (this->uncertainty_parser_)
      this->uncertainty_parser_->_reset ();

    if (this->negative_uncertainty_parser_)
      this->negative_uncertainty_parser_->_reset ();

    if (this->positive_uncertainty_parser_)
      this->positive_uncertainty_parser_->_reset ();

    if (this->uncertainty_percentage_parser_)
      this->uncertainty_percentage_parser_->_reset ();

    if (this->negative_uncertainty_percentage_parser_)
      this->negative_uncertainty_percentage_parser_->_reset ();

    if (this->positive_uncertainty_percentage_parser_)
      this->positive_uncertainty_percentage_parser_->_reset ();

    if (this->median_parser_)
      this->median_parser_->_reset ();

    if (this->standard_deviation_parser_)
      this->standard_deviation_parser_->_reset ();

    if (this->interquartile_range_parser_)
      this->interquartile_range_parser_->_reset ();

    if (this->range_parser_)
      this->range_parser_->_reset ();

    if (this->min_parser_)
      this->min_parser_->_reset ();

    if (this->max_parser_)
      this->max_parser_->_reset ();

    if (this->standard_error_parser_)
      this->standard_error_parser_->_reset ();

    if (this->standard_error_of_the_mean_parser_)
      this->standard_error_of_the_mean_parser_->_reset ();

    if (this->number_obs_parser_)
      this->number_obs_parser_->_reset ();

    if (this->skewnesss_parser_)
      this->skewnesss_parser_->_reset ();

    if (this->kurtosis_parser_)
      this->kurtosis_parser_->_reset ();
  }

  const char* units_delimited_list_pskel::
  _static_type ()
  {
    return "units_delimited_list common";
  }

  const char* units_delimited_list_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_units_delimited_list_pskel_inheritance_map_entry_ (
    units_delimited_list_pskel::_static_type (),
    ::common::delimited_list_pskel::_static_type ());

  ::common::delimited_list units_delimited_list_pskel::
  post_delimited_list ()
  {
    assert (this->delimited_list_impl_);
    return this->delimited_list_impl_->post_delimited_list ();
  }

  // units_decimal_pskel
  //

  void units_decimal_pskel::
  units (const ::std::string& x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->units (x);
  }

  void units_decimal_pskel::
  measurement_type (const ::std::string& x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->measurement_type (x);
  }

  void units_decimal_pskel::
  uncertainty (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->uncertainty (x);
  }

  void units_decimal_pskel::
  negative_uncertainty (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->negative_uncertainty (x);
  }

  void units_decimal_pskel::
  positive_uncertainty (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->positive_uncertainty (x);
  }

  void units_decimal_pskel::
  uncertainty_percentage (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->uncertainty_percentage (x);
  }

  void units_decimal_pskel::
  negative_uncertainty_percentage (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->negative_uncertainty_percentage (x);
  }

  void units_decimal_pskel::
  positive_uncertainty_percentage (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->positive_uncertainty_percentage (x);
  }

  void units_decimal_pskel::
  median (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->median (x);
  }

  void units_decimal_pskel::
  standard_deviation (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->standard_deviation (x);
  }

  void units_decimal_pskel::
  interquartile_range (::common::two_doubles* x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->interquartile_range (x);
  }

  void units_decimal_pskel::
  range (::common::two_doubles* x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->range (x);
  }

  void units_decimal_pskel::
  min (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->min (x);
  }

  void units_decimal_pskel::
  max (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->max (x);
  }

  void units_decimal_pskel::
  standard_error (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->standard_error (x);
  }

  void units_decimal_pskel::
  standard_error_of_the_mean (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->standard_error_of_the_mean (x);
  }

  void units_decimal_pskel::
  number_obs (int x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->number_obs (x);
  }

  void units_decimal_pskel::
  skewnesss (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->skewnesss (x);
  }

  void units_decimal_pskel::
  kurtosis (double x)
  {
    if (this->units_decimal_impl_)
      this->units_decimal_impl_->kurtosis (x);
  }

  void units_decimal_pskel::
  _reset ()
  {
    typedef ::xml_schema::double_pskel base;
    base::_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    if (this->measurement_type_parser_)
      this->measurement_type_parser_->_reset ();

    if (this->uncertainty_parser_)
      this->uncertainty_parser_->_reset ();

    if (this->negative_uncertainty_parser_)
      this->negative_uncertainty_parser_->_reset ();

    if (this->positive_uncertainty_parser_)
      this->positive_uncertainty_parser_->_reset ();

    if (this->uncertainty_percentage_parser_)
      this->uncertainty_percentage_parser_->_reset ();

    if (this->negative_uncertainty_percentage_parser_)
      this->negative_uncertainty_percentage_parser_->_reset ();

    if (this->positive_uncertainty_percentage_parser_)
      this->positive_uncertainty_percentage_parser_->_reset ();

    if (this->median_parser_)
      this->median_parser_->_reset ();

    if (this->standard_deviation_parser_)
      this->standard_deviation_parser_->_reset ();

    if (this->interquartile_range_parser_)
      this->interquartile_range_parser_->_reset ();

    if (this->range_parser_)
      this->range_parser_->_reset ();

    if (this->min_parser_)
      this->min_parser_->_reset ();

    if (this->max_parser_)
      this->max_parser_->_reset ();

    if (this->standard_error_parser_)
      this->standard_error_parser_->_reset ();

    if (this->standard_error_of_the_mean_parser_)
      this->standard_error_of_the_mean_parser_->_reset ();

    if (this->number_obs_parser_)
      this->number_obs_parser_->_reset ();

    if (this->skewnesss_parser_)
      this->skewnesss_parser_->_reset ();

    if (this->kurtosis_parser_)
      this->kurtosis_parser_->_reset ();
  }

  const char* units_decimal_pskel::
  _static_type ()
  {
    return "units_decimal common";
  }

  const char* units_decimal_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_units_decimal_pskel_inheritance_map_entry_ (
    units_decimal_pskel::_static_type (),
    ::xml_schema::double_pskel::_static_type ());

  double units_decimal_pskel::
  post_double ()
  {
    assert (this->double_impl_);
    return this->double_impl_->post_double ();
  }

  // units_decimal_nonnegative_pskel
  //

  const char* units_decimal_nonnegative_pskel::
  _static_type ()
  {
    return "units_decimal_nonnegative common";
  }

  const char* units_decimal_nonnegative_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_units_decimal_nonnegative_pskel_inheritance_map_entry_ (
    units_decimal_nonnegative_pskel::_static_type (),
    ::common::units_decimal_pskel::_static_type ());

  ::common::units_decimal* units_decimal_nonnegative_pskel::
  post_units_decimal ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->post_units_decimal ();
  }

  // units_unsignedShort_pskel
  //

  void units_unsignedShort_pskel::
  measurement_type (const ::std::string& x)
  {
    if (this->units_unsignedShort_impl_)
      this->units_unsignedShort_impl_->measurement_type (x);
  }

  void units_unsignedShort_pskel::
  units (const ::std::string& x)
  {
    if (this->units_unsignedShort_impl_)
      this->units_unsignedShort_impl_->units (x);
  }

  void units_unsignedShort_pskel::
  _reset ()
  {
    typedef ::xml_schema::unsigned_short_pskel base;
    base::_reset ();

    if (this->measurement_type_parser_)
      this->measurement_type_parser_->_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();
  }

  const char* units_unsignedShort_pskel::
  _static_type ()
  {
    return "units_unsignedShort common";
  }

  const char* units_unsignedShort_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_units_unsignedShort_pskel_inheritance_map_entry_ (
    units_unsignedShort_pskel::_static_type (),
    ::xml_schema::unsigned_short_pskel::_static_type ());

  unsigned short units_unsignedShort_pskel::
  post_unsigned_short ()
  {
    assert (this->unsigned_short_impl_);
    return this->unsigned_short_impl_->post_unsigned_short ();
  }

  // units_boolean_pskel
  //

  void units_boolean_pskel::
  units (const ::std::string& x)
  {
    if (this->units_boolean_impl_)
      this->units_boolean_impl_->units (x);
  }

  void units_boolean_pskel::
  _reset ()
  {
    typedef ::xml_schema::boolean_pskel base;
    base::_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();
  }

  const char* units_boolean_pskel::
  _static_type ()
  {
    return "units_boolean common";
  }

  const char* units_boolean_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_units_boolean_pskel_inheritance_map_entry_ (
    units_boolean_pskel::_static_type (),
    ::xml_schema::boolean_pskel::_static_type ());

  bool units_boolean_pskel::
  post_boolean ()
  {
    assert (this->boolean_impl_);
    return this->boolean_impl_->post_boolean ();
  }

  // fraction_pskel
  //

  const char* fraction_pskel::
  _static_type ()
  {
    return "fraction common";
  }

  const char* fraction_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_fraction_pskel_inheritance_map_entry_ (
    fraction_pskel::_static_type (),
    ::xml_schema::double_pskel::_static_type ());

  double fraction_pskel::
  post_double ()
  {
    assert (this->double_impl_);
    return this->double_impl_->post_double ();
  }

  // units_fraction_pskel
  //

  const char* units_fraction_pskel::
  _static_type ()
  {
    return "units_fraction common";
  }

  const char* units_fraction_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_units_fraction_pskel_inheritance_map_entry_ (
    units_fraction_pskel::_static_type (),
    ::common::units_decimal_pskel::_static_type ());

  ::common::units_decimal* units_fraction_pskel::
  post_units_decimal ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->post_units_decimal ();
  }

  // units_string_pskel
  //

  void units_string_pskel::
  units (const ::std::string& x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->units (x);
  }

  void units_string_pskel::
  measurement_type (const ::std::string& x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->measurement_type (x);
  }

  void units_string_pskel::
  uncertainty (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->uncertainty (x);
  }

  void units_string_pskel::
  negative_uncertainty (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->negative_uncertainty (x);
  }

  void units_string_pskel::
  positive_uncertainty (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->positive_uncertainty (x);
  }

  void units_string_pskel::
  uncertainty_percentage (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->uncertainty_percentage (x);
  }

  void units_string_pskel::
  negative_uncertainty_percentage (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->negative_uncertainty_percentage (x);
  }

  void units_string_pskel::
  positive_uncertainty_percentage (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->positive_uncertainty_percentage (x);
  }

  void units_string_pskel::
  median (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->median (x);
  }

  void units_string_pskel::
  standard_deviation (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->standard_deviation (x);
  }

  void units_string_pskel::
  interquartile_range (::common::two_doubles* x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->interquartile_range (x);
  }

  void units_string_pskel::
  range (::common::two_doubles* x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->range (x);
  }

  void units_string_pskel::
  min (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->min (x);
  }

  void units_string_pskel::
  max (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->max (x);
  }

  void units_string_pskel::
  standard_error (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->standard_error (x);
  }

  void units_string_pskel::
  standard_error_of_the_mean (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->standard_error_of_the_mean (x);
  }

  void units_string_pskel::
  number_obs (int x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->number_obs (x);
  }

  void units_string_pskel::
  skewnesss (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->skewnesss (x);
  }

  void units_string_pskel::
  kurtosis (double x)
  {
    if (this->units_string_impl_)
      this->units_string_impl_->kurtosis (x);
  }

  void units_string_pskel::
  _reset ()
  {
    typedef ::xml_schema::string_pskel base;
    base::_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    if (this->measurement_type_parser_)
      this->measurement_type_parser_->_reset ();

    if (this->uncertainty_parser_)
      this->uncertainty_parser_->_reset ();

    if (this->negative_uncertainty_parser_)
      this->negative_uncertainty_parser_->_reset ();

    if (this->positive_uncertainty_parser_)
      this->positive_uncertainty_parser_->_reset ();

    if (this->uncertainty_percentage_parser_)
      this->uncertainty_percentage_parser_->_reset ();

    if (this->negative_uncertainty_percentage_parser_)
      this->negative_uncertainty_percentage_parser_->_reset ();

    if (this->positive_uncertainty_percentage_parser_)
      this->positive_uncertainty_percentage_parser_->_reset ();

    if (this->median_parser_)
      this->median_parser_->_reset ();

    if (this->standard_deviation_parser_)
      this->standard_deviation_parser_->_reset ();

    if (this->interquartile_range_parser_)
      this->interquartile_range_parser_->_reset ();

    if (this->range_parser_)
      this->range_parser_->_reset ();

    if (this->min_parser_)
      this->min_parser_->_reset ();

    if (this->max_parser_)
      this->max_parser_->_reset ();

    if (this->standard_error_parser_)
      this->standard_error_parser_->_reset ();

    if (this->standard_error_of_the_mean_parser_)
      this->standard_error_of_the_mean_parser_->_reset ();

    if (this->number_obs_parser_)
      this->number_obs_parser_->_reset ();

    if (this->skewnesss_parser_)
      this->skewnesss_parser_->_reset ();

    if (this->kurtosis_parser_)
      this->kurtosis_parser_->_reset ();
  }

  const char* units_string_pskel::
  _static_type ()
  {
    return "units_string common";
  }

  const char* units_string_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_units_string_pskel_inheritance_map_entry_ (
    units_string_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string units_string_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  // data_storage_formats_pskel
  //

  const char* data_storage_formats_pskel::
  _static_type ()
  {
    return "data_storage_formats common";
  }

  const char* data_storage_formats_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_data_storage_formats_pskel_inheritance_map_entry_ (
    data_storage_formats_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string data_storage_formats_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const data_storage_formats_pskel::_xsde_data_storage_formats_pskel_enums_[7UL] = 
  {
    "HDF5",
    "MATLAB",
    "Matlab",
    "XML",
    "hdf5",
    "matlab",
    "xml"
  };

  // threshold_type_pskel
  //

  const char* threshold_type_pskel::
  _static_type ()
  {
    return "threshold_type common";
  }

  const char* threshold_type_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_threshold_type_pskel_inheritance_map_entry_ (
    threshold_type_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string threshold_type_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const threshold_type_pskel::_xsde_threshold_type_pskel_enums_[6UL] = 
  {
    "lower_bound",
    "negative",
    "non_negative",
    "non_positive",
    "positive",
    "upper_bound"
  };

  // transition_threshold_pskel
  //

  void transition_threshold_pskel::
  quantity (const ::std::string& x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->quantity (x);
  }

  void transition_threshold_pskel::
  type (const ::common::threshold_type& x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->type (x);
  }

  void transition_threshold_pskel::
  variable_ID (unsigned long long x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->variable_ID (x);
  }

  void transition_threshold_pskel::
  _reset ()
  {
    typedef ::common::units_decimal_pskel base;
    base::_reset ();

    this->v_state_attr_stack_.clear ();

    if (this->quantity_parser_)
      this->quantity_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->variable_ID_parser_)
      this->variable_ID_parser_->_reset ();
  }

  const char* transition_threshold_pskel::
  _static_type ()
  {
    return "transition_threshold common";
  }

  const char* transition_threshold_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_transition_threshold_pskel_inheritance_map_entry_ (
    transition_threshold_pskel::_static_type (),
    ::common::units_decimal_pskel::_static_type ());

  ::common::units_decimal* transition_threshold_pskel::
  post_units_decimal ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->post_units_decimal ();
  }
}

#include <assert.h>

namespace common
{
  // Element validation and dispatch functions for custom_pskel.
  //
  bool custom_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (!n.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &custom_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool custom_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void custom_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void custom_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void custom_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (!n.empty ())
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n, t);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace common
{
  // Attribute validation and dispatch functions for units_double_list_pskel.
  //
  bool units_double_list_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    if (n == "measurement_type" && ns.empty ())
    {
      if (this->measurement_type_parser_)
      {
        this->measurement_type_parser_->pre ();

        this->measurement_type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->measurement_type_parser_->post_string ();

          this->measurement_type (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty" && ns.empty ())
    {
      if (this->uncertainty_parser_)
      {
        this->uncertainty_parser_->pre ();

        this->uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_parser_->post_double ();

          this->uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty" && ns.empty ())
    {
      if (this->negative_uncertainty_parser_)
      {
        this->negative_uncertainty_parser_->pre ();

        this->negative_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_parser_->post_double ();

          this->negative_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty" && ns.empty ())
    {
      if (this->positive_uncertainty_parser_)
      {
        this->positive_uncertainty_parser_->pre ();

        this->positive_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_parser_->post_double ();

          this->positive_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty_percentage" && ns.empty ())
    {
      if (this->uncertainty_percentage_parser_)
      {
        this->uncertainty_percentage_parser_->pre ();

        this->uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_percentage_parser_->post_double ();

          this->uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty_percentage" && ns.empty ())
    {
      if (this->negative_uncertainty_percentage_parser_)
      {
        this->negative_uncertainty_percentage_parser_->pre ();

        this->negative_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_percentage_parser_->post_double ();

          this->negative_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty_percentage" && ns.empty ())
    {
      if (this->positive_uncertainty_percentage_parser_)
      {
        this->positive_uncertainty_percentage_parser_->pre ();

        this->positive_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_percentage_parser_->post_double ();

          this->positive_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "median" && ns.empty ())
    {
      if (this->median_parser_)
      {
        this->median_parser_->pre ();

        this->median_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->median_parser_->_characters (s);

        if (!ctx.error_type ())
          this->median_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->median_parser_->post_double ();

          this->median (tmp);
        }
      }

      return true;
    }

    if (n == "standard_deviation" && ns.empty ())
    {
      if (this->standard_deviation_parser_)
      {
        this->standard_deviation_parser_->pre ();

        this->standard_deviation_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_deviation_parser_->post_double ();

          this->standard_deviation (tmp);
        }
      }

      return true;
    }

    if (n == "interquartile_range" && ns.empty ())
    {
      if (this->interquartile_range_parser_)
      {
        this->interquartile_range_parser_->pre ();

        this->interquartile_range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->interquartile_range_parser_->post_two_doubles ();

          this->interquartile_range (tmp);
        }
      }

      return true;
    }

    if (n == "range" && ns.empty ())
    {
      if (this->range_parser_)
      {
        this->range_parser_->pre ();

        this->range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->range_parser_->post_two_doubles ();

          this->range (tmp);
        }
      }

      return true;
    }

    if (n == "min" && ns.empty ())
    {
      if (this->min_parser_)
      {
        this->min_parser_->pre ();

        this->min_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->min_parser_->_characters (s);

        if (!ctx.error_type ())
          this->min_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->min_parser_->post_double ();

          this->min (tmp);
        }
      }

      return true;
    }

    if (n == "max" && ns.empty ())
    {
      if (this->max_parser_)
      {
        this->max_parser_->pre ();

        this->max_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->max_parser_->_characters (s);

        if (!ctx.error_type ())
          this->max_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->max_parser_->post_double ();

          this->max (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error" && ns.empty ())
    {
      if (this->standard_error_parser_)
      {
        this->standard_error_parser_->pre ();

        this->standard_error_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_parser_->post_double ();

          this->standard_error (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error_of_the_mean" && ns.empty ())
    {
      if (this->standard_error_of_the_mean_parser_)
      {
        this->standard_error_of_the_mean_parser_->pre ();

        this->standard_error_of_the_mean_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_of_the_mean_parser_->post_double ();

          this->standard_error_of_the_mean (tmp);
        }
      }

      return true;
    }

    if (n == "number_obs" && ns.empty ())
    {
      if (this->number_obs_parser_)
      {
        this->number_obs_parser_->pre ();

        this->number_obs_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->number_obs_parser_->_characters (s);

        if (!ctx.error_type ())
          this->number_obs_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          int tmp = this->number_obs_parser_->post_int ();

          this->number_obs (tmp);
        }
      }

      return true;
    }

    if (n == "skewnesss" && ns.empty ())
    {
      if (this->skewnesss_parser_)
      {
        this->skewnesss_parser_->pre ();

        this->skewnesss_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_characters (s);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->skewnesss_parser_->post_double ();

          this->skewnesss (tmp);
        }
      }

      return true;
    }

    if (n == "kurtosis" && ns.empty ())
    {
      if (this->kurtosis_parser_)
      {
        this->kurtosis_parser_->pre ();

        this->kurtosis_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_characters (s);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->kurtosis_parser_->post_double ();

          this->kurtosis (tmp);
        }
      }

      return true;
    }

    typedef ::common::double_list_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for delimited_list_pskel.
  //
  bool delimited_list_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "delimiter" && ns.empty ())
    {
      if (this->delimiter_parser_)
      {
        this->delimiter_parser_->pre ();

        this->delimiter_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->delimiter_parser_->_characters (s);

        if (!ctx.error_type ())
          this->delimiter_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->delimiter_parser_->post_string ();

          this->delimiter (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::string_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for units_delimited_list_pskel.
  //
  bool units_delimited_list_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    if (n == "measurement_type" && ns.empty ())
    {
      if (this->measurement_type_parser_)
      {
        this->measurement_type_parser_->pre ();

        this->measurement_type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->measurement_type_parser_->post_string ();

          this->measurement_type (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty" && ns.empty ())
    {
      if (this->uncertainty_parser_)
      {
        this->uncertainty_parser_->pre ();

        this->uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_parser_->post_double ();

          this->uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty" && ns.empty ())
    {
      if (this->negative_uncertainty_parser_)
      {
        this->negative_uncertainty_parser_->pre ();

        this->negative_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_parser_->post_double ();

          this->negative_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty" && ns.empty ())
    {
      if (this->positive_uncertainty_parser_)
      {
        this->positive_uncertainty_parser_->pre ();

        this->positive_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_parser_->post_double ();

          this->positive_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty_percentage" && ns.empty ())
    {
      if (this->uncertainty_percentage_parser_)
      {
        this->uncertainty_percentage_parser_->pre ();

        this->uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_percentage_parser_->post_double ();

          this->uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty_percentage" && ns.empty ())
    {
      if (this->negative_uncertainty_percentage_parser_)
      {
        this->negative_uncertainty_percentage_parser_->pre ();

        this->negative_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_percentage_parser_->post_double ();

          this->negative_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty_percentage" && ns.empty ())
    {
      if (this->positive_uncertainty_percentage_parser_)
      {
        this->positive_uncertainty_percentage_parser_->pre ();

        this->positive_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_percentage_parser_->post_double ();

          this->positive_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "median" && ns.empty ())
    {
      if (this->median_parser_)
      {
        this->median_parser_->pre ();

        this->median_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->median_parser_->_characters (s);

        if (!ctx.error_type ())
          this->median_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->median_parser_->post_double ();

          this->median (tmp);
        }
      }

      return true;
    }

    if (n == "standard_deviation" && ns.empty ())
    {
      if (this->standard_deviation_parser_)
      {
        this->standard_deviation_parser_->pre ();

        this->standard_deviation_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_deviation_parser_->post_double ();

          this->standard_deviation (tmp);
        }
      }

      return true;
    }

    if (n == "interquartile_range" && ns.empty ())
    {
      if (this->interquartile_range_parser_)
      {
        this->interquartile_range_parser_->pre ();

        this->interquartile_range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->interquartile_range_parser_->post_two_doubles ();

          this->interquartile_range (tmp);
        }
      }

      return true;
    }

    if (n == "range" && ns.empty ())
    {
      if (this->range_parser_)
      {
        this->range_parser_->pre ();

        this->range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->range_parser_->post_two_doubles ();

          this->range (tmp);
        }
      }

      return true;
    }

    if (n == "min" && ns.empty ())
    {
      if (this->min_parser_)
      {
        this->min_parser_->pre ();

        this->min_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->min_parser_->_characters (s);

        if (!ctx.error_type ())
          this->min_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->min_parser_->post_double ();

          this->min (tmp);
        }
      }

      return true;
    }

    if (n == "max" && ns.empty ())
    {
      if (this->max_parser_)
      {
        this->max_parser_->pre ();

        this->max_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->max_parser_->_characters (s);

        if (!ctx.error_type ())
          this->max_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->max_parser_->post_double ();

          this->max (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error" && ns.empty ())
    {
      if (this->standard_error_parser_)
      {
        this->standard_error_parser_->pre ();

        this->standard_error_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_parser_->post_double ();

          this->standard_error (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error_of_the_mean" && ns.empty ())
    {
      if (this->standard_error_of_the_mean_parser_)
      {
        this->standard_error_of_the_mean_parser_->pre ();

        this->standard_error_of_the_mean_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_of_the_mean_parser_->post_double ();

          this->standard_error_of_the_mean (tmp);
        }
      }

      return true;
    }

    if (n == "number_obs" && ns.empty ())
    {
      if (this->number_obs_parser_)
      {
        this->number_obs_parser_->pre ();

        this->number_obs_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->number_obs_parser_->_characters (s);

        if (!ctx.error_type ())
          this->number_obs_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          int tmp = this->number_obs_parser_->post_int ();

          this->number_obs (tmp);
        }
      }

      return true;
    }

    if (n == "skewnesss" && ns.empty ())
    {
      if (this->skewnesss_parser_)
      {
        this->skewnesss_parser_->pre ();

        this->skewnesss_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_characters (s);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->skewnesss_parser_->post_double ();

          this->skewnesss (tmp);
        }
      }

      return true;
    }

    if (n == "kurtosis" && ns.empty ())
    {
      if (this->kurtosis_parser_)
      {
        this->kurtosis_parser_->pre ();

        this->kurtosis_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_characters (s);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->kurtosis_parser_->post_double ();

          this->kurtosis (tmp);
        }
      }

      return true;
    }

    typedef ::common::delimited_list_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for units_decimal_pskel.
  //
  bool units_decimal_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    if (n == "measurement_type" && ns.empty ())
    {
      if (this->measurement_type_parser_)
      {
        this->measurement_type_parser_->pre ();

        this->measurement_type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->measurement_type_parser_->post_string ();

          this->measurement_type (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty" && ns.empty ())
    {
      if (this->uncertainty_parser_)
      {
        this->uncertainty_parser_->pre ();

        this->uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_parser_->post_double ();

          this->uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty" && ns.empty ())
    {
      if (this->negative_uncertainty_parser_)
      {
        this->negative_uncertainty_parser_->pre ();

        this->negative_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_parser_->post_double ();

          this->negative_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty" && ns.empty ())
    {
      if (this->positive_uncertainty_parser_)
      {
        this->positive_uncertainty_parser_->pre ();

        this->positive_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_parser_->post_double ();

          this->positive_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty_percentage" && ns.empty ())
    {
      if (this->uncertainty_percentage_parser_)
      {
        this->uncertainty_percentage_parser_->pre ();

        this->uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_percentage_parser_->post_double ();

          this->uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty_percentage" && ns.empty ())
    {
      if (this->negative_uncertainty_percentage_parser_)
      {
        this->negative_uncertainty_percentage_parser_->pre ();

        this->negative_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_percentage_parser_->post_double ();

          this->negative_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty_percentage" && ns.empty ())
    {
      if (this->positive_uncertainty_percentage_parser_)
      {
        this->positive_uncertainty_percentage_parser_->pre ();

        this->positive_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_percentage_parser_->post_double ();

          this->positive_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "median" && ns.empty ())
    {
      if (this->median_parser_)
      {
        this->median_parser_->pre ();

        this->median_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->median_parser_->_characters (s);

        if (!ctx.error_type ())
          this->median_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->median_parser_->post_double ();

          this->median (tmp);
        }
      }

      return true;
    }

    if (n == "standard_deviation" && ns.empty ())
    {
      if (this->standard_deviation_parser_)
      {
        this->standard_deviation_parser_->pre ();

        this->standard_deviation_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_deviation_parser_->post_double ();

          this->standard_deviation (tmp);
        }
      }

      return true;
    }

    if (n == "interquartile_range" && ns.empty ())
    {
      if (this->interquartile_range_parser_)
      {
        this->interquartile_range_parser_->pre ();

        this->interquartile_range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->interquartile_range_parser_->post_two_doubles ();

          this->interquartile_range (tmp);
        }
      }

      return true;
    }

    if (n == "range" && ns.empty ())
    {
      if (this->range_parser_)
      {
        this->range_parser_->pre ();

        this->range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->range_parser_->post_two_doubles ();

          this->range (tmp);
        }
      }

      return true;
    }

    if (n == "min" && ns.empty ())
    {
      if (this->min_parser_)
      {
        this->min_parser_->pre ();

        this->min_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->min_parser_->_characters (s);

        if (!ctx.error_type ())
          this->min_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->min_parser_->post_double ();

          this->min (tmp);
        }
      }

      return true;
    }

    if (n == "max" && ns.empty ())
    {
      if (this->max_parser_)
      {
        this->max_parser_->pre ();

        this->max_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->max_parser_->_characters (s);

        if (!ctx.error_type ())
          this->max_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->max_parser_->post_double ();

          this->max (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error" && ns.empty ())
    {
      if (this->standard_error_parser_)
      {
        this->standard_error_parser_->pre ();

        this->standard_error_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_parser_->post_double ();

          this->standard_error (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error_of_the_mean" && ns.empty ())
    {
      if (this->standard_error_of_the_mean_parser_)
      {
        this->standard_error_of_the_mean_parser_->pre ();

        this->standard_error_of_the_mean_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_of_the_mean_parser_->post_double ();

          this->standard_error_of_the_mean (tmp);
        }
      }

      return true;
    }

    if (n == "number_obs" && ns.empty ())
    {
      if (this->number_obs_parser_)
      {
        this->number_obs_parser_->pre ();

        this->number_obs_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->number_obs_parser_->_characters (s);

        if (!ctx.error_type ())
          this->number_obs_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          int tmp = this->number_obs_parser_->post_int ();

          this->number_obs (tmp);
        }
      }

      return true;
    }

    if (n == "skewnesss" && ns.empty ())
    {
      if (this->skewnesss_parser_)
      {
        this->skewnesss_parser_->pre ();

        this->skewnesss_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_characters (s);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->skewnesss_parser_->post_double ();

          this->skewnesss (tmp);
        }
      }

      return true;
    }

    if (n == "kurtosis" && ns.empty ())
    {
      if (this->kurtosis_parser_)
      {
        this->kurtosis_parser_->pre ();

        this->kurtosis_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_characters (s);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->kurtosis_parser_->post_double ();

          this->kurtosis (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::double_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for units_decimal_nonnegative_pskel.
  //
  bool units_decimal_nonnegative_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    if (n == "measurement_type" && ns.empty ())
    {
      if (this->measurement_type_parser_)
      {
        this->measurement_type_parser_->pre ();

        this->measurement_type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->measurement_type_parser_->post_string ();

          this->measurement_type (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty" && ns.empty ())
    {
      if (this->uncertainty_parser_)
      {
        this->uncertainty_parser_->pre ();

        this->uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_parser_->post_double ();

          this->uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty" && ns.empty ())
    {
      if (this->negative_uncertainty_parser_)
      {
        this->negative_uncertainty_parser_->pre ();

        this->negative_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_parser_->post_double ();

          this->negative_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty" && ns.empty ())
    {
      if (this->positive_uncertainty_parser_)
      {
        this->positive_uncertainty_parser_->pre ();

        this->positive_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_parser_->post_double ();

          this->positive_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty_percentage" && ns.empty ())
    {
      if (this->uncertainty_percentage_parser_)
      {
        this->uncertainty_percentage_parser_->pre ();

        this->uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_percentage_parser_->post_double ();

          this->uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty_percentage" && ns.empty ())
    {
      if (this->negative_uncertainty_percentage_parser_)
      {
        this->negative_uncertainty_percentage_parser_->pre ();

        this->negative_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_percentage_parser_->post_double ();

          this->negative_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty_percentage" && ns.empty ())
    {
      if (this->positive_uncertainty_percentage_parser_)
      {
        this->positive_uncertainty_percentage_parser_->pre ();

        this->positive_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_percentage_parser_->post_double ();

          this->positive_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "median" && ns.empty ())
    {
      if (this->median_parser_)
      {
        this->median_parser_->pre ();

        this->median_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->median_parser_->_characters (s);

        if (!ctx.error_type ())
          this->median_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->median_parser_->post_double ();

          this->median (tmp);
        }
      }

      return true;
    }

    if (n == "standard_deviation" && ns.empty ())
    {
      if (this->standard_deviation_parser_)
      {
        this->standard_deviation_parser_->pre ();

        this->standard_deviation_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_deviation_parser_->post_double ();

          this->standard_deviation (tmp);
        }
      }

      return true;
    }

    if (n == "interquartile_range" && ns.empty ())
    {
      if (this->interquartile_range_parser_)
      {
        this->interquartile_range_parser_->pre ();

        this->interquartile_range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->interquartile_range_parser_->post_two_doubles ();

          this->interquartile_range (tmp);
        }
      }

      return true;
    }

    if (n == "range" && ns.empty ())
    {
      if (this->range_parser_)
      {
        this->range_parser_->pre ();

        this->range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->range_parser_->post_two_doubles ();

          this->range (tmp);
        }
      }

      return true;
    }

    if (n == "min" && ns.empty ())
    {
      if (this->min_parser_)
      {
        this->min_parser_->pre ();

        this->min_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->min_parser_->_characters (s);

        if (!ctx.error_type ())
          this->min_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->min_parser_->post_double ();

          this->min (tmp);
        }
      }

      return true;
    }

    if (n == "max" && ns.empty ())
    {
      if (this->max_parser_)
      {
        this->max_parser_->pre ();

        this->max_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->max_parser_->_characters (s);

        if (!ctx.error_type ())
          this->max_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->max_parser_->post_double ();

          this->max (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error" && ns.empty ())
    {
      if (this->standard_error_parser_)
      {
        this->standard_error_parser_->pre ();

        this->standard_error_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_parser_->post_double ();

          this->standard_error (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error_of_the_mean" && ns.empty ())
    {
      if (this->standard_error_of_the_mean_parser_)
      {
        this->standard_error_of_the_mean_parser_->pre ();

        this->standard_error_of_the_mean_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_of_the_mean_parser_->post_double ();

          this->standard_error_of_the_mean (tmp);
        }
      }

      return true;
    }

    if (n == "number_obs" && ns.empty ())
    {
      if (this->number_obs_parser_)
      {
        this->number_obs_parser_->pre ();

        this->number_obs_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->number_obs_parser_->_characters (s);

        if (!ctx.error_type ())
          this->number_obs_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          int tmp = this->number_obs_parser_->post_int ();

          this->number_obs (tmp);
        }
      }

      return true;
    }

    if (n == "skewnesss" && ns.empty ())
    {
      if (this->skewnesss_parser_)
      {
        this->skewnesss_parser_->pre ();

        this->skewnesss_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_characters (s);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->skewnesss_parser_->post_double ();

          this->skewnesss (tmp);
        }
      }

      return true;
    }

    if (n == "kurtosis" && ns.empty ())
    {
      if (this->kurtosis_parser_)
      {
        this->kurtosis_parser_->pre ();

        this->kurtosis_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_characters (s);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->kurtosis_parser_->post_double ();

          this->kurtosis (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for units_unsignedShort_pskel.
  //
  bool units_unsignedShort_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "measurement_type" && ns.empty ())
    {
      if (this->measurement_type_parser_)
      {
        this->measurement_type_parser_->pre ();

        this->measurement_type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->measurement_type_parser_->post_string ();

          this->measurement_type (tmp);
        }
      }

      return true;
    }

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::unsigned_short_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for units_boolean_pskel.
  //
  bool units_boolean_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::boolean_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for units_fraction_pskel.
  //
  bool units_fraction_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    if (n == "measurement_type" && ns.empty ())
    {
      if (this->measurement_type_parser_)
      {
        this->measurement_type_parser_->pre ();

        this->measurement_type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->measurement_type_parser_->post_string ();

          this->measurement_type (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty" && ns.empty ())
    {
      if (this->uncertainty_parser_)
      {
        this->uncertainty_parser_->pre ();

        this->uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_parser_->post_double ();

          this->uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty" && ns.empty ())
    {
      if (this->negative_uncertainty_parser_)
      {
        this->negative_uncertainty_parser_->pre ();

        this->negative_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_parser_->post_double ();

          this->negative_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty" && ns.empty ())
    {
      if (this->positive_uncertainty_parser_)
      {
        this->positive_uncertainty_parser_->pre ();

        this->positive_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_parser_->post_double ();

          this->positive_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty_percentage" && ns.empty ())
    {
      if (this->uncertainty_percentage_parser_)
      {
        this->uncertainty_percentage_parser_->pre ();

        this->uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_percentage_parser_->post_double ();

          this->uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty_percentage" && ns.empty ())
    {
      if (this->negative_uncertainty_percentage_parser_)
      {
        this->negative_uncertainty_percentage_parser_->pre ();

        this->negative_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_percentage_parser_->post_double ();

          this->negative_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty_percentage" && ns.empty ())
    {
      if (this->positive_uncertainty_percentage_parser_)
      {
        this->positive_uncertainty_percentage_parser_->pre ();

        this->positive_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_percentage_parser_->post_double ();

          this->positive_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "median" && ns.empty ())
    {
      if (this->median_parser_)
      {
        this->median_parser_->pre ();

        this->median_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->median_parser_->_characters (s);

        if (!ctx.error_type ())
          this->median_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->median_parser_->post_double ();

          this->median (tmp);
        }
      }

      return true;
    }

    if (n == "standard_deviation" && ns.empty ())
    {
      if (this->standard_deviation_parser_)
      {
        this->standard_deviation_parser_->pre ();

        this->standard_deviation_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_deviation_parser_->post_double ();

          this->standard_deviation (tmp);
        }
      }

      return true;
    }

    if (n == "interquartile_range" && ns.empty ())
    {
      if (this->interquartile_range_parser_)
      {
        this->interquartile_range_parser_->pre ();

        this->interquartile_range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->interquartile_range_parser_->post_two_doubles ();

          this->interquartile_range (tmp);
        }
      }

      return true;
    }

    if (n == "range" && ns.empty ())
    {
      if (this->range_parser_)
      {
        this->range_parser_->pre ();

        this->range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->range_parser_->post_two_doubles ();

          this->range (tmp);
        }
      }

      return true;
    }

    if (n == "min" && ns.empty ())
    {
      if (this->min_parser_)
      {
        this->min_parser_->pre ();

        this->min_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->min_parser_->_characters (s);

        if (!ctx.error_type ())
          this->min_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->min_parser_->post_double ();

          this->min (tmp);
        }
      }

      return true;
    }

    if (n == "max" && ns.empty ())
    {
      if (this->max_parser_)
      {
        this->max_parser_->pre ();

        this->max_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->max_parser_->_characters (s);

        if (!ctx.error_type ())
          this->max_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->max_parser_->post_double ();

          this->max (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error" && ns.empty ())
    {
      if (this->standard_error_parser_)
      {
        this->standard_error_parser_->pre ();

        this->standard_error_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_parser_->post_double ();

          this->standard_error (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error_of_the_mean" && ns.empty ())
    {
      if (this->standard_error_of_the_mean_parser_)
      {
        this->standard_error_of_the_mean_parser_->pre ();

        this->standard_error_of_the_mean_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_of_the_mean_parser_->post_double ();

          this->standard_error_of_the_mean (tmp);
        }
      }

      return true;
    }

    if (n == "number_obs" && ns.empty ())
    {
      if (this->number_obs_parser_)
      {
        this->number_obs_parser_->pre ();

        this->number_obs_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->number_obs_parser_->_characters (s);

        if (!ctx.error_type ())
          this->number_obs_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          int tmp = this->number_obs_parser_->post_int ();

          this->number_obs (tmp);
        }
      }

      return true;
    }

    if (n == "skewnesss" && ns.empty ())
    {
      if (this->skewnesss_parser_)
      {
        this->skewnesss_parser_->pre ();

        this->skewnesss_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_characters (s);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->skewnesss_parser_->post_double ();

          this->skewnesss (tmp);
        }
      }

      return true;
    }

    if (n == "kurtosis" && ns.empty ())
    {
      if (this->kurtosis_parser_)
      {
        this->kurtosis_parser_->pre ();

        this->kurtosis_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_characters (s);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->kurtosis_parser_->post_double ();

          this->kurtosis (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for units_string_pskel.
  //
  bool units_string_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    if (n == "measurement_type" && ns.empty ())
    {
      if (this->measurement_type_parser_)
      {
        this->measurement_type_parser_->pre ();

        this->measurement_type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->measurement_type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->measurement_type_parser_->post_string ();

          this->measurement_type (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty" && ns.empty ())
    {
      if (this->uncertainty_parser_)
      {
        this->uncertainty_parser_->pre ();

        this->uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_parser_->post_double ();

          this->uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty" && ns.empty ())
    {
      if (this->negative_uncertainty_parser_)
      {
        this->negative_uncertainty_parser_->pre ();

        this->negative_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_parser_->post_double ();

          this->negative_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty" && ns.empty ())
    {
      if (this->positive_uncertainty_parser_)
      {
        this->positive_uncertainty_parser_->pre ();

        this->positive_uncertainty_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_parser_->post_double ();

          this->positive_uncertainty (tmp);
        }
      }

      return true;
    }

    if (n == "uncertainty_percentage" && ns.empty ())
    {
      if (this->uncertainty_percentage_parser_)
      {
        this->uncertainty_percentage_parser_->pre ();

        this->uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->uncertainty_percentage_parser_->post_double ();

          this->uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "negative_uncertainty_percentage" && ns.empty ())
    {
      if (this->negative_uncertainty_percentage_parser_)
      {
        this->negative_uncertainty_percentage_parser_->pre ();

        this->negative_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->negative_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->negative_uncertainty_percentage_parser_->post_double ();

          this->negative_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "positive_uncertainty_percentage" && ns.empty ())
    {
      if (this->positive_uncertainty_percentage_parser_)
      {
        this->positive_uncertainty_percentage_parser_->pre ();

        this->positive_uncertainty_percentage_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_characters (s);

        if (!ctx.error_type ())
          this->positive_uncertainty_percentage_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->positive_uncertainty_percentage_parser_->post_double ();

          this->positive_uncertainty_percentage (tmp);
        }
      }

      return true;
    }

    if (n == "median" && ns.empty ())
    {
      if (this->median_parser_)
      {
        this->median_parser_->pre ();

        this->median_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->median_parser_->_characters (s);

        if (!ctx.error_type ())
          this->median_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->median_parser_->post_double ();

          this->median (tmp);
        }
      }

      return true;
    }

    if (n == "standard_deviation" && ns.empty ())
    {
      if (this->standard_deviation_parser_)
      {
        this->standard_deviation_parser_->pre ();

        this->standard_deviation_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_deviation_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_deviation_parser_->post_double ();

          this->standard_deviation (tmp);
        }
      }

      return true;
    }

    if (n == "interquartile_range" && ns.empty ())
    {
      if (this->interquartile_range_parser_)
      {
        this->interquartile_range_parser_->pre ();

        this->interquartile_range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->interquartile_range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->interquartile_range_parser_->post_two_doubles ();

          this->interquartile_range (tmp);
        }
      }

      return true;
    }

    if (n == "range" && ns.empty ())
    {
      if (this->range_parser_)
      {
        this->range_parser_->pre ();

        this->range_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->range_parser_->_characters (s);

        if (!ctx.error_type ())
          this->range_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::two_doubles* tmp = this->range_parser_->post_two_doubles ();

          this->range (tmp);
        }
      }

      return true;
    }

    if (n == "min" && ns.empty ())
    {
      if (this->min_parser_)
      {
        this->min_parser_->pre ();

        this->min_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->min_parser_->_characters (s);

        if (!ctx.error_type ())
          this->min_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->min_parser_->post_double ();

          this->min (tmp);
        }
      }

      return true;
    }

    if (n == "max" && ns.empty ())
    {
      if (this->max_parser_)
      {
        this->max_parser_->pre ();

        this->max_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->max_parser_->_characters (s);

        if (!ctx.error_type ())
          this->max_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->max_parser_->post_double ();

          this->max (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error" && ns.empty ())
    {
      if (this->standard_error_parser_)
      {
        this->standard_error_parser_->pre ();

        this->standard_error_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_parser_->post_double ();

          this->standard_error (tmp);
        }
      }

      return true;
    }

    if (n == "standard_error_of_the_mean" && ns.empty ())
    {
      if (this->standard_error_of_the_mean_parser_)
      {
        this->standard_error_of_the_mean_parser_->pre ();

        this->standard_error_of_the_mean_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_characters (s);

        if (!ctx.error_type ())
          this->standard_error_of_the_mean_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->standard_error_of_the_mean_parser_->post_double ();

          this->standard_error_of_the_mean (tmp);
        }
      }

      return true;
    }

    if (n == "number_obs" && ns.empty ())
    {
      if (this->number_obs_parser_)
      {
        this->number_obs_parser_->pre ();

        this->number_obs_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->number_obs_parser_->_characters (s);

        if (!ctx.error_type ())
          this->number_obs_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          int tmp = this->number_obs_parser_->post_int ();

          this->number_obs (tmp);
        }
      }

      return true;
    }

    if (n == "skewnesss" && ns.empty ())
    {
      if (this->skewnesss_parser_)
      {
        this->skewnesss_parser_->pre ();

        this->skewnesss_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_characters (s);

        if (!ctx.error_type ())
          this->skewnesss_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->skewnesss_parser_->post_double ();

          this->skewnesss (tmp);
        }
      }

      return true;
    }

    if (n == "kurtosis" && ns.empty ())
    {
      if (this->kurtosis_parser_)
      {
        this->kurtosis_parser_->pre ();

        this->kurtosis_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_characters (s);

        if (!ctx.error_type ())
          this->kurtosis_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          double tmp = this->kurtosis_parser_->post_double ();

          this->kurtosis (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::string_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for transition_threshold_pskel.
  //
  bool transition_threshold_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "quantity" && ns.empty ())
    {
      if (this->quantity_parser_)
      {
        this->quantity_parser_->pre ();

        this->quantity_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->quantity_parser_->_characters (s);

        if (!ctx.error_type ())
          this->quantity_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->quantity_parser_->post_string ();

          this->quantity (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->quantity = true;
      return true;
    }

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::common::threshold_type& tmp = this->type_parser_->post_threshold_type ();

          this->type (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
      return true;
    }

    if (n == "variable_ID" && ns.empty ())
    {
      if (this->variable_ID_parser_)
      {
        this->variable_ID_parser_->pre ();

        this->variable_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->variable_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->variable_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned long long tmp = this->variable_ID_parser_->post_unsigned_long ();

          this->variable_ID (tmp);
        }
      }

      return true;
    }

    typedef ::common::units_decimal_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  void transition_threshold_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.quantity = false;
    as.type = false;
    typedef ::common::units_decimal_pskel base;
    base::_pre_a_validate ();
  }

  void transition_threshold_pskel::
  _post_a_validate ()
  {
    typedef ::common::units_decimal_pskel base;
    base::_post_a_validate ();

    if (this->_context ().error_type ())
      return;

    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.quantity)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }

    if (!as.type)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }
}

namespace common
{
  // Character validation functions for custom_pskel.
  //
  bool custom_pskel::
  _characters_impl (const ::xsde::cxx::ro_string& s)
  {
    this->_any_characters (s);
    return true;
  }

  // Character validation functions for units_decimal_pskel.
  //
  bool units_decimal_pskel::
  _characters_impl (const ::xsde::cxx::ro_string& s)
  {
    this->_any_characters (s);
    return true;
  }

  // Character validation functions for units_decimal_nonnegative_pskel.
  //
  bool units_decimal_nonnegative_pskel::
  _characters_impl (const ::xsde::cxx::ro_string& s)
  {
    this->_any_characters (s);
    return true;
  }

  // Character validation functions for units_unsignedShort_pskel.
  //
  bool units_unsignedShort_pskel::
  _characters_impl (const ::xsde::cxx::ro_string& s)
  {
    this->_any_characters (s);
    return true;
  }

  // Character validation functions for units_boolean_pskel.
  //
  bool units_boolean_pskel::
  _characters_impl (const ::xsde::cxx::ro_string& s)
  {
    this->_any_characters (s);
    return true;
  }

  // Character validation functions for units_fraction_pskel.
  //
  bool units_fraction_pskel::
  _characters_impl (const ::xsde::cxx::ro_string& s)
  {
    this->_any_characters (s);
    return true;
  }

  // Character validation functions for units_string_pskel.
  //
  bool units_string_pskel::
  _characters_impl (const ::xsde::cxx::ro_string& s)
  {
    this->_any_characters (s);
    return true;
  }
}

// Begin epilogue.
//
//
// End epilogue.

