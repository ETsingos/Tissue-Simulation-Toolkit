// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "common-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::serializer::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace common
{
  // custom_sskel
  //

  bool custom_sskel::
  any_next ()
  {
    return this->custom_impl_ ? this->custom_impl_->any_next () : false;
  }

  void custom_sskel::
  any (::std::string& ns, ::std::string& n)
  {
    if (this->custom_impl_)
      this->custom_impl_->any (ns, n);
  }

  void custom_sskel::
  serialize_any ()
  {
    if (this->custom_impl_)
      this->custom_impl_->serialize_any ();
  }

  const char* custom_sskel::
  _static_type ()
  {
    return "custom common";
  }

  const char* custom_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // double_list_sskel
  //

  bool double_list_sskel::
  item_next ()
  {
    return this->double_list_impl_ ? this->double_list_impl_->item_next () : false;
  }

  void double_list_sskel::
  _reset ()
  {
    ::xsde::cxx::serializer::validating::simple_content::_reset ();

    if (this->_xsde_item_)
      this->_xsde_item_->_reset ();
  }

  void double_list_sskel::
  _serialize_content ()
  {
    bool first = true;
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    while (this->item_next ())
    {
      if (this->_xsde_item_)
      {
        double r = this->item ();

        if (ctx.error_type ())
          break;

        this->_xsde_item_->pre (r);

        if (!first)
          this->_characters (" ", 1);
        else
          first = false;

        this->_xsde_item_->_pre_impl (ctx);

        if (ctx.error_type ())
          break;

        this->_xsde_item_->_serialize_content ();

        if (ctx.error_type ())
          break;

        this->_xsde_item_->_post_impl ();

        if (ctx.error_type ())
          break;

        this->_xsde_item_->post ();
      }
    }
  }

  const char* double_list_sskel::
  _static_type ()
  {
    return "double_list common";
  }

  const char* double_list_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // unsigned_int_list_sskel
  //

  bool unsigned_int_list_sskel::
  item_next ()
  {
    return this->unsigned_int_list_impl_ ? this->unsigned_int_list_impl_->item_next () : false;
  }

  void unsigned_int_list_sskel::
  _reset ()
  {
    ::xsde::cxx::serializer::validating::simple_content::_reset ();

    if (this->_xsde_item_)
      this->_xsde_item_->_reset ();
  }

  void unsigned_int_list_sskel::
  _serialize_content ()
  {
    bool first = true;
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    while (this->item_next ())
    {
      if (this->_xsde_item_)
      {
        unsigned int r = this->item ();

        if (ctx.error_type ())
          break;

        this->_xsde_item_->pre (r);

        if (!first)
          this->_characters (" ", 1);
        else
          first = false;

        this->_xsde_item_->_pre_impl (ctx);

        if (ctx.error_type ())
          break;

        this->_xsde_item_->_serialize_content ();

        if (ctx.error_type ())
          break;

        this->_xsde_item_->_post_impl ();

        if (ctx.error_type ())
          break;

        this->_xsde_item_->post ();
      }
    }
  }

  const char* unsigned_int_list_sskel::
  _static_type ()
  {
    return "unsigned_int_list common";
  }

  const char* unsigned_int_list_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // two_doubles_sskel
  //

  const char* two_doubles_sskel::
  _static_type ()
  {
    return "two_doubles common";
  }

  const char* two_doubles_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_two_doubles_sskel_inheritance_map_entry_ (
    two_doubles_sskel::_static_type (),
    ::common::double_list_sskel::_static_type ());

  void two_doubles_sskel::
  pre (const ::common::double_list& x)
  {
    assert (this->double_list_impl_);
    this->double_list_impl_->pre (x);
  }

  double two_doubles_sskel::
  item ()
  {
    assert (this->double_list_impl_);
    return this->double_list_impl_->item ();
  }

  // units_double_list_sskel
  //

  bool units_double_list_sskel::
  units_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->units_present () : false;
  }

  bool units_double_list_sskel::
  measurement_type_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->measurement_type_present () : false;
  }

  bool units_double_list_sskel::
  uncertainty_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->uncertainty_present () : false;
  }

  bool units_double_list_sskel::
  negative_uncertainty_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->negative_uncertainty_present () : false;
  }

  bool units_double_list_sskel::
  positive_uncertainty_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->positive_uncertainty_present () : false;
  }

  bool units_double_list_sskel::
  uncertainty_percentage_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->uncertainty_percentage_present () : false;
  }

  bool units_double_list_sskel::
  negative_uncertainty_percentage_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->negative_uncertainty_percentage_present () : false;
  }

  bool units_double_list_sskel::
  positive_uncertainty_percentage_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->positive_uncertainty_percentage_present () : false;
  }

  bool units_double_list_sskel::
  median_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->median_present () : false;
  }

  bool units_double_list_sskel::
  standard_deviation_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->standard_deviation_present () : false;
  }

  bool units_double_list_sskel::
  interquartile_range_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->interquartile_range_present () : false;
  }

  bool units_double_list_sskel::
  range_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->range_present () : false;
  }

  bool units_double_list_sskel::
  min_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->min_present () : false;
  }

  bool units_double_list_sskel::
  max_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->max_present () : false;
  }

  bool units_double_list_sskel::
  standard_error_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->standard_error_present () : false;
  }

  bool units_double_list_sskel::
  standard_error_of_the_mean_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->standard_error_of_the_mean_present () : false;
  }

  bool units_double_list_sskel::
  number_obs_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->number_obs_present () : false;
  }

  bool units_double_list_sskel::
  skewnesss_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->skewnesss_present () : false;
  }

  bool units_double_list_sskel::
  kurtosis_present ()
  {
    return this->units_double_list_impl_ ? this->units_double_list_impl_->kurtosis_present () : false;
  }

  void units_double_list_sskel::
  _reset ()
  {
    typedef ::common::double_list_sskel base;
    base::_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();

    if (this->measurement_type_serializer_)
      this->measurement_type_serializer_->_reset ();

    if (this->uncertainty_serializer_)
      this->uncertainty_serializer_->_reset ();

    if (this->negative_uncertainty_serializer_)
      this->negative_uncertainty_serializer_->_reset ();

    if (this->positive_uncertainty_serializer_)
      this->positive_uncertainty_serializer_->_reset ();

    if (this->uncertainty_percentage_serializer_)
      this->uncertainty_percentage_serializer_->_reset ();

    if (this->negative_uncertainty_percentage_serializer_)
      this->negative_uncertainty_percentage_serializer_->_reset ();

    if (this->positive_uncertainty_percentage_serializer_)
      this->positive_uncertainty_percentage_serializer_->_reset ();

    if (this->median_serializer_)
      this->median_serializer_->_reset ();

    if (this->standard_deviation_serializer_)
      this->standard_deviation_serializer_->_reset ();

    if (this->interquartile_range_serializer_)
      this->interquartile_range_serializer_->_reset ();

    if (this->range_serializer_)
      this->range_serializer_->_reset ();

    if (this->min_serializer_)
      this->min_serializer_->_reset ();

    if (this->max_serializer_)
      this->max_serializer_->_reset ();

    if (this->standard_error_serializer_)
      this->standard_error_serializer_->_reset ();

    if (this->standard_error_of_the_mean_serializer_)
      this->standard_error_of_the_mean_serializer_->_reset ();

    if (this->number_obs_serializer_)
      this->number_obs_serializer_->_reset ();

    if (this->skewnesss_serializer_)
      this->skewnesss_serializer_->_reset ();

    if (this->kurtosis_serializer_)
      this->kurtosis_serializer_->_reset ();
  }

  const char* units_double_list_sskel::
  _static_type ()
  {
    return "units_double_list common";
  }

  const char* units_double_list_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_units_double_list_sskel_inheritance_map_entry_ (
    units_double_list_sskel::_static_type (),
    ::common::double_list_sskel::_static_type ());

  void units_double_list_sskel::
  pre (const ::common::double_list& x)
  {
    assert (this->double_list_impl_);
    this->double_list_impl_->pre (x);
  }

  double units_double_list_sskel::
  item ()
  {
    assert (this->double_list_impl_);
    return this->double_list_impl_->item ();
  }

  // delimited_list_sskel
  //

  bool delimited_list_sskel::
  delimiter_present ()
  {
    return this->delimited_list_impl_ ? this->delimited_list_impl_->delimiter_present () : false;
  }

  void delimited_list_sskel::
  _reset ()
  {
    typedef ::xml_schema::string_sskel base;
    base::_reset ();

    if (this->delimiter_serializer_)
      this->delimiter_serializer_->_reset ();
  }

  const char* delimited_list_sskel::
  _static_type ()
  {
    return "delimited_list common";
  }

  const char* delimited_list_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_delimited_list_sskel_inheritance_map_entry_ (
    delimited_list_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void delimited_list_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // units_delimited_list_sskel
  //

  bool units_delimited_list_sskel::
  units_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->units_present () : false;
  }

  bool units_delimited_list_sskel::
  measurement_type_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->measurement_type_present () : false;
  }

  bool units_delimited_list_sskel::
  uncertainty_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->uncertainty_present () : false;
  }

  bool units_delimited_list_sskel::
  negative_uncertainty_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->negative_uncertainty_present () : false;
  }

  bool units_delimited_list_sskel::
  positive_uncertainty_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->positive_uncertainty_present () : false;
  }

  bool units_delimited_list_sskel::
  uncertainty_percentage_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->uncertainty_percentage_present () : false;
  }

  bool units_delimited_list_sskel::
  negative_uncertainty_percentage_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->negative_uncertainty_percentage_present () : false;
  }

  bool units_delimited_list_sskel::
  positive_uncertainty_percentage_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->positive_uncertainty_percentage_present () : false;
  }

  bool units_delimited_list_sskel::
  median_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->median_present () : false;
  }

  bool units_delimited_list_sskel::
  standard_deviation_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->standard_deviation_present () : false;
  }

  bool units_delimited_list_sskel::
  interquartile_range_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->interquartile_range_present () : false;
  }

  bool units_delimited_list_sskel::
  range_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->range_present () : false;
  }

  bool units_delimited_list_sskel::
  min_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->min_present () : false;
  }

  bool units_delimited_list_sskel::
  max_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->max_present () : false;
  }

  bool units_delimited_list_sskel::
  standard_error_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->standard_error_present () : false;
  }

  bool units_delimited_list_sskel::
  standard_error_of_the_mean_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->standard_error_of_the_mean_present () : false;
  }

  bool units_delimited_list_sskel::
  number_obs_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->number_obs_present () : false;
  }

  bool units_delimited_list_sskel::
  skewnesss_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->skewnesss_present () : false;
  }

  bool units_delimited_list_sskel::
  kurtosis_present ()
  {
    return this->units_delimited_list_impl_ ? this->units_delimited_list_impl_->kurtosis_present () : false;
  }

  void units_delimited_list_sskel::
  _reset ()
  {
    typedef ::common::delimited_list_sskel base;
    base::_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();

    if (this->measurement_type_serializer_)
      this->measurement_type_serializer_->_reset ();

    if (this->uncertainty_serializer_)
      this->uncertainty_serializer_->_reset ();

    if (this->negative_uncertainty_serializer_)
      this->negative_uncertainty_serializer_->_reset ();

    if (this->positive_uncertainty_serializer_)
      this->positive_uncertainty_serializer_->_reset ();

    if (this->uncertainty_percentage_serializer_)
      this->uncertainty_percentage_serializer_->_reset ();

    if (this->negative_uncertainty_percentage_serializer_)
      this->negative_uncertainty_percentage_serializer_->_reset ();

    if (this->positive_uncertainty_percentage_serializer_)
      this->positive_uncertainty_percentage_serializer_->_reset ();

    if (this->median_serializer_)
      this->median_serializer_->_reset ();

    if (this->standard_deviation_serializer_)
      this->standard_deviation_serializer_->_reset ();

    if (this->interquartile_range_serializer_)
      this->interquartile_range_serializer_->_reset ();

    if (this->range_serializer_)
      this->range_serializer_->_reset ();

    if (this->min_serializer_)
      this->min_serializer_->_reset ();

    if (this->max_serializer_)
      this->max_serializer_->_reset ();

    if (this->standard_error_serializer_)
      this->standard_error_serializer_->_reset ();

    if (this->standard_error_of_the_mean_serializer_)
      this->standard_error_of_the_mean_serializer_->_reset ();

    if (this->number_obs_serializer_)
      this->number_obs_serializer_->_reset ();

    if (this->skewnesss_serializer_)
      this->skewnesss_serializer_->_reset ();

    if (this->kurtosis_serializer_)
      this->kurtosis_serializer_->_reset ();
  }

  const char* units_delimited_list_sskel::
  _static_type ()
  {
    return "units_delimited_list common";
  }

  const char* units_delimited_list_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_units_delimited_list_sskel_inheritance_map_entry_ (
    units_delimited_list_sskel::_static_type (),
    ::common::delimited_list_sskel::_static_type ());

  void units_delimited_list_sskel::
  pre (const ::common::delimited_list& x)
  {
    assert (this->delimited_list_impl_);
    this->delimited_list_impl_->pre (x);
  }

  ::std::string units_delimited_list_sskel::
  delimiter ()
  {
    assert (this->delimited_list_impl_);
    return this->delimited_list_impl_->delimiter ();
  }

  // units_decimal_sskel
  //

  bool units_decimal_sskel::
  units_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->units_present () : false;
  }

  bool units_decimal_sskel::
  measurement_type_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->measurement_type_present () : false;
  }

  bool units_decimal_sskel::
  uncertainty_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->uncertainty_present () : false;
  }

  bool units_decimal_sskel::
  negative_uncertainty_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->negative_uncertainty_present () : false;
  }

  bool units_decimal_sskel::
  positive_uncertainty_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->positive_uncertainty_present () : false;
  }

  bool units_decimal_sskel::
  uncertainty_percentage_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->uncertainty_percentage_present () : false;
  }

  bool units_decimal_sskel::
  negative_uncertainty_percentage_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->negative_uncertainty_percentage_present () : false;
  }

  bool units_decimal_sskel::
  positive_uncertainty_percentage_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->positive_uncertainty_percentage_present () : false;
  }

  bool units_decimal_sskel::
  median_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->median_present () : false;
  }

  bool units_decimal_sskel::
  standard_deviation_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->standard_deviation_present () : false;
  }

  bool units_decimal_sskel::
  interquartile_range_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->interquartile_range_present () : false;
  }

  bool units_decimal_sskel::
  range_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->range_present () : false;
  }

  bool units_decimal_sskel::
  min_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->min_present () : false;
  }

  bool units_decimal_sskel::
  max_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->max_present () : false;
  }

  bool units_decimal_sskel::
  standard_error_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->standard_error_present () : false;
  }

  bool units_decimal_sskel::
  standard_error_of_the_mean_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->standard_error_of_the_mean_present () : false;
  }

  bool units_decimal_sskel::
  number_obs_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->number_obs_present () : false;
  }

  bool units_decimal_sskel::
  skewnesss_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->skewnesss_present () : false;
  }

  bool units_decimal_sskel::
  kurtosis_present ()
  {
    return this->units_decimal_impl_ ? this->units_decimal_impl_->kurtosis_present () : false;
  }

  void units_decimal_sskel::
  _reset ()
  {
    typedef ::xml_schema::double_sskel base;
    base::_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();

    if (this->measurement_type_serializer_)
      this->measurement_type_serializer_->_reset ();

    if (this->uncertainty_serializer_)
      this->uncertainty_serializer_->_reset ();

    if (this->negative_uncertainty_serializer_)
      this->negative_uncertainty_serializer_->_reset ();

    if (this->positive_uncertainty_serializer_)
      this->positive_uncertainty_serializer_->_reset ();

    if (this->uncertainty_percentage_serializer_)
      this->uncertainty_percentage_serializer_->_reset ();

    if (this->negative_uncertainty_percentage_serializer_)
      this->negative_uncertainty_percentage_serializer_->_reset ();

    if (this->positive_uncertainty_percentage_serializer_)
      this->positive_uncertainty_percentage_serializer_->_reset ();

    if (this->median_serializer_)
      this->median_serializer_->_reset ();

    if (this->standard_deviation_serializer_)
      this->standard_deviation_serializer_->_reset ();

    if (this->interquartile_range_serializer_)
      this->interquartile_range_serializer_->_reset ();

    if (this->range_serializer_)
      this->range_serializer_->_reset ();

    if (this->min_serializer_)
      this->min_serializer_->_reset ();

    if (this->max_serializer_)
      this->max_serializer_->_reset ();

    if (this->standard_error_serializer_)
      this->standard_error_serializer_->_reset ();

    if (this->standard_error_of_the_mean_serializer_)
      this->standard_error_of_the_mean_serializer_->_reset ();

    if (this->number_obs_serializer_)
      this->number_obs_serializer_->_reset ();

    if (this->skewnesss_serializer_)
      this->skewnesss_serializer_->_reset ();

    if (this->kurtosis_serializer_)
      this->kurtosis_serializer_->_reset ();
  }

  const char* units_decimal_sskel::
  _static_type ()
  {
    return "units_decimal common";
  }

  const char* units_decimal_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_units_decimal_sskel_inheritance_map_entry_ (
    units_decimal_sskel::_static_type (),
    ::xml_schema::double_sskel::_static_type ());

  void units_decimal_sskel::
  pre (double x)
  {
    assert (this->double_impl_);
    this->double_impl_->pre (x);
  }

  // units_decimal_nonnegative_sskel
  //

  const char* units_decimal_nonnegative_sskel::
  _static_type ()
  {
    return "units_decimal_nonnegative common";
  }

  const char* units_decimal_nonnegative_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_units_decimal_nonnegative_sskel_inheritance_map_entry_ (
    units_decimal_nonnegative_sskel::_static_type (),
    ::common::units_decimal_sskel::_static_type ());

  void units_decimal_nonnegative_sskel::
  pre (const ::common::units_decimal& x)
  {
    assert (this->units_decimal_impl_);
    this->units_decimal_impl_->pre (x);
  }

  ::std::string units_decimal_nonnegative_sskel::
  units ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->units ();
  }

  ::std::string units_decimal_nonnegative_sskel::
  measurement_type ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->measurement_type ();
  }

  double units_decimal_nonnegative_sskel::
  uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty ();
  }

  double units_decimal_nonnegative_sskel::
  negative_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty ();
  }

  double units_decimal_nonnegative_sskel::
  positive_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty ();
  }

  double units_decimal_nonnegative_sskel::
  uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty_percentage ();
  }

  double units_decimal_nonnegative_sskel::
  negative_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty_percentage ();
  }

  double units_decimal_nonnegative_sskel::
  positive_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty_percentage ();
  }

  double units_decimal_nonnegative_sskel::
  median ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->median ();
  }

  double units_decimal_nonnegative_sskel::
  standard_deviation ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_deviation ();
  }

  const ::common::two_doubles& units_decimal_nonnegative_sskel::
  interquartile_range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->interquartile_range ();
  }

  const ::common::two_doubles& units_decimal_nonnegative_sskel::
  range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->range ();
  }

  double units_decimal_nonnegative_sskel::
  min ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->min ();
  }

  double units_decimal_nonnegative_sskel::
  max ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->max ();
  }

  double units_decimal_nonnegative_sskel::
  standard_error ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error ();
  }

  double units_decimal_nonnegative_sskel::
  standard_error_of_the_mean ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error_of_the_mean ();
  }

  int units_decimal_nonnegative_sskel::
  number_obs ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->number_obs ();
  }

  double units_decimal_nonnegative_sskel::
  skewnesss ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->skewnesss ();
  }

  double units_decimal_nonnegative_sskel::
  kurtosis ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->kurtosis ();
  }

  // units_unsignedShort_sskel
  //

  bool units_unsignedShort_sskel::
  measurement_type_present ()
  {
    return this->units_unsignedShort_impl_ ? this->units_unsignedShort_impl_->measurement_type_present () : false;
  }

  bool units_unsignedShort_sskel::
  units_present ()
  {
    return this->units_unsignedShort_impl_ ? this->units_unsignedShort_impl_->units_present () : false;
  }

  void units_unsignedShort_sskel::
  _reset ()
  {
    typedef ::xml_schema::unsigned_short_sskel base;
    base::_reset ();

    if (this->measurement_type_serializer_)
      this->measurement_type_serializer_->_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();
  }

  const char* units_unsignedShort_sskel::
  _static_type ()
  {
    return "units_unsignedShort common";
  }

  const char* units_unsignedShort_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_units_unsignedShort_sskel_inheritance_map_entry_ (
    units_unsignedShort_sskel::_static_type (),
    ::xml_schema::unsigned_short_sskel::_static_type ());

  void units_unsignedShort_sskel::
  pre (unsigned short x)
  {
    assert (this->unsigned_short_impl_);
    this->unsigned_short_impl_->pre (x);
  }

  // units_boolean_sskel
  //

  bool units_boolean_sskel::
  units_present ()
  {
    return this->units_boolean_impl_ ? this->units_boolean_impl_->units_present () : false;
  }

  void units_boolean_sskel::
  _reset ()
  {
    typedef ::xml_schema::boolean_sskel base;
    base::_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();
  }

  const char* units_boolean_sskel::
  _static_type ()
  {
    return "units_boolean common";
  }

  const char* units_boolean_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_units_boolean_sskel_inheritance_map_entry_ (
    units_boolean_sskel::_static_type (),
    ::xml_schema::boolean_sskel::_static_type ());

  void units_boolean_sskel::
  pre (bool x)
  {
    assert (this->boolean_impl_);
    this->boolean_impl_->pre (x);
  }

  // fraction_sskel
  //

  const char* fraction_sskel::
  _static_type ()
  {
    return "fraction common";
  }

  const char* fraction_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_fraction_sskel_inheritance_map_entry_ (
    fraction_sskel::_static_type (),
    ::xml_schema::double_sskel::_static_type ());

  void fraction_sskel::
  pre (double x)
  {
    assert (this->double_impl_);
    this->double_impl_->pre (x);
  }

  // units_fraction_sskel
  //

  const char* units_fraction_sskel::
  _static_type ()
  {
    return "units_fraction common";
  }

  const char* units_fraction_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_units_fraction_sskel_inheritance_map_entry_ (
    units_fraction_sskel::_static_type (),
    ::common::units_decimal_sskel::_static_type ());

  void units_fraction_sskel::
  pre (const ::common::units_decimal& x)
  {
    assert (this->units_decimal_impl_);
    this->units_decimal_impl_->pre (x);
  }

  ::std::string units_fraction_sskel::
  units ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->units ();
  }

  ::std::string units_fraction_sskel::
  measurement_type ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->measurement_type ();
  }

  double units_fraction_sskel::
  uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty ();
  }

  double units_fraction_sskel::
  negative_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty ();
  }

  double units_fraction_sskel::
  positive_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty ();
  }

  double units_fraction_sskel::
  uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty_percentage ();
  }

  double units_fraction_sskel::
  negative_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty_percentage ();
  }

  double units_fraction_sskel::
  positive_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty_percentage ();
  }

  double units_fraction_sskel::
  median ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->median ();
  }

  double units_fraction_sskel::
  standard_deviation ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_deviation ();
  }

  const ::common::two_doubles& units_fraction_sskel::
  interquartile_range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->interquartile_range ();
  }

  const ::common::two_doubles& units_fraction_sskel::
  range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->range ();
  }

  double units_fraction_sskel::
  min ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->min ();
  }

  double units_fraction_sskel::
  max ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->max ();
  }

  double units_fraction_sskel::
  standard_error ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error ();
  }

  double units_fraction_sskel::
  standard_error_of_the_mean ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error_of_the_mean ();
  }

  int units_fraction_sskel::
  number_obs ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->number_obs ();
  }

  double units_fraction_sskel::
  skewnesss ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->skewnesss ();
  }

  double units_fraction_sskel::
  kurtosis ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->kurtosis ();
  }

  // units_string_sskel
  //

  bool units_string_sskel::
  units_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->units_present () : false;
  }

  bool units_string_sskel::
  measurement_type_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->measurement_type_present () : false;
  }

  bool units_string_sskel::
  uncertainty_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->uncertainty_present () : false;
  }

  bool units_string_sskel::
  negative_uncertainty_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->negative_uncertainty_present () : false;
  }

  bool units_string_sskel::
  positive_uncertainty_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->positive_uncertainty_present () : false;
  }

  bool units_string_sskel::
  uncertainty_percentage_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->uncertainty_percentage_present () : false;
  }

  bool units_string_sskel::
  negative_uncertainty_percentage_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->negative_uncertainty_percentage_present () : false;
  }

  bool units_string_sskel::
  positive_uncertainty_percentage_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->positive_uncertainty_percentage_present () : false;
  }

  bool units_string_sskel::
  median_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->median_present () : false;
  }

  bool units_string_sskel::
  standard_deviation_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->standard_deviation_present () : false;
  }

  bool units_string_sskel::
  interquartile_range_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->interquartile_range_present () : false;
  }

  bool units_string_sskel::
  range_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->range_present () : false;
  }

  bool units_string_sskel::
  min_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->min_present () : false;
  }

  bool units_string_sskel::
  max_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->max_present () : false;
  }

  bool units_string_sskel::
  standard_error_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->standard_error_present () : false;
  }

  bool units_string_sskel::
  standard_error_of_the_mean_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->standard_error_of_the_mean_present () : false;
  }

  bool units_string_sskel::
  number_obs_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->number_obs_present () : false;
  }

  bool units_string_sskel::
  skewnesss_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->skewnesss_present () : false;
  }

  bool units_string_sskel::
  kurtosis_present ()
  {
    return this->units_string_impl_ ? this->units_string_impl_->kurtosis_present () : false;
  }

  void units_string_sskel::
  _reset ()
  {
    typedef ::xml_schema::string_sskel base;
    base::_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();

    if (this->measurement_type_serializer_)
      this->measurement_type_serializer_->_reset ();

    if (this->uncertainty_serializer_)
      this->uncertainty_serializer_->_reset ();

    if (this->negative_uncertainty_serializer_)
      this->negative_uncertainty_serializer_->_reset ();

    if (this->positive_uncertainty_serializer_)
      this->positive_uncertainty_serializer_->_reset ();

    if (this->uncertainty_percentage_serializer_)
      this->uncertainty_percentage_serializer_->_reset ();

    if (this->negative_uncertainty_percentage_serializer_)
      this->negative_uncertainty_percentage_serializer_->_reset ();

    if (this->positive_uncertainty_percentage_serializer_)
      this->positive_uncertainty_percentage_serializer_->_reset ();

    if (this->median_serializer_)
      this->median_serializer_->_reset ();

    if (this->standard_deviation_serializer_)
      this->standard_deviation_serializer_->_reset ();

    if (this->interquartile_range_serializer_)
      this->interquartile_range_serializer_->_reset ();

    if (this->range_serializer_)
      this->range_serializer_->_reset ();

    if (this->min_serializer_)
      this->min_serializer_->_reset ();

    if (this->max_serializer_)
      this->max_serializer_->_reset ();

    if (this->standard_error_serializer_)
      this->standard_error_serializer_->_reset ();

    if (this->standard_error_of_the_mean_serializer_)
      this->standard_error_of_the_mean_serializer_->_reset ();

    if (this->number_obs_serializer_)
      this->number_obs_serializer_->_reset ();

    if (this->skewnesss_serializer_)
      this->skewnesss_serializer_->_reset ();

    if (this->kurtosis_serializer_)
      this->kurtosis_serializer_->_reset ();
  }

  const char* units_string_sskel::
  _static_type ()
  {
    return "units_string common";
  }

  const char* units_string_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_units_string_sskel_inheritance_map_entry_ (
    units_string_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void units_string_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // data_storage_formats_sskel
  //

  const char* data_storage_formats_sskel::
  _static_type ()
  {
    return "data_storage_formats common";
  }

  const char* data_storage_formats_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_data_storage_formats_sskel_inheritance_map_entry_ (
    data_storage_formats_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void data_storage_formats_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  const char* const data_storage_formats_sskel::_xsde_data_storage_formats_sskel_enums_[7UL] = 
  {
    "HDF5",
    "MATLAB",
    "Matlab",
    "XML",
    "hdf5",
    "matlab",
    "xml"
  };

  // threshold_type_sskel
  //

  const char* threshold_type_sskel::
  _static_type ()
  {
    return "threshold_type common";
  }

  const char* threshold_type_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_threshold_type_sskel_inheritance_map_entry_ (
    threshold_type_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void threshold_type_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  const char* const threshold_type_sskel::_xsde_threshold_type_sskel_enums_[6UL] = 
  {
    "lower_bound",
    "negative",
    "non_negative",
    "non_positive",
    "positive",
    "upper_bound"
  };

  // transition_threshold_sskel
  //

  bool transition_threshold_sskel::
  variable_ID_present ()
  {
    return this->transition_threshold_impl_ ? this->transition_threshold_impl_->variable_ID_present () : false;
  }

  void transition_threshold_sskel::
  _reset ()
  {
    typedef ::common::units_decimal_sskel base;
    base::_reset ();

    if (this->quantity_serializer_)
      this->quantity_serializer_->_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    if (this->variable_ID_serializer_)
      this->variable_ID_serializer_->_reset ();
  }

  const char* transition_threshold_sskel::
  _static_type ()
  {
    return "transition_threshold common";
  }

  const char* transition_threshold_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_transition_threshold_sskel_inheritance_map_entry_ (
    transition_threshold_sskel::_static_type (),
    ::common::units_decimal_sskel::_static_type ());

  void transition_threshold_sskel::
  pre (const ::common::units_decimal& x)
  {
    assert (this->units_decimal_impl_);
    this->units_decimal_impl_->pre (x);
  }

  ::std::string transition_threshold_sskel::
  units ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->units ();
  }

  ::std::string transition_threshold_sskel::
  measurement_type ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->measurement_type ();
  }

  double transition_threshold_sskel::
  uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty ();
  }

  double transition_threshold_sskel::
  negative_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty ();
  }

  double transition_threshold_sskel::
  positive_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty ();
  }

  double transition_threshold_sskel::
  uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty_percentage ();
  }

  double transition_threshold_sskel::
  negative_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty_percentage ();
  }

  double transition_threshold_sskel::
  positive_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty_percentage ();
  }

  double transition_threshold_sskel::
  median ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->median ();
  }

  double transition_threshold_sskel::
  standard_deviation ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_deviation ();
  }

  const ::common::two_doubles& transition_threshold_sskel::
  interquartile_range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->interquartile_range ();
  }

  const ::common::two_doubles& transition_threshold_sskel::
  range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->range ();
  }

  double transition_threshold_sskel::
  min ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->min ();
  }

  double transition_threshold_sskel::
  max ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->max ();
  }

  double transition_threshold_sskel::
  standard_error ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error ();
  }

  double transition_threshold_sskel::
  standard_error_of_the_mean ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error_of_the_mean ();
  }

  int transition_threshold_sskel::
  number_obs ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->number_obs ();
  }

  double transition_threshold_sskel::
  skewnesss ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->skewnesss ();
  }

  double transition_threshold_sskel::
  kurtosis ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->kurtosis ();
  }
}

namespace common
{
  // Element validation and serialization for custom_sskel.
  //
  void custom_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    while (this->any_next ())
    {
      ::std::string ns, name;
      this->any (ns, name);

      if (!name.empty ())
      {
        if (ns.empty ())
        {
          this->_start_element (name.c_str ());
        }
        else
        {
          this->_start_element (ns.c_str (), name.c_str ());
        }

        this->serialize_any ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_element);
        return;
      }
    }
  }
}

namespace common
{
  // Attribute validation and serialization for units_double_list_sskel.
  //
  void units_double_list_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::double_list_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }

    // measurement_type
    //
    if (this->measurement_type_present ())
    {
      const ::std::string& r = this->measurement_type ();

      if (this->measurement_type_serializer_)
      {
        this->measurement_type_serializer_->pre (r);
        this->_start_attribute ("measurement_type");
        this->measurement_type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->measurement_type_serializer_->post ();
      }
    }

    // uncertainty
    //
    if (this->uncertainty_present ())
    {
      double r = this->uncertainty ();

      if (this->uncertainty_serializer_)
      {
        this->uncertainty_serializer_->pre (r);
        this->_start_attribute ("uncertainty");
        this->uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_serializer_->post ();
      }
    }

    // negative_uncertainty
    //
    if (this->negative_uncertainty_present ())
    {
      double r = this->negative_uncertainty ();

      if (this->negative_uncertainty_serializer_)
      {
        this->negative_uncertainty_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty");
        this->negative_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_serializer_->post ();
      }
    }

    // positive_uncertainty
    //
    if (this->positive_uncertainty_present ())
    {
      double r = this->positive_uncertainty ();

      if (this->positive_uncertainty_serializer_)
      {
        this->positive_uncertainty_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty");
        this->positive_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_serializer_->post ();
      }
    }

    // uncertainty_percentage
    //
    if (this->uncertainty_percentage_present ())
    {
      double r = this->uncertainty_percentage ();

      if (this->uncertainty_percentage_serializer_)
      {
        this->uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("uncertainty_percentage");
        this->uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_percentage_serializer_->post ();
      }
    }

    // negative_uncertainty_percentage
    //
    if (this->negative_uncertainty_percentage_present ())
    {
      double r = this->negative_uncertainty_percentage ();

      if (this->negative_uncertainty_percentage_serializer_)
      {
        this->negative_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty_percentage");
        this->negative_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_percentage_serializer_->post ();
      }
    }

    // positive_uncertainty_percentage
    //
    if (this->positive_uncertainty_percentage_present ())
    {
      double r = this->positive_uncertainty_percentage ();

      if (this->positive_uncertainty_percentage_serializer_)
      {
        this->positive_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty_percentage");
        this->positive_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_percentage_serializer_->post ();
      }
    }

    // median
    //
    if (this->median_present ())
    {
      double r = this->median ();

      if (this->median_serializer_)
      {
        this->median_serializer_->pre (r);
        this->_start_attribute ("median");
        this->median_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->median_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->median_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->median_serializer_->post ();
      }
    }

    // standard_deviation
    //
    if (this->standard_deviation_present ())
    {
      double r = this->standard_deviation ();

      if (this->standard_deviation_serializer_)
      {
        this->standard_deviation_serializer_->pre (r);
        this->_start_attribute ("standard_deviation");
        this->standard_deviation_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_deviation_serializer_->post ();
      }
    }

    // interquartile_range
    //
    if (this->interquartile_range_present ())
    {
      const ::common::two_doubles& r = this->interquartile_range ();

      if (this->interquartile_range_serializer_)
      {
        this->interquartile_range_serializer_->pre (r);
        this->_start_attribute ("interquartile_range");
        this->interquartile_range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->interquartile_range_serializer_->post ();
      }
    }

    // range
    //
    if (this->range_present ())
    {
      const ::common::two_doubles& r = this->range ();

      if (this->range_serializer_)
      {
        this->range_serializer_->pre (r);
        this->_start_attribute ("range");
        this->range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->range_serializer_->post ();
      }
    }

    // min
    //
    if (this->min_present ())
    {
      double r = this->min ();

      if (this->min_serializer_)
      {
        this->min_serializer_->pre (r);
        this->_start_attribute ("min");
        this->min_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->min_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->min_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->min_serializer_->post ();
      }
    }

    // max
    //
    if (this->max_present ())
    {
      double r = this->max ();

      if (this->max_serializer_)
      {
        this->max_serializer_->pre (r);
        this->_start_attribute ("max");
        this->max_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->max_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->max_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->max_serializer_->post ();
      }
    }

    // standard_error
    //
    if (this->standard_error_present ())
    {
      double r = this->standard_error ();

      if (this->standard_error_serializer_)
      {
        this->standard_error_serializer_->pre (r);
        this->_start_attribute ("standard_error");
        this->standard_error_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_serializer_->post ();
      }
    }

    // standard_error_of_the_mean
    //
    if (this->standard_error_of_the_mean_present ())
    {
      double r = this->standard_error_of_the_mean ();

      if (this->standard_error_of_the_mean_serializer_)
      {
        this->standard_error_of_the_mean_serializer_->pre (r);
        this->_start_attribute ("standard_error_of_the_mean");
        this->standard_error_of_the_mean_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_of_the_mean_serializer_->post ();
      }
    }

    // number_obs
    //
    if (this->number_obs_present ())
    {
      int r = this->number_obs ();

      if (this->number_obs_serializer_)
      {
        this->number_obs_serializer_->pre (r);
        this->_start_attribute ("number_obs");
        this->number_obs_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->number_obs_serializer_->post ();
      }
    }

    // skewnesss
    //
    if (this->skewnesss_present ())
    {
      double r = this->skewnesss ();

      if (this->skewnesss_serializer_)
      {
        this->skewnesss_serializer_->pre (r);
        this->_start_attribute ("skewnesss");
        this->skewnesss_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->skewnesss_serializer_->post ();
      }
    }

    // kurtosis
    //
    if (this->kurtosis_present ())
    {
      double r = this->kurtosis ();

      if (this->kurtosis_serializer_)
      {
        this->kurtosis_serializer_->pre (r);
        this->_start_attribute ("kurtosis");
        this->kurtosis_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->kurtosis_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for delimited_list_sskel.
  //
  void delimited_list_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::xml_schema::string_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // delimiter
    //
    if (this->delimiter_present ())
    {
      const ::std::string& r = this->delimiter ();

      if (this->delimiter_serializer_)
      {
        this->delimiter_serializer_->pre (r);
        this->_start_attribute ("delimiter");
        this->delimiter_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->delimiter_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->delimiter_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->delimiter_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for units_delimited_list_sskel.
  //
  void units_delimited_list_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::delimited_list_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }

    // measurement_type
    //
    if (this->measurement_type_present ())
    {
      const ::std::string& r = this->measurement_type ();

      if (this->measurement_type_serializer_)
      {
        this->measurement_type_serializer_->pre (r);
        this->_start_attribute ("measurement_type");
        this->measurement_type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->measurement_type_serializer_->post ();
      }
    }

    // uncertainty
    //
    if (this->uncertainty_present ())
    {
      double r = this->uncertainty ();

      if (this->uncertainty_serializer_)
      {
        this->uncertainty_serializer_->pre (r);
        this->_start_attribute ("uncertainty");
        this->uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_serializer_->post ();
      }
    }

    // negative_uncertainty
    //
    if (this->negative_uncertainty_present ())
    {
      double r = this->negative_uncertainty ();

      if (this->negative_uncertainty_serializer_)
      {
        this->negative_uncertainty_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty");
        this->negative_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_serializer_->post ();
      }
    }

    // positive_uncertainty
    //
    if (this->positive_uncertainty_present ())
    {
      double r = this->positive_uncertainty ();

      if (this->positive_uncertainty_serializer_)
      {
        this->positive_uncertainty_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty");
        this->positive_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_serializer_->post ();
      }
    }

    // uncertainty_percentage
    //
    if (this->uncertainty_percentage_present ())
    {
      double r = this->uncertainty_percentage ();

      if (this->uncertainty_percentage_serializer_)
      {
        this->uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("uncertainty_percentage");
        this->uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_percentage_serializer_->post ();
      }
    }

    // negative_uncertainty_percentage
    //
    if (this->negative_uncertainty_percentage_present ())
    {
      double r = this->negative_uncertainty_percentage ();

      if (this->negative_uncertainty_percentage_serializer_)
      {
        this->negative_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty_percentage");
        this->negative_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_percentage_serializer_->post ();
      }
    }

    // positive_uncertainty_percentage
    //
    if (this->positive_uncertainty_percentage_present ())
    {
      double r = this->positive_uncertainty_percentage ();

      if (this->positive_uncertainty_percentage_serializer_)
      {
        this->positive_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty_percentage");
        this->positive_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_percentage_serializer_->post ();
      }
    }

    // median
    //
    if (this->median_present ())
    {
      double r = this->median ();

      if (this->median_serializer_)
      {
        this->median_serializer_->pre (r);
        this->_start_attribute ("median");
        this->median_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->median_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->median_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->median_serializer_->post ();
      }
    }

    // standard_deviation
    //
    if (this->standard_deviation_present ())
    {
      double r = this->standard_deviation ();

      if (this->standard_deviation_serializer_)
      {
        this->standard_deviation_serializer_->pre (r);
        this->_start_attribute ("standard_deviation");
        this->standard_deviation_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_deviation_serializer_->post ();
      }
    }

    // interquartile_range
    //
    if (this->interquartile_range_present ())
    {
      const ::common::two_doubles& r = this->interquartile_range ();

      if (this->interquartile_range_serializer_)
      {
        this->interquartile_range_serializer_->pre (r);
        this->_start_attribute ("interquartile_range");
        this->interquartile_range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->interquartile_range_serializer_->post ();
      }
    }

    // range
    //
    if (this->range_present ())
    {
      const ::common::two_doubles& r = this->range ();

      if (this->range_serializer_)
      {
        this->range_serializer_->pre (r);
        this->_start_attribute ("range");
        this->range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->range_serializer_->post ();
      }
    }

    // min
    //
    if (this->min_present ())
    {
      double r = this->min ();

      if (this->min_serializer_)
      {
        this->min_serializer_->pre (r);
        this->_start_attribute ("min");
        this->min_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->min_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->min_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->min_serializer_->post ();
      }
    }

    // max
    //
    if (this->max_present ())
    {
      double r = this->max ();

      if (this->max_serializer_)
      {
        this->max_serializer_->pre (r);
        this->_start_attribute ("max");
        this->max_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->max_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->max_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->max_serializer_->post ();
      }
    }

    // standard_error
    //
    if (this->standard_error_present ())
    {
      double r = this->standard_error ();

      if (this->standard_error_serializer_)
      {
        this->standard_error_serializer_->pre (r);
        this->_start_attribute ("standard_error");
        this->standard_error_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_serializer_->post ();
      }
    }

    // standard_error_of_the_mean
    //
    if (this->standard_error_of_the_mean_present ())
    {
      double r = this->standard_error_of_the_mean ();

      if (this->standard_error_of_the_mean_serializer_)
      {
        this->standard_error_of_the_mean_serializer_->pre (r);
        this->_start_attribute ("standard_error_of_the_mean");
        this->standard_error_of_the_mean_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_of_the_mean_serializer_->post ();
      }
    }

    // number_obs
    //
    if (this->number_obs_present ())
    {
      int r = this->number_obs ();

      if (this->number_obs_serializer_)
      {
        this->number_obs_serializer_->pre (r);
        this->_start_attribute ("number_obs");
        this->number_obs_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->number_obs_serializer_->post ();
      }
    }

    // skewnesss
    //
    if (this->skewnesss_present ())
    {
      double r = this->skewnesss ();

      if (this->skewnesss_serializer_)
      {
        this->skewnesss_serializer_->pre (r);
        this->_start_attribute ("skewnesss");
        this->skewnesss_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->skewnesss_serializer_->post ();
      }
    }

    // kurtosis
    //
    if (this->kurtosis_present ())
    {
      double r = this->kurtosis ();

      if (this->kurtosis_serializer_)
      {
        this->kurtosis_serializer_->pre (r);
        this->_start_attribute ("kurtosis");
        this->kurtosis_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->kurtosis_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for units_decimal_sskel.
  //
  void units_decimal_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::xml_schema::double_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }

    // measurement_type
    //
    if (this->measurement_type_present ())
    {
      const ::std::string& r = this->measurement_type ();

      if (this->measurement_type_serializer_)
      {
        this->measurement_type_serializer_->pre (r);
        this->_start_attribute ("measurement_type");
        this->measurement_type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->measurement_type_serializer_->post ();
      }
    }

    // uncertainty
    //
    if (this->uncertainty_present ())
    {
      double r = this->uncertainty ();

      if (this->uncertainty_serializer_)
      {
        this->uncertainty_serializer_->pre (r);
        this->_start_attribute ("uncertainty");
        this->uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_serializer_->post ();
      }
    }

    // negative_uncertainty
    //
    if (this->negative_uncertainty_present ())
    {
      double r = this->negative_uncertainty ();

      if (this->negative_uncertainty_serializer_)
      {
        this->negative_uncertainty_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty");
        this->negative_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_serializer_->post ();
      }
    }

    // positive_uncertainty
    //
    if (this->positive_uncertainty_present ())
    {
      double r = this->positive_uncertainty ();

      if (this->positive_uncertainty_serializer_)
      {
        this->positive_uncertainty_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty");
        this->positive_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_serializer_->post ();
      }
    }

    // uncertainty_percentage
    //
    if (this->uncertainty_percentage_present ())
    {
      double r = this->uncertainty_percentage ();

      if (this->uncertainty_percentage_serializer_)
      {
        this->uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("uncertainty_percentage");
        this->uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_percentage_serializer_->post ();
      }
    }

    // negative_uncertainty_percentage
    //
    if (this->negative_uncertainty_percentage_present ())
    {
      double r = this->negative_uncertainty_percentage ();

      if (this->negative_uncertainty_percentage_serializer_)
      {
        this->negative_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty_percentage");
        this->negative_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_percentage_serializer_->post ();
      }
    }

    // positive_uncertainty_percentage
    //
    if (this->positive_uncertainty_percentage_present ())
    {
      double r = this->positive_uncertainty_percentage ();

      if (this->positive_uncertainty_percentage_serializer_)
      {
        this->positive_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty_percentage");
        this->positive_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_percentage_serializer_->post ();
      }
    }

    // median
    //
    if (this->median_present ())
    {
      double r = this->median ();

      if (this->median_serializer_)
      {
        this->median_serializer_->pre (r);
        this->_start_attribute ("median");
        this->median_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->median_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->median_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->median_serializer_->post ();
      }
    }

    // standard_deviation
    //
    if (this->standard_deviation_present ())
    {
      double r = this->standard_deviation ();

      if (this->standard_deviation_serializer_)
      {
        this->standard_deviation_serializer_->pre (r);
        this->_start_attribute ("standard_deviation");
        this->standard_deviation_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_deviation_serializer_->post ();
      }
    }

    // interquartile_range
    //
    if (this->interquartile_range_present ())
    {
      const ::common::two_doubles& r = this->interquartile_range ();

      if (this->interquartile_range_serializer_)
      {
        this->interquartile_range_serializer_->pre (r);
        this->_start_attribute ("interquartile_range");
        this->interquartile_range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->interquartile_range_serializer_->post ();
      }
    }

    // range
    //
    if (this->range_present ())
    {
      const ::common::two_doubles& r = this->range ();

      if (this->range_serializer_)
      {
        this->range_serializer_->pre (r);
        this->_start_attribute ("range");
        this->range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->range_serializer_->post ();
      }
    }

    // min
    //
    if (this->min_present ())
    {
      double r = this->min ();

      if (this->min_serializer_)
      {
        this->min_serializer_->pre (r);
        this->_start_attribute ("min");
        this->min_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->min_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->min_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->min_serializer_->post ();
      }
    }

    // max
    //
    if (this->max_present ())
    {
      double r = this->max ();

      if (this->max_serializer_)
      {
        this->max_serializer_->pre (r);
        this->_start_attribute ("max");
        this->max_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->max_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->max_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->max_serializer_->post ();
      }
    }

    // standard_error
    //
    if (this->standard_error_present ())
    {
      double r = this->standard_error ();

      if (this->standard_error_serializer_)
      {
        this->standard_error_serializer_->pre (r);
        this->_start_attribute ("standard_error");
        this->standard_error_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_serializer_->post ();
      }
    }

    // standard_error_of_the_mean
    //
    if (this->standard_error_of_the_mean_present ())
    {
      double r = this->standard_error_of_the_mean ();

      if (this->standard_error_of_the_mean_serializer_)
      {
        this->standard_error_of_the_mean_serializer_->pre (r);
        this->_start_attribute ("standard_error_of_the_mean");
        this->standard_error_of_the_mean_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_of_the_mean_serializer_->post ();
      }
    }

    // number_obs
    //
    if (this->number_obs_present ())
    {
      int r = this->number_obs ();

      if (this->number_obs_serializer_)
      {
        this->number_obs_serializer_->pre (r);
        this->_start_attribute ("number_obs");
        this->number_obs_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->number_obs_serializer_->post ();
      }
    }

    // skewnesss
    //
    if (this->skewnesss_present ())
    {
      double r = this->skewnesss ();

      if (this->skewnesss_serializer_)
      {
        this->skewnesss_serializer_->pre (r);
        this->_start_attribute ("skewnesss");
        this->skewnesss_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->skewnesss_serializer_->post ();
      }
    }

    // kurtosis
    //
    if (this->kurtosis_present ())
    {
      double r = this->kurtosis ();

      if (this->kurtosis_serializer_)
      {
        this->kurtosis_serializer_->pre (r);
        this->_start_attribute ("kurtosis");
        this->kurtosis_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->kurtosis_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for units_decimal_nonnegative_sskel.
  //
  void units_decimal_nonnegative_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }

    // measurement_type
    //
    if (this->measurement_type_present ())
    {
      const ::std::string& r = this->measurement_type ();

      if (this->measurement_type_serializer_)
      {
        this->measurement_type_serializer_->pre (r);
        this->_start_attribute ("measurement_type");
        this->measurement_type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->measurement_type_serializer_->post ();
      }
    }

    // uncertainty
    //
    if (this->uncertainty_present ())
    {
      double r = this->uncertainty ();

      if (this->uncertainty_serializer_)
      {
        this->uncertainty_serializer_->pre (r);
        this->_start_attribute ("uncertainty");
        this->uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_serializer_->post ();
      }
    }

    // negative_uncertainty
    //
    if (this->negative_uncertainty_present ())
    {
      double r = this->negative_uncertainty ();

      if (this->negative_uncertainty_serializer_)
      {
        this->negative_uncertainty_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty");
        this->negative_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_serializer_->post ();
      }
    }

    // positive_uncertainty
    //
    if (this->positive_uncertainty_present ())
    {
      double r = this->positive_uncertainty ();

      if (this->positive_uncertainty_serializer_)
      {
        this->positive_uncertainty_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty");
        this->positive_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_serializer_->post ();
      }
    }

    // uncertainty_percentage
    //
    if (this->uncertainty_percentage_present ())
    {
      double r = this->uncertainty_percentage ();

      if (this->uncertainty_percentage_serializer_)
      {
        this->uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("uncertainty_percentage");
        this->uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_percentage_serializer_->post ();
      }
    }

    // negative_uncertainty_percentage
    //
    if (this->negative_uncertainty_percentage_present ())
    {
      double r = this->negative_uncertainty_percentage ();

      if (this->negative_uncertainty_percentage_serializer_)
      {
        this->negative_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty_percentage");
        this->negative_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_percentage_serializer_->post ();
      }
    }

    // positive_uncertainty_percentage
    //
    if (this->positive_uncertainty_percentage_present ())
    {
      double r = this->positive_uncertainty_percentage ();

      if (this->positive_uncertainty_percentage_serializer_)
      {
        this->positive_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty_percentage");
        this->positive_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_percentage_serializer_->post ();
      }
    }

    // median
    //
    if (this->median_present ())
    {
      double r = this->median ();

      if (this->median_serializer_)
      {
        this->median_serializer_->pre (r);
        this->_start_attribute ("median");
        this->median_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->median_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->median_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->median_serializer_->post ();
      }
    }

    // standard_deviation
    //
    if (this->standard_deviation_present ())
    {
      double r = this->standard_deviation ();

      if (this->standard_deviation_serializer_)
      {
        this->standard_deviation_serializer_->pre (r);
        this->_start_attribute ("standard_deviation");
        this->standard_deviation_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_deviation_serializer_->post ();
      }
    }

    // interquartile_range
    //
    if (this->interquartile_range_present ())
    {
      const ::common::two_doubles& r = this->interquartile_range ();

      if (this->interquartile_range_serializer_)
      {
        this->interquartile_range_serializer_->pre (r);
        this->_start_attribute ("interquartile_range");
        this->interquartile_range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->interquartile_range_serializer_->post ();
      }
    }

    // range
    //
    if (this->range_present ())
    {
      const ::common::two_doubles& r = this->range ();

      if (this->range_serializer_)
      {
        this->range_serializer_->pre (r);
        this->_start_attribute ("range");
        this->range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->range_serializer_->post ();
      }
    }

    // min
    //
    if (this->min_present ())
    {
      double r = this->min ();

      if (this->min_serializer_)
      {
        this->min_serializer_->pre (r);
        this->_start_attribute ("min");
        this->min_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->min_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->min_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->min_serializer_->post ();
      }
    }

    // max
    //
    if (this->max_present ())
    {
      double r = this->max ();

      if (this->max_serializer_)
      {
        this->max_serializer_->pre (r);
        this->_start_attribute ("max");
        this->max_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->max_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->max_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->max_serializer_->post ();
      }
    }

    // standard_error
    //
    if (this->standard_error_present ())
    {
      double r = this->standard_error ();

      if (this->standard_error_serializer_)
      {
        this->standard_error_serializer_->pre (r);
        this->_start_attribute ("standard_error");
        this->standard_error_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_serializer_->post ();
      }
    }

    // standard_error_of_the_mean
    //
    if (this->standard_error_of_the_mean_present ())
    {
      double r = this->standard_error_of_the_mean ();

      if (this->standard_error_of_the_mean_serializer_)
      {
        this->standard_error_of_the_mean_serializer_->pre (r);
        this->_start_attribute ("standard_error_of_the_mean");
        this->standard_error_of_the_mean_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_of_the_mean_serializer_->post ();
      }
    }

    // number_obs
    //
    if (this->number_obs_present ())
    {
      int r = this->number_obs ();

      if (this->number_obs_serializer_)
      {
        this->number_obs_serializer_->pre (r);
        this->_start_attribute ("number_obs");
        this->number_obs_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->number_obs_serializer_->post ();
      }
    }

    // skewnesss
    //
    if (this->skewnesss_present ())
    {
      double r = this->skewnesss ();

      if (this->skewnesss_serializer_)
      {
        this->skewnesss_serializer_->pre (r);
        this->_start_attribute ("skewnesss");
        this->skewnesss_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->skewnesss_serializer_->post ();
      }
    }

    // kurtosis
    //
    if (this->kurtosis_present ())
    {
      double r = this->kurtosis ();

      if (this->kurtosis_serializer_)
      {
        this->kurtosis_serializer_->pre (r);
        this->_start_attribute ("kurtosis");
        this->kurtosis_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->kurtosis_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for units_unsignedShort_sskel.
  //
  void units_unsignedShort_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::xml_schema::unsigned_short_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // measurement_type
    //
    if (this->measurement_type_present ())
    {
      const ::std::string& r = this->measurement_type ();

      if (this->measurement_type_serializer_)
      {
        this->measurement_type_serializer_->pre (r);
        this->_start_attribute ("measurement_type");
        this->measurement_type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->measurement_type_serializer_->post ();
      }
    }

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for units_boolean_sskel.
  //
  void units_boolean_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::xml_schema::boolean_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for units_fraction_sskel.
  //
  void units_fraction_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }

    // measurement_type
    //
    if (this->measurement_type_present ())
    {
      const ::std::string& r = this->measurement_type ();

      if (this->measurement_type_serializer_)
      {
        this->measurement_type_serializer_->pre (r);
        this->_start_attribute ("measurement_type");
        this->measurement_type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->measurement_type_serializer_->post ();
      }
    }

    // uncertainty
    //
    if (this->uncertainty_present ())
    {
      double r = this->uncertainty ();

      if (this->uncertainty_serializer_)
      {
        this->uncertainty_serializer_->pre (r);
        this->_start_attribute ("uncertainty");
        this->uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_serializer_->post ();
      }
    }

    // negative_uncertainty
    //
    if (this->negative_uncertainty_present ())
    {
      double r = this->negative_uncertainty ();

      if (this->negative_uncertainty_serializer_)
      {
        this->negative_uncertainty_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty");
        this->negative_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_serializer_->post ();
      }
    }

    // positive_uncertainty
    //
    if (this->positive_uncertainty_present ())
    {
      double r = this->positive_uncertainty ();

      if (this->positive_uncertainty_serializer_)
      {
        this->positive_uncertainty_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty");
        this->positive_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_serializer_->post ();
      }
    }

    // uncertainty_percentage
    //
    if (this->uncertainty_percentage_present ())
    {
      double r = this->uncertainty_percentage ();

      if (this->uncertainty_percentage_serializer_)
      {
        this->uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("uncertainty_percentage");
        this->uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_percentage_serializer_->post ();
      }
    }

    // negative_uncertainty_percentage
    //
    if (this->negative_uncertainty_percentage_present ())
    {
      double r = this->negative_uncertainty_percentage ();

      if (this->negative_uncertainty_percentage_serializer_)
      {
        this->negative_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty_percentage");
        this->negative_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_percentage_serializer_->post ();
      }
    }

    // positive_uncertainty_percentage
    //
    if (this->positive_uncertainty_percentage_present ())
    {
      double r = this->positive_uncertainty_percentage ();

      if (this->positive_uncertainty_percentage_serializer_)
      {
        this->positive_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty_percentage");
        this->positive_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_percentage_serializer_->post ();
      }
    }

    // median
    //
    if (this->median_present ())
    {
      double r = this->median ();

      if (this->median_serializer_)
      {
        this->median_serializer_->pre (r);
        this->_start_attribute ("median");
        this->median_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->median_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->median_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->median_serializer_->post ();
      }
    }

    // standard_deviation
    //
    if (this->standard_deviation_present ())
    {
      double r = this->standard_deviation ();

      if (this->standard_deviation_serializer_)
      {
        this->standard_deviation_serializer_->pre (r);
        this->_start_attribute ("standard_deviation");
        this->standard_deviation_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_deviation_serializer_->post ();
      }
    }

    // interquartile_range
    //
    if (this->interquartile_range_present ())
    {
      const ::common::two_doubles& r = this->interquartile_range ();

      if (this->interquartile_range_serializer_)
      {
        this->interquartile_range_serializer_->pre (r);
        this->_start_attribute ("interquartile_range");
        this->interquartile_range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->interquartile_range_serializer_->post ();
      }
    }

    // range
    //
    if (this->range_present ())
    {
      const ::common::two_doubles& r = this->range ();

      if (this->range_serializer_)
      {
        this->range_serializer_->pre (r);
        this->_start_attribute ("range");
        this->range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->range_serializer_->post ();
      }
    }

    // min
    //
    if (this->min_present ())
    {
      double r = this->min ();

      if (this->min_serializer_)
      {
        this->min_serializer_->pre (r);
        this->_start_attribute ("min");
        this->min_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->min_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->min_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->min_serializer_->post ();
      }
    }

    // max
    //
    if (this->max_present ())
    {
      double r = this->max ();

      if (this->max_serializer_)
      {
        this->max_serializer_->pre (r);
        this->_start_attribute ("max");
        this->max_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->max_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->max_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->max_serializer_->post ();
      }
    }

    // standard_error
    //
    if (this->standard_error_present ())
    {
      double r = this->standard_error ();

      if (this->standard_error_serializer_)
      {
        this->standard_error_serializer_->pre (r);
        this->_start_attribute ("standard_error");
        this->standard_error_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_serializer_->post ();
      }
    }

    // standard_error_of_the_mean
    //
    if (this->standard_error_of_the_mean_present ())
    {
      double r = this->standard_error_of_the_mean ();

      if (this->standard_error_of_the_mean_serializer_)
      {
        this->standard_error_of_the_mean_serializer_->pre (r);
        this->_start_attribute ("standard_error_of_the_mean");
        this->standard_error_of_the_mean_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_of_the_mean_serializer_->post ();
      }
    }

    // number_obs
    //
    if (this->number_obs_present ())
    {
      int r = this->number_obs ();

      if (this->number_obs_serializer_)
      {
        this->number_obs_serializer_->pre (r);
        this->_start_attribute ("number_obs");
        this->number_obs_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->number_obs_serializer_->post ();
      }
    }

    // skewnesss
    //
    if (this->skewnesss_present ())
    {
      double r = this->skewnesss ();

      if (this->skewnesss_serializer_)
      {
        this->skewnesss_serializer_->pre (r);
        this->_start_attribute ("skewnesss");
        this->skewnesss_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->skewnesss_serializer_->post ();
      }
    }

    // kurtosis
    //
    if (this->kurtosis_present ())
    {
      double r = this->kurtosis ();

      if (this->kurtosis_serializer_)
      {
        this->kurtosis_serializer_->pre (r);
        this->_start_attribute ("kurtosis");
        this->kurtosis_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->kurtosis_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for units_string_sskel.
  //
  void units_string_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::xml_schema::string_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }

    // measurement_type
    //
    if (this->measurement_type_present ())
    {
      const ::std::string& r = this->measurement_type ();

      if (this->measurement_type_serializer_)
      {
        this->measurement_type_serializer_->pre (r);
        this->_start_attribute ("measurement_type");
        this->measurement_type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->measurement_type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->measurement_type_serializer_->post ();
      }
    }

    // uncertainty
    //
    if (this->uncertainty_present ())
    {
      double r = this->uncertainty ();

      if (this->uncertainty_serializer_)
      {
        this->uncertainty_serializer_->pre (r);
        this->_start_attribute ("uncertainty");
        this->uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_serializer_->post ();
      }
    }

    // negative_uncertainty
    //
    if (this->negative_uncertainty_present ())
    {
      double r = this->negative_uncertainty ();

      if (this->negative_uncertainty_serializer_)
      {
        this->negative_uncertainty_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty");
        this->negative_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_serializer_->post ();
      }
    }

    // positive_uncertainty
    //
    if (this->positive_uncertainty_present ())
    {
      double r = this->positive_uncertainty ();

      if (this->positive_uncertainty_serializer_)
      {
        this->positive_uncertainty_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty");
        this->positive_uncertainty_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_serializer_->post ();
      }
    }

    // uncertainty_percentage
    //
    if (this->uncertainty_percentage_present ())
    {
      double r = this->uncertainty_percentage ();

      if (this->uncertainty_percentage_serializer_)
      {
        this->uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("uncertainty_percentage");
        this->uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uncertainty_percentage_serializer_->post ();
      }
    }

    // negative_uncertainty_percentage
    //
    if (this->negative_uncertainty_percentage_present ())
    {
      double r = this->negative_uncertainty_percentage ();

      if (this->negative_uncertainty_percentage_serializer_)
      {
        this->negative_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("negative_uncertainty_percentage");
        this->negative_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->negative_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->negative_uncertainty_percentage_serializer_->post ();
      }
    }

    // positive_uncertainty_percentage
    //
    if (this->positive_uncertainty_percentage_present ())
    {
      double r = this->positive_uncertainty_percentage ();

      if (this->positive_uncertainty_percentage_serializer_)
      {
        this->positive_uncertainty_percentage_serializer_->pre (r);
        this->_start_attribute ("positive_uncertainty_percentage");
        this->positive_uncertainty_percentage_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->positive_uncertainty_percentage_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->positive_uncertainty_percentage_serializer_->post ();
      }
    }

    // median
    //
    if (this->median_present ())
    {
      double r = this->median ();

      if (this->median_serializer_)
      {
        this->median_serializer_->pre (r);
        this->_start_attribute ("median");
        this->median_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->median_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->median_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->median_serializer_->post ();
      }
    }

    // standard_deviation
    //
    if (this->standard_deviation_present ())
    {
      double r = this->standard_deviation ();

      if (this->standard_deviation_serializer_)
      {
        this->standard_deviation_serializer_->pre (r);
        this->_start_attribute ("standard_deviation");
        this->standard_deviation_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_deviation_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_deviation_serializer_->post ();
      }
    }

    // interquartile_range
    //
    if (this->interquartile_range_present ())
    {
      const ::common::two_doubles& r = this->interquartile_range ();

      if (this->interquartile_range_serializer_)
      {
        this->interquartile_range_serializer_->pre (r);
        this->_start_attribute ("interquartile_range");
        this->interquartile_range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->interquartile_range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->interquartile_range_serializer_->post ();
      }
    }

    // range
    //
    if (this->range_present ())
    {
      const ::common::two_doubles& r = this->range ();

      if (this->range_serializer_)
      {
        this->range_serializer_->pre (r);
        this->_start_attribute ("range");
        this->range_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->range_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->range_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->range_serializer_->post ();
      }
    }

    // min
    //
    if (this->min_present ())
    {
      double r = this->min ();

      if (this->min_serializer_)
      {
        this->min_serializer_->pre (r);
        this->_start_attribute ("min");
        this->min_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->min_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->min_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->min_serializer_->post ();
      }
    }

    // max
    //
    if (this->max_present ())
    {
      double r = this->max ();

      if (this->max_serializer_)
      {
        this->max_serializer_->pre (r);
        this->_start_attribute ("max");
        this->max_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->max_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->max_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->max_serializer_->post ();
      }
    }

    // standard_error
    //
    if (this->standard_error_present ())
    {
      double r = this->standard_error ();

      if (this->standard_error_serializer_)
      {
        this->standard_error_serializer_->pre (r);
        this->_start_attribute ("standard_error");
        this->standard_error_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_serializer_->post ();
      }
    }

    // standard_error_of_the_mean
    //
    if (this->standard_error_of_the_mean_present ())
    {
      double r = this->standard_error_of_the_mean ();

      if (this->standard_error_of_the_mean_serializer_)
      {
        this->standard_error_of_the_mean_serializer_->pre (r);
        this->_start_attribute ("standard_error_of_the_mean");
        this->standard_error_of_the_mean_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->standard_error_of_the_mean_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->standard_error_of_the_mean_serializer_->post ();
      }
    }

    // number_obs
    //
    if (this->number_obs_present ())
    {
      int r = this->number_obs ();

      if (this->number_obs_serializer_)
      {
        this->number_obs_serializer_->pre (r);
        this->_start_attribute ("number_obs");
        this->number_obs_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->number_obs_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->number_obs_serializer_->post ();
      }
    }

    // skewnesss
    //
    if (this->skewnesss_present ())
    {
      double r = this->skewnesss ();

      if (this->skewnesss_serializer_)
      {
        this->skewnesss_serializer_->pre (r);
        this->_start_attribute ("skewnesss");
        this->skewnesss_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->skewnesss_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->skewnesss_serializer_->post ();
      }
    }

    // kurtosis
    //
    if (this->kurtosis_present ())
    {
      double r = this->kurtosis ();

      if (this->kurtosis_serializer_)
      {
        this->kurtosis_serializer_->pre (r);
        this->_start_attribute ("kurtosis");
        this->kurtosis_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->kurtosis_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->kurtosis_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for transition_threshold_sskel.
  //
  void transition_threshold_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::units_decimal_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // quantity
    //
    {
      const ::std::string& r = this->quantity ();

      if (this->quantity_serializer_)
      {
        this->quantity_serializer_->pre (r);
        this->_start_attribute ("quantity");
        this->quantity_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->quantity_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->quantity_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->quantity_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
        return;
      }
    }

    // type
    //
    {
      const ::common::threshold_type& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->type_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
        return;
      }
    }

    // variable_ID
    //
    if (this->variable_ID_present ())
    {
      unsigned long long r = this->variable_ID ();

      if (this->variable_ID_serializer_)
      {
        this->variable_ID_serializer_->pre (r);
        this->_start_attribute ("variable_ID");
        this->variable_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->variable_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->variable_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->variable_ID_serializer_->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

