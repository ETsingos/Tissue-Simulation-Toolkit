// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef BASEMENT_MEMBRANE_HPP
#define BASEMENT_MEMBRANE_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "basement_membrane-fwd.hpp"

#ifndef XSDE_DONT_INCLUDE_INLINE
#define XSDE_DONT_INCLUDE_INLINE

#include "common.hpp"

#include "mesh.hpp"

#undef XSDE_DONT_INCLUDE_INLINE
#else

#include "common.hpp"

#include "mesh.hpp"

#endif // XSDE_DONT_INCLUDE_INLINE

namespace basement
{
  // basement_edge (variable-length)
  //
  class basement_edge: public ::mesh::edge
  {
    private:
    basement_edge (const basement_edge&);
    basement_edge& operator= (const basement_edge&);

    public:
    basement_edge ();

    basement_edge*
    _clone () const;

    ~basement_edge ();

    // tensile_strength
    //
    const ::common::units_decimal_nonnegative&
    tensile_strength () const;

    ::common::units_decimal_nonnegative&
    tensile_strength ();

    void
    tensile_strength (::common::units_decimal_nonnegative*);

    ::common::units_decimal_nonnegative*
    tensile_strength_detach ();

    // custom
    //
    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (basement_edge&) const;

    private:
    ::common::units_decimal_nonnegative* tensile_strength_;
    ::common::custom* custom_;
  };

  // basement_face (variable-length)
  //
  class basement_face: public ::mesh::face
  {
    private:
    basement_face (const basement_face&);
    basement_face& operator= (const basement_face&);

    public:
    basement_face ();

    basement_face*
    _clone () const;

    ~basement_face ();

    // thickness
    //
    const ::common::units_decimal_nonnegative&
    thickness () const;

    ::common::units_decimal_nonnegative&
    thickness ();

    void
    thickness (::common::units_decimal_nonnegative*);

    ::common::units_decimal_nonnegative*
    thickness_detach ();

    // custom
    //
    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (basement_face&) const;

    private:
    ::common::units_decimal_nonnegative* thickness_;
    ::common::custom* custom_;
  };

  // nodes (variable-length)
  //
  class nodes
  {
    private:
    nodes (const nodes&);
    nodes& operator= (const nodes&);

    public:
    nodes ();

    nodes*
    _clone () const;

    ~nodes ();

    // node
    //
    const ::mesh::node&
    node () const;

    ::mesh::node&
    node ();

    void
    node (::mesh::node*);

    ::mesh::node*
    node_detach ();

    // custom
    //
    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (nodes&) const;

    private:
    ::mesh::node* node_;
    ::common::custom* custom_;
  };

  // egdes (variable-length)
  //
  class egdes
  {
    private:
    egdes (const egdes&);
    egdes& operator= (const egdes&);

    public:
    egdes ();

    egdes*
    _clone () const;

    ~egdes ();

    // edge
    //
    const ::basement::basement_edge&
    edge () const;

    ::basement::basement_edge&
    edge ();

    void
    edge (::basement::basement_edge*);

    ::basement::basement_edge*
    edge_detach ();

    // custom
    //
    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (egdes&) const;

    private:
    ::basement::basement_edge* edge_;
    ::common::custom* custom_;
  };

  // faces (variable-length)
  //
  class faces
  {
    private:
    faces (const faces&);
    faces& operator= (const faces&);

    public:
    faces ();

    faces*
    _clone () const;

    ~faces ();

    // face
    //
    const ::basement::basement_face&
    face () const;

    ::basement::basement_face&
    face ();

    void
    face (::basement::basement_face*);

    ::basement::basement_face*
    face_detach ();

    // custom
    //
    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (faces&) const;

    private:
    ::basement::basement_face* face_;
    ::common::custom* custom_;
  };

  // basement_membrane (variable-length)
  //
  class basement_membrane
  {
    private:
    basement_membrane (const basement_membrane&);
    basement_membrane& operator= (const basement_membrane&);

    public:
    basement_membrane ();

    basement_membrane*
    _clone () const;

    ~basement_membrane ();

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    unsigned int
    ID () const;

    unsigned int&
    ID ();

    void
    ID (unsigned int);

    // nodes
    //
    const ::basement::nodes&
    nodes () const;

    ::basement::nodes&
    nodes ();

    void
    nodes (::basement::nodes*);

    ::basement::nodes*
    nodes_detach ();

    // edges
    //
    const ::basement::egdes&
    edges () const;

    ::basement::egdes&
    edges ();

    void
    edges (::basement::egdes*);

    ::basement::egdes*
    edges_detach ();

    // faces
    //
    const ::basement::faces&
    faces () const;

    ::basement::faces&
    faces ();

    void
    faces (::basement::faces*);

    ::basement::faces*
    faces_detach ();

    // custom
    //
    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (basement_membrane&) const;

    private:
    unsigned int ID_;
    unsigned char ID_present_;
    ::basement::nodes* nodes_;
    ::basement::egdes* edges_;
    ::basement::faces* faces_;
    ::common::custom* custom_;
  };
}

#ifndef XSDE_DONT_INCLUDE_INLINE

#include "common.ipp"

#include "mesh.ipp"

#endif // XSDE_DONT_INCLUDE_INLINE

#ifndef XSDE_DONT_INCLUDE_INLINE
#include "basement_membrane.ipp"
#endif // XSDE_DONT_INCLUDE_INLINE

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // BASEMENT_MEMBRANE_HPP
