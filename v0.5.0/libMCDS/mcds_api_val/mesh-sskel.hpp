// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MESH_SSKEL_HPP
#define MESH_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace mesh
{
  class bounding_box_sskel;
  class mesh_sskel;
  class list_of_voxels_sskel;
  class voxel_sskel;
  class node_sskel;
  class edge_sskel;
  class face_sskel;
  class int_list_xpath_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map-load.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "mesh.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;
  using ::xsde::cxx::serializer::validating::serializer_imap_buckets;
  using ::xsde::cxx::serializer::validating::serializer_imap_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;
  typedef xsde::cxx::serializer::schema serializer_schema;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "common-sskel.hpp"

namespace mesh
{
  class bounding_box_sskel: public ::common::units_double_list_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::mesh::bounding_box&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual ::std::string
    type () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::double_sskel& /* double_list item */,
                 ::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::xml_schema::string_sskel& /* type */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    bounding_box_sskel (::common::units_double_list_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_double_list&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    bounding_box_sskel* bounding_box_impl_;
    bounding_box_sskel (bounding_box_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* type_serializer_;
  };

  class mesh_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::mesh::mesh&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual ::std::string
    type () = 0;

    virtual bool
    uniform_present ();

    virtual bool
    uniform () = 0;

    virtual bool
    regular_present ();

    virtual bool
    regular () = 0;

    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // Elements.
    //
    virtual bool
    bounding_box_present ();

    virtual const ::mesh::bounding_box&
    bounding_box () = 0;

    virtual bool
    x_coordinates_present ();

    virtual const ::common::units_double_list&
    x_coordinates () = 0;

    virtual bool
    y_coordinates_present ();

    virtual const ::common::units_double_list&
    y_coordinates () = 0;

    virtual bool
    z_coordinates_present ();

    virtual const ::common::units_double_list&
    z_coordinates () = 0;

    virtual bool
    voxels_present ();

    virtual const ::mesh::list_of_voxels&
    voxels () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* type */,
                 ::xml_schema::boolean_sskel& /* uniform */,
                 ::xml_schema::boolean_sskel& /* regular */,
                 ::xml_schema::string_sskel& /* units */,
                 ::mesh::bounding_box_sskel& /* bounding_box */,
                 ::common::units_double_list_sskel& /* x_coordinates */,
                 ::common::units_double_list_sskel& /* y_coordinates */,
                 ::common::units_double_list_sskel& /* z_coordinates */,
                 ::mesh::list_of_voxels_sskel& /* voxels */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* bounding_box */,
                     ::xml_schema::serializer_map& /* x_coordinates */,
                     ::xml_schema::serializer_map& /* y_coordinates */,
                     ::xml_schema::serializer_map& /* z_coordinates */,
                     ::xml_schema::serializer_map& /* voxels */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::xml_schema::string_sskel&);

    void
    uniform_serializer (::xml_schema::boolean_sskel&);

    void
    regular_serializer (::xml_schema::boolean_sskel&);

    void
    units_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    bounding_box_serializer (::mesh::bounding_box_sskel&);

    void
    bounding_box_serializer (::xml_schema::serializer_map&);

    void
    x_coordinates_serializer (::common::units_double_list_sskel&);

    void
    x_coordinates_serializer (::xml_schema::serializer_map&);

    void
    y_coordinates_serializer (::common::units_double_list_sskel&);

    void
    y_coordinates_serializer (::xml_schema::serializer_map&);

    void
    z_coordinates_serializer (::common::units_double_list_sskel&);

    void
    z_coordinates_serializer (::xml_schema::serializer_map&);

    void
    voxels_serializer (::mesh::list_of_voxels_sskel&);

    void
    voxels_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    mesh_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    mesh_sskel* mesh_impl_;
    mesh_sskel (mesh_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* type_serializer_;
    ::xml_schema::boolean_sskel* uniform_serializer_;
    ::xml_schema::boolean_sskel* regular_serializer_;
    ::xml_schema::string_sskel* units_serializer_;
    ::mesh::bounding_box_sskel* bounding_box_serializer_;
    ::xml_schema::serializer_map* bounding_box_serializer_map_;

    ::common::units_double_list_sskel* x_coordinates_serializer_;
    ::xml_schema::serializer_map* x_coordinates_serializer_map_;

    ::common::units_double_list_sskel* y_coordinates_serializer_;
    ::xml_schema::serializer_map* y_coordinates_serializer_map_;

    ::common::units_double_list_sskel* z_coordinates_serializer_;
    ::xml_schema::serializer_map* z_coordinates_serializer_map_;

    ::mesh::list_of_voxels_sskel* voxels_serializer_;
    ::xml_schema::serializer_map* voxels_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class list_of_voxels_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::mesh::list_of_voxels&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual const ::common::data_storage_formats&
    type () = 0;

    // Elements.
    //
    virtual bool
    filename_present ();

    virtual ::std::string
    filename () = 0;

    virtual bool
    voxel_next () = 0;

    virtual const ::mesh::voxel&
    voxel () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::data_storage_formats_sskel& /* type */,
                 ::xml_schema::string_sskel& /* filename */,
                 ::mesh::voxel_sskel& /* voxel */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* filename */,
                     ::xml_schema::serializer_map& /* voxel */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::common::data_storage_formats_sskel&);

    // Individual element serializers.
    //
    void
    filename_serializer (::xml_schema::string_sskel&);

    void
    filename_serializer (::xml_schema::serializer_map&);

    void
    voxel_serializer (::mesh::voxel_sskel&);

    void
    voxel_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    list_of_voxels_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    list_of_voxels_sskel* list_of_voxels_impl_;
    list_of_voxels_sskel (list_of_voxels_sskel*, void*);

    protected:
    ::common::data_storage_formats_sskel* type_serializer_;
    ::xml_schema::string_sskel* filename_serializer_;
    ::xml_schema::serializer_map* filename_serializer_map_;

    ::mesh::voxel_sskel* voxel_serializer_;
    ::xml_schema::serializer_map* voxel_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class voxel_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::mesh::voxel&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    virtual bool
    type_present ();

    virtual ::std::string
    type () = 0;

    // Elements.
    //
    virtual const ::common::units_double_list&
    center () = 0;

    virtual const ::common::units_decimal_nonnegative&
    volume () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::xml_schema::string_sskel& /* type */,
                 ::common::units_double_list_sskel& /* center */,
                 ::common::units_decimal_nonnegative_sskel& /* volume */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* center */,
                     ::xml_schema::serializer_map& /* volume */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    void
    type_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    center_serializer (::common::units_double_list_sskel&);

    void
    center_serializer (::xml_schema::serializer_map&);

    void
    volume_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    volume_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    voxel_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    voxel_sskel* voxel_impl_;
    voxel_sskel (voxel_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::xml_schema::string_sskel* type_serializer_;
    ::common::units_double_list_sskel* center_serializer_;
    ::xml_schema::serializer_map* center_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* volume_serializer_;
    ::xml_schema::serializer_map* volume_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class node_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::mesh::node&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    // Elements.
    //
    virtual const ::common::units_double_list&
    position () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::common::units_double_list_sskel& /* position */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* position */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    position_serializer (::common::units_double_list_sskel&);

    void
    position_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    node_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    node_sskel* node_impl_;
    node_sskel (node_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::common::units_double_list_sskel* position_serializer_;
    ::xml_schema::serializer_map* position_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class edge_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::mesh::edge&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    // Elements.
    //
    virtual bool
    node_ID_next () = 0;

    virtual unsigned int
    node_ID () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::xml_schema::unsigned_int_sskel& /* node_ID */);

    void
    serializer_maps (::xml_schema::serializer_map& /* node_ID */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    node_ID_serializer (::xml_schema::unsigned_int_sskel&);

    void
    node_ID_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    edge_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    edge_sskel* edge_impl_;
    edge_sskel (edge_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::xml_schema::unsigned_int_sskel* node_ID_serializer_;
    ::xml_schema::serializer_map* node_ID_serializer_map_;
  };

  class face_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::mesh::face&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    // Elements.
    //
    virtual bool
    edge_ID_next () = 0;

    virtual unsigned int
    edge_ID () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::xml_schema::unsigned_int_sskel& /* edge_ID */);

    void
    serializer_maps (::xml_schema::serializer_map& /* edge_ID */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    edge_ID_serializer (::xml_schema::unsigned_int_sskel&);

    void
    edge_ID_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    face_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    face_sskel* face_impl_;
    face_sskel (face_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::xml_schema::unsigned_int_sskel* edge_ID_serializer_;
    ::xml_schema::serializer_map* edge_ID_serializer_map_;
  };

  class int_list_xpath_sskel: public ::common::unsigned_int_list_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::mesh::int_list_xpath&) = 0;

    // Attributes.
    //
    virtual bool
    xpath_present ();

    virtual ::std::string
    xpath () = 0;

    virtual bool
    grouping_number_present ();

    virtual unsigned short
    grouping_number () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* unsigned_int_list item */,
                 ::xml_schema::string_sskel& /* xpath */,
                 ::xml_schema::unsigned_short_sskel& /* grouping_number */);

    // Individual attribute serializers.
    //
    void
    xpath_serializer (::xml_schema::string_sskel&);

    void
    grouping_number_serializer (::xml_schema::unsigned_short_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    int_list_xpath_sskel (::common::unsigned_int_list_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::unsigned_int_list&);

    virtual unsigned int
    item ();

    virtual void
    _serialize_attributes ();

    protected:
    int_list_xpath_sskel* int_list_xpath_impl_;
    int_list_xpath_sskel (int_list_xpath_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* xpath_serializer_;
    ::xml_schema::unsigned_short_sskel* grouping_number_serializer_;
  };
}

#include "mesh-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // MESH_SSKEL_HPP
