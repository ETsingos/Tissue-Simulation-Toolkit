// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_IPP
#define CELL_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

#include "phenotype_dataset.ipp"

#include "mesh.ipp"

#include "cell_line.ipp"

#include "state.ipp"

namespace cell
{
  // population_definition
  //

  inline
  bool population_definition::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void population_definition::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned int population_definition::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned int& population_definition::
  ID ()
  {
    return this->ID_;
  }

  inline
  void population_definition::
  ID (unsigned int x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  bool population_definition::
  name_present () const
  {
    return this->name_present_;
  }

  inline
  void population_definition::
  name_present (bool x)
  {
    this->name_present_ = x;
  }

  inline
  const ::std::string& population_definition::
  name () const
  {
    return this->name_;
  }

  inline
  ::std::string& population_definition::
  name ()
  {
    return this->name_;
  }

  inline
  void population_definition::
  name (const ::std::string& x)
  {
    this->name_ = x;
    this->name_present_ = true;
  }

  inline
  bool population_definition::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void population_definition::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& population_definition::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& population_definition::
  units ()
  {
    return this->units_;
  }

  inline
  void population_definition::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool population_definition::
  phenotype_dataset_present () const
  {
    return this->phenotype_dataset_ != 0;
  }

  inline
  const ::phenotype_dataset::phenotype_dataset& population_definition::
  phenotype_dataset () const
  {
    return *this->phenotype_dataset_;
  }

  inline
  ::phenotype_dataset::phenotype_dataset& population_definition::
  phenotype_dataset ()
  {
    return *this->phenotype_dataset_;
  }

  inline
  void population_definition::
  phenotype_dataset (::phenotype_dataset::phenotype_dataset* x)
  {
    delete this->phenotype_dataset_;
    this->phenotype_dataset_ = x;
  }

  inline
  ::phenotype_dataset::phenotype_dataset* population_definition::
  phenotype_dataset_detach ()
  {
    ::phenotype_dataset::phenotype_dataset* r = this->phenotype_dataset_;
    this->phenotype_dataset_ = 0;
    return r;
  }

  inline
  bool population_definition::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& population_definition::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& population_definition::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void population_definition::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* population_definition::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // population_definitions
  //

  inline
  const population_definitions::population_definition_sequence& population_definitions::
  population_definition () const
  {
    return this->population_definition_;
  }

  inline
  population_definitions::population_definition_sequence& population_definitions::
  population_definition ()
  {
    return this->population_definition_;
  }

  inline
  bool population_definitions::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& population_definitions::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& population_definitions::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void population_definitions::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* population_definitions::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // cell
  //

  inline
  bool cell::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void cell::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned int cell::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned int& cell::
  ID ()
  {
    return this->ID_;
  }

  inline
  void cell::
  ID (unsigned int x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  bool cell::
  phenotype_dataset_present () const
  {
    return this->phenotype_dataset_ != 0;
  }

  inline
  const ::phenotype_dataset::phenotype_dataset& cell::
  phenotype_dataset () const
  {
    return *this->phenotype_dataset_;
  }

  inline
  ::phenotype_dataset::phenotype_dataset& cell::
  phenotype_dataset ()
  {
    return *this->phenotype_dataset_;
  }

  inline
  void cell::
  phenotype_dataset (::phenotype_dataset::phenotype_dataset* x)
  {
    delete this->phenotype_dataset_;
    this->phenotype_dataset_ = x;
  }

  inline
  ::phenotype_dataset::phenotype_dataset* cell::
  phenotype_dataset_detach ()
  {
    ::phenotype_dataset::phenotype_dataset* r = this->phenotype_dataset_;
    this->phenotype_dataset_ = 0;
    return r;
  }

  inline
  bool cell::
  state_present () const
  {
    return this->state_ != 0;
  }

  inline
  const ::state::state& cell::
  state () const
  {
    return *this->state_;
  }

  inline
  ::state::state& cell::
  state ()
  {
    return *this->state_;
  }

  inline
  void cell::
  state (::state::state* x)
  {
    delete this->state_;
    this->state_ = x;
  }

  inline
  ::state::state* cell::
  state_detach ()
  {
    ::state::state* r = this->state_;
    this->state_ = 0;
    return r;
  }

  inline
  bool cell::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& cell::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& cell::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void cell::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* cell::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // cell_population_individual
  //

  inline
  bool cell_population_individual::
  type_present () const
  {
    return this->type_present_;
  }

  inline
  void cell_population_individual::
  type_present (bool x)
  {
    this->type_present_ = x;
  }

  inline
  const ::std::string& cell_population_individual::
  type () const
  {
    return this->type_;
  }

  inline
  ::std::string& cell_population_individual::
  type ()
  {
    return this->type_;
  }

  inline
  void cell_population_individual::
  type (const ::std::string& x)
  {
    this->type_ = x;
    this->type_present_ = true;
  }

  inline
  bool cell_population_individual::
  population_ID_present () const
  {
    return this->population_ID_present_;
  }

  inline
  void cell_population_individual::
  population_ID_present (bool x)
  {
    this->population_ID_present_ = x;
  }

  inline
  unsigned int cell_population_individual::
  population_ID () const
  {
    return this->population_ID_;
  }

  inline
  unsigned int& cell_population_individual::
  population_ID ()
  {
    return this->population_ID_;
  }

  inline
  void cell_population_individual::
  population_ID (unsigned int x)
  {
    this->population_ID_ = x;
    this->population_ID_present_ = true;
  }

  inline
  const cell_population_individual::cell_sequence& cell_population_individual::
  cell () const
  {
    return this->cell_;
  }

  inline
  cell_population_individual::cell_sequence& cell_population_individual::
  cell ()
  {
    return this->cell_;
  }

  inline
  bool cell_population_individual::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& cell_population_individual::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& cell_population_individual::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void cell_population_individual::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* cell_population_individual::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // cell_population_aggregate
  //

  inline
  bool cell_population_aggregate::
  type_present () const
  {
    return this->type_present_;
  }

  inline
  void cell_population_aggregate::
  type_present (bool x)
  {
    this->type_present_ = x;
  }

  inline
  const ::std::string& cell_population_aggregate::
  type () const
  {
    return this->type_;
  }

  inline
  ::std::string& cell_population_aggregate::
  type ()
  {
    return this->type_;
  }

  inline
  void cell_population_aggregate::
  type (const ::std::string& x)
  {
    this->type_ = x;
    this->type_present_ = true;
  }

  inline
  bool cell_population_aggregate::
  population_ID_present () const
  {
    return this->population_ID_present_;
  }

  inline
  void cell_population_aggregate::
  population_ID_present (bool x)
  {
    this->population_ID_present_ = x;
  }

  inline
  unsigned int cell_population_aggregate::
  population_ID () const
  {
    return this->population_ID_;
  }

  inline
  unsigned int& cell_population_aggregate::
  population_ID ()
  {
    return this->population_ID_;
  }

  inline
  void cell_population_aggregate::
  population_ID (unsigned int x)
  {
    this->population_ID_ = x;
    this->population_ID_present_ = true;
  }

  inline
  bool cell_population_aggregate::
  value_present () const
  {
    return this->value_ != 0;
  }

  inline
  const ::common::units_decimal& cell_population_aggregate::
  value () const
  {
    return *this->value_;
  }

  inline
  ::common::units_decimal& cell_population_aggregate::
  value ()
  {
    return *this->value_;
  }

  inline
  void cell_population_aggregate::
  value (::common::units_decimal* x)
  {
    delete this->value_;
    this->value_ = x;
  }

  inline
  ::common::units_decimal* cell_population_aggregate::
  value_detach ()
  {
    ::common::units_decimal* r = this->value_;
    this->value_ = 0;
    return r;
  }

  inline
  bool cell_population_aggregate::
  sequence_present () const
  {
    return this->sequence_ != 0;
  }

  inline
  const cell_population_aggregate::sequence_type& cell_population_aggregate::
  sequence () const
  {
    return *this->sequence_;
  }

  inline
  cell_population_aggregate::sequence_type& cell_population_aggregate::
  sequence ()
  {
    return *this->sequence_;
  }

  inline
  void cell_population_aggregate::
  sequence (sequence_type* x)
  {
    delete this->sequence_;
    this->sequence_ = x;
  }

  inline
  cell_population_aggregate::sequence_type* cell_population_aggregate::
  sequence_detach ()
  {
    sequence_type* r = this->sequence_;
    this->sequence_ = 0;
    return r;
  }

  inline
  bool cell_population_aggregate::sequence_type::
  phenotype_dataset_present () const
  {
    return this->phenotype_dataset_ != 0;
  }

  inline
  const ::phenotype_dataset::phenotype_dataset& cell_population_aggregate::sequence_type::
  phenotype_dataset () const
  {
    return *this->phenotype_dataset_;
  }

  inline
  ::phenotype_dataset::phenotype_dataset& cell_population_aggregate::sequence_type::
  phenotype_dataset ()
  {
    return *this->phenotype_dataset_;
  }

  inline
  void cell_population_aggregate::sequence_type::
  phenotype_dataset (::phenotype_dataset::phenotype_dataset* x)
  {
    delete this->phenotype_dataset_;
    this->phenotype_dataset_ = x;
  }

  inline
  ::phenotype_dataset::phenotype_dataset* cell_population_aggregate::sequence_type::
  phenotype_dataset_detach ()
  {
    ::phenotype_dataset::phenotype_dataset* r = this->phenotype_dataset_;
    this->phenotype_dataset_ = 0;
    return r;
  }

  inline
  bool cell_population_aggregate::sequence_type::
  state_present () const
  {
    return this->state_ != 0;
  }

  inline
  const ::state::state& cell_population_aggregate::sequence_type::
  state () const
  {
    return *this->state_;
  }

  inline
  ::state::state& cell_population_aggregate::sequence_type::
  state ()
  {
    return *this->state_;
  }

  inline
  void cell_population_aggregate::sequence_type::
  state (::state::state* x)
  {
    delete this->state_;
    this->state_ = x;
  }

  inline
  ::state::state* cell_population_aggregate::sequence_type::
  state_detach ()
  {
    ::state::state* r = this->state_;
    this->state_ = 0;
    return r;
  }

  inline
  bool cell_population_aggregate::sequence_type::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& cell_population_aggregate::sequence_type::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& cell_population_aggregate::sequence_type::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void cell_population_aggregate::sequence_type::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* cell_population_aggregate::sequence_type::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // population_vector
  //

  inline
  bool population_vector::
  voxel_ID_present () const
  {
    return this->voxel_ID_ != 0;
  }

  inline
  const ::common::unsigned_int_list& population_vector::
  voxel_ID () const
  {
    return *this->voxel_ID_;
  }

  inline
  ::common::unsigned_int_list& population_vector::
  voxel_ID ()
  {
    return *this->voxel_ID_;
  }

  inline
  void population_vector::
  voxel_ID (::common::unsigned_int_list* x)
  {
    delete this->voxel_ID_;
    this->voxel_ID_ = x;
  }

  inline
  ::common::unsigned_int_list* population_vector::
  voxel_ID_detach ()
  {
    ::common::unsigned_int_list* r = this->voxel_ID_;
    this->voxel_ID_ = 0;
    return r;
  }

  inline
  bool population_vector::
  value_present () const
  {
    return this->value_ != 0;
  }

  inline
  const ::common::units_double_list& population_vector::
  value () const
  {
    return *this->value_;
  }

  inline
  ::common::units_double_list& population_vector::
  value ()
  {
    return *this->value_;
  }

  inline
  void population_vector::
  value (::common::units_double_list* x)
  {
    delete this->value_;
    this->value_ = x;
  }

  inline
  ::common::units_double_list* population_vector::
  value_detach ()
  {
    ::common::units_double_list* r = this->value_;
    this->value_ = 0;
    return r;
  }

  inline
  const population_vector::cell_population_sequence& population_vector::
  cell_population () const
  {
    return this->cell_population_;
  }

  inline
  population_vector::cell_population_sequence& population_vector::
  cell_population ()
  {
    return this->cell_population_;
  }

  inline
  bool population_vector::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& population_vector::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& population_vector::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void population_vector::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* population_vector::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // cell_populations
  //

  inline
  const cell_populations::population_vector_sequence& cell_populations::
  population_vector () const
  {
    return this->population_vector_;
  }

  inline
  cell_populations::population_vector_sequence& cell_populations::
  population_vector ()
  {
    return this->population_vector_;
  }

  inline
  bool cell_populations::
  cell_population_present () const
  {
    return this->cell_population_ != 0;
  }

  inline
  const ::cell::cell_population_individual& cell_populations::
  cell_population () const
  {
    return *this->cell_population_;
  }

  inline
  ::cell::cell_population_individual& cell_populations::
  cell_population ()
  {
    return *this->cell_population_;
  }

  inline
  void cell_populations::
  cell_population (::cell::cell_population_individual* x)
  {
    delete this->cell_population_;
    this->cell_population_ = x;
  }

  inline
  ::cell::cell_population_individual* cell_populations::
  cell_population_detach ()
  {
    ::cell::cell_population_individual* r = this->cell_population_;
    this->cell_population_ = 0;
    return r;
  }

  // cellular_information
  //

  inline
  bool cellular_information::
  DCLs_present () const
  {
    return this->DCLs_ != 0;
  }

  inline
  const ::cell_line::DCLs& cellular_information::
  DCLs () const
  {
    return *this->DCLs_;
  }

  inline
  ::cell_line::DCLs& cellular_information::
  DCLs ()
  {
    return *this->DCLs_;
  }

  inline
  void cellular_information::
  DCLs (::cell_line::DCLs* x)
  {
    delete this->DCLs_;
    this->DCLs_ = x;
  }

  inline
  ::cell_line::DCLs* cellular_information::
  DCLs_detach ()
  {
    ::cell_line::DCLs* r = this->DCLs_;
    this->DCLs_ = 0;
    return r;
  }

  inline
  bool cellular_information::
  population_definitions_present () const
  {
    return this->population_definitions_ != 0;
  }

  inline
  const ::cell::population_definitions& cellular_information::
  population_definitions () const
  {
    return *this->population_definitions_;
  }

  inline
  ::cell::population_definitions& cellular_information::
  population_definitions ()
  {
    return *this->population_definitions_;
  }

  inline
  void cellular_information::
  population_definitions (::cell::population_definitions* x)
  {
    delete this->population_definitions_;
    this->population_definitions_ = x;
  }

  inline
  ::cell::population_definitions* cellular_information::
  population_definitions_detach ()
  {
    ::cell::population_definitions* r = this->population_definitions_;
    this->population_definitions_ = 0;
    return r;
  }

  inline
  bool cellular_information::
  mesh_present () const
  {
    return this->mesh_ != 0;
  }

  inline
  const ::mesh::mesh& cellular_information::
  mesh () const
  {
    return *this->mesh_;
  }

  inline
  ::mesh::mesh& cellular_information::
  mesh ()
  {
    return *this->mesh_;
  }

  inline
  void cellular_information::
  mesh (::mesh::mesh* x)
  {
    delete this->mesh_;
    this->mesh_ = x;
  }

  inline
  ::mesh::mesh* cellular_information::
  mesh_detach ()
  {
    ::mesh::mesh* r = this->mesh_;
    this->mesh_ = 0;
    return r;
  }

  inline
  bool cellular_information::
  cell_populations_present () const
  {
    return this->cell_populations_ != 0;
  }

  inline
  const ::cell::cell_populations& cellular_information::
  cell_populations () const
  {
    return *this->cell_populations_;
  }

  inline
  ::cell::cell_populations& cellular_information::
  cell_populations ()
  {
    return *this->cell_populations_;
  }

  inline
  void cellular_information::
  cell_populations (::cell::cell_populations* x)
  {
    delete this->cell_populations_;
    this->cell_populations_ = x;
  }

  inline
  ::cell::cell_populations* cellular_information::
  cell_populations_detach ()
  {
    ::cell::cell_populations* r = this->cell_populations_;
    this->cell_populations_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // CELL_IPP
