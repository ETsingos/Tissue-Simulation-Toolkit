// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace variables
{
  // amount_type_pskel
  //

  inline
  amount_type_pskel::
  amount_type_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    amount_type_impl_ (0)
  {
    this->_enumeration_facet (_xsde_amount_type_pskel_enums_, 12UL);
  }

  inline
  amount_type_pskel::
  amount_type_pskel (amount_type_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    amount_type_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_amount_type_pskel_enums_, 12UL);
  }

  // variable_pskel
  //

  inline
  void variable_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  inline
  void variable_pskel::
  units_parser (::xml_schema::string_pskel& p)
  {
    this->units_parser_ = &p;
  }

  inline
  void variable_pskel::
  ID_parser (::xml_schema::unsigned_long_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void variable_pskel::
  type_parser (::variables::amount_type_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void variable_pskel::
  ChEBI_ID_parser (::xml_schema::string_pskel& p)
  {
    this->ChEBI_ID_parser_ = &p;
  }

  inline
  void variable_pskel::
  MeSH_ID_parser (::xml_schema::string_pskel& p)
  {
    this->MeSH_ID_parser_ = &p;
  }

  inline
  void variable_pskel::
  DrugBank_ID_parser (::xml_schema::string_pskel& p)
  {
    this->DrugBank_ID_parser_ = &p;
  }

  inline
  void variable_pskel::
  GMO_ID_parser (::xml_schema::string_pskel& p)
  {
    this->GMO_ID_parser_ = &p;
  }

  inline
  void variable_pskel::
  GO_ID_parser (::xml_schema::string_pskel& p)
  {
    this->GO_ID_parser_ = &p;
  }

  inline
  void variable_pskel::
  UniProt_ID_parser (::xml_schema::string_pskel& p)
  {
    this->UniProt_ID_parser_ = &p;
  }

  inline
  void variable_pskel::
  PR_ID_parser (::xml_schema::string_pskel& p)
  {
    this->PR_ID_parser_ = &p;
  }

  inline
  void variable_pskel::
  material_amount_parser (::variables::material_amount_pskel& p)
  {
    this->material_amount_parser_ = &p;
  }

  inline
  void variable_pskel::
  material_amount_parser (::xml_schema::parser_map& m)
  {
    this->material_amount_parser_map_ = &m;
  }

  inline
  void variable_pskel::
  physical_parameter_set_parser (::variables::physical_parameter_set_pskel& p)
  {
    this->physical_parameter_set_parser_ = &p;
  }

  inline
  void variable_pskel::
  physical_parameter_set_parser (::xml_schema::parser_map& m)
  {
    this->physical_parameter_set_parser_map_ = &m;
  }

  inline
  void variable_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& units,
           ::xml_schema::unsigned_long_pskel& ID,
           ::variables::amount_type_pskel& type,
           ::xml_schema::string_pskel& ChEBI_ID,
           ::xml_schema::string_pskel& MeSH_ID,
           ::xml_schema::string_pskel& DrugBank_ID,
           ::xml_schema::string_pskel& GMO_ID,
           ::xml_schema::string_pskel& GO_ID,
           ::xml_schema::string_pskel& UniProt_ID,
           ::xml_schema::string_pskel& PR_ID,
           ::variables::material_amount_pskel& material_amount,
           ::variables::physical_parameter_set_pskel& physical_parameter_set)
  {
    this->name_parser_ = &name;
    this->units_parser_ = &units;
    this->ID_parser_ = &ID;
    this->type_parser_ = &type;
    this->ChEBI_ID_parser_ = &ChEBI_ID;
    this->MeSH_ID_parser_ = &MeSH_ID;
    this->DrugBank_ID_parser_ = &DrugBank_ID;
    this->GMO_ID_parser_ = &GMO_ID;
    this->GO_ID_parser_ = &GO_ID;
    this->UniProt_ID_parser_ = &UniProt_ID;
    this->PR_ID_parser_ = &PR_ID;
    this->material_amount_parser_ = &material_amount;
    this->physical_parameter_set_parser_ = &physical_parameter_set;
  }

  inline
  void variable_pskel::
  parser_maps (::xml_schema::parser_map& material_amount,
               ::xml_schema::parser_map& physical_parameter_set)
  {
    this->material_amount_parser_map_ = &material_amount;
    this->physical_parameter_set_parser_map_ = &physical_parameter_set;
  }

  inline
  variable_pskel::
  variable_pskel ()
  : variable_impl_ (0),
    name_parser_ (0),
    units_parser_ (0),
    ID_parser_ (0),
    type_parser_ (0),
    ChEBI_ID_parser_ (0),
    MeSH_ID_parser_ (0),
    DrugBank_ID_parser_ (0),
    GMO_ID_parser_ (0),
    GO_ID_parser_ (0),
    UniProt_ID_parser_ (0),
    PR_ID_parser_ (0),
    material_amount_parser_ (0),
    material_amount_parser_map_ (0),
    physical_parameter_set_parser_ (0),
    physical_parameter_set_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  inline
  variable_pskel::
  variable_pskel (variable_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    variable_impl_ (impl),
    name_parser_ (0),
    units_parser_ (0),
    ID_parser_ (0),
    type_parser_ (0),
    ChEBI_ID_parser_ (0),
    MeSH_ID_parser_ (0),
    DrugBank_ID_parser_ (0),
    GMO_ID_parser_ (0),
    GO_ID_parser_ (0),
    UniProt_ID_parser_ (0),
    PR_ID_parser_ (0),
    material_amount_parser_ (0),
    material_amount_parser_map_ (0),
    physical_parameter_set_parser_ (0),
    physical_parameter_set_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // material_amount_pskel
  //

  inline
  void material_amount_pskel::
  type_parser (::variables::amount_type_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void material_amount_pskel::
  scale_units_parser (::xml_schema::string_pskel& p)
  {
    this->scale_units_parser_ = &p;
  }

  inline
  void material_amount_pskel::
  parsers (::xml_schema::string_pskel& units,
           ::xml_schema::string_pskel& measurement_type,
           ::xml_schema::double_pskel& uncertainty,
           ::xml_schema::double_pskel& negative_uncertainty,
           ::xml_schema::double_pskel& positive_uncertainty,
           ::xml_schema::double_pskel& uncertainty_percentage,
           ::xml_schema::double_pskel& negative_uncertainty_percentage,
           ::xml_schema::double_pskel& positive_uncertainty_percentage,
           ::xml_schema::double_pskel& median,
           ::xml_schema::double_pskel& standard_deviation,
           ::common::two_doubles_pskel& interquartile_range,
           ::common::two_doubles_pskel& range,
           ::xml_schema::double_pskel& min,
           ::xml_schema::double_pskel& max,
           ::xml_schema::double_pskel& standard_error,
           ::xml_schema::double_pskel& standard_error_of_the_mean,
           ::xml_schema::int_pskel& number_obs,
           ::xml_schema::double_pskel& skewnesss,
           ::xml_schema::double_pskel& kurtosis,
           ::variables::amount_type_pskel& type,
           ::xml_schema::string_pskel& scale_units)
  {
    this->units_parser_ = &units;
    this->measurement_type_parser_ = &measurement_type;
    this->uncertainty_parser_ = &uncertainty;
    this->negative_uncertainty_parser_ = &negative_uncertainty;
    this->positive_uncertainty_parser_ = &positive_uncertainty;
    this->uncertainty_percentage_parser_ = &uncertainty_percentage;
    this->negative_uncertainty_percentage_parser_ = &negative_uncertainty_percentage;
    this->positive_uncertainty_percentage_parser_ = &positive_uncertainty_percentage;
    this->median_parser_ = &median;
    this->standard_deviation_parser_ = &standard_deviation;
    this->interquartile_range_parser_ = &interquartile_range;
    this->range_parser_ = &range;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->standard_error_parser_ = &standard_error;
    this->standard_error_of_the_mean_parser_ = &standard_error_of_the_mean;
    this->number_obs_parser_ = &number_obs;
    this->skewnesss_parser_ = &skewnesss;
    this->kurtosis_parser_ = &kurtosis;
    this->type_parser_ = &type;
    this->scale_units_parser_ = &scale_units;
  }

  inline
  material_amount_pskel::
  material_amount_pskel (::common::units_decimal_pskel* tiein)
  : ::common::units_decimal_pskel (tiein, 0),
    material_amount_impl_ (0),
    type_parser_ (0),
    scale_units_parser_ (0)
  {
  }

  inline
  material_amount_pskel::
  material_amount_pskel (material_amount_pskel* impl, void*)
  : ::common::units_decimal_pskel (impl, 0),
    material_amount_impl_ (impl),
    type_parser_ (0),
    scale_units_parser_ (0)
  {
  }

  // physical_parameter_set_pskel
  //

  inline
  void physical_parameter_set_pskel::
  conditions_parser (::variables::physical_conditions_pskel& p)
  {
    this->conditions_parser_ = &p;
  }

  inline
  void physical_parameter_set_pskel::
  conditions_parser (::xml_schema::parser_map& m)
  {
    this->conditions_parser_map_ = &m;
  }

  inline
  void physical_parameter_set_pskel::
  diffusion_coefficient_parser (::common::units_decimal_pskel& p)
  {
    this->diffusion_coefficient_parser_ = &p;
  }

  inline
  void physical_parameter_set_pskel::
  diffusion_coefficient_parser (::xml_schema::parser_map& m)
  {
    this->diffusion_coefficient_parser_map_ = &m;
  }

  inline
  void physical_parameter_set_pskel::
  decay_rate_parser (::common::units_decimal_pskel& p)
  {
    this->decay_rate_parser_ = &p;
  }

  inline
  void physical_parameter_set_pskel::
  decay_rate_parser (::xml_schema::parser_map& m)
  {
    this->decay_rate_parser_map_ = &m;
  }

  inline
  void physical_parameter_set_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void physical_parameter_set_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void physical_parameter_set_pskel::
  parsers (::variables::physical_conditions_pskel& conditions,
           ::common::units_decimal_pskel& diffusion_coefficient,
           ::common::units_decimal_pskel& decay_rate,
           ::common::custom_pskel& custom)
  {
    this->conditions_parser_ = &conditions;
    this->diffusion_coefficient_parser_ = &diffusion_coefficient;
    this->decay_rate_parser_ = &decay_rate;
    this->custom_parser_ = &custom;
  }

  inline
  void physical_parameter_set_pskel::
  parser_maps (::xml_schema::parser_map& conditions,
               ::xml_schema::parser_map& diffusion_coefficient,
               ::xml_schema::parser_map& decay_rate,
               ::xml_schema::parser_map& custom)
  {
    this->conditions_parser_map_ = &conditions;
    this->diffusion_coefficient_parser_map_ = &diffusion_coefficient;
    this->decay_rate_parser_map_ = &decay_rate;
    this->custom_parser_map_ = &custom;
  }

  inline
  physical_parameter_set_pskel::
  physical_parameter_set_pskel ()
  : physical_parameter_set_impl_ (0),
    conditions_parser_ (0),
    conditions_parser_map_ (0),
    diffusion_coefficient_parser_ (0),
    diffusion_coefficient_parser_map_ (0),
    decay_rate_parser_ (0),
    decay_rate_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (4UL, v_all_first_)
  {
  }

  inline
  physical_parameter_set_pskel::
  physical_parameter_set_pskel (physical_parameter_set_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    physical_parameter_set_impl_ (impl),
    conditions_parser_ (0),
    conditions_parser_map_ (0),
    diffusion_coefficient_parser_ (0),
    diffusion_coefficient_parser_map_ (0),
    decay_rate_parser_ (0),
    decay_rate_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (4UL, v_all_first_)
  {
  }

  // physical_conditions_pskel
  //

  inline
  void physical_conditions_pskel::
  temperature_parser (::common::units_decimal_pskel& p)
  {
    this->temperature_parser_ = &p;
  }

  inline
  void physical_conditions_pskel::
  temperature_parser (::xml_schema::parser_map& m)
  {
    this->temperature_parser_map_ = &m;
  }

  inline
  void physical_conditions_pskel::
  mechanical_pressure_parser (::common::units_decimal_pskel& p)
  {
    this->mechanical_pressure_parser_ = &p;
  }

  inline
  void physical_conditions_pskel::
  mechanical_pressure_parser (::xml_schema::parser_map& m)
  {
    this->mechanical_pressure_parser_map_ = &m;
  }

  inline
  void physical_conditions_pskel::
  acidity_parser (::common::units_decimal_pskel& p)
  {
    this->acidity_parser_ = &p;
  }

  inline
  void physical_conditions_pskel::
  acidity_parser (::xml_schema::parser_map& m)
  {
    this->acidity_parser_map_ = &m;
  }

  inline
  void physical_conditions_pskel::
  pH_parser (::common::units_decimal_pskel& p)
  {
    this->pH_parser_ = &p;
  }

  inline
  void physical_conditions_pskel::
  pH_parser (::xml_schema::parser_map& m)
  {
    this->pH_parser_map_ = &m;
  }

  inline
  void physical_conditions_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void physical_conditions_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void physical_conditions_pskel::
  parsers (::common::units_decimal_pskel& temperature,
           ::common::units_decimal_pskel& mechanical_pressure,
           ::common::units_decimal_pskel& acidity,
           ::common::units_decimal_pskel& pH,
           ::common::custom_pskel& custom)
  {
    this->temperature_parser_ = &temperature;
    this->mechanical_pressure_parser_ = &mechanical_pressure;
    this->acidity_parser_ = &acidity;
    this->pH_parser_ = &pH;
    this->custom_parser_ = &custom;
  }

  inline
  void physical_conditions_pskel::
  parser_maps (::xml_schema::parser_map& temperature,
               ::xml_schema::parser_map& mechanical_pressure,
               ::xml_schema::parser_map& acidity,
               ::xml_schema::parser_map& pH,
               ::xml_schema::parser_map& custom)
  {
    this->temperature_parser_map_ = &temperature;
    this->mechanical_pressure_parser_map_ = &mechanical_pressure;
    this->acidity_parser_map_ = &acidity;
    this->pH_parser_map_ = &pH;
    this->custom_parser_map_ = &custom;
  }

  inline
  physical_conditions_pskel::
  physical_conditions_pskel ()
  : physical_conditions_impl_ (0),
    temperature_parser_ (0),
    temperature_parser_map_ (0),
    mechanical_pressure_parser_ (0),
    mechanical_pressure_parser_map_ (0),
    acidity_parser_ (0),
    acidity_parser_map_ (0),
    pH_parser_ (0),
    pH_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (5UL, v_all_first_)
  {
  }

  inline
  physical_conditions_pskel::
  physical_conditions_pskel (physical_conditions_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    physical_conditions_impl_ (impl),
    temperature_parser_ (0),
    temperature_parser_map_ (0),
    mechanical_pressure_parser_ (0),
    mechanical_pressure_parser_map_ (0),
    acidity_parser_ (0),
    acidity_parser_map_ (0),
    pH_parser_ (0),
    pH_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (5UL, v_all_first_)
  {
  }

  // system_pskel
  //

  inline
  system_pskel::
  system_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    system_impl_ (0)
  {
    this->_enumeration_facet (_xsde_system_pskel_enums_, 4UL);
  }

  inline
  system_pskel::
  system_pskel (system_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    system_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_system_pskel_enums_, 4UL);
  }

  // conditions_pskel
  //

  inline
  conditions_pskel::
  conditions_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    conditions_impl_ (0)
  {
    this->_enumeration_facet (_xsde_conditions_pskel_enums_, 3UL);
  }

  inline
  conditions_pskel::
  conditions_pskel (conditions_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    conditions_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_conditions_pskel_enums_, 3UL);
  }

  // experimental_conditions_pskel
  //

  inline
  void experimental_conditions_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void experimental_conditions_pskel::
  dimensionality_parser (::xml_schema::unsigned_short_pskel& p)
  {
    this->dimensionality_parser_ = &p;
  }

  inline
  void experimental_conditions_pskel::
  dimensionality_parser (::xml_schema::parser_map& m)
  {
    this->dimensionality_parser_map_ = &m;
  }

  inline
  void experimental_conditions_pskel::
  system_parser (::variables::system_pskel& p)
  {
    this->system_parser_ = &p;
  }

  inline
  void experimental_conditions_pskel::
  system_parser (::xml_schema::parser_map& m)
  {
    this->system_parser_map_ = &m;
  }

  inline
  void experimental_conditions_pskel::
  conditions_parser (::variables::conditions_pskel& p)
  {
    this->conditions_parser_ = &p;
  }

  inline
  void experimental_conditions_pskel::
  conditions_parser (::xml_schema::parser_map& m)
  {
    this->conditions_parser_map_ = &m;
  }

  inline
  void experimental_conditions_pskel::
  surface_variable_parser (::variables::variable_pskel& p)
  {
    this->surface_variable_parser_ = &p;
  }

  inline
  void experimental_conditions_pskel::
  surface_variable_parser (::xml_schema::parser_map& m)
  {
    this->surface_variable_parser_map_ = &m;
  }

  inline
  void experimental_conditions_pskel::
  parsers (::xml_schema::string_pskel& type,
           ::xml_schema::unsigned_short_pskel& dimensionality,
           ::variables::system_pskel& system,
           ::variables::conditions_pskel& conditions,
           ::variables::variable_pskel& surface_variable)
  {
    this->type_parser_ = &type;
    this->dimensionality_parser_ = &dimensionality;
    this->system_parser_ = &system;
    this->conditions_parser_ = &conditions;
    this->surface_variable_parser_ = &surface_variable;
  }

  inline
  void experimental_conditions_pskel::
  parser_maps (::xml_schema::parser_map& dimensionality,
               ::xml_schema::parser_map& system,
               ::xml_schema::parser_map& conditions,
               ::xml_schema::parser_map& surface_variable)
  {
    this->dimensionality_parser_map_ = &dimensionality;
    this->system_parser_map_ = &system;
    this->conditions_parser_map_ = &conditions;
    this->surface_variable_parser_map_ = &surface_variable;
  }

  inline
  experimental_conditions_pskel::
  experimental_conditions_pskel ()
  : experimental_conditions_impl_ (0),
    type_parser_ (0),
    dimensionality_parser_ (0),
    dimensionality_parser_map_ (0),
    system_parser_ (0),
    system_parser_map_ (0),
    conditions_parser_ (0),
    conditions_parser_map_ (0),
    surface_variable_parser_ (0),
    surface_variable_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  experimental_conditions_pskel::
  experimental_conditions_pskel (experimental_conditions_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    experimental_conditions_impl_ (impl),
    type_parser_ (0),
    dimensionality_parser_ (0),
    dimensionality_parser_map_ (0),
    system_parser_ (0),
    system_parser_map_ (0),
    conditions_parser_ (0),
    conditions_parser_map_ (0),
    surface_variable_parser_ (0),
    surface_variable_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // data_vector_pskel
  //

  inline
  void data_vector_pskel::
  voxel_ID_parser (::common::unsigned_int_list_pskel& p)
  {
    this->voxel_ID_parser_ = &p;
  }

  inline
  void data_vector_pskel::
  parsers (::xml_schema::double_pskel& double_list_pskel_item,
           ::xml_schema::string_pskel& units,
           ::xml_schema::string_pskel& measurement_type,
           ::xml_schema::double_pskel& uncertainty,
           ::xml_schema::double_pskel& negative_uncertainty,
           ::xml_schema::double_pskel& positive_uncertainty,
           ::xml_schema::double_pskel& uncertainty_percentage,
           ::xml_schema::double_pskel& negative_uncertainty_percentage,
           ::xml_schema::double_pskel& positive_uncertainty_percentage,
           ::xml_schema::double_pskel& median,
           ::xml_schema::double_pskel& standard_deviation,
           ::common::two_doubles_pskel& interquartile_range,
           ::common::two_doubles_pskel& range,
           ::xml_schema::double_pskel& min,
           ::xml_schema::double_pskel& max,
           ::xml_schema::double_pskel& standard_error,
           ::xml_schema::double_pskel& standard_error_of_the_mean,
           ::xml_schema::int_pskel& number_obs,
           ::xml_schema::double_pskel& skewnesss,
           ::xml_schema::double_pskel& kurtosis,
           ::common::unsigned_int_list_pskel& voxel_ID)
  {
    this->_xsde_item_ = &double_list_pskel_item;
    this->units_parser_ = &units;
    this->measurement_type_parser_ = &measurement_type;
    this->uncertainty_parser_ = &uncertainty;
    this->negative_uncertainty_parser_ = &negative_uncertainty;
    this->positive_uncertainty_parser_ = &positive_uncertainty;
    this->uncertainty_percentage_parser_ = &uncertainty_percentage;
    this->negative_uncertainty_percentage_parser_ = &negative_uncertainty_percentage;
    this->positive_uncertainty_percentage_parser_ = &positive_uncertainty_percentage;
    this->median_parser_ = &median;
    this->standard_deviation_parser_ = &standard_deviation;
    this->interquartile_range_parser_ = &interquartile_range;
    this->range_parser_ = &range;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->standard_error_parser_ = &standard_error;
    this->standard_error_of_the_mean_parser_ = &standard_error_of_the_mean;
    this->number_obs_parser_ = &number_obs;
    this->skewnesss_parser_ = &skewnesss;
    this->kurtosis_parser_ = &kurtosis;
    this->voxel_ID_parser_ = &voxel_ID;
  }

  inline
  data_vector_pskel::
  data_vector_pskel (::common::units_double_list_pskel* tiein)
  : ::common::units_double_list_pskel (tiein, 0),
    data_vector_impl_ (0),
    voxel_ID_parser_ (0)
  {
  }

  inline
  data_vector_pskel::
  data_vector_pskel (data_vector_pskel* impl, void*)
  : ::common::units_double_list_pskel (impl, 0),
    data_vector_impl_ (impl),
    voxel_ID_parser_ (0)
  {
  }

  // data_pskel
  //

  inline
  void data_pskel::
  type_parser (::common::data_storage_formats_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void data_pskel::
  filename_parser (::xml_schema::string_pskel& p)
  {
    this->filename_parser_ = &p;
  }

  inline
  void data_pskel::
  filename_parser (::xml_schema::parser_map& m)
  {
    this->filename_parser_map_ = &m;
  }

  inline
  void data_pskel::
  data_vector_parser (::variables::data_vector_pskel& p)
  {
    this->data_vector_parser_ = &p;
  }

  inline
  void data_pskel::
  data_vector_parser (::xml_schema::parser_map& m)
  {
    this->data_vector_parser_map_ = &m;
  }

  inline
  void data_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void data_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void data_pskel::
  parsers (::common::data_storage_formats_pskel& type,
           ::xml_schema::string_pskel& filename,
           ::variables::data_vector_pskel& data_vector,
           ::common::custom_pskel& custom)
  {
    this->type_parser_ = &type;
    this->filename_parser_ = &filename;
    this->data_vector_parser_ = &data_vector;
    this->custom_parser_ = &custom;
  }

  inline
  void data_pskel::
  parser_maps (::xml_schema::parser_map& filename,
               ::xml_schema::parser_map& data_vector,
               ::xml_schema::parser_map& custom)
  {
    this->filename_parser_map_ = &filename;
    this->data_vector_parser_map_ = &data_vector;
    this->custom_parser_map_ = &custom;
  }

  inline
  data_pskel::
  data_pskel ()
  : data_impl_ (0),
    type_parser_ (0),
    filename_parser_ (0),
    filename_parser_map_ (0),
    data_vector_parser_ (0),
    data_vector_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  data_pskel::
  data_pskel (data_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    data_impl_ (impl),
    type_parser_ (0),
    filename_parser_ (0),
    filename_parser_map_ (0),
    data_vector_parser_ (0),
    data_vector_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // list_of_variables_pskel
  //

  inline
  void list_of_variables_pskel::
  variable_parser (::variables::variable_pskel& p)
  {
    this->variable_parser_ = &p;
  }

  inline
  void list_of_variables_pskel::
  variable_parser (::xml_schema::parser_map& m)
  {
    this->variable_parser_map_ = &m;
  }

  inline
  void list_of_variables_pskel::
  physical_parameter_set_parser (::variables::physical_parameter_set_pskel& p)
  {
    this->physical_parameter_set_parser_ = &p;
  }

  inline
  void list_of_variables_pskel::
  physical_parameter_set_parser (::xml_schema::parser_map& m)
  {
    this->physical_parameter_set_parser_map_ = &m;
  }

  inline
  void list_of_variables_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void list_of_variables_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void list_of_variables_pskel::
  parsers (::variables::variable_pskel& variable,
           ::variables::physical_parameter_set_pskel& physical_parameter_set,
           ::common::custom_pskel& custom)
  {
    this->variable_parser_ = &variable;
    this->physical_parameter_set_parser_ = &physical_parameter_set;
    this->custom_parser_ = &custom;
  }

  inline
  void list_of_variables_pskel::
  parser_maps (::xml_schema::parser_map& variable,
               ::xml_schema::parser_map& physical_parameter_set,
               ::xml_schema::parser_map& custom)
  {
    this->variable_parser_map_ = &variable;
    this->physical_parameter_set_parser_map_ = &physical_parameter_set;
    this->custom_parser_map_ = &custom;
  }

  inline
  list_of_variables_pskel::
  list_of_variables_pskel ()
  : list_of_variables_impl_ (0),
    variable_parser_ (0),
    variable_parser_map_ (0),
    physical_parameter_set_parser_ (0),
    physical_parameter_set_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  list_of_variables_pskel::
  list_of_variables_pskel (list_of_variables_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    list_of_variables_impl_ (impl),
    variable_parser_ (0),
    variable_parser_map_ (0),
    physical_parameter_set_parser_ (0),
    physical_parameter_set_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // transition_threshold_pskel
  //

  inline
  void transition_threshold_pskel::
  ChEBI_ID_parser (::xml_schema::string_pskel& p)
  {
    this->ChEBI_ID_parser_ = &p;
  }

  inline
  void transition_threshold_pskel::
  MeSH_ID_parser (::xml_schema::string_pskel& p)
  {
    this->MeSH_ID_parser_ = &p;
  }

  inline
  void transition_threshold_pskel::
  DrugBank_ID_parser (::xml_schema::string_pskel& p)
  {
    this->DrugBank_ID_parser_ = &p;
  }

  inline
  void transition_threshold_pskel::
  GMO_ID_parser (::xml_schema::string_pskel& p)
  {
    this->GMO_ID_parser_ = &p;
  }

  inline
  void transition_threshold_pskel::
  GO_ID_parser (::xml_schema::string_pskel& p)
  {
    this->GO_ID_parser_ = &p;
  }

  inline
  void transition_threshold_pskel::
  UniProt_ID_parser (::xml_schema::string_pskel& p)
  {
    this->UniProt_ID_parser_ = &p;
  }

  inline
  void transition_threshold_pskel::
  PR_ID_parser (::xml_schema::string_pskel& p)
  {
    this->PR_ID_parser_ = &p;
  }

  inline
  void transition_threshold_pskel::
  parsers (::xml_schema::string_pskel& units,
           ::xml_schema::string_pskel& measurement_type,
           ::xml_schema::double_pskel& uncertainty,
           ::xml_schema::double_pskel& negative_uncertainty,
           ::xml_schema::double_pskel& positive_uncertainty,
           ::xml_schema::double_pskel& uncertainty_percentage,
           ::xml_schema::double_pskel& negative_uncertainty_percentage,
           ::xml_schema::double_pskel& positive_uncertainty_percentage,
           ::xml_schema::double_pskel& median,
           ::xml_schema::double_pskel& standard_deviation,
           ::common::two_doubles_pskel& interquartile_range,
           ::common::two_doubles_pskel& range,
           ::xml_schema::double_pskel& min,
           ::xml_schema::double_pskel& max,
           ::xml_schema::double_pskel& standard_error,
           ::xml_schema::double_pskel& standard_error_of_the_mean,
           ::xml_schema::int_pskel& number_obs,
           ::xml_schema::double_pskel& skewnesss,
           ::xml_schema::double_pskel& kurtosis,
           ::xml_schema::string_pskel& quantity,
           ::common::threshold_type_pskel& type,
           ::xml_schema::unsigned_long_pskel& variable_ID,
           ::xml_schema::string_pskel& ChEBI_ID,
           ::xml_schema::string_pskel& MeSH_ID,
           ::xml_schema::string_pskel& DrugBank_ID,
           ::xml_schema::string_pskel& GMO_ID,
           ::xml_schema::string_pskel& GO_ID,
           ::xml_schema::string_pskel& UniProt_ID,
           ::xml_schema::string_pskel& PR_ID)
  {
    this->units_parser_ = &units;
    this->measurement_type_parser_ = &measurement_type;
    this->uncertainty_parser_ = &uncertainty;
    this->negative_uncertainty_parser_ = &negative_uncertainty;
    this->positive_uncertainty_parser_ = &positive_uncertainty;
    this->uncertainty_percentage_parser_ = &uncertainty_percentage;
    this->negative_uncertainty_percentage_parser_ = &negative_uncertainty_percentage;
    this->positive_uncertainty_percentage_parser_ = &positive_uncertainty_percentage;
    this->median_parser_ = &median;
    this->standard_deviation_parser_ = &standard_deviation;
    this->interquartile_range_parser_ = &interquartile_range;
    this->range_parser_ = &range;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->standard_error_parser_ = &standard_error;
    this->standard_error_of_the_mean_parser_ = &standard_error_of_the_mean;
    this->number_obs_parser_ = &number_obs;
    this->skewnesss_parser_ = &skewnesss;
    this->kurtosis_parser_ = &kurtosis;
    this->quantity_parser_ = &quantity;
    this->type_parser_ = &type;
    this->variable_ID_parser_ = &variable_ID;
    this->ChEBI_ID_parser_ = &ChEBI_ID;
    this->MeSH_ID_parser_ = &MeSH_ID;
    this->DrugBank_ID_parser_ = &DrugBank_ID;
    this->GMO_ID_parser_ = &GMO_ID;
    this->GO_ID_parser_ = &GO_ID;
    this->UniProt_ID_parser_ = &UniProt_ID;
    this->PR_ID_parser_ = &PR_ID;
  }

  inline
  transition_threshold_pskel::
  transition_threshold_pskel (::common::transition_threshold_pskel* tiein)
  : ::common::transition_threshold_pskel (tiein, 0),
    transition_threshold_impl_ (0),
    ChEBI_ID_parser_ (0),
    MeSH_ID_parser_ (0),
    DrugBank_ID_parser_ (0),
    GMO_ID_parser_ (0),
    GO_ID_parser_ (0),
    UniProt_ID_parser_ (0),
    PR_ID_parser_ (0)
  {
  }

  inline
  transition_threshold_pskel::
  transition_threshold_pskel (transition_threshold_pskel* impl, void*)
  : ::common::transition_threshold_pskel (impl, 0),
    transition_threshold_impl_ (impl),
    ChEBI_ID_parser_ (0),
    MeSH_ID_parser_ (0),
    DrugBank_ID_parser_ (0),
    GMO_ID_parser_ (0),
    GO_ID_parser_ (0),
    UniProt_ID_parser_ (0),
    PR_ID_parser_ (0)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

