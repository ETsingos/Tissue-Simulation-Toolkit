// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell_line-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace cell_line
{
  // cell_line_pskel
  //

  void cell_line_pskel::
  ID (const ::std::string& x)
  {
    if (this->cell_line_impl_)
      this->cell_line_impl_->ID (x);
  }

  void cell_line_pskel::
  label (const ::std::string& x)
  {
    if (this->cell_line_impl_)
      this->cell_line_impl_->label (x);
  }

  void cell_line_pskel::
  curated (bool x)
  {
    if (this->cell_line_impl_)
      this->cell_line_impl_->curated (x);
  }

  void cell_line_pskel::
  metadata (::metadata::metadata* x)
  {
    if (this->cell_line_impl_)
      this->cell_line_impl_->metadata (x);
  }

  void cell_line_pskel::
  phenotype_dataset (::phenotype_dataset::phenotype_dataset* x)
  {
    if (this->cell_line_impl_)
      this->cell_line_impl_->phenotype_dataset (x);
  }

  void cell_line_pskel::
  custom (::common::custom* x)
  {
    if (this->cell_line_impl_)
      this->cell_line_impl_->custom (x);
  }

  void cell_line_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->label_parser_)
      this->label_parser_->_reset ();

    if (this->curated_parser_)
      this->curated_parser_->_reset ();

    this->resetting_ = true;

    if (this->metadata_parser_)
      this->metadata_parser_->_reset ();

    if (this->metadata_parser_map_)
      this->metadata_parser_map_->reset ();

    if (this->phenotype_dataset_parser_)
      this->phenotype_dataset_parser_->_reset ();

    if (this->phenotype_dataset_parser_map_)
      this->phenotype_dataset_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_line_pskel::
  _static_type ()
  {
    return "cell_line cell_line";
  }

  const char* cell_line_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // DCLs_pskel
  //

  void DCLs_pskel::
  cell_line (::cell_line::cell_line* x)
  {
    if (this->DCLs_impl_)
      this->DCLs_impl_->cell_line (x);
  }

  void DCLs_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->cell_line_parser_)
      this->cell_line_parser_->_reset ();

    if (this->cell_line_parser_map_)
      this->cell_line_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* DCLs_pskel::
  _static_type ()
  {
    return "DCLs cell_line";
  }

  const char* DCLs_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace cell_line
{
  // Element validation and dispatch functions for cell_line_pskel.
  //
  bool cell_line_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "metadata" && ns.empty ())
          s = 0UL;
        else if (n == "phenotype_dataset" && ns.empty ())
          s = 1UL;
        else if (n == "custom" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_line_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_line_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_line_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_line_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cell_line_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "metadata" && ns.empty ())
        {
          if (start)
          {
            ::metadata::metadata_pskel* p = 0;

            if (t == 0 && this->metadata_parser_ != 0)
              p = this->metadata_parser_;
            else
            {
              const char* ts = ::metadata::metadata_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->metadata_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->metadata_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->metadata_parser_map_ != 0)
                  p = static_cast< ::metadata::metadata_pskel* > (
                    this->metadata_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::metadata_pskel* p =
            static_cast< ::metadata::metadata_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::metadata* tmp = p->post_metadata ();
              this->metadata (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "phenotype_dataset" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_dataset::phenotype_dataset_pskel* p = 0;

            if (t == 0 && this->phenotype_dataset_parser_ != 0)
              p = this->phenotype_dataset_parser_;
            else
            {
              const char* ts = ::phenotype_dataset::phenotype_dataset_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->phenotype_dataset_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->phenotype_dataset_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->phenotype_dataset_parser_map_ != 0)
                  p = static_cast< ::phenotype_dataset::phenotype_dataset_pskel* > (
                    this->phenotype_dataset_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_dataset::phenotype_dataset_pskel* p =
            static_cast< ::phenotype_dataset::phenotype_dataset_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_dataset::phenotype_dataset* tmp = p->post_phenotype_dataset ();
              this->phenotype_dataset (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for DCLs_pskel.
  //
  bool DCLs_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "cell_line" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &DCLs_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool DCLs_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void DCLs_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void DCLs_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void DCLs_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "cell_line" && ns.empty ())
        {
          if (start)
          {
            ::cell_line::cell_line_pskel* p = 0;

            if (t == 0 && this->cell_line_parser_ != 0)
              p = this->cell_line_parser_;
            else
            {
              const char* ts = ::cell_line::cell_line_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_line_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_line_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_line_parser_map_ != 0)
                  p = static_cast< ::cell_line::cell_line_pskel* > (
                    this->cell_line_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_line::cell_line_pskel* p =
            static_cast< ::cell_line::cell_line_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_line::cell_line* tmp = p->post_cell_line ();
              this->cell_line (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace cell_line
{
  // Attribute validation and dispatch functions for cell_line_pskel.
  //
  bool cell_line_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->ID_parser_->post_string ();

          this->ID (tmp);
        }
      }

      return true;
    }

    if (n == "label" && ns.empty ())
    {
      if (this->label_parser_)
      {
        this->label_parser_->pre ();

        this->label_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->label_parser_->_characters (s);

        if (!ctx.error_type ())
          this->label_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->label_parser_->post_string ();

          this->label (tmp);
        }
      }

      return true;
    }

    if (n == "curated" && ns.empty ())
    {
      if (this->curated_parser_)
      {
        this->curated_parser_->pre ();

        this->curated_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->curated_parser_->_characters (s);

        if (!ctx.error_type ())
          this->curated_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          bool tmp = this->curated_parser_->post_boolean ();

          this->curated (tmp);
        }
      }

      return true;
    }

    return false;
  }
}

namespace cell_line
{
}

// Begin epilogue.
//
//
// End epilogue.

