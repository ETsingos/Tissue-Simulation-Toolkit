// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "mesh-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace mesh
{
  // bounding_box_pimpl
  //

  bounding_box_pimpl::
  bounding_box_pimpl (bool b)
  : bounding_box_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->bounding_box_pimpl_base_ = b;
    this->bounding_box_pimpl_state_.bounding_box_ = 0;
  }

  bounding_box_pimpl::
  ~bounding_box_pimpl ()
  {
    if (!this->bounding_box_pimpl_base_ && this->bounding_box_pimpl_state_.bounding_box_)
      delete this->bounding_box_pimpl_state_.bounding_box_;
  }

  void bounding_box_pimpl::
  _reset ()
  {
    bounding_box_pskel::_reset ();

    if (!this->bounding_box_pimpl_base_ && this->bounding_box_pimpl_state_.bounding_box_)
    {
      delete this->bounding_box_pimpl_state_.bounding_box_;
      this->bounding_box_pimpl_state_.bounding_box_ = 0;
    }
  }

  void bounding_box_pimpl::
  pre_impl (::mesh::bounding_box* x)
  {
    this->bounding_box_pimpl_state_.bounding_box_ = x;
    this->base_impl_.pre_impl (x);
  }

  void bounding_box_pimpl::
  pre ()
  {
    ::mesh::bounding_box* x = new ::mesh::bounding_box;
    this->pre_impl (x);
  }

  void bounding_box_pimpl::
  type (const ::std::string& x)
  {
    this->bounding_box_pimpl_state_.bounding_box_->type (x);
  }

  ::mesh::bounding_box* bounding_box_pimpl::
  post_bounding_box ()
  {
    this->base_impl_.post_units_double_list ();
    ::mesh::bounding_box* r = this->bounding_box_pimpl_state_.bounding_box_;
    this->bounding_box_pimpl_state_.bounding_box_ = 0;
    return r;
  }

  // mesh_pimpl
  //

  mesh_pimpl::
  mesh_pimpl (bool b)
  {
    this->mesh_pimpl_base_ = b;
    this->mesh_pimpl_state_.mesh_ = 0;
  }

  mesh_pimpl::
  ~mesh_pimpl ()
  {
    if (!this->mesh_pimpl_base_ && this->mesh_pimpl_state_.mesh_)
      delete this->mesh_pimpl_state_.mesh_;
  }

  void mesh_pimpl::
  _reset ()
  {
    mesh_pskel::_reset ();

    if (!this->mesh_pimpl_base_ && this->mesh_pimpl_state_.mesh_)
    {
      delete this->mesh_pimpl_state_.mesh_;
      this->mesh_pimpl_state_.mesh_ = 0;
    }
  }

  void mesh_pimpl::
  pre_impl (::mesh::mesh* x)
  {
    this->mesh_pimpl_state_.mesh_ = x;
  }

  void mesh_pimpl::
  pre ()
  {
    ::mesh::mesh* x = new ::mesh::mesh;
    this->pre_impl (x);
  }

  void mesh_pimpl::
  type (const ::std::string& x)
  {
    this->mesh_pimpl_state_.mesh_->type (x);
  }

  void mesh_pimpl::
  uniform (bool x)
  {
    this->mesh_pimpl_state_.mesh_->uniform (x);
  }

  void mesh_pimpl::
  regular (bool x)
  {
    this->mesh_pimpl_state_.mesh_->regular (x);
  }

  void mesh_pimpl::
  units (const ::std::string& x)
  {
    this->mesh_pimpl_state_.mesh_->units (x);
  }

  void mesh_pimpl::
  bounding_box (::mesh::bounding_box* x)
  {
    this->mesh_pimpl_state_.mesh_->bounding_box (x);
  }

  void mesh_pimpl::
  x_coordinates (::common::units_double_list* x)
  {
    this->mesh_pimpl_state_.mesh_->x_coordinates (x);
  }

  void mesh_pimpl::
  y_coordinates (::common::units_double_list* x)
  {
    this->mesh_pimpl_state_.mesh_->y_coordinates (x);
  }

  void mesh_pimpl::
  z_coordinates (::common::units_double_list* x)
  {
    this->mesh_pimpl_state_.mesh_->z_coordinates (x);
  }

  void mesh_pimpl::
  voxels (::mesh::list_of_voxels* x)
  {
    this->mesh_pimpl_state_.mesh_->voxels (x);
  }

  void mesh_pimpl::
  custom (::common::custom* x)
  {
    this->mesh_pimpl_state_.mesh_->custom (x);
  }

  ::mesh::mesh* mesh_pimpl::
  post_mesh ()
  {
    ::mesh::mesh* r = this->mesh_pimpl_state_.mesh_;
    this->mesh_pimpl_state_.mesh_ = 0;
    return r;
  }

  // list_of_voxels_pimpl
  //

  list_of_voxels_pimpl::
  list_of_voxels_pimpl (bool b)
  {
    this->list_of_voxels_pimpl_base_ = b;
    this->list_of_voxels_pimpl_state_.list_of_voxels_ = 0;
  }

  list_of_voxels_pimpl::
  ~list_of_voxels_pimpl ()
  {
    if (!this->list_of_voxels_pimpl_base_ && this->list_of_voxels_pimpl_state_.list_of_voxels_)
      delete this->list_of_voxels_pimpl_state_.list_of_voxels_;
  }

  void list_of_voxels_pimpl::
  _reset ()
  {
    list_of_voxels_pskel::_reset ();

    if (!this->list_of_voxels_pimpl_base_ && this->list_of_voxels_pimpl_state_.list_of_voxels_)
    {
      delete this->list_of_voxels_pimpl_state_.list_of_voxels_;
      this->list_of_voxels_pimpl_state_.list_of_voxels_ = 0;
    }
  }

  void list_of_voxels_pimpl::
  pre_impl (::mesh::list_of_voxels* x)
  {
    this->list_of_voxels_pimpl_state_.list_of_voxels_ = x;
  }

  void list_of_voxels_pimpl::
  pre ()
  {
    ::mesh::list_of_voxels* x = new ::mesh::list_of_voxels;
    this->pre_impl (x);
  }

  void list_of_voxels_pimpl::
  type (const ::common::data_storage_formats& x)
  {
    this->list_of_voxels_pimpl_state_.list_of_voxels_->type (x);
  }

  void list_of_voxels_pimpl::
  filename (const ::std::string& x)
  {
    this->list_of_voxels_pimpl_state_.list_of_voxels_->filename (x);
  }

  void list_of_voxels_pimpl::
  voxel (::mesh::voxel* x)
  {
    this->list_of_voxels_pimpl_state_.list_of_voxels_->voxel ().push_back (x);
  }

  void list_of_voxels_pimpl::
  custom (::common::custom* x)
  {
    this->list_of_voxels_pimpl_state_.list_of_voxels_->custom (x);
  }

  ::mesh::list_of_voxels* list_of_voxels_pimpl::
  post_list_of_voxels ()
  {
    ::mesh::list_of_voxels* r = this->list_of_voxels_pimpl_state_.list_of_voxels_;
    this->list_of_voxels_pimpl_state_.list_of_voxels_ = 0;
    return r;
  }

  // voxel_pimpl
  //

  voxel_pimpl::
  voxel_pimpl (bool b)
  {
    this->voxel_pimpl_base_ = b;
    this->voxel_pimpl_state_.voxel_ = 0;
  }

  voxel_pimpl::
  ~voxel_pimpl ()
  {
    if (!this->voxel_pimpl_base_ && this->voxel_pimpl_state_.voxel_)
      delete this->voxel_pimpl_state_.voxel_;
  }

  void voxel_pimpl::
  _reset ()
  {
    voxel_pskel::_reset ();

    if (!this->voxel_pimpl_base_ && this->voxel_pimpl_state_.voxel_)
    {
      delete this->voxel_pimpl_state_.voxel_;
      this->voxel_pimpl_state_.voxel_ = 0;
    }
  }

  void voxel_pimpl::
  pre_impl (::mesh::voxel* x)
  {
    this->voxel_pimpl_state_.voxel_ = x;
  }

  void voxel_pimpl::
  pre ()
  {
    ::mesh::voxel* x = new ::mesh::voxel;
    this->pre_impl (x);
  }

  void voxel_pimpl::
  ID (unsigned int x)
  {
    this->voxel_pimpl_state_.voxel_->ID (x);
  }

  void voxel_pimpl::
  type (const ::std::string& x)
  {
    this->voxel_pimpl_state_.voxel_->type (x);
  }

  void voxel_pimpl::
  center (::common::units_double_list* x)
  {
    this->voxel_pimpl_state_.voxel_->center (x);
  }

  void voxel_pimpl::
  volume (::common::units_decimal_nonnegative* x)
  {
    this->voxel_pimpl_state_.voxel_->volume (x);
  }

  void voxel_pimpl::
  custom (::common::custom* x)
  {
    this->voxel_pimpl_state_.voxel_->custom (x);
  }

  ::mesh::voxel* voxel_pimpl::
  post_voxel ()
  {
    ::mesh::voxel* r = this->voxel_pimpl_state_.voxel_;
    this->voxel_pimpl_state_.voxel_ = 0;
    return r;
  }

  // node_pimpl
  //

  node_pimpl::
  node_pimpl (bool b)
  {
    this->node_pimpl_base_ = b;
    this->node_pimpl_state_.node_ = 0;
  }

  node_pimpl::
  ~node_pimpl ()
  {
    if (!this->node_pimpl_base_ && this->node_pimpl_state_.node_)
      delete this->node_pimpl_state_.node_;
  }

  void node_pimpl::
  _reset ()
  {
    node_pskel::_reset ();

    if (!this->node_pimpl_base_ && this->node_pimpl_state_.node_)
    {
      delete this->node_pimpl_state_.node_;
      this->node_pimpl_state_.node_ = 0;
    }
  }

  void node_pimpl::
  pre_impl (::mesh::node* x)
  {
    this->node_pimpl_state_.node_ = x;
  }

  void node_pimpl::
  pre ()
  {
    ::mesh::node* x = new ::mesh::node;
    this->pre_impl (x);
  }

  void node_pimpl::
  ID (unsigned int x)
  {
    this->node_pimpl_state_.node_->ID (x);
  }

  void node_pimpl::
  position (::common::units_double_list* x)
  {
    this->node_pimpl_state_.node_->position (x);
  }

  void node_pimpl::
  custom (::common::custom* x)
  {
    this->node_pimpl_state_.node_->custom (x);
  }

  ::mesh::node* node_pimpl::
  post_node ()
  {
    ::mesh::node* r = this->node_pimpl_state_.node_;
    this->node_pimpl_state_.node_ = 0;
    return r;
  }

  // edge_pimpl
  //

  edge_pimpl::
  edge_pimpl (bool b)
  {
    this->edge_pimpl_base_ = b;
    this->edge_pimpl_state_.edge_ = 0;
  }

  edge_pimpl::
  ~edge_pimpl ()
  {
    if (!this->edge_pimpl_base_ && this->edge_pimpl_state_.edge_)
      delete this->edge_pimpl_state_.edge_;
  }

  void edge_pimpl::
  _reset ()
  {
    edge_pskel::_reset ();

    if (!this->edge_pimpl_base_ && this->edge_pimpl_state_.edge_)
    {
      delete this->edge_pimpl_state_.edge_;
      this->edge_pimpl_state_.edge_ = 0;
    }
  }

  void edge_pimpl::
  pre_impl (::mesh::edge* x)
  {
    this->edge_pimpl_state_.edge_ = x;
  }

  void edge_pimpl::
  pre ()
  {
    ::mesh::edge* x = new ::mesh::edge;
    this->pre_impl (x);
  }

  void edge_pimpl::
  ID (unsigned int x)
  {
    this->edge_pimpl_state_.edge_->ID (x);
  }

  void edge_pimpl::
  node_ID (unsigned int x)
  {
    this->edge_pimpl_state_.edge_->node_ID ().push_back (x);
  }

  ::mesh::edge* edge_pimpl::
  post_edge ()
  {
    ::mesh::edge* r = this->edge_pimpl_state_.edge_;
    this->edge_pimpl_state_.edge_ = 0;
    return r;
  }

  // face_pimpl
  //

  face_pimpl::
  face_pimpl (bool b)
  {
    this->face_pimpl_base_ = b;
    this->face_pimpl_state_.face_ = 0;
  }

  face_pimpl::
  ~face_pimpl ()
  {
    if (!this->face_pimpl_base_ && this->face_pimpl_state_.face_)
      delete this->face_pimpl_state_.face_;
  }

  void face_pimpl::
  _reset ()
  {
    face_pskel::_reset ();

    if (!this->face_pimpl_base_ && this->face_pimpl_state_.face_)
    {
      delete this->face_pimpl_state_.face_;
      this->face_pimpl_state_.face_ = 0;
    }
  }

  void face_pimpl::
  pre_impl (::mesh::face* x)
  {
    this->face_pimpl_state_.face_ = x;
  }

  void face_pimpl::
  pre ()
  {
    ::mesh::face* x = new ::mesh::face;
    this->pre_impl (x);
  }

  void face_pimpl::
  ID (unsigned int x)
  {
    this->face_pimpl_state_.face_->ID (x);
  }

  void face_pimpl::
  edge_ID (unsigned int x)
  {
    this->face_pimpl_state_.face_->edge_ID ().push_back (x);
  }

  ::mesh::face* face_pimpl::
  post_face ()
  {
    ::mesh::face* r = this->face_pimpl_state_.face_;
    this->face_pimpl_state_.face_ = 0;
    return r;
  }

  // int_list_xpath_pimpl
  //

  int_list_xpath_pimpl::
  int_list_xpath_pimpl (bool b)
  : int_list_xpath_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->int_list_xpath_pimpl_base_ = b;
    this->int_list_xpath_pimpl_state_.int_list_xpath_ = 0;
  }

  int_list_xpath_pimpl::
  ~int_list_xpath_pimpl ()
  {
    if (!this->int_list_xpath_pimpl_base_ && this->int_list_xpath_pimpl_state_.int_list_xpath_)
      delete this->int_list_xpath_pimpl_state_.int_list_xpath_;
  }

  void int_list_xpath_pimpl::
  _reset ()
  {
    int_list_xpath_pskel::_reset ();

    if (!this->int_list_xpath_pimpl_base_ && this->int_list_xpath_pimpl_state_.int_list_xpath_)
    {
      delete this->int_list_xpath_pimpl_state_.int_list_xpath_;
      this->int_list_xpath_pimpl_state_.int_list_xpath_ = 0;
    }
  }

  void int_list_xpath_pimpl::
  pre_impl (::mesh::int_list_xpath* x)
  {
    this->int_list_xpath_pimpl_state_.int_list_xpath_ = x;
    this->base_impl_.pre_impl (x);
  }

  void int_list_xpath_pimpl::
  pre ()
  {
    ::mesh::int_list_xpath* x = new ::mesh::int_list_xpath;
    this->pre_impl (x);
  }

  void int_list_xpath_pimpl::
  xpath (const ::std::string& x)
  {
    this->int_list_xpath_pimpl_state_.int_list_xpath_->xpath (x);
  }

  void int_list_xpath_pimpl::
  grouping_number (unsigned short x)
  {
    this->int_list_xpath_pimpl_state_.int_list_xpath_->grouping_number (x);
  }

  ::mesh::int_list_xpath* int_list_xpath_pimpl::
  post_int_list_xpath ()
  {
    this->base_impl_.post_unsigned_int_list ();
    ::mesh::int_list_xpath* r = this->int_list_xpath_pimpl_state_.int_list_xpath_;
    this->int_list_xpath_pimpl_state_.int_list_xpath_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

