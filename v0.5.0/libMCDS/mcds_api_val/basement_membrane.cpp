// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "basement_membrane.hpp"

#include <stdlib.h>
#include <new>

#include <xsde/cxx/guard.hxx>

namespace basement
{
  // basement_edge
  //

  basement_edge::
  basement_edge ()
  {
    this->tensile_strength_ = 0;
    this->custom_ = 0;
  }

  basement_edge::
  ~basement_edge ()
  {
    delete this->tensile_strength_;
    delete this->custom_;
  }

  void basement_edge::
  _copy (basement_edge& c) const
  {
    XSDE_UNUSED (c);

    const ::mesh::edge& b = *this;
    b._copy (c);
    {
      ::common::units_decimal_nonnegative* m = this->tensile_strength ()._clone ();
      c.tensile_strength (m);
    }

    {
      ::common::custom* m = this->custom ()._clone ();
      c.custom (m);
    }
  }

  basement_edge* basement_edge::
  _clone () const
  {
    basement_edge* c = new basement_edge;
    ::xsde::cxx::guard< basement_edge > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }

  // basement_face
  //

  basement_face::
  basement_face ()
  {
    this->thickness_ = 0;
    this->custom_ = 0;
  }

  basement_face::
  ~basement_face ()
  {
    delete this->thickness_;
    delete this->custom_;
  }

  void basement_face::
  _copy (basement_face& c) const
  {
    XSDE_UNUSED (c);

    const ::mesh::face& b = *this;
    b._copy (c);
    {
      ::common::units_decimal_nonnegative* m = this->thickness ()._clone ();
      c.thickness (m);
    }

    {
      ::common::custom* m = this->custom ()._clone ();
      c.custom (m);
    }
  }

  basement_face* basement_face::
  _clone () const
  {
    basement_face* c = new basement_face;
    ::xsde::cxx::guard< basement_face > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }

  // nodes
  //

  nodes::
  nodes ()
  {
    this->node_ = 0;
    this->custom_ = 0;
  }

  nodes::
  ~nodes ()
  {
    delete this->node_;
    delete this->custom_;
  }

  void nodes::
  _copy (nodes& c) const
  {
    XSDE_UNUSED (c);

    {
      ::mesh::node* m = this->node ()._clone ();
      c.node (m);
    }

    {
      ::common::custom* m = this->custom ()._clone ();
      c.custom (m);
    }
  }

  nodes* nodes::
  _clone () const
  {
    nodes* c = new nodes;
    ::xsde::cxx::guard< nodes > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }

  // egdes
  //

  egdes::
  egdes ()
  {
    this->edge_ = 0;
    this->custom_ = 0;
  }

  egdes::
  ~egdes ()
  {
    delete this->edge_;
    delete this->custom_;
  }

  void egdes::
  _copy (egdes& c) const
  {
    XSDE_UNUSED (c);

    {
      ::basement::basement_edge* m = this->edge ()._clone ();
      c.edge (m);
    }

    {
      ::common::custom* m = this->custom ()._clone ();
      c.custom (m);
    }
  }

  egdes* egdes::
  _clone () const
  {
    egdes* c = new egdes;
    ::xsde::cxx::guard< egdes > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }

  // faces
  //

  faces::
  faces ()
  {
    this->face_ = 0;
    this->custom_ = 0;
  }

  faces::
  ~faces ()
  {
    delete this->face_;
    delete this->custom_;
  }

  void faces::
  _copy (faces& c) const
  {
    XSDE_UNUSED (c);

    {
      ::basement::basement_face* m = this->face ()._clone ();
      c.face (m);
    }

    {
      ::common::custom* m = this->custom ()._clone ();
      c.custom (m);
    }
  }

  faces* faces::
  _clone () const
  {
    faces* c = new faces;
    ::xsde::cxx::guard< faces > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }

  // basement_membrane
  //

  basement_membrane::
  basement_membrane ()
  {
    this->ID_present_ = false;
    this->nodes_ = 0;
    this->edges_ = 0;
    this->faces_ = 0;
    this->custom_ = 0;
  }

  basement_membrane::
  ~basement_membrane ()
  {
    delete this->nodes_;
    delete this->edges_;
    delete this->faces_;
    delete this->custom_;
  }

  void basement_membrane::
  _copy (basement_membrane& c) const
  {
    XSDE_UNUSED (c);

    if (this->ID_present ())
      c.ID (this->ID ());

    {
      ::basement::nodes* m = this->nodes ()._clone ();
      c.nodes (m);
    }

    {
      ::basement::egdes* m = this->edges ()._clone ();
      c.edges (m);
    }

    {
      ::basement::faces* m = this->faces ()._clone ();
      c.faces (m);
    }

    {
      ::common::custom* m = this->custom ()._clone ();
      c.custom (m);
    }
  }

  basement_membrane* basement_membrane::
  _clone () const
  {
    basement_membrane* c = new basement_membrane;
    ::xsde::cxx::guard< basement_membrane > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

