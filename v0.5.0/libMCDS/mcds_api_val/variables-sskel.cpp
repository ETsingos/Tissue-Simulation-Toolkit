// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "variables-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::serializer::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace variables
{
  // amount_type_sskel
  //

  const char* amount_type_sskel::
  _static_type ()
  {
    return "amount_type variables";
  }

  const char* amount_type_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_amount_type_sskel_inheritance_map_entry_ (
    amount_type_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void amount_type_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  const char* const amount_type_sskel::_xsde_amount_type_sskel_enums_[12UL] = 
  {
    "area_fraction",
    "area_percent",
    "area_percentage",
    "concentration",
    "count",
    "density",
    "partial_pressure",
    "surface",
    "surface_density",
    "volume_fraction",
    "volume_percent",
    "volume_percentage"
  };

  // variable_sskel
  //

  bool variable_sskel::
  units_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->units_present () : false;
  }

  bool variable_sskel::
  ID_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->ID_present () : false;
  }

  bool variable_sskel::
  type_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->type_present () : false;
  }

  bool variable_sskel::
  ChEBI_ID_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->ChEBI_ID_present () : false;
  }

  bool variable_sskel::
  MeSH_ID_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->MeSH_ID_present () : false;
  }

  bool variable_sskel::
  DrugBank_ID_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->DrugBank_ID_present () : false;
  }

  bool variable_sskel::
  GMO_ID_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->GMO_ID_present () : false;
  }

  bool variable_sskel::
  GO_ID_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->GO_ID_present () : false;
  }

  bool variable_sskel::
  UniProt_ID_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->UniProt_ID_present () : false;
  }

  bool variable_sskel::
  PR_ID_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->PR_ID_present () : false;
  }

  bool variable_sskel::
  any_attribute_next ()
  {
    return this->variable_impl_ ? this->variable_impl_->any_attribute_next () : false;
  }

  void variable_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->variable_impl_)
      this->variable_impl_->any_attribute (ns, n);
  }

  void variable_sskel::
  serialize_any_attribute ()
  {
    if (this->variable_impl_)
      this->variable_impl_->serialize_any_attribute ();
  }

  bool variable_sskel::
  material_amount_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->material_amount_present () : false;
  }

  bool variable_sskel::
  physical_parameter_set_present ()
  {
    return this->variable_impl_ ? this->variable_impl_->physical_parameter_set_present () : false;
  }

  void variable_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    if (this->ChEBI_ID_serializer_)
      this->ChEBI_ID_serializer_->_reset ();

    if (this->MeSH_ID_serializer_)
      this->MeSH_ID_serializer_->_reset ();

    if (this->DrugBank_ID_serializer_)
      this->DrugBank_ID_serializer_->_reset ();

    if (this->GMO_ID_serializer_)
      this->GMO_ID_serializer_->_reset ();

    if (this->GO_ID_serializer_)
      this->GO_ID_serializer_->_reset ();

    if (this->UniProt_ID_serializer_)
      this->UniProt_ID_serializer_->_reset ();

    if (this->PR_ID_serializer_)
      this->PR_ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->material_amount_serializer_)
      this->material_amount_serializer_->_reset ();

    if (this->material_amount_serializer_map_)
      this->material_amount_serializer_map_->reset ();

    if (this->physical_parameter_set_serializer_)
      this->physical_parameter_set_serializer_->_reset ();

    if (this->physical_parameter_set_serializer_map_)
      this->physical_parameter_set_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* variable_sskel::
  _static_type ()
  {
    return "variable variables";
  }

  const char* variable_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // material_amount_sskel
  //

  bool material_amount_sskel::
  type_present ()
  {
    return this->material_amount_impl_ ? this->material_amount_impl_->type_present () : false;
  }

  bool material_amount_sskel::
  scale_units_present ()
  {
    return this->material_amount_impl_ ? this->material_amount_impl_->scale_units_present () : false;
  }

  void material_amount_sskel::
  _reset ()
  {
    typedef ::common::units_decimal_sskel base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    if (this->scale_units_serializer_)
      this->scale_units_serializer_->_reset ();
  }

  const char* material_amount_sskel::
  _static_type ()
  {
    return "material_amount variables";
  }

  const char* material_amount_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_material_amount_sskel_inheritance_map_entry_ (
    material_amount_sskel::_static_type (),
    ::common::units_decimal_sskel::_static_type ());

  void material_amount_sskel::
  pre (const ::common::units_decimal& x)
  {
    assert (this->units_decimal_impl_);
    this->units_decimal_impl_->pre (x);
  }

  ::std::string material_amount_sskel::
  units ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->units ();
  }

  ::std::string material_amount_sskel::
  measurement_type ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->measurement_type ();
  }

  double material_amount_sskel::
  uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty ();
  }

  double material_amount_sskel::
  negative_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty ();
  }

  double material_amount_sskel::
  positive_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty ();
  }

  double material_amount_sskel::
  uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty_percentage ();
  }

  double material_amount_sskel::
  negative_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty_percentage ();
  }

  double material_amount_sskel::
  positive_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty_percentage ();
  }

  double material_amount_sskel::
  median ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->median ();
  }

  double material_amount_sskel::
  standard_deviation ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_deviation ();
  }

  const ::common::two_doubles& material_amount_sskel::
  interquartile_range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->interquartile_range ();
  }

  const ::common::two_doubles& material_amount_sskel::
  range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->range ();
  }

  double material_amount_sskel::
  min ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->min ();
  }

  double material_amount_sskel::
  max ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->max ();
  }

  double material_amount_sskel::
  standard_error ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error ();
  }

  double material_amount_sskel::
  standard_error_of_the_mean ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error_of_the_mean ();
  }

  int material_amount_sskel::
  number_obs ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->number_obs ();
  }

  double material_amount_sskel::
  skewnesss ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->skewnesss ();
  }

  double material_amount_sskel::
  kurtosis ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->kurtosis ();
  }

  // physical_parameter_set_sskel
  //

  bool physical_parameter_set_sskel::
  conditions_present ()
  {
    return this->physical_parameter_set_impl_ ? this->physical_parameter_set_impl_->conditions_present () : false;
  }

  bool physical_parameter_set_sskel::
  diffusion_coefficient_present ()
  {
    return this->physical_parameter_set_impl_ ? this->physical_parameter_set_impl_->diffusion_coefficient_present () : false;
  }

  bool physical_parameter_set_sskel::
  decay_rate_present ()
  {
    return this->physical_parameter_set_impl_ ? this->physical_parameter_set_impl_->decay_rate_present () : false;
  }

  bool physical_parameter_set_sskel::
  custom_present ()
  {
    return this->physical_parameter_set_impl_ ? this->physical_parameter_set_impl_->custom_present () : false;
  }

  void physical_parameter_set_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->conditions_serializer_)
      this->conditions_serializer_->_reset ();

    if (this->conditions_serializer_map_)
      this->conditions_serializer_map_->reset ();

    if (this->diffusion_coefficient_serializer_)
      this->diffusion_coefficient_serializer_->_reset ();

    if (this->diffusion_coefficient_serializer_map_)
      this->diffusion_coefficient_serializer_map_->reset ();

    if (this->decay_rate_serializer_)
      this->decay_rate_serializer_->_reset ();

    if (this->decay_rate_serializer_map_)
      this->decay_rate_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* physical_parameter_set_sskel::
  _static_type ()
  {
    return "physical_parameter_set variables";
  }

  const char* physical_parameter_set_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // physical_conditions_sskel
  //

  bool physical_conditions_sskel::
  temperature_present ()
  {
    return this->physical_conditions_impl_ ? this->physical_conditions_impl_->temperature_present () : false;
  }

  bool physical_conditions_sskel::
  mechanical_pressure_present ()
  {
    return this->physical_conditions_impl_ ? this->physical_conditions_impl_->mechanical_pressure_present () : false;
  }

  bool physical_conditions_sskel::
  acidity_present ()
  {
    return this->physical_conditions_impl_ ? this->physical_conditions_impl_->acidity_present () : false;
  }

  bool physical_conditions_sskel::
  pH_present ()
  {
    return this->physical_conditions_impl_ ? this->physical_conditions_impl_->pH_present () : false;
  }

  bool physical_conditions_sskel::
  custom_present ()
  {
    return this->physical_conditions_impl_ ? this->physical_conditions_impl_->custom_present () : false;
  }

  void physical_conditions_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->temperature_serializer_)
      this->temperature_serializer_->_reset ();

    if (this->temperature_serializer_map_)
      this->temperature_serializer_map_->reset ();

    if (this->mechanical_pressure_serializer_)
      this->mechanical_pressure_serializer_->_reset ();

    if (this->mechanical_pressure_serializer_map_)
      this->mechanical_pressure_serializer_map_->reset ();

    if (this->acidity_serializer_)
      this->acidity_serializer_->_reset ();

    if (this->acidity_serializer_map_)
      this->acidity_serializer_map_->reset ();

    if (this->pH_serializer_)
      this->pH_serializer_->_reset ();

    if (this->pH_serializer_map_)
      this->pH_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* physical_conditions_sskel::
  _static_type ()
  {
    return "physical_conditions variables";
  }

  const char* physical_conditions_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // system_sskel
  //

  const char* system_sskel::
  _static_type ()
  {
    return "system variables";
  }

  const char* system_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_system_sskel_inheritance_map_entry_ (
    system_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void system_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  const char* const system_sskel::_xsde_system_sskel_enums_[4UL] = 
  {
    "ex vivo",
    "in silico",
    "in vitro",
    "in vivo"
  };

  // conditions_sskel
  //

  const char* conditions_sskel::
  _static_type ()
  {
    return "conditions variables";
  }

  const char* conditions_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_conditions_sskel_inheritance_map_entry_ (
    conditions_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void conditions_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  const char* const conditions_sskel::_xsde_conditions_sskel_enums_[3UL] = 
  {
    "spheroid",
    "surface",
    "suspension"
  };

  // experimental_conditions_sskel
  //

  bool experimental_conditions_sskel::
  type_present ()
  {
    return this->experimental_conditions_impl_ ? this->experimental_conditions_impl_->type_present () : false;
  }

  bool experimental_conditions_sskel::
  dimensionality_present ()
  {
    return this->experimental_conditions_impl_ ? this->experimental_conditions_impl_->dimensionality_present () : false;
  }

  bool experimental_conditions_sskel::
  system_present ()
  {
    return this->experimental_conditions_impl_ ? this->experimental_conditions_impl_->system_present () : false;
  }

  bool experimental_conditions_sskel::
  conditions_present ()
  {
    return this->experimental_conditions_impl_ ? this->experimental_conditions_impl_->conditions_present () : false;
  }

  bool experimental_conditions_sskel::
  surface_variable_next ()
  {
    return this->experimental_conditions_impl_ ? this->experimental_conditions_impl_->surface_variable_next () : false;
  }

  void experimental_conditions_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    this->resetting_ = true;

    if (this->dimensionality_serializer_)
      this->dimensionality_serializer_->_reset ();

    if (this->dimensionality_serializer_map_)
      this->dimensionality_serializer_map_->reset ();

    if (this->system_serializer_)
      this->system_serializer_->_reset ();

    if (this->system_serializer_map_)
      this->system_serializer_map_->reset ();

    if (this->conditions_serializer_)
      this->conditions_serializer_->_reset ();

    if (this->conditions_serializer_map_)
      this->conditions_serializer_map_->reset ();

    if (this->surface_variable_serializer_)
      this->surface_variable_serializer_->_reset ();

    if (this->surface_variable_serializer_map_)
      this->surface_variable_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* experimental_conditions_sskel::
  _static_type ()
  {
    return "experimental_conditions variables";
  }

  const char* experimental_conditions_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // data_vector_sskel
  //

  bool data_vector_sskel::
  voxel_ID_present ()
  {
    return this->data_vector_impl_ ? this->data_vector_impl_->voxel_ID_present () : false;
  }

  void data_vector_sskel::
  _reset ()
  {
    typedef ::common::units_double_list_sskel base;
    base::_reset ();

    if (this->voxel_ID_serializer_)
      this->voxel_ID_serializer_->_reset ();
  }

  const char* data_vector_sskel::
  _static_type ()
  {
    return "data_vector variables";
  }

  const char* data_vector_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_data_vector_sskel_inheritance_map_entry_ (
    data_vector_sskel::_static_type (),
    ::common::units_double_list_sskel::_static_type ());

  void data_vector_sskel::
  pre (const ::common::units_double_list& x)
  {
    assert (this->units_double_list_impl_);
    this->units_double_list_impl_->pre (x);
  }

  ::std::string data_vector_sskel::
  units ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->units ();
  }

  ::std::string data_vector_sskel::
  measurement_type ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->measurement_type ();
  }

  double data_vector_sskel::
  uncertainty ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->uncertainty ();
  }

  double data_vector_sskel::
  negative_uncertainty ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->negative_uncertainty ();
  }

  double data_vector_sskel::
  positive_uncertainty ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->positive_uncertainty ();
  }

  double data_vector_sskel::
  uncertainty_percentage ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->uncertainty_percentage ();
  }

  double data_vector_sskel::
  negative_uncertainty_percentage ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->negative_uncertainty_percentage ();
  }

  double data_vector_sskel::
  positive_uncertainty_percentage ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->positive_uncertainty_percentage ();
  }

  double data_vector_sskel::
  median ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->median ();
  }

  double data_vector_sskel::
  standard_deviation ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->standard_deviation ();
  }

  const ::common::two_doubles& data_vector_sskel::
  interquartile_range ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->interquartile_range ();
  }

  const ::common::two_doubles& data_vector_sskel::
  range ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->range ();
  }

  double data_vector_sskel::
  min ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->min ();
  }

  double data_vector_sskel::
  max ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->max ();
  }

  double data_vector_sskel::
  standard_error ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->standard_error ();
  }

  double data_vector_sskel::
  standard_error_of_the_mean ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->standard_error_of_the_mean ();
  }

  int data_vector_sskel::
  number_obs ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->number_obs ();
  }

  double data_vector_sskel::
  skewnesss ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->skewnesss ();
  }

  double data_vector_sskel::
  kurtosis ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->kurtosis ();
  }

  // data_sskel
  //

  bool data_sskel::
  type_present ()
  {
    return this->data_impl_ ? this->data_impl_->type_present () : false;
  }

  bool data_sskel::
  filename_present ()
  {
    return this->data_impl_ ? this->data_impl_->filename_present () : false;
  }

  bool data_sskel::
  data_vector_next ()
  {
    return this->data_impl_ ? this->data_impl_->data_vector_next () : false;
  }

  bool data_sskel::
  custom_present ()
  {
    return this->data_impl_ ? this->data_impl_->custom_present () : false;
  }

  void data_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    this->resetting_ = true;

    if (this->filename_serializer_)
      this->filename_serializer_->_reset ();

    if (this->filename_serializer_map_)
      this->filename_serializer_map_->reset ();

    if (this->data_vector_serializer_)
      this->data_vector_serializer_->_reset ();

    if (this->data_vector_serializer_map_)
      this->data_vector_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* data_sskel::
  _static_type ()
  {
    return "data variables";
  }

  const char* data_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // list_of_variables_sskel
  //

  bool list_of_variables_sskel::
  physical_parameter_set_present ()
  {
    return this->list_of_variables_impl_ ? this->list_of_variables_impl_->physical_parameter_set_present () : false;
  }

  bool list_of_variables_sskel::
  custom_present ()
  {
    return this->list_of_variables_impl_ ? this->list_of_variables_impl_->custom_present () : false;
  }

  void list_of_variables_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->variable_serializer_)
      this->variable_serializer_->_reset ();

    if (this->variable_serializer_map_)
      this->variable_serializer_map_->reset ();

    if (this->physical_parameter_set_serializer_)
      this->physical_parameter_set_serializer_->_reset ();

    if (this->physical_parameter_set_serializer_map_)
      this->physical_parameter_set_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_variables_sskel::
  _static_type ()
  {
    return "list_of_variables variables";
  }

  const char* list_of_variables_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // transition_threshold_sskel
  //

  bool transition_threshold_sskel::
  ChEBI_ID_present ()
  {
    return this->transition_threshold_impl_ ? this->transition_threshold_impl_->ChEBI_ID_present () : false;
  }

  bool transition_threshold_sskel::
  MeSH_ID_present ()
  {
    return this->transition_threshold_impl_ ? this->transition_threshold_impl_->MeSH_ID_present () : false;
  }

  bool transition_threshold_sskel::
  DrugBank_ID_present ()
  {
    return this->transition_threshold_impl_ ? this->transition_threshold_impl_->DrugBank_ID_present () : false;
  }

  bool transition_threshold_sskel::
  GMO_ID_present ()
  {
    return this->transition_threshold_impl_ ? this->transition_threshold_impl_->GMO_ID_present () : false;
  }

  bool transition_threshold_sskel::
  GO_ID_present ()
  {
    return this->transition_threshold_impl_ ? this->transition_threshold_impl_->GO_ID_present () : false;
  }

  bool transition_threshold_sskel::
  UniProt_ID_present ()
  {
    return this->transition_threshold_impl_ ? this->transition_threshold_impl_->UniProt_ID_present () : false;
  }

  bool transition_threshold_sskel::
  PR_ID_present ()
  {
    return this->transition_threshold_impl_ ? this->transition_threshold_impl_->PR_ID_present () : false;
  }

  void transition_threshold_sskel::
  _reset ()
  {
    typedef ::common::transition_threshold_sskel base;
    base::_reset ();

    if (this->ChEBI_ID_serializer_)
      this->ChEBI_ID_serializer_->_reset ();

    if (this->MeSH_ID_serializer_)
      this->MeSH_ID_serializer_->_reset ();

    if (this->DrugBank_ID_serializer_)
      this->DrugBank_ID_serializer_->_reset ();

    if (this->GMO_ID_serializer_)
      this->GMO_ID_serializer_->_reset ();

    if (this->GO_ID_serializer_)
      this->GO_ID_serializer_->_reset ();

    if (this->UniProt_ID_serializer_)
      this->UniProt_ID_serializer_->_reset ();

    if (this->PR_ID_serializer_)
      this->PR_ID_serializer_->_reset ();
  }

  const char* transition_threshold_sskel::
  _static_type ()
  {
    return "transition_threshold variables";
  }

  const char* transition_threshold_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_transition_threshold_sskel_inheritance_map_entry_ (
    transition_threshold_sskel::_static_type (),
    ::common::transition_threshold_sskel::_static_type ());

  void transition_threshold_sskel::
  pre (const ::common::transition_threshold& x)
  {
    assert (this->transition_threshold_impl_);
    this->transition_threshold_impl_->pre (x);
  }

  ::std::string transition_threshold_sskel::
  quantity ()
  {
    assert (this->transition_threshold_impl_);
    return this->transition_threshold_impl_->quantity ();
  }

  const ::common::threshold_type& transition_threshold_sskel::
  type ()
  {
    assert (this->transition_threshold_impl_);
    return this->transition_threshold_impl_->type ();
  }

  unsigned long long transition_threshold_sskel::
  variable_ID ()
  {
    assert (this->transition_threshold_impl_);
    return this->transition_threshold_impl_->variable_ID ();
  }
}

namespace variables
{
  // Element validation and serialization for variable_sskel.
  //
  void variable_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // material_amount
    //
    if (this->material_amount_present ())
    {
      ctx.type_id (0);
      const ::variables::material_amount& r = this->material_amount ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::material_amount_sskel* s = 0;

      if (t == 0 && this->material_amount_serializer_ != 0)
        s = this->material_amount_serializer_;
      else if (this->material_amount_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->material_amount_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::material_amount_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::material_amount_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("material_amount");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // physical_parameter_set
    //
    if (this->physical_parameter_set_present ())
    {
      ctx.type_id (0);
      const ::variables::physical_parameter_set& r = this->physical_parameter_set ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::physical_parameter_set_sskel* s = 0;

      if (t == 0 && this->physical_parameter_set_serializer_ != 0)
        s = this->physical_parameter_set_serializer_;
      else if (this->physical_parameter_set_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->physical_parameter_set_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::physical_parameter_set_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::physical_parameter_set_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("physical_parameter_set");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for physical_parameter_set_sskel.
  //
  void physical_parameter_set_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // conditions
    //
    if (this->conditions_present ())
    {
      ctx.type_id (0);
      const ::variables::physical_conditions& r = this->conditions ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::physical_conditions_sskel* s = 0;

      if (t == 0 && this->conditions_serializer_ != 0)
        s = this->conditions_serializer_;
      else if (this->conditions_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->conditions_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::physical_conditions_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::physical_conditions_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("conditions");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // diffusion_coefficient
    //
    if (this->diffusion_coefficient_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->diffusion_coefficient ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->diffusion_coefficient_serializer_ != 0)
        s = this->diffusion_coefficient_serializer_;
      else if (this->diffusion_coefficient_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->diffusion_coefficient_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("diffusion_coefficient");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // decay_rate
    //
    if (this->decay_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->decay_rate ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->decay_rate_serializer_ != 0)
        s = this->decay_rate_serializer_;
      else if (this->decay_rate_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->decay_rate_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("decay_rate");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for physical_conditions_sskel.
  //
  void physical_conditions_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // temperature
    //
    if (this->temperature_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->temperature ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->temperature_serializer_ != 0)
        s = this->temperature_serializer_;
      else if (this->temperature_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->temperature_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("temperature");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // mechanical_pressure
    //
    if (this->mechanical_pressure_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->mechanical_pressure ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->mechanical_pressure_serializer_ != 0)
        s = this->mechanical_pressure_serializer_;
      else if (this->mechanical_pressure_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->mechanical_pressure_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("mechanical_pressure");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // acidity
    //
    if (this->acidity_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->acidity ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->acidity_serializer_ != 0)
        s = this->acidity_serializer_;
      else if (this->acidity_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->acidity_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("acidity");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // pH
    //
    if (this->pH_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->pH ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->pH_serializer_ != 0)
        s = this->pH_serializer_;
      else if (this->pH_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->pH_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("pH");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for experimental_conditions_sskel.
  //
  void experimental_conditions_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // dimensionality
    //
    if (this->dimensionality_present ())
    {
      ctx.type_id (0);
      unsigned short r = this->dimensionality ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::xml_schema::unsigned_short_sskel* s = 0;

      if (t == 0 && this->dimensionality_serializer_ != 0)
        s = this->dimensionality_serializer_;
      else if (this->dimensionality_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->dimensionality_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::xml_schema::unsigned_short_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::xml_schema::unsigned_short_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("dimensionality");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // system
    //
    if (this->system_present ())
    {
      ctx.type_id (0);
      const ::variables::system& r = this->system ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::system_sskel* s = 0;

      if (t == 0 && this->system_serializer_ != 0)
        s = this->system_serializer_;
      else if (this->system_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->system_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::system_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::system_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("system");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // conditions
    //
    if (this->conditions_present ())
    {
      ctx.type_id (0);
      const ::variables::conditions& r = this->conditions ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::conditions_sskel* s = 0;

      if (t == 0 && this->conditions_serializer_ != 0)
        s = this->conditions_serializer_;
      else if (this->conditions_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->conditions_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::conditions_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::conditions_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("conditions");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // surface_variable
    //
    while (this->surface_variable_next ())
    {
      ctx.type_id (0);
      const ::variables::variable& r = this->surface_variable ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::variable_sskel* s = 0;

      if (t == 0 && this->surface_variable_serializer_ != 0)
        s = this->surface_variable_serializer_;
      else if (this->surface_variable_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->surface_variable_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::variable_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::variable_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("surface_variable");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for data_sskel.
  //
  void data_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // filename
    //
    if (this->filename_present ())
    {
      ctx.type_id (0);
      const ::std::string& r = this->filename ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::xml_schema::string_sskel* s = 0;

      if (t == 0 && this->filename_serializer_ != 0)
        s = this->filename_serializer_;
      else if (this->filename_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->filename_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::xml_schema::string_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::xml_schema::string_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("filename");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // data_vector
    //
    while (this->data_vector_next ())
    {
      ctx.type_id (0);
      const ::variables::data_vector& r = this->data_vector ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::data_vector_sskel* s = 0;

      if (t == 0 && this->data_vector_serializer_ != 0)
        s = this->data_vector_serializer_;
      else if (this->data_vector_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->data_vector_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::data_vector_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::data_vector_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("data_vector");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for list_of_variables_sskel.
  //
  void list_of_variables_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // variable
    //
    {
      size_t i = 0;
      for (; this->variable_next (); ++i)
      {
        ctx.type_id (0);
        const ::variables::variable& r = this->variable ();

        const void* t = ctx.type_id ();
        const char* dt = 0;
        ::variables::variable_sskel* s = 0;

        if (t == 0 && this->variable_serializer_ != 0)
          s = this->variable_serializer_;
        else if (this->variable_serializer_map_ != 0)
        {
          ::xml_schema::serializer_base* b = this->variable_serializer_map_->find (t);

          if (b != 0)
          {
            dt = b->_dynamic_type ();
            const char* st = ::variables::variable_sskel::_static_type ();

            if (strcmp (dt, st) == 0)
              dt = 0;

            if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
            {
              ctx.schema_error (::xsde::cxx::schema_error::not_derived);
              return;
            }

            s = static_cast< ::variables::variable_sskel* > (b);
          }
        }

        if (s)
        {
          s->pre (r);
          this->_start_element ("variable");
          if (dt != 0)
            this->_set_type (dt);

          s->_pre_impl (ctx);

          if (ctx.error_type ())
            return;

          s->_serialize_attributes ();

          if (ctx.error_type ())
            return;

          s->_serialize_content ();

          if (ctx.error_type ())
            return;

          s->_post_impl ();

          if (ctx.error_type ())
            return;

          this->_end_element ();
          s->post ();
        }
        else
        {
          this->_schema_error (::xsde::cxx::schema_error::expected_element);
          return;
        }
      }

      if (i < 1UL)
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // physical_parameter_set
    //
    if (this->physical_parameter_set_present ())
    {
      ctx.type_id (0);
      const ::variables::physical_parameter_set& r = this->physical_parameter_set ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::variables::physical_parameter_set_sskel* s = 0;

      if (t == 0 && this->physical_parameter_set_serializer_ != 0)
        s = this->physical_parameter_set_serializer_;
      else if (this->physical_parameter_set_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->physical_parameter_set_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::variables::physical_parameter_set_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::variables::physical_parameter_set_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("physical_parameter_set");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }
}

namespace variables
{
  // Attribute validation and serialization for variable_sskel.
  //
  void variable_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // name
    //
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->name_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
        return;
      }
    }

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }

    // ID
    //
    if (this->ID_present ())
    {
      unsigned long long r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    // type
    //
    if (this->type_present ())
    {
      const ::variables::amount_type& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }

    // ChEBI_ID
    //
    if (this->ChEBI_ID_present ())
    {
      const ::std::string& r = this->ChEBI_ID ();

      if (this->ChEBI_ID_serializer_)
      {
        this->ChEBI_ID_serializer_->pre (r);
        this->_start_attribute ("ChEBI_ID");
        this->ChEBI_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ChEBI_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ChEBI_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ChEBI_ID_serializer_->post ();
      }
    }

    // MeSH_ID
    //
    if (this->MeSH_ID_present ())
    {
      const ::std::string& r = this->MeSH_ID ();

      if (this->MeSH_ID_serializer_)
      {
        this->MeSH_ID_serializer_->pre (r);
        this->_start_attribute ("MeSH_ID");
        this->MeSH_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->MeSH_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->MeSH_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->MeSH_ID_serializer_->post ();
      }
    }

    // DrugBank_ID
    //
    if (this->DrugBank_ID_present ())
    {
      const ::std::string& r = this->DrugBank_ID ();

      if (this->DrugBank_ID_serializer_)
      {
        this->DrugBank_ID_serializer_->pre (r);
        this->_start_attribute ("DrugBank_ID");
        this->DrugBank_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->DrugBank_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->DrugBank_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->DrugBank_ID_serializer_->post ();
      }
    }

    // GMO_ID
    //
    if (this->GMO_ID_present ())
    {
      const ::std::string& r = this->GMO_ID ();

      if (this->GMO_ID_serializer_)
      {
        this->GMO_ID_serializer_->pre (r);
        this->_start_attribute ("GMO_ID");
        this->GMO_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->GMO_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->GMO_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->GMO_ID_serializer_->post ();
      }
    }

    // GO_ID
    //
    if (this->GO_ID_present ())
    {
      const ::std::string& r = this->GO_ID ();

      if (this->GO_ID_serializer_)
      {
        this->GO_ID_serializer_->pre (r);
        this->_start_attribute ("GO_ID");
        this->GO_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->GO_ID_serializer_->post ();
      }
    }

    // UniProt_ID
    //
    if (this->UniProt_ID_present ())
    {
      const ::std::string& r = this->UniProt_ID ();

      if (this->UniProt_ID_serializer_)
      {
        this->UniProt_ID_serializer_->pre (r);
        this->_start_attribute ("UniProt_ID");
        this->UniProt_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->UniProt_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->UniProt_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->UniProt_ID_serializer_->post ();
      }
    }

    // PR_ID
    //
    if (this->PR_ID_present ())
    {
      const ::std::string& r = this->PR_ID ();

      if (this->PR_ID_serializer_)
      {
        this->PR_ID_serializer_->pre (r);
        this->_start_attribute ("PR_ID");
        this->PR_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->PR_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->PR_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->PR_ID_serializer_->post ();
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if (!name.empty ())
      {
        if (ns.empty ())
        {
          this->_start_attribute (name.c_str ());
        }
        else
        {
          this->_start_attribute (ns.c_str (), name.c_str ());
        }

        this->serialize_any_attribute ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_attribute);
        return;
      }
    }
  }

  // Attribute validation and serialization for material_amount_sskel.
  //
  void material_amount_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::units_decimal_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // type
    //
    if (this->type_present ())
    {
      const ::variables::amount_type& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }

    // scale_units
    //
    if (this->scale_units_present ())
    {
      const ::std::string& r = this->scale_units ();

      if (this->scale_units_serializer_)
      {
        this->scale_units_serializer_->pre (r);
        this->_start_attribute ("scale_units");
        this->scale_units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->scale_units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->scale_units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->scale_units_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for experimental_conditions_sskel.
  //
  void experimental_conditions_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // type
    //
    if (this->type_present ())
    {
      const ::std::string& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for data_vector_sskel.
  //
  void data_vector_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::units_double_list_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // voxel_ID
    //
    if (this->voxel_ID_present ())
    {
      const ::common::unsigned_int_list& r = this->voxel_ID ();

      if (this->voxel_ID_serializer_)
      {
        this->voxel_ID_serializer_->pre (r);
        this->_start_attribute ("voxel_ID");
        this->voxel_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->voxel_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->voxel_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->voxel_ID_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for data_sskel.
  //
  void data_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // type
    //
    if (this->type_present ())
    {
      const ::common::data_storage_formats& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for transition_threshold_sskel.
  //
  void transition_threshold_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::transition_threshold_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // ChEBI_ID
    //
    if (this->ChEBI_ID_present ())
    {
      const ::std::string& r = this->ChEBI_ID ();

      if (this->ChEBI_ID_serializer_)
      {
        this->ChEBI_ID_serializer_->pre (r);
        this->_start_attribute ("ChEBI_ID");
        this->ChEBI_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ChEBI_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ChEBI_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ChEBI_ID_serializer_->post ();
      }
    }

    // MeSH_ID
    //
    if (this->MeSH_ID_present ())
    {
      const ::std::string& r = this->MeSH_ID ();

      if (this->MeSH_ID_serializer_)
      {
        this->MeSH_ID_serializer_->pre (r);
        this->_start_attribute ("MeSH_ID");
        this->MeSH_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->MeSH_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->MeSH_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->MeSH_ID_serializer_->post ();
      }
    }

    // DrugBank_ID
    //
    if (this->DrugBank_ID_present ())
    {
      const ::std::string& r = this->DrugBank_ID ();

      if (this->DrugBank_ID_serializer_)
      {
        this->DrugBank_ID_serializer_->pre (r);
        this->_start_attribute ("DrugBank_ID");
        this->DrugBank_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->DrugBank_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->DrugBank_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->DrugBank_ID_serializer_->post ();
      }
    }

    // GMO_ID
    //
    if (this->GMO_ID_present ())
    {
      const ::std::string& r = this->GMO_ID ();

      if (this->GMO_ID_serializer_)
      {
        this->GMO_ID_serializer_->pre (r);
        this->_start_attribute ("GMO_ID");
        this->GMO_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->GMO_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->GMO_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->GMO_ID_serializer_->post ();
      }
    }

    // GO_ID
    //
    if (this->GO_ID_present ())
    {
      const ::std::string& r = this->GO_ID ();

      if (this->GO_ID_serializer_)
      {
        this->GO_ID_serializer_->pre (r);
        this->_start_attribute ("GO_ID");
        this->GO_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->GO_ID_serializer_->post ();
      }
    }

    // UniProt_ID
    //
    if (this->UniProt_ID_present ())
    {
      const ::std::string& r = this->UniProt_ID ();

      if (this->UniProt_ID_serializer_)
      {
        this->UniProt_ID_serializer_->pre (r);
        this->_start_attribute ("UniProt_ID");
        this->UniProt_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->UniProt_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->UniProt_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->UniProt_ID_serializer_->post ();
      }
    }

    // PR_ID
    //
    if (this->PR_ID_present ())
    {
      const ::std::string& r = this->PR_ID ();

      if (this->PR_ID_serializer_)
      {
        this->PR_ID_serializer_->pre (r);
        this->_start_attribute ("PR_ID");
        this->PR_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->PR_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->PR_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->PR_ID_serializer_->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

