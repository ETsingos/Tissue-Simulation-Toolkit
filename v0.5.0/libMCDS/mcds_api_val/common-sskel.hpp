// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef COMMON_SSKEL_HPP
#define COMMON_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace common
{
  class custom_sskel;
  class double_list_sskel;
  class unsigned_int_list_sskel;
  class two_doubles_sskel;
  class units_double_list_sskel;
  class delimited_list_sskel;
  class units_delimited_list_sskel;
  class units_decimal_sskel;
  class units_decimal_nonnegative_sskel;
  class units_unsignedShort_sskel;
  class units_boolean_sskel;
  class fraction_sskel;
  class units_fraction_sskel;
  class units_string_sskel;
  class data_storage_formats_sskel;
  class threshold_type_sskel;
  class transition_threshold_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map-load.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "common.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;
  using ::xsde::cxx::serializer::validating::serializer_imap_buckets;
  using ::xsde::cxx::serializer::validating::serializer_imap_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;
  typedef xsde::cxx::serializer::schema serializer_schema;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

namespace common
{
  class custom_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::custom&) = 0;

    // Elements.
    //
    virtual bool
    any_next ();

    virtual void
    any (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any ();

    // virtual void
    // post ();

    // Constructor.
    //
    custom_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    custom_sskel* custom_impl_;
    custom_sskel (custom_sskel*, void*);
  };

  class double_list_sskel: public ::xsde::cxx::serializer::validating::simple_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::double_list&) = 0;

    virtual bool
    item_next ();

    virtual double
    item () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    item_serializer (::xml_schema::double_sskel&);

    void
    serializers (::xml_schema::double_sskel& /* item */);

    virtual void
    _reset ();

    // Constructor.
    //
    double_list_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    double_list_sskel* double_list_impl_;
    double_list_sskel (double_list_sskel*, void*);

    ::xml_schema::double_sskel* _xsde_item_;
  };

  class unsigned_int_list_sskel: public ::xsde::cxx::serializer::validating::simple_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::unsigned_int_list&) = 0;

    virtual bool
    item_next ();

    virtual unsigned int
    item () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    item_serializer (::xml_schema::unsigned_int_sskel&);

    void
    serializers (::xml_schema::unsigned_int_sskel& /* item */);

    virtual void
    _reset ();

    // Constructor.
    //
    unsigned_int_list_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    unsigned_int_list_sskel* unsigned_int_list_impl_;
    unsigned_int_list_sskel (unsigned_int_list_sskel*, void*);

    ::xml_schema::unsigned_int_sskel* _xsde_item_;
  };

  class two_doubles_sskel: public ::common::double_list_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::two_doubles&) = 0;

    // virtual void
    // post ();

    // Constructor.
    //
    two_doubles_sskel (::common::double_list_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::double_list&);

    virtual double
    item ();

    protected:
    two_doubles_sskel* two_doubles_impl_;
    two_doubles_sskel (two_doubles_sskel*, void*);
  };

  class units_double_list_sskel: public ::common::double_list_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::units_double_list&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type () = 0;

    virtual bool
    uncertainty_present ();

    virtual double
    uncertainty () = 0;

    virtual bool
    negative_uncertainty_present ();

    virtual double
    negative_uncertainty () = 0;

    virtual bool
    positive_uncertainty_present ();

    virtual double
    positive_uncertainty () = 0;

    virtual bool
    uncertainty_percentage_present ();

    virtual double
    uncertainty_percentage () = 0;

    virtual bool
    negative_uncertainty_percentage_present ();

    virtual double
    negative_uncertainty_percentage () = 0;

    virtual bool
    positive_uncertainty_percentage_present ();

    virtual double
    positive_uncertainty_percentage () = 0;

    virtual bool
    median_present ();

    virtual double
    median () = 0;

    virtual bool
    standard_deviation_present ();

    virtual double
    standard_deviation () = 0;

    virtual bool
    interquartile_range_present ();

    virtual const ::common::two_doubles&
    interquartile_range () = 0;

    virtual bool
    range_present ();

    virtual const ::common::two_doubles&
    range () = 0;

    virtual bool
    min_present ();

    virtual double
    min () = 0;

    virtual bool
    max_present ();

    virtual double
    max () = 0;

    virtual bool
    standard_error_present ();

    virtual double
    standard_error () = 0;

    virtual bool
    standard_error_of_the_mean_present ();

    virtual double
    standard_error_of_the_mean () = 0;

    virtual bool
    number_obs_present ();

    virtual int
    number_obs () = 0;

    virtual bool
    skewnesss_present ();

    virtual double
    skewnesss () = 0;

    virtual bool
    kurtosis_present ();

    virtual double
    kurtosis () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::double_sskel& /* double_list item */,
                 ::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    void
    measurement_type_serializer (::xml_schema::string_sskel&);

    void
    uncertainty_serializer (::xml_schema::double_sskel&);

    void
    negative_uncertainty_serializer (::xml_schema::double_sskel&);

    void
    positive_uncertainty_serializer (::xml_schema::double_sskel&);

    void
    uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    negative_uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    positive_uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    median_serializer (::xml_schema::double_sskel&);

    void
    standard_deviation_serializer (::xml_schema::double_sskel&);

    void
    interquartile_range_serializer (::common::two_doubles_sskel&);

    void
    range_serializer (::common::two_doubles_sskel&);

    void
    min_serializer (::xml_schema::double_sskel&);

    void
    max_serializer (::xml_schema::double_sskel&);

    void
    standard_error_serializer (::xml_schema::double_sskel&);

    void
    standard_error_of_the_mean_serializer (::xml_schema::double_sskel&);

    void
    number_obs_serializer (::xml_schema::int_sskel&);

    void
    skewnesss_serializer (::xml_schema::double_sskel&);

    void
    kurtosis_serializer (::xml_schema::double_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_double_list_sskel (::common::double_list_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::double_list&);

    virtual double
    item ();

    virtual void
    _serialize_attributes ();

    protected:
    units_double_list_sskel* units_double_list_impl_;
    units_double_list_sskel (units_double_list_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
    ::xml_schema::string_sskel* measurement_type_serializer_;
    ::xml_schema::double_sskel* uncertainty_serializer_;
    ::xml_schema::double_sskel* negative_uncertainty_serializer_;
    ::xml_schema::double_sskel* positive_uncertainty_serializer_;
    ::xml_schema::double_sskel* uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* negative_uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* positive_uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* median_serializer_;
    ::xml_schema::double_sskel* standard_deviation_serializer_;
    ::common::two_doubles_sskel* interquartile_range_serializer_;
    ::common::two_doubles_sskel* range_serializer_;
    ::xml_schema::double_sskel* min_serializer_;
    ::xml_schema::double_sskel* max_serializer_;
    ::xml_schema::double_sskel* standard_error_serializer_;
    ::xml_schema::double_sskel* standard_error_of_the_mean_serializer_;
    ::xml_schema::int_sskel* number_obs_serializer_;
    ::xml_schema::double_sskel* skewnesss_serializer_;
    ::xml_schema::double_sskel* kurtosis_serializer_;
  };

  class delimited_list_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::delimited_list&) = 0;

    // Attributes.
    //
    virtual bool
    delimiter_present ();

    virtual ::std::string
    delimiter () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* delimiter */);

    // Individual attribute serializers.
    //
    void
    delimiter_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    delimited_list_sskel (::xml_schema::string_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::std::string&);

    virtual void
    _serialize_attributes ();

    protected:
    delimited_list_sskel* delimited_list_impl_;
    delimited_list_sskel (delimited_list_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* delimiter_serializer_;
  };

  class units_delimited_list_sskel: public ::common::delimited_list_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::units_delimited_list&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type () = 0;

    virtual bool
    uncertainty_present ();

    virtual double
    uncertainty () = 0;

    virtual bool
    negative_uncertainty_present ();

    virtual double
    negative_uncertainty () = 0;

    virtual bool
    positive_uncertainty_present ();

    virtual double
    positive_uncertainty () = 0;

    virtual bool
    uncertainty_percentage_present ();

    virtual double
    uncertainty_percentage () = 0;

    virtual bool
    negative_uncertainty_percentage_present ();

    virtual double
    negative_uncertainty_percentage () = 0;

    virtual bool
    positive_uncertainty_percentage_present ();

    virtual double
    positive_uncertainty_percentage () = 0;

    virtual bool
    median_present ();

    virtual double
    median () = 0;

    virtual bool
    standard_deviation_present ();

    virtual double
    standard_deviation () = 0;

    virtual bool
    interquartile_range_present ();

    virtual const ::common::two_doubles&
    interquartile_range () = 0;

    virtual bool
    range_present ();

    virtual const ::common::two_doubles&
    range () = 0;

    virtual bool
    min_present ();

    virtual double
    min () = 0;

    virtual bool
    max_present ();

    virtual double
    max () = 0;

    virtual bool
    standard_error_present ();

    virtual double
    standard_error () = 0;

    virtual bool
    standard_error_of_the_mean_present ();

    virtual double
    standard_error_of_the_mean () = 0;

    virtual bool
    number_obs_present ();

    virtual int
    number_obs () = 0;

    virtual bool
    skewnesss_present ();

    virtual double
    skewnesss () = 0;

    virtual bool
    kurtosis_present ();

    virtual double
    kurtosis () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* delimiter */,
                 ::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    void
    measurement_type_serializer (::xml_schema::string_sskel&);

    void
    uncertainty_serializer (::xml_schema::double_sskel&);

    void
    negative_uncertainty_serializer (::xml_schema::double_sskel&);

    void
    positive_uncertainty_serializer (::xml_schema::double_sskel&);

    void
    uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    negative_uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    positive_uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    median_serializer (::xml_schema::double_sskel&);

    void
    standard_deviation_serializer (::xml_schema::double_sskel&);

    void
    interquartile_range_serializer (::common::two_doubles_sskel&);

    void
    range_serializer (::common::two_doubles_sskel&);

    void
    min_serializer (::xml_schema::double_sskel&);

    void
    max_serializer (::xml_schema::double_sskel&);

    void
    standard_error_serializer (::xml_schema::double_sskel&);

    void
    standard_error_of_the_mean_serializer (::xml_schema::double_sskel&);

    void
    number_obs_serializer (::xml_schema::int_sskel&);

    void
    skewnesss_serializer (::xml_schema::double_sskel&);

    void
    kurtosis_serializer (::xml_schema::double_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_delimited_list_sskel (::common::delimited_list_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::delimited_list&);

    virtual ::std::string
    delimiter ();

    virtual void
    _serialize_attributes ();

    protected:
    units_delimited_list_sskel* units_delimited_list_impl_;
    units_delimited_list_sskel (units_delimited_list_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
    ::xml_schema::string_sskel* measurement_type_serializer_;
    ::xml_schema::double_sskel* uncertainty_serializer_;
    ::xml_schema::double_sskel* negative_uncertainty_serializer_;
    ::xml_schema::double_sskel* positive_uncertainty_serializer_;
    ::xml_schema::double_sskel* uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* negative_uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* positive_uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* median_serializer_;
    ::xml_schema::double_sskel* standard_deviation_serializer_;
    ::common::two_doubles_sskel* interquartile_range_serializer_;
    ::common::two_doubles_sskel* range_serializer_;
    ::xml_schema::double_sskel* min_serializer_;
    ::xml_schema::double_sskel* max_serializer_;
    ::xml_schema::double_sskel* standard_error_serializer_;
    ::xml_schema::double_sskel* standard_error_of_the_mean_serializer_;
    ::xml_schema::int_sskel* number_obs_serializer_;
    ::xml_schema::double_sskel* skewnesss_serializer_;
    ::xml_schema::double_sskel* kurtosis_serializer_;
  };

  class units_decimal_sskel: public ::xml_schema::double_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::units_decimal&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type () = 0;

    virtual bool
    uncertainty_present ();

    virtual double
    uncertainty () = 0;

    virtual bool
    negative_uncertainty_present ();

    virtual double
    negative_uncertainty () = 0;

    virtual bool
    positive_uncertainty_present ();

    virtual double
    positive_uncertainty () = 0;

    virtual bool
    uncertainty_percentage_present ();

    virtual double
    uncertainty_percentage () = 0;

    virtual bool
    negative_uncertainty_percentage_present ();

    virtual double
    negative_uncertainty_percentage () = 0;

    virtual bool
    positive_uncertainty_percentage_present ();

    virtual double
    positive_uncertainty_percentage () = 0;

    virtual bool
    median_present ();

    virtual double
    median () = 0;

    virtual bool
    standard_deviation_present ();

    virtual double
    standard_deviation () = 0;

    virtual bool
    interquartile_range_present ();

    virtual const ::common::two_doubles&
    interquartile_range () = 0;

    virtual bool
    range_present ();

    virtual const ::common::two_doubles&
    range () = 0;

    virtual bool
    min_present ();

    virtual double
    min () = 0;

    virtual bool
    max_present ();

    virtual double
    max () = 0;

    virtual bool
    standard_error_present ();

    virtual double
    standard_error () = 0;

    virtual bool
    standard_error_of_the_mean_present ();

    virtual double
    standard_error_of_the_mean () = 0;

    virtual bool
    number_obs_present ();

    virtual int
    number_obs () = 0;

    virtual bool
    skewnesss_present ();

    virtual double
    skewnesss () = 0;

    virtual bool
    kurtosis_present ();

    virtual double
    kurtosis () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    void
    measurement_type_serializer (::xml_schema::string_sskel&);

    void
    uncertainty_serializer (::xml_schema::double_sskel&);

    void
    negative_uncertainty_serializer (::xml_schema::double_sskel&);

    void
    positive_uncertainty_serializer (::xml_schema::double_sskel&);

    void
    uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    negative_uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    positive_uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    median_serializer (::xml_schema::double_sskel&);

    void
    standard_deviation_serializer (::xml_schema::double_sskel&);

    void
    interquartile_range_serializer (::common::two_doubles_sskel&);

    void
    range_serializer (::common::two_doubles_sskel&);

    void
    min_serializer (::xml_schema::double_sskel&);

    void
    max_serializer (::xml_schema::double_sskel&);

    void
    standard_error_serializer (::xml_schema::double_sskel&);

    void
    standard_error_of_the_mean_serializer (::xml_schema::double_sskel&);

    void
    number_obs_serializer (::xml_schema::int_sskel&);

    void
    skewnesss_serializer (::xml_schema::double_sskel&);

    void
    kurtosis_serializer (::xml_schema::double_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_decimal_sskel (::xml_schema::double_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (double);

    virtual void
    _serialize_attributes ();

    protected:
    units_decimal_sskel* units_decimal_impl_;
    units_decimal_sskel (units_decimal_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
    ::xml_schema::string_sskel* measurement_type_serializer_;
    ::xml_schema::double_sskel* uncertainty_serializer_;
    ::xml_schema::double_sskel* negative_uncertainty_serializer_;
    ::xml_schema::double_sskel* positive_uncertainty_serializer_;
    ::xml_schema::double_sskel* uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* negative_uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* positive_uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* median_serializer_;
    ::xml_schema::double_sskel* standard_deviation_serializer_;
    ::common::two_doubles_sskel* interquartile_range_serializer_;
    ::common::two_doubles_sskel* range_serializer_;
    ::xml_schema::double_sskel* min_serializer_;
    ::xml_schema::double_sskel* max_serializer_;
    ::xml_schema::double_sskel* standard_error_serializer_;
    ::xml_schema::double_sskel* standard_error_of_the_mean_serializer_;
    ::xml_schema::int_sskel* number_obs_serializer_;
    ::xml_schema::double_sskel* skewnesss_serializer_;
    ::xml_schema::double_sskel* kurtosis_serializer_;
  };

  class units_decimal_nonnegative_sskel: public ::common::units_decimal_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::units_decimal_nonnegative&) = 0;

    // virtual void
    // post ();

    // Constructor.
    //
    units_decimal_nonnegative_sskel (::common::units_decimal_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_decimal&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    units_decimal_nonnegative_sskel* units_decimal_nonnegative_impl_;
    units_decimal_nonnegative_sskel (units_decimal_nonnegative_sskel*, void*);
  };

  class units_unsignedShort_sskel: public ::xml_schema::unsigned_short_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::units_unsignedShort&) = 0;

    // Attributes.
    //
    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type () = 0;

    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::string_sskel& /* units */);

    // Individual attribute serializers.
    //
    void
    measurement_type_serializer (::xml_schema::string_sskel&);

    void
    units_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_unsignedShort_sskel (::xml_schema::unsigned_short_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (unsigned short);

    virtual void
    _serialize_attributes ();

    protected:
    units_unsignedShort_sskel* units_unsignedShort_impl_;
    units_unsignedShort_sskel (units_unsignedShort_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* measurement_type_serializer_;
    ::xml_schema::string_sskel* units_serializer_;
  };

  class units_boolean_sskel: public ::xml_schema::boolean_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::units_boolean&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_boolean_sskel (::xml_schema::boolean_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (bool);

    virtual void
    _serialize_attributes ();

    protected:
    units_boolean_sskel* units_boolean_impl_;
    units_boolean_sskel (units_boolean_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
  };

  class fraction_sskel: public ::xml_schema::double_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::fraction&) = 0;

    // virtual void
    // post ();

    // Constructor.
    //
    fraction_sskel (::xml_schema::double_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (double);

    protected:
    fraction_sskel* fraction_impl_;
    fraction_sskel (fraction_sskel*, void*);
  };

  class units_fraction_sskel: public ::common::units_decimal_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::units_fraction&) = 0;

    // virtual void
    // post ();

    // Constructor.
    //
    units_fraction_sskel (::common::units_decimal_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_decimal&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    units_fraction_sskel* units_fraction_impl_;
    units_fraction_sskel (units_fraction_sskel*, void*);
  };

  class units_string_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::units_string&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    virtual bool
    measurement_type_present ();

    virtual ::std::string
    measurement_type () = 0;

    virtual bool
    uncertainty_present ();

    virtual double
    uncertainty () = 0;

    virtual bool
    negative_uncertainty_present ();

    virtual double
    negative_uncertainty () = 0;

    virtual bool
    positive_uncertainty_present ();

    virtual double
    positive_uncertainty () = 0;

    virtual bool
    uncertainty_percentage_present ();

    virtual double
    uncertainty_percentage () = 0;

    virtual bool
    negative_uncertainty_percentage_present ();

    virtual double
    negative_uncertainty_percentage () = 0;

    virtual bool
    positive_uncertainty_percentage_present ();

    virtual double
    positive_uncertainty_percentage () = 0;

    virtual bool
    median_present ();

    virtual double
    median () = 0;

    virtual bool
    standard_deviation_present ();

    virtual double
    standard_deviation () = 0;

    virtual bool
    interquartile_range_present ();

    virtual const ::common::two_doubles&
    interquartile_range () = 0;

    virtual bool
    range_present ();

    virtual const ::common::two_doubles&
    range () = 0;

    virtual bool
    min_present ();

    virtual double
    min () = 0;

    virtual bool
    max_present ();

    virtual double
    max () = 0;

    virtual bool
    standard_error_present ();

    virtual double
    standard_error () = 0;

    virtual bool
    standard_error_of_the_mean_present ();

    virtual double
    standard_error_of_the_mean () = 0;

    virtual bool
    number_obs_present ();

    virtual int
    number_obs () = 0;

    virtual bool
    skewnesss_present ();

    virtual double
    skewnesss () = 0;

    virtual bool
    kurtosis_present ();

    virtual double
    kurtosis () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    void
    measurement_type_serializer (::xml_schema::string_sskel&);

    void
    uncertainty_serializer (::xml_schema::double_sskel&);

    void
    negative_uncertainty_serializer (::xml_schema::double_sskel&);

    void
    positive_uncertainty_serializer (::xml_schema::double_sskel&);

    void
    uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    negative_uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    positive_uncertainty_percentage_serializer (::xml_schema::double_sskel&);

    void
    median_serializer (::xml_schema::double_sskel&);

    void
    standard_deviation_serializer (::xml_schema::double_sskel&);

    void
    interquartile_range_serializer (::common::two_doubles_sskel&);

    void
    range_serializer (::common::two_doubles_sskel&);

    void
    min_serializer (::xml_schema::double_sskel&);

    void
    max_serializer (::xml_schema::double_sskel&);

    void
    standard_error_serializer (::xml_schema::double_sskel&);

    void
    standard_error_of_the_mean_serializer (::xml_schema::double_sskel&);

    void
    number_obs_serializer (::xml_schema::int_sskel&);

    void
    skewnesss_serializer (::xml_schema::double_sskel&);

    void
    kurtosis_serializer (::xml_schema::double_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    units_string_sskel (::xml_schema::string_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::std::string&);

    virtual void
    _serialize_attributes ();

    protected:
    units_string_sskel* units_string_impl_;
    units_string_sskel (units_string_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
    ::xml_schema::string_sskel* measurement_type_serializer_;
    ::xml_schema::double_sskel* uncertainty_serializer_;
    ::xml_schema::double_sskel* negative_uncertainty_serializer_;
    ::xml_schema::double_sskel* positive_uncertainty_serializer_;
    ::xml_schema::double_sskel* uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* negative_uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* positive_uncertainty_percentage_serializer_;
    ::xml_schema::double_sskel* median_serializer_;
    ::xml_schema::double_sskel* standard_deviation_serializer_;
    ::common::two_doubles_sskel* interquartile_range_serializer_;
    ::common::two_doubles_sskel* range_serializer_;
    ::xml_schema::double_sskel* min_serializer_;
    ::xml_schema::double_sskel* max_serializer_;
    ::xml_schema::double_sskel* standard_error_serializer_;
    ::xml_schema::double_sskel* standard_error_of_the_mean_serializer_;
    ::xml_schema::int_sskel* number_obs_serializer_;
    ::xml_schema::double_sskel* skewnesss_serializer_;
    ::xml_schema::double_sskel* kurtosis_serializer_;
  };

  class data_storage_formats_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::data_storage_formats&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    data_storage_formats_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    data_storage_formats_sskel* data_storage_formats_impl_;
    data_storage_formats_sskel (data_storage_formats_sskel*, void*);

    protected:
    static const char* const _xsde_data_storage_formats_sskel_enums_[7UL];
  };

  class threshold_type_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::threshold_type&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    threshold_type_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    threshold_type_sskel* threshold_type_impl_;
    threshold_type_sskel (threshold_type_sskel*, void*);

    protected:
    static const char* const _xsde_threshold_type_sskel_enums_[6UL];
  };

  class transition_threshold_sskel: public ::common::units_decimal_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::common::transition_threshold&) = 0;

    // Attributes.
    //
    virtual ::std::string
    quantity () = 0;

    virtual const ::common::threshold_type&
    type () = 0;

    virtual bool
    variable_ID_present ();

    virtual unsigned long long
    variable_ID () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::xml_schema::string_sskel& /* quantity */,
                 ::common::threshold_type_sskel& /* type */,
                 ::xml_schema::unsigned_long_sskel& /* variable_ID */);

    // Individual attribute serializers.
    //
    void
    quantity_serializer (::xml_schema::string_sskel&);

    void
    type_serializer (::common::threshold_type_sskel&);

    void
    variable_ID_serializer (::xml_schema::unsigned_long_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    transition_threshold_sskel (::common::units_decimal_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_decimal&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    transition_threshold_sskel* transition_threshold_impl_;
    transition_threshold_sskel (transition_threshold_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* quantity_serializer_;
    ::common::threshold_type_sskel* type_serializer_;
    ::xml_schema::unsigned_long_sskel* variable_ID_serializer_;
  };
}

#include "common-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // COMMON_SSKEL_HPP
