// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "metadata-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace metadata
{
  // URL_pskel
  //

  const char* URL_pskel::
  _static_type ()
  {
    return "URL metadata";
  }

  const char* URL_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_URL_pskel_inheritance_map_entry_ (
    URL_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string URL_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  // orcid_identifier_pskel
  //

  void orcid_identifier_pskel::
  path (const ::std::string& x)
  {
    if (this->orcid_identifier_impl_)
      this->orcid_identifier_impl_->path (x);
  }

  void orcid_identifier_pskel::
  given_names (const ::std::string& x)
  {
    if (this->orcid_identifier_impl_)
      this->orcid_identifier_impl_->given_names (x);
  }

  void orcid_identifier_pskel::
  family_name (const ::std::string& x)
  {
    if (this->orcid_identifier_impl_)
      this->orcid_identifier_impl_->family_name (x);
  }

  void orcid_identifier_pskel::
  email (const ::std::string& x)
  {
    if (this->orcid_identifier_impl_)
      this->orcid_identifier_impl_->email (x);
  }

  void orcid_identifier_pskel::
  url (const ::metadata::URL& x)
  {
    if (this->orcid_identifier_impl_)
      this->orcid_identifier_impl_->url (x);
  }

  void orcid_identifier_pskel::
  organization_name (const ::std::string& x)
  {
    if (this->orcid_identifier_impl_)
      this->orcid_identifier_impl_->organization_name (x);
  }

  void orcid_identifier_pskel::
  department_name (const ::std::string& x)
  {
    if (this->orcid_identifier_impl_)
      this->orcid_identifier_impl_->department_name (x);
  }

  void orcid_identifier_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->path_parser_)
      this->path_parser_->_reset ();

    if (this->path_parser_map_)
      this->path_parser_map_->reset ();

    if (this->given_names_parser_)
      this->given_names_parser_->_reset ();

    if (this->given_names_parser_map_)
      this->given_names_parser_map_->reset ();

    if (this->family_name_parser_)
      this->family_name_parser_->_reset ();

    if (this->family_name_parser_map_)
      this->family_name_parser_map_->reset ();

    if (this->email_parser_)
      this->email_parser_->_reset ();

    if (this->email_parser_map_)
      this->email_parser_map_->reset ();

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->url_parser_map_)
      this->url_parser_map_->reset ();

    if (this->organization_name_parser_)
      this->organization_name_parser_->_reset ();

    if (this->organization_name_parser_map_)
      this->organization_name_parser_map_->reset ();

    if (this->department_name_parser_)
      this->department_name_parser_->_reset ();

    if (this->department_name_parser_map_)
      this->department_name_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* orcid_identifier_pskel::
  _static_type ()
  {
    return "orcid-identifier metadata";
  }

  const char* orcid_identifier_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // orcid_person_pskel
  //

  void orcid_person_pskel::
  orcid_identifier (const ::metadata::orcid_identifier& x)
  {
    if (this->orcid_person_impl_)
      this->orcid_person_impl_->orcid_identifier (x);
  }

  void orcid_person_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->orcid_identifier_parser_)
      this->orcid_identifier_parser_->_reset ();

    if (this->orcid_identifier_parser_map_)
      this->orcid_identifier_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* orcid_person_pskel::
  _static_type ()
  {
    return "orcid-person metadata";
  }

  const char* orcid_person_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // classification_pskel
  //

  void classification_pskel::
  classification_number (const ::std::string& x)
  {
    if (this->classification_impl_)
      this->classification_impl_->classification_number (x);
  }

  void classification_pskel::
  line (unsigned int x)
  {
    if (this->classification_impl_)
      this->classification_impl_->line (x);
  }

  void classification_pskel::
  variant (unsigned int x)
  {
    if (this->classification_impl_)
      this->classification_impl_->variant (x);
  }

  void classification_pskel::
  branch (unsigned int x)
  {
    if (this->classification_impl_)
      this->classification_impl_->branch (x);
  }

  void classification_pskel::
  version (unsigned int x)
  {
    if (this->classification_impl_)
      this->classification_impl_->version (x);
  }

  void classification_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->classification_number_parser_)
      this->classification_number_parser_->_reset ();

    if (this->classification_number_parser_map_)
      this->classification_number_parser_map_->reset ();

    if (this->line_parser_)
      this->line_parser_->_reset ();

    if (this->line_parser_map_)
      this->line_parser_map_->reset ();

    if (this->variant_parser_)
      this->variant_parser_->_reset ();

    if (this->variant_parser_map_)
      this->variant_parser_map_->reset ();

    if (this->branch_parser_)
      this->branch_parser_->_reset ();

    if (this->branch_parser_map_)
      this->branch_parser_map_->reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->version_parser_map_)
      this->version_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* classification_pskel::
  _static_type ()
  {
    return "classification metadata";
  }

  const char* classification_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // curation_pskel
  //

  void curation_pskel::
  curated (bool x)
  {
    if (this->curation_impl_)
      this->curation_impl_->curated (x);
  }

  void curation_pskel::
  created (const ::xml_schema::date_time& x)
  {
    if (this->curation_impl_)
      this->curation_impl_->created (x);
  }

  void curation_pskel::
  last_modified (const ::xml_schema::date_time& x)
  {
    if (this->curation_impl_)
      this->curation_impl_->last_modified (x);
  }

  void curation_pskel::
  choice_arm (choice_arm_tag x)
  {
    if (this->curation_impl_)
      this->curation_impl_->choice_arm (x);
  }

  void curation_pskel::
  classification (const ::metadata::classification& x)
  {
    if (this->curation_impl_)
      this->curation_impl_->classification (x);
  }

  void curation_pskel::
  version (const ::std::string& x)
  {
    if (this->curation_impl_)
      this->curation_impl_->version (x);
  }

  void curation_pskel::
  creator (::metadata::orcid_person* x)
  {
    if (this->curation_impl_)
      this->curation_impl_->creator (x);
  }

  void curation_pskel::
  current_contact (::metadata::orcid_person* x)
  {
    if (this->curation_impl_)
      this->curation_impl_->current_contact (x);
  }

  void curation_pskel::
  curator (::metadata::orcid_person* x)
  {
    if (this->curation_impl_)
      this->curation_impl_->curator (x);
  }

  void curation_pskel::
  last_modified_by (::metadata::orcid_person* x)
  {
    if (this->curation_impl_)
      this->curation_impl_->last_modified_by (x);
  }

  void curation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->curated_parser_)
      this->curated_parser_->_reset ();

    this->resetting_ = true;

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->created_parser_map_)
      this->created_parser_map_->reset ();

    if (this->last_modified_parser_)
      this->last_modified_parser_->_reset ();

    if (this->last_modified_parser_map_)
      this->last_modified_parser_map_->reset ();

    if (this->classification_parser_)
      this->classification_parser_->_reset ();

    if (this->classification_parser_map_)
      this->classification_parser_map_->reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->version_parser_map_)
      this->version_parser_map_->reset ();

    if (this->creator_parser_)
      this->creator_parser_->_reset ();

    if (this->creator_parser_map_)
      this->creator_parser_map_->reset ();

    if (this->current_contact_parser_)
      this->current_contact_parser_->_reset ();

    if (this->current_contact_parser_map_)
      this->current_contact_parser_map_->reset ();

    if (this->curator_parser_)
      this->curator_parser_->_reset ();

    if (this->curator_parser_map_)
      this->curator_parser_map_->reset ();

    if (this->last_modified_by_parser_)
      this->last_modified_by_parser_->_reset ();

    if (this->last_modified_by_parser_map_)
      this->last_modified_by_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* curation_pskel::
  _static_type ()
  {
    return "curation metadata";
  }

  const char* curation_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // citation_pskel
  //

  void citation_pskel::
  text (const ::std::string& x)
  {
    if (this->citation_impl_)
      this->citation_impl_->text (x);
  }

  void citation_pskel::
  DOI (const ::std::string& x)
  {
    if (this->citation_impl_)
      this->citation_impl_->DOI (x);
  }

  void citation_pskel::
  URL (const ::metadata::URL& x)
  {
    if (this->citation_impl_)
      this->citation_impl_->URL (x);
  }

  void citation_pskel::
  PMID (const ::std::string& x)
  {
    if (this->citation_impl_)
      this->citation_impl_->PMID (x);
  }

  void citation_pskel::
  PMCID (const ::std::string& x)
  {
    if (this->citation_impl_)
      this->citation_impl_->PMCID (x);
  }

  void citation_pskel::
  arXiv (const ::std::string& x)
  {
    if (this->citation_impl_)
      this->citation_impl_->arXiv (x);
  }

  void citation_pskel::
  notes (const ::std::string& x)
  {
    if (this->citation_impl_)
      this->citation_impl_->notes (x);
  }

  void citation_pskel::
  custom (::common::custom* x)
  {
    if (this->citation_impl_)
      this->citation_impl_->custom (x);
  }

  void citation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->text_parser_)
      this->text_parser_->_reset ();

    if (this->text_parser_map_)
      this->text_parser_map_->reset ();

    if (this->DOI_parser_)
      this->DOI_parser_->_reset ();

    if (this->DOI_parser_map_)
      this->DOI_parser_map_->reset ();

    if (this->URL_parser_)
      this->URL_parser_->_reset ();

    if (this->URL_parser_map_)
      this->URL_parser_map_->reset ();

    if (this->PMID_parser_)
      this->PMID_parser_->_reset ();

    if (this->PMID_parser_map_)
      this->PMID_parser_map_->reset ();

    if (this->PMCID_parser_)
      this->PMCID_parser_->_reset ();

    if (this->PMCID_parser_map_)
      this->PMCID_parser_map_->reset ();

    if (this->arXiv_parser_)
      this->arXiv_parser_->_reset ();

    if (this->arXiv_parser_map_)
      this->arXiv_parser_map_->reset ();

    if (this->notes_parser_)
      this->notes_parser_->_reset ();

    if (this->notes_parser_map_)
      this->notes_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* citation_pskel::
  _static_type ()
  {
    return "citation metadata";
  }

  const char* citation_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // data_origin_pskel
  //

  void data_origin_pskel::
  ID (unsigned long long x)
  {
    if (this->data_origin_impl_)
      this->data_origin_impl_->ID (x);
  }

  void data_origin_pskel::
  instrumentation_information (const ::std::string& x)
  {
    if (this->data_origin_impl_)
      this->data_origin_impl_->instrumentation_information (x);
  }

  void data_origin_pskel::
  experimental_protocol (const ::std::string& x)
  {
    if (this->data_origin_impl_)
      this->data_origin_impl_->experimental_protocol (x);
  }

  void data_origin_pskel::
  citation (::metadata::citation* x)
  {
    if (this->data_origin_impl_)
      this->data_origin_impl_->citation (x);
  }

  void data_origin_pskel::
  xpath (const ::std::string& x)
  {
    if (this->data_origin_impl_)
      this->data_origin_impl_->xpath (x);
  }

  void data_origin_pskel::
  notes (const ::std::string& x)
  {
    if (this->data_origin_impl_)
      this->data_origin_impl_->notes (x);
  }

  void data_origin_pskel::
  custom (::common::custom* x)
  {
    if (this->data_origin_impl_)
      this->data_origin_impl_->custom (x);
  }

  void data_origin_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->instrumentation_information_parser_)
      this->instrumentation_information_parser_->_reset ();

    if (this->instrumentation_information_parser_map_)
      this->instrumentation_information_parser_map_->reset ();

    if (this->experimental_protocol_parser_)
      this->experimental_protocol_parser_->_reset ();

    if (this->experimental_protocol_parser_map_)
      this->experimental_protocol_parser_map_->reset ();

    if (this->citation_parser_)
      this->citation_parser_->_reset ();

    if (this->citation_parser_map_)
      this->citation_parser_map_->reset ();

    if (this->xpath_parser_)
      this->xpath_parser_->_reset ();

    if (this->xpath_parser_map_)
      this->xpath_parser_map_->reset ();

    if (this->notes_parser_)
      this->notes_parser_->_reset ();

    if (this->notes_parser_map_)
      this->notes_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* data_origin_pskel::
  _static_type ()
  {
    return "data_origin metadata";
  }

  const char* data_origin_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // data_origins_pskel
  //

  void data_origins_pskel::
  data_origin (::metadata::data_origin* x)
  {
    if (this->data_origins_impl_)
      this->data_origins_impl_->data_origin (x);
  }

  void data_origins_pskel::
  custom (::common::custom* x)
  {
    if (this->data_origins_impl_)
      this->data_origins_impl_->custom (x);
  }

  void data_origins_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->data_origin_parser_)
      this->data_origin_parser_->_reset ();

    if (this->data_origin_parser_map_)
      this->data_origin_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* data_origins_pskel::
  _static_type ()
  {
    return "data_origins metadata";
  }

  const char* data_origins_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // data_analysis_pskel
  //

  void data_analysis_pskel::
  URL (const ::metadata::URL& x)
  {
    if (this->data_analysis_impl_)
      this->data_analysis_impl_->URL (x);
  }

  void data_analysis_pskel::
  citation (::metadata::citation* x)
  {
    if (this->data_analysis_impl_)
      this->data_analysis_impl_->citation (x);
  }

  void data_analysis_pskel::
  software (::metadata::software* x)
  {
    if (this->data_analysis_impl_)
      this->data_analysis_impl_->software (x);
  }

  void data_analysis_pskel::
  xpath (const ::std::string& x)
  {
    if (this->data_analysis_impl_)
      this->data_analysis_impl_->xpath (x);
  }

  void data_analysis_pskel::
  notes (const ::std::string& x)
  {
    if (this->data_analysis_impl_)
      this->data_analysis_impl_->notes (x);
  }

  void data_analysis_pskel::
  custom (::common::custom* x)
  {
    if (this->data_analysis_impl_)
      this->data_analysis_impl_->custom (x);
  }

  void data_analysis_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->URL_parser_)
      this->URL_parser_->_reset ();

    if (this->URL_parser_map_)
      this->URL_parser_map_->reset ();

    if (this->citation_parser_)
      this->citation_parser_->_reset ();

    if (this->citation_parser_map_)
      this->citation_parser_map_->reset ();

    if (this->software_parser_)
      this->software_parser_->_reset ();

    if (this->software_parser_map_)
      this->software_parser_map_->reset ();

    if (this->xpath_parser_)
      this->xpath_parser_->_reset ();

    if (this->xpath_parser_map_)
      this->xpath_parser_map_->reset ();

    if (this->notes_parser_)
      this->notes_parser_->_reset ();

    if (this->notes_parser_map_)
      this->notes_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* data_analysis_pskel::
  _static_type ()
  {
    return "data_analysis metadata";
  }

  const char* data_analysis_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // software_pskel
  //

  void software_pskel::
  software_name (const ::std::string& x)
  {
    if (this->software_impl_)
      this->software_impl_->software_name (x);
  }

  void software_pskel::
  software_version (const ::std::string& x)
  {
    if (this->software_impl_)
      this->software_impl_->software_version (x);
  }

  void software_pskel::
  software_input_configuration (::common::custom* x)
  {
    if (this->software_impl_)
      this->software_impl_->software_input_configuration (x);
  }

  void software_pskel::
  name (const ::std::string& x)
  {
    if (this->software_impl_)
      this->software_impl_->name (x);
  }

  void software_pskel::
  version (const ::std::string& x)
  {
    if (this->software_impl_)
      this->software_impl_->version (x);
  }

  void software_pskel::
  input_configuration (::common::custom* x)
  {
    if (this->software_impl_)
      this->software_impl_->input_configuration (x);
  }

  void software_pskel::
  URL (const ::metadata::URL& x)
  {
    if (this->software_impl_)
      this->software_impl_->URL (x);
  }

  void software_pskel::
  creator (::metadata::orcid_person* x)
  {
    if (this->software_impl_)
      this->software_impl_->creator (x);
  }

  void software_pskel::
  citation (::metadata::citation* x)
  {
    if (this->software_impl_)
      this->software_impl_->citation (x);
  }

  void software_pskel::
  user (::metadata::orcid_person* x)
  {
    if (this->software_impl_)
      this->software_impl_->user (x);
  }

  void software_pskel::
  custom (::common::custom* x)
  {
    if (this->software_impl_)
      this->software_impl_->custom (x);
  }

  void software_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->software_name_parser_)
      this->software_name_parser_->_reset ();

    if (this->software_name_parser_map_)
      this->software_name_parser_map_->reset ();

    if (this->software_version_parser_)
      this->software_version_parser_->_reset ();

    if (this->software_version_parser_map_)
      this->software_version_parser_map_->reset ();

    if (this->software_input_configuration_parser_)
      this->software_input_configuration_parser_->_reset ();

    if (this->software_input_configuration_parser_map_)
      this->software_input_configuration_parser_map_->reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->name_parser_map_)
      this->name_parser_map_->reset ();

    if (this->version_parser_)
      this->version_parser_->_reset ();

    if (this->version_parser_map_)
      this->version_parser_map_->reset ();

    if (this->input_configuration_parser_)
      this->input_configuration_parser_->_reset ();

    if (this->input_configuration_parser_map_)
      this->input_configuration_parser_map_->reset ();

    if (this->URL_parser_)
      this->URL_parser_->_reset ();

    if (this->URL_parser_map_)
      this->URL_parser_map_->reset ();

    if (this->creator_parser_)
      this->creator_parser_->_reset ();

    if (this->creator_parser_map_)
      this->creator_parser_map_->reset ();

    if (this->citation_parser_)
      this->citation_parser_->_reset ();

    if (this->citation_parser_map_)
      this->citation_parser_map_->reset ();

    if (this->user_parser_)
      this->user_parser_->_reset ();

    if (this->user_parser_map_)
      this->user_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* software_pskel::
  _static_type ()
  {
    return "software metadata";
  }

  const char* software_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // species_pskel
  //

  void species_pskel::
  MeSH_ID (const ::std::string& x)
  {
    if (this->species_impl_)
      this->species_impl_->MeSH_ID (x);
  }

  void species_pskel::
  _reset ()
  {
    typedef ::xml_schema::string_pskel base;
    base::_reset ();

    if (this->MeSH_ID_parser_)
      this->MeSH_ID_parser_->_reset ();
  }

  const char* species_pskel::
  _static_type ()
  {
    return "species metadata";
  }

  const char* species_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_species_pskel_inheritance_map_entry_ (
    species_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string species_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  // disease_pskel
  //

  void disease_pskel::
  EFO_ID (const ::std::string& x)
  {
    if (this->disease_impl_)
      this->disease_impl_->EFO_ID (x);
  }

  void disease_pskel::
  DOID_ID (const ::std::string& x)
  {
    if (this->disease_impl_)
      this->disease_impl_->DOID_ID (x);
  }

  void disease_pskel::
  _reset ()
  {
    typedef ::xml_schema::string_pskel base;
    base::_reset ();

    if (this->EFO_ID_parser_)
      this->EFO_ID_parser_->_reset ();

    if (this->DOID_ID_parser_)
      this->DOID_ID_parser_->_reset ();
  }

  const char* disease_pskel::
  _static_type ()
  {
    return "disease metadata";
  }

  const char* disease_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_disease_pskel_inheritance_map_entry_ (
    disease_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string disease_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  // patient_derived_pskel
  //

  void patient_derived_pskel::
  patient_ID (const ::std::string& x)
  {
    if (this->patient_derived_impl_)
      this->patient_derived_impl_->patient_ID (x);
  }

  void patient_derived_pskel::
  _reset ()
  {
    typedef ::xml_schema::boolean_pskel base;
    base::_reset ();

    if (this->patient_ID_parser_)
      this->patient_ID_parser_->_reset ();
  }

  const char* patient_derived_pskel::
  _static_type ()
  {
    return "patient_derived metadata";
  }

  const char* patient_derived_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_patient_derived_pskel_inheritance_map_entry_ (
    patient_derived_pskel::_static_type (),
    ::xml_schema::boolean_pskel::_static_type ());

  bool patient_derived_pskel::
  post_boolean ()
  {
    assert (this->boolean_impl_);
    return this->boolean_impl_->post_boolean ();
  }

  // cell_origin_pskel
  //

  void cell_origin_pskel::
  BTO_ID (const ::std::string& x)
  {
    if (this->cell_origin_impl_)
      this->cell_origin_impl_->BTO_ID (x);
  }

  void cell_origin_pskel::
  CLO_ID (const ::std::string& x)
  {
    if (this->cell_origin_impl_)
      this->cell_origin_impl_->CLO_ID (x);
  }

  void cell_origin_pskel::
  species (const ::metadata::species& x)
  {
    if (this->cell_origin_impl_)
      this->cell_origin_impl_->species (x);
  }

  void cell_origin_pskel::
  strain (const ::std::string& x)
  {
    if (this->cell_origin_impl_)
      this->cell_origin_impl_->strain (x);
  }

  void cell_origin_pskel::
  organ (const ::std::string& x)
  {
    if (this->cell_origin_impl_)
      this->cell_origin_impl_->organ (x);
  }

  void cell_origin_pskel::
  disease (const ::metadata::disease& x)
  {
    if (this->cell_origin_impl_)
      this->cell_origin_impl_->disease (x);
  }

  void cell_origin_pskel::
  morphology (const ::std::string& x)
  {
    if (this->cell_origin_impl_)
      this->cell_origin_impl_->morphology (x);
  }

  void cell_origin_pskel::
  patient_derived (const ::metadata::patient_derived& x)
  {
    if (this->cell_origin_impl_)
      this->cell_origin_impl_->patient_derived (x);
  }

  void cell_origin_pskel::
  custom (::common::custom* x)
  {
    if (this->cell_origin_impl_)
      this->cell_origin_impl_->custom (x);
  }

  void cell_origin_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->BTO_ID_parser_)
      this->BTO_ID_parser_->_reset ();

    if (this->BTO_ID_parser_map_)
      this->BTO_ID_parser_map_->reset ();

    if (this->CLO_ID_parser_)
      this->CLO_ID_parser_->_reset ();

    if (this->CLO_ID_parser_map_)
      this->CLO_ID_parser_map_->reset ();

    if (this->species_parser_)
      this->species_parser_->_reset ();

    if (this->species_parser_map_)
      this->species_parser_map_->reset ();

    if (this->strain_parser_)
      this->strain_parser_->_reset ();

    if (this->strain_parser_map_)
      this->strain_parser_map_->reset ();

    if (this->organ_parser_)
      this->organ_parser_->_reset ();

    if (this->organ_parser_map_)
      this->organ_parser_map_->reset ();

    if (this->disease_parser_)
      this->disease_parser_->_reset ();

    if (this->disease_parser_map_)
      this->disease_parser_map_->reset ();

    if (this->morphology_parser_)
      this->morphology_parser_->_reset ();

    if (this->morphology_parser_map_)
      this->morphology_parser_map_->reset ();

    if (this->patient_derived_parser_)
      this->patient_derived_parser_->_reset ();

    if (this->patient_derived_parser_map_)
      this->patient_derived_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_origin_pskel::
  _static_type ()
  {
    return "cell_origin metadata";
  }

  const char* cell_origin_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // MultiCellDB_pskel
  //

  void MultiCellDB_pskel::
  ID (const ::std::string& x)
  {
    if (this->MultiCellDB_impl_)
      this->MultiCellDB_impl_->ID (x);
  }

  void MultiCellDB_pskel::
  name (const ::std::string& x)
  {
    if (this->MultiCellDB_impl_)
      this->MultiCellDB_impl_->name (x);
  }

  void MultiCellDB_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->ID_parser_map_)
      this->ID_parser_map_->reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->name_parser_map_)
      this->name_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* MultiCellDB_pskel::
  _static_type ()
  {
    return "MultiCellDB metadata";
  }

  const char* MultiCellDB_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // rights_pskel
  //

  void rights_pskel::
  license (::metadata::license* x)
  {
    if (this->rights_impl_)
      this->rights_impl_->license (x);
  }

  void rights_pskel::
  custom (::common::custom* x)
  {
    if (this->rights_impl_)
      this->rights_impl_->custom (x);
  }

  void rights_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->license_parser_)
      this->license_parser_->_reset ();

    if (this->license_parser_map_)
      this->license_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* rights_pskel::
  _static_type ()
  {
    return "rights metadata";
  }

  const char* rights_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // license_pskel
  //

  void license_pskel::
  LicenseDocument (::metadata::LicenseDocument* x)
  {
    if (this->license_impl_)
      this->license_impl_->LicenseDocument (x);
  }

  void license_pskel::
  notes (const ::std::string& x)
  {
    if (this->license_impl_)
      this->license_impl_->notes (x);
  }

  void license_pskel::
  custom (::common::custom* x)
  {
    if (this->license_impl_)
      this->license_impl_->custom (x);
  }

  void license_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->LicenseDocument_parser_)
      this->LicenseDocument_parser_->_reset ();

    if (this->LicenseDocument_parser_map_)
      this->LicenseDocument_parser_map_->reset ();

    if (this->notes_parser_)
      this->notes_parser_->_reset ();

    if (this->notes_parser_map_)
      this->notes_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* license_pskel::
  _static_type ()
  {
    return "license metadata";
  }

  const char* license_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // LicenseDocument_pskel
  //

  void LicenseDocument_pskel::
  name (const ::std::string& x)
  {
    if (this->LicenseDocument_impl_)
      this->LicenseDocument_impl_->name (x);
  }

  void LicenseDocument_pskel::
  URL (const ::metadata::URL& x)
  {
    if (this->LicenseDocument_impl_)
      this->LicenseDocument_impl_->URL (x);
  }

  void LicenseDocument_pskel::
  custom (::common::custom* x)
  {
    if (this->LicenseDocument_impl_)
      this->LicenseDocument_impl_->custom (x);
  }

  void LicenseDocument_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->name_parser_map_)
      this->name_parser_map_->reset ();

    if (this->URL_parser_)
      this->URL_parser_->_reset ();

    if (this->URL_parser_map_)
      this->URL_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* LicenseDocument_pskel::
  _static_type ()
  {
    return "LicenseDocument metadata";
  }

  const char* LicenseDocument_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // metadata_pskel
  //

  void metadata_pskel::
  MultiCellDB (const ::metadata::MultiCellDB& x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->MultiCellDB (x);
  }

  void metadata_pskel::
  description (const ::std::string& x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->description (x);
  }

  void metadata_pskel::
  software (::metadata::software* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->software (x);
  }

  void metadata_pskel::
  citation (::metadata::citation* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->citation (x);
  }

  void metadata_pskel::
  curation (::metadata::curation* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->curation (x);
  }

  void metadata_pskel::
  data_origins (::metadata::data_origins* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->data_origins (x);
  }

  void metadata_pskel::
  data_analysis (::metadata::data_analysis* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->data_analysis (x);
  }

  void metadata_pskel::
  rights (::metadata::rights* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->rights (x);
  }

  void metadata_pskel::
  cell_origin (::metadata::cell_origin* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->cell_origin (x);
  }

  void metadata_pskel::
  current_time (::common::units_decimal_nonnegative* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->current_time (x);
  }

  void metadata_pskel::
  current_runtime (::common::units_decimal_nonnegative* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->current_runtime (x);
  }

  void metadata_pskel::
  created (const ::xml_schema::date_time& x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->created (x);
  }

  void metadata_pskel::
  last_modified (const ::xml_schema::date_time& x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->last_modified (x);
  }

  void metadata_pskel::
  notes (const ::std::string& x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->notes (x);
  }

  void metadata_pskel::
  custom (::common::custom* x)
  {
    if (this->metadata_impl_)
      this->metadata_impl_->custom (x);
  }

  void metadata_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->MultiCellDB_parser_)
      this->MultiCellDB_parser_->_reset ();

    if (this->MultiCellDB_parser_map_)
      this->MultiCellDB_parser_map_->reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->description_parser_map_)
      this->description_parser_map_->reset ();

    if (this->software_parser_)
      this->software_parser_->_reset ();

    if (this->software_parser_map_)
      this->software_parser_map_->reset ();

    if (this->citation_parser_)
      this->citation_parser_->_reset ();

    if (this->citation_parser_map_)
      this->citation_parser_map_->reset ();

    if (this->curation_parser_)
      this->curation_parser_->_reset ();

    if (this->curation_parser_map_)
      this->curation_parser_map_->reset ();

    if (this->data_origins_parser_)
      this->data_origins_parser_->_reset ();

    if (this->data_origins_parser_map_)
      this->data_origins_parser_map_->reset ();

    if (this->data_analysis_parser_)
      this->data_analysis_parser_->_reset ();

    if (this->data_analysis_parser_map_)
      this->data_analysis_parser_map_->reset ();

    if (this->rights_parser_)
      this->rights_parser_->_reset ();

    if (this->rights_parser_map_)
      this->rights_parser_map_->reset ();

    if (this->cell_origin_parser_)
      this->cell_origin_parser_->_reset ();

    if (this->cell_origin_parser_map_)
      this->cell_origin_parser_map_->reset ();

    if (this->current_time_parser_)
      this->current_time_parser_->_reset ();

    if (this->current_time_parser_map_)
      this->current_time_parser_map_->reset ();

    if (this->current_runtime_parser_)
      this->current_runtime_parser_->_reset ();

    if (this->current_runtime_parser_map_)
      this->current_runtime_parser_map_->reset ();

    if (this->created_parser_)
      this->created_parser_->_reset ();

    if (this->created_parser_map_)
      this->created_parser_map_->reset ();

    if (this->last_modified_parser_)
      this->last_modified_parser_->_reset ();

    if (this->last_modified_parser_map_)
      this->last_modified_parser_map_->reset ();

    if (this->notes_parser_)
      this->notes_parser_->_reset ();

    if (this->notes_parser_map_)
      this->notes_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* metadata_pskel::
  _static_type ()
  {
    return "metadata metadata";
  }

  const char* metadata_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace metadata
{
  // Element validation and dispatch functions for orcid_identifier_pskel.
  //
  bool orcid_identifier_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool orcid_identifier_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void orcid_identifier_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void orcid_identifier_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void orcid_identifier_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "path" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->path_parser_ != 0)
            p = this->path_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->path_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->path_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->path_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->path_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->path (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "given-names" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->given_names_parser_ != 0)
            p = this->given_names_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->given_names_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->given_names_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->given_names_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->given_names_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->given_names (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "family-name" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->family_name_parser_ != 0)
            p = this->family_name_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->family_name_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->family_name_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->family_name_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->family_name_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->family_name (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "email" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->email_parser_ != 0)
            p = this->email_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->email_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->email_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->email_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->email_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->email (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "url" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::metadata::URL_pskel* p = 0;

          if (t == 0 && this->url_parser_ != 0)
            p = this->url_parser_;
          else
          {
            const char* ts = ::metadata::URL_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->url_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->url_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->url_parser_map_ != 0)
                p = static_cast< ::metadata::URL_pskel* > (
                  this->url_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::metadata::URL_pskel* p =
          static_cast< ::metadata::URL_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::metadata::URL& tmp = p->post_URL ();
            this->url (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "organization-name" && ns.empty ())
    {
      if (count[5UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->organization_name_parser_ != 0)
            p = this->organization_name_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->organization_name_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->organization_name_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->organization_name_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->organization_name_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->organization_name (tmp);
          }

          count[5UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "department-name" && ns.empty ())
    {
      if (count[6UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->department_name_parser_ != 0)
            p = this->department_name_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->department_name_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->department_name_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->department_name_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->department_name_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->department_name (tmp);
          }

          count[6UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for orcid_person_pskel.
  //
  bool orcid_person_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "orcid-identifier" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &orcid_person_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool orcid_person_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void orcid_person_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void orcid_person_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void orcid_person_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "orcid-identifier" && ns.empty ())
        {
          if (start)
          {
            ::metadata::orcid_identifier_pskel* p = 0;

            if (t == 0 && this->orcid_identifier_parser_ != 0)
              p = this->orcid_identifier_parser_;
            else
            {
              const char* ts = ::metadata::orcid_identifier_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->orcid_identifier_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->orcid_identifier_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->orcid_identifier_parser_map_ != 0)
                  p = static_cast< ::metadata::orcid_identifier_pskel* > (
                    this->orcid_identifier_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::orcid_identifier_pskel* p =
            static_cast< ::metadata::orcid_identifier_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::metadata::orcid_identifier& tmp = p->post_orcid_identifier ();
              this->orcid_identifier (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for classification_pskel.
  //
  bool classification_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "classification_number" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &classification_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool classification_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void classification_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void classification_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void classification_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "classification_number" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->classification_number_parser_ != 0)
              p = this->classification_number_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->classification_number_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->classification_number_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->classification_number_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->classification_number_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->classification_number (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "line" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::unsigned_int_pskel* p = 0;

            if (t == 0 && this->line_parser_ != 0)
              p = this->line_parser_;
            else
            {
              const char* ts = ::xml_schema::unsigned_int_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->line_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->line_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->line_parser_map_ != 0)
                  p = static_cast< ::xml_schema::unsigned_int_pskel* > (
                    this->line_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::unsigned_int_pskel* p =
            static_cast< ::xml_schema::unsigned_int_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              unsigned int tmp = p->post_unsigned_int ();
              this->line (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "variant" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::unsigned_int_pskel* p = 0;

            if (t == 0 && this->variant_parser_ != 0)
              p = this->variant_parser_;
            else
            {
              const char* ts = ::xml_schema::unsigned_int_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->variant_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->variant_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->variant_parser_map_ != 0)
                  p = static_cast< ::xml_schema::unsigned_int_pskel* > (
                    this->variant_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::unsigned_int_pskel* p =
            static_cast< ::xml_schema::unsigned_int_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              unsigned int tmp = p->post_unsigned_int ();
              this->variant (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "branch" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::unsigned_int_pskel* p = 0;

            if (t == 0 && this->branch_parser_ != 0)
              p = this->branch_parser_;
            else
            {
              const char* ts = ::xml_schema::unsigned_int_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->branch_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->branch_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->branch_parser_map_ != 0)
                  p = static_cast< ::xml_schema::unsigned_int_pskel* > (
                    this->branch_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::unsigned_int_pskel* p =
            static_cast< ::xml_schema::unsigned_int_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              unsigned int tmp = p->post_unsigned_int ();
              this->branch (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "version" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::unsigned_int_pskel* p = 0;

            if (t == 0 && this->version_parser_ != 0)
              p = this->version_parser_;
            else
            {
              const char* ts = ::xml_schema::unsigned_int_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->version_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->version_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->version_parser_map_ != 0)
                  p = static_cast< ::xml_schema::unsigned_int_pskel* > (
                    this->version_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::unsigned_int_pskel* p =
            static_cast< ::xml_schema::unsigned_int_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              unsigned int tmp = p->post_unsigned_int ();
              this->version (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for curation_pskel.
  //
  bool curation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "created" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &curation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool curation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void curation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void curation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void curation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "created" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::date_time_pskel* p = 0;

            if (t == 0 && this->created_parser_ != 0)
              p = this->created_parser_;
            else
            {
              const char* ts = ::xml_schema::date_time_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->created_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->created_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->created_parser_map_ != 0)
                  p = static_cast< ::xml_schema::date_time_pskel* > (
                    this->created_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::date_time_pskel* p =
            static_cast< ::xml_schema::date_time_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::xml_schema::date_time& tmp = p->post_date_time ();
              this->created (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "last_modified" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::date_time_pskel* p = 0;

            if (t == 0 && this->last_modified_parser_ != 0)
              p = this->last_modified_parser_;
            else
            {
              const char* ts = ::xml_schema::date_time_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->last_modified_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->last_modified_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->last_modified_parser_map_ != 0)
                  p = static_cast< ::xml_schema::date_time_pskel* > (
                    this->last_modified_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::date_time_pskel* p =
            static_cast< ::xml_schema::date_time_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::xml_schema::date_time& tmp = p->post_date_time ();
              this->last_modified (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        unsigned long s = ~0UL;

        if (n == "classification" && ns.empty ())
          s = 0UL;
        else if (n == "version" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = 3UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &curation_pskel::choice_0;
          vd.state = s;
          vd.count = 0;

          this->choice_arm (static_cast< choice_arm_tag > (s));
          this->choice_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "creator" && ns.empty ())
        {
          if (start)
          {
            ::metadata::orcid_person_pskel* p = 0;

            if (t == 0 && this->creator_parser_ != 0)
              p = this->creator_parser_;
            else
            {
              const char* ts = ::metadata::orcid_person_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->creator_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->creator_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->creator_parser_map_ != 0)
                  p = static_cast< ::metadata::orcid_person_pskel* > (
                    this->creator_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::orcid_person_pskel* p =
            static_cast< ::metadata::orcid_person_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::orcid_person* tmp = p->post_orcid_person ();
              this->creator (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "current_contact" && ns.empty ())
        {
          if (start)
          {
            ::metadata::orcid_person_pskel* p = 0;

            if (t == 0 && this->current_contact_parser_ != 0)
              p = this->current_contact_parser_;
            else
            {
              const char* ts = ::metadata::orcid_person_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->current_contact_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->current_contact_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->current_contact_parser_map_ != 0)
                  p = static_cast< ::metadata::orcid_person_pskel* > (
                    this->current_contact_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::orcid_person_pskel* p =
            static_cast< ::metadata::orcid_person_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::orcid_person* tmp = p->post_orcid_person ();
              this->current_contact (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "curator" && ns.empty ())
        {
          if (start)
          {
            ::metadata::orcid_person_pskel* p = 0;

            if (t == 0 && this->curator_parser_ != 0)
              p = this->curator_parser_;
            else
            {
              const char* ts = ::metadata::orcid_person_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->curator_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->curator_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->curator_parser_map_ != 0)
                  p = static_cast< ::metadata::orcid_person_pskel* > (
                    this->curator_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::orcid_person_pskel* p =
            static_cast< ::metadata::orcid_person_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::orcid_person* tmp = p->post_orcid_person ();
              this->curator (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "last_modified_by" && ns.empty ())
        {
          if (start)
          {
            ::metadata::orcid_person_pskel* p = 0;

            if (t == 0 && this->last_modified_by_parser_ != 0)
              p = this->last_modified_by_parser_;
            else
            {
              const char* ts = ::metadata::orcid_person_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->last_modified_by_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->last_modified_by_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->last_modified_by_parser_map_ != 0)
                  p = static_cast< ::metadata::orcid_person_pskel* > (
                    this->last_modified_by_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::orcid_person_pskel* p =
            static_cast< ::metadata::orcid_person_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::orcid_person* tmp = p->post_orcid_person ();
              this->last_modified_by (tmp);
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (!n.empty ())
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n, t);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void curation_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            const char* t,
            bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (count);
    XSDE_UNUSED (ns);
    XSDE_UNUSED (n);
    XSDE_UNUSED (ctx);
    XSDE_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          ::metadata::classification_pskel* p = 0;

          if (t == 0 && this->classification_parser_ != 0)
            p = this->classification_parser_;
          else
          {
            const char* ts = ::metadata::classification_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->classification_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->classification_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->classification_parser_map_ != 0)
                p = static_cast< ::metadata::classification_pskel* > (
                  this->classification_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::metadata::classification_pskel* p =
          static_cast< ::metadata::classification_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::metadata::classification& tmp = p->post_classification ();
            this->classification (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->version_parser_ != 0)
            p = this->version_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->version_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->version_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->version_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->version_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->version (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for citation_pskel.
  //
  bool citation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "text" && ns.empty ())
          s = 0UL;
        else if (n == "DOI" && ns.empty ())
          s = 1UL;
        else if (n == "URL" && ns.empty ())
          s = 2UL;
        else if (n == "PMID" && ns.empty ())
          s = 3UL;
        else if (n == "PMCID" && ns.empty ())
          s = 4UL;
        else if (n == "arXiv" && ns.empty ())
          s = 5UL;
        else if (n == "notes" && ns.empty ())
          s = 6UL;
        else if (n == "custom" && ns.empty ())
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &citation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool citation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void citation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void citation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void citation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "text" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->text_parser_ != 0)
              p = this->text_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->text_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->text_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->text_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->text_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->text (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "DOI" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->DOI_parser_ != 0)
              p = this->DOI_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->DOI_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->DOI_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->DOI_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->DOI_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->DOI (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "URL" && ns.empty ())
        {
          if (start)
          {
            ::metadata::URL_pskel* p = 0;

            if (t == 0 && this->URL_parser_ != 0)
              p = this->URL_parser_;
            else
            {
              const char* ts = ::metadata::URL_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->URL_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->URL_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->URL_parser_map_ != 0)
                  p = static_cast< ::metadata::URL_pskel* > (
                    this->URL_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::URL_pskel* p =
            static_cast< ::metadata::URL_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::metadata::URL& tmp = p->post_URL ();
              this->URL (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "PMID" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->PMID_parser_ != 0)
              p = this->PMID_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->PMID_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->PMID_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->PMID_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->PMID_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->PMID (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "PMCID" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->PMCID_parser_ != 0)
              p = this->PMCID_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->PMCID_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->PMCID_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->PMCID_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->PMCID_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->PMCID (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "arXiv" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->arXiv_parser_ != 0)
              p = this->arXiv_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->arXiv_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->arXiv_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->arXiv_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->arXiv_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->arXiv (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "notes" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->notes_parser_ != 0)
              p = this->notes_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->notes_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->notes_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->notes_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->notes_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->notes (tmp);
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for data_origin_pskel.
  //
  bool data_origin_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "instrumentation_information" && ns.empty ())
          s = 0UL;
        else if (n == "experimental_protocol" && ns.empty ())
          s = 1UL;
        else if (n == "citation" && ns.empty ())
          s = 2UL;
        else if (n == "xpath" && ns.empty ())
          s = 3UL;
        else if (n == "notes" && ns.empty ())
          s = 4UL;
        else if (n == "custom" && ns.empty ())
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &data_origin_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool data_origin_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void data_origin_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void data_origin_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void data_origin_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "instrumentation_information" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->instrumentation_information_parser_ != 0)
              p = this->instrumentation_information_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->instrumentation_information_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->instrumentation_information_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->instrumentation_information_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->instrumentation_information_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->instrumentation_information (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "experimental_protocol" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->experimental_protocol_parser_ != 0)
              p = this->experimental_protocol_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->experimental_protocol_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->experimental_protocol_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->experimental_protocol_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->experimental_protocol_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->experimental_protocol (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "citation" && ns.empty ())
        {
          if (start)
          {
            ::metadata::citation_pskel* p = 0;

            if (t == 0 && this->citation_parser_ != 0)
              p = this->citation_parser_;
            else
            {
              const char* ts = ::metadata::citation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->citation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->citation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->citation_parser_map_ != 0)
                  p = static_cast< ::metadata::citation_pskel* > (
                    this->citation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::citation_pskel* p =
            static_cast< ::metadata::citation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::citation* tmp = p->post_citation ();
              this->citation (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "xpath" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->xpath_parser_ != 0)
              p = this->xpath_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->xpath_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->xpath_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->xpath_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->xpath_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->xpath (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "notes" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->notes_parser_ != 0)
              p = this->notes_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->notes_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->notes_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->notes_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->notes_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->notes (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for data_origins_pskel.
  //
  bool data_origins_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "data_origin" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &data_origins_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool data_origins_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void data_origins_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void data_origins_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void data_origins_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "data_origin" && ns.empty ())
        {
          if (start)
          {
            ::metadata::data_origin_pskel* p = 0;

            if (t == 0 && this->data_origin_parser_ != 0)
              p = this->data_origin_parser_;
            else
            {
              const char* ts = ::metadata::data_origin_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->data_origin_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->data_origin_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->data_origin_parser_map_ != 0)
                  p = static_cast< ::metadata::data_origin_pskel* > (
                    this->data_origin_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::data_origin_pskel* p =
            static_cast< ::metadata::data_origin_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::data_origin* tmp = p->post_data_origin ();
              this->data_origin (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for data_analysis_pskel.
  //
  bool data_analysis_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "URL" && ns.empty ())
          s = 0UL;
        else if (n == "citation" && ns.empty ())
          s = 1UL;
        else if (n == "software" && ns.empty ())
          s = 2UL;
        else if (n == "xpath" && ns.empty ())
          s = 3UL;
        else if (n == "notes" && ns.empty ())
          s = 4UL;
        else if (n == "custom" && ns.empty ())
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &data_analysis_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool data_analysis_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void data_analysis_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void data_analysis_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void data_analysis_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "URL" && ns.empty ())
        {
          if (start)
          {
            ::metadata::URL_pskel* p = 0;

            if (t == 0 && this->URL_parser_ != 0)
              p = this->URL_parser_;
            else
            {
              const char* ts = ::metadata::URL_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->URL_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->URL_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->URL_parser_map_ != 0)
                  p = static_cast< ::metadata::URL_pskel* > (
                    this->URL_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::URL_pskel* p =
            static_cast< ::metadata::URL_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::metadata::URL& tmp = p->post_URL ();
              this->URL (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "citation" && ns.empty ())
        {
          if (start)
          {
            ::metadata::citation_pskel* p = 0;

            if (t == 0 && this->citation_parser_ != 0)
              p = this->citation_parser_;
            else
            {
              const char* ts = ::metadata::citation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->citation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->citation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->citation_parser_map_ != 0)
                  p = static_cast< ::metadata::citation_pskel* > (
                    this->citation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::citation_pskel* p =
            static_cast< ::metadata::citation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::citation* tmp = p->post_citation ();
              this->citation (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "software" && ns.empty ())
        {
          if (start)
          {
            ::metadata::software_pskel* p = 0;

            if (t == 0 && this->software_parser_ != 0)
              p = this->software_parser_;
            else
            {
              const char* ts = ::metadata::software_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->software_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->software_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->software_parser_map_ != 0)
                  p = static_cast< ::metadata::software_pskel* > (
                    this->software_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::software_pskel* p =
            static_cast< ::metadata::software_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::software* tmp = p->post_software ();
              this->software (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "xpath" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->xpath_parser_ != 0)
              p = this->xpath_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->xpath_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->xpath_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->xpath_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->xpath_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->xpath (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "notes" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->notes_parser_ != 0)
              p = this->notes_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->notes_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->notes_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->notes_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->notes_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->notes (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for software_pskel.
  //
  bool software_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "software_name" && ns.empty ())
          s = 0UL;
        else if (n == "software_version" && ns.empty ())
          s = 1UL;
        else if (n == "software_input_configuration" && ns.empty ())
          s = 2UL;
        else if (n == "name" && ns.empty ())
          s = 3UL;
        else if (n == "version" && ns.empty ())
          s = 4UL;
        else if (n == "input_configuration" && ns.empty ())
          s = 5UL;
        else if (n == "URL" && ns.empty ())
          s = 6UL;
        else if (n == "creator" && ns.empty ())
          s = 7UL;
        else if (n == "citation" && ns.empty ())
          s = 8UL;
        else if (n == "user" && ns.empty ())
          s = 9UL;
        else if (n == "custom" && ns.empty ())
          s = 10UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &software_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool software_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void software_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void software_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void software_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "software_name" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->software_name_parser_ != 0)
              p = this->software_name_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->software_name_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->software_name_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->software_name_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->software_name_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->software_name (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "software_version" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->software_version_parser_ != 0)
              p = this->software_version_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->software_version_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->software_version_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->software_version_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->software_version_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->software_version (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "software_input_configuration" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->software_input_configuration_parser_ != 0)
              p = this->software_input_configuration_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->software_input_configuration_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->software_input_configuration_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->software_input_configuration_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->software_input_configuration_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->software_input_configuration (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "name" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->name_parser_ != 0)
              p = this->name_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->name_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->name_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->name_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->name_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->name (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "version" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->version_parser_ != 0)
              p = this->version_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->version_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->version_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->version_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->version_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->version (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "input_configuration" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->input_configuration_parser_ != 0)
              p = this->input_configuration_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->input_configuration_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->input_configuration_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->input_configuration_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->input_configuration_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->input_configuration (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "URL" && ns.empty ())
        {
          if (start)
          {
            ::metadata::URL_pskel* p = 0;

            if (t == 0 && this->URL_parser_ != 0)
              p = this->URL_parser_;
            else
            {
              const char* ts = ::metadata::URL_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->URL_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->URL_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->URL_parser_map_ != 0)
                  p = static_cast< ::metadata::URL_pskel* > (
                    this->URL_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::URL_pskel* p =
            static_cast< ::metadata::URL_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::metadata::URL& tmp = p->post_URL ();
              this->URL (tmp);
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "creator" && ns.empty ())
        {
          if (start)
          {
            ::metadata::orcid_person_pskel* p = 0;

            if (t == 0 && this->creator_parser_ != 0)
              p = this->creator_parser_;
            else
            {
              const char* ts = ::metadata::orcid_person_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->creator_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->creator_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->creator_parser_map_ != 0)
                  p = static_cast< ::metadata::orcid_person_pskel* > (
                    this->creator_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::orcid_person_pskel* p =
            static_cast< ::metadata::orcid_person_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::orcid_person* tmp = p->post_orcid_person ();
              this->creator (tmp);
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "citation" && ns.empty ())
        {
          if (start)
          {
            ::metadata::citation_pskel* p = 0;

            if (t == 0 && this->citation_parser_ != 0)
              p = this->citation_parser_;
            else
            {
              const char* ts = ::metadata::citation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->citation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->citation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->citation_parser_map_ != 0)
                  p = static_cast< ::metadata::citation_pskel* > (
                    this->citation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::citation_pskel* p =
            static_cast< ::metadata::citation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::citation* tmp = p->post_citation ();
              this->citation (tmp);
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "user" && ns.empty ())
        {
          if (start)
          {
            ::metadata::orcid_person_pskel* p = 0;

            if (t == 0 && this->user_parser_ != 0)
              p = this->user_parser_;
            else
            {
              const char* ts = ::metadata::orcid_person_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->user_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->user_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->user_parser_map_ != 0)
                  p = static_cast< ::metadata::orcid_person_pskel* > (
                    this->user_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::orcid_person_pskel* p =
            static_cast< ::metadata::orcid_person_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::orcid_person* tmp = p->post_orcid_person ();
              this->user (tmp);
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cell_origin_pskel.
  //
  bool cell_origin_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool cell_origin_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void cell_origin_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_origin_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void cell_origin_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "BTO_ID" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->BTO_ID_parser_ != 0)
            p = this->BTO_ID_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->BTO_ID_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->BTO_ID_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->BTO_ID_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->BTO_ID_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->BTO_ID (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "CLO_ID" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->CLO_ID_parser_ != 0)
            p = this->CLO_ID_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->CLO_ID_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->CLO_ID_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->CLO_ID_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->CLO_ID_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->CLO_ID (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "species" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::metadata::species_pskel* p = 0;

          if (t == 0 && this->species_parser_ != 0)
            p = this->species_parser_;
          else
          {
            const char* ts = ::metadata::species_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->species_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->species_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->species_parser_map_ != 0)
                p = static_cast< ::metadata::species_pskel* > (
                  this->species_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::metadata::species_pskel* p =
          static_cast< ::metadata::species_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::metadata::species& tmp = p->post_species ();
            this->species (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "strain" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->strain_parser_ != 0)
            p = this->strain_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->strain_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->strain_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->strain_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->strain_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->strain (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "organ" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->organ_parser_ != 0)
            p = this->organ_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->organ_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->organ_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->organ_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->organ_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->organ (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "disease" && ns.empty ())
    {
      if (count[5UL] == 0)
      {
        if (start)
        {
          ::metadata::disease_pskel* p = 0;

          if (t == 0 && this->disease_parser_ != 0)
            p = this->disease_parser_;
          else
          {
            const char* ts = ::metadata::disease_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->disease_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->disease_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->disease_parser_map_ != 0)
                p = static_cast< ::metadata::disease_pskel* > (
                  this->disease_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::metadata::disease_pskel* p =
          static_cast< ::metadata::disease_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::metadata::disease& tmp = p->post_disease ();
            this->disease (tmp);
          }

          count[5UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "morphology" && ns.empty ())
    {
      if (count[6UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->morphology_parser_ != 0)
            p = this->morphology_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->morphology_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->morphology_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->morphology_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->morphology_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->morphology (tmp);
          }

          count[6UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "patient_derived" && ns.empty ())
    {
      if (count[7UL] == 0)
      {
        if (start)
        {
          ::metadata::patient_derived_pskel* p = 0;

          if (t == 0 && this->patient_derived_parser_ != 0)
            p = this->patient_derived_parser_;
          else
          {
            const char* ts = ::metadata::patient_derived_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->patient_derived_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->patient_derived_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->patient_derived_parser_map_ != 0)
                p = static_cast< ::metadata::patient_derived_pskel* > (
                  this->patient_derived_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::metadata::patient_derived_pskel* p =
          static_cast< ::metadata::patient_derived_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::metadata::patient_derived& tmp = p->post_patient_derived ();
            this->patient_derived (tmp);
          }

          count[7UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[8UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[8UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for MultiCellDB_pskel.
  //
  bool MultiCellDB_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool MultiCellDB_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void MultiCellDB_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void MultiCellDB_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void MultiCellDB_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->ID_parser_ != 0)
            p = this->ID_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->ID_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->ID_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->ID_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->ID_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->ID (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "name" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::xml_schema::string_pskel* p = 0;

          if (t == 0 && this->name_parser_ != 0)
            p = this->name_parser_;
          else
          {
            const char* ts = ::xml_schema::string_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->name_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->name_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->name_parser_map_ != 0)
                p = static_cast< ::xml_schema::string_pskel* > (
                  this->name_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::xml_schema::string_pskel* p =
          static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::std::string& tmp = p->post_string ();
            this->name (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for rights_pskel.
  //
  bool rights_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "license" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &rights_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool rights_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void rights_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void rights_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void rights_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "license" && ns.empty ())
        {
          if (start)
          {
            ::metadata::license_pskel* p = 0;

            if (t == 0 && this->license_parser_ != 0)
              p = this->license_parser_;
            else
            {
              const char* ts = ::metadata::license_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->license_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->license_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->license_parser_map_ != 0)
                  p = static_cast< ::metadata::license_pskel* > (
                    this->license_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::license_pskel* p =
            static_cast< ::metadata::license_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::license* tmp = p->post_license ();
              this->license (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for license_pskel.
  //
  bool license_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "LicenseDocument" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &license_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool license_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void license_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void license_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void license_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "LicenseDocument" && ns.empty ())
        {
          if (start)
          {
            ::metadata::LicenseDocument_pskel* p = 0;

            if (t == 0 && this->LicenseDocument_parser_ != 0)
              p = this->LicenseDocument_parser_;
            else
            {
              const char* ts = ::metadata::LicenseDocument_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->LicenseDocument_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->LicenseDocument_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->LicenseDocument_parser_map_ != 0)
                  p = static_cast< ::metadata::LicenseDocument_pskel* > (
                    this->LicenseDocument_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::LicenseDocument_pskel* p =
            static_cast< ::metadata::LicenseDocument_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::LicenseDocument* tmp = p->post_LicenseDocument ();
              this->LicenseDocument (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "notes" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->notes_parser_ != 0)
              p = this->notes_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->notes_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->notes_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->notes_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->notes_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->notes (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for LicenseDocument_pskel.
  //
  bool LicenseDocument_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &LicenseDocument_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool LicenseDocument_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void LicenseDocument_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void LicenseDocument_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void LicenseDocument_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->name_parser_ != 0)
              p = this->name_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->name_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->name_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->name_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->name_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->name (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "URL" && ns.empty ())
        {
          if (start)
          {
            ::metadata::URL_pskel* p = 0;

            if (t == 0 && this->URL_parser_ != 0)
              p = this->URL_parser_;
            else
            {
              const char* ts = ::metadata::URL_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->URL_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->URL_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->URL_parser_map_ != 0)
                  p = static_cast< ::metadata::URL_pskel* > (
                    this->URL_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::URL_pskel* p =
            static_cast< ::metadata::URL_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::metadata::URL& tmp = p->post_URL ();
              this->URL (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for metadata_pskel.
  //
  bool metadata_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "MultiCellDB" && ns.empty ())
          s = 0UL;
        else if (n == "description" && ns.empty ())
          s = 1UL;
        else if (n == "software" && ns.empty ())
          s = 2UL;
        else if (n == "citation" && ns.empty ())
          s = 3UL;
        else if (n == "curation" && ns.empty ())
          s = 4UL;
        else if (n == "data_origins" && ns.empty ())
          s = 5UL;
        else if (n == "data_analysis" && ns.empty ())
          s = 6UL;
        else if (n == "rights" && ns.empty ())
          s = 7UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &metadata_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool metadata_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void metadata_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void metadata_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void metadata_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "MultiCellDB" && ns.empty ())
        {
          if (start)
          {
            ::metadata::MultiCellDB_pskel* p = 0;

            if (t == 0 && this->MultiCellDB_parser_ != 0)
              p = this->MultiCellDB_parser_;
            else
            {
              const char* ts = ::metadata::MultiCellDB_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->MultiCellDB_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->MultiCellDB_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->MultiCellDB_parser_map_ != 0)
                  p = static_cast< ::metadata::MultiCellDB_pskel* > (
                    this->MultiCellDB_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::MultiCellDB_pskel* p =
            static_cast< ::metadata::MultiCellDB_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::metadata::MultiCellDB& tmp = p->post_MultiCellDB ();
              this->MultiCellDB (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->description_parser_ != 0)
              p = this->description_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->description_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->description_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->description_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->description_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->description (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "software" && ns.empty ())
        {
          if (start)
          {
            ::metadata::software_pskel* p = 0;

            if (t == 0 && this->software_parser_ != 0)
              p = this->software_parser_;
            else
            {
              const char* ts = ::metadata::software_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->software_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->software_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->software_parser_map_ != 0)
                  p = static_cast< ::metadata::software_pskel* > (
                    this->software_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::software_pskel* p =
            static_cast< ::metadata::software_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::software* tmp = p->post_software ();
              this->software (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "citation" && ns.empty ())
        {
          if (start)
          {
            ::metadata::citation_pskel* p = 0;

            if (t == 0 && this->citation_parser_ != 0)
              p = this->citation_parser_;
            else
            {
              const char* ts = ::metadata::citation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->citation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->citation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->citation_parser_map_ != 0)
                  p = static_cast< ::metadata::citation_pskel* > (
                    this->citation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::citation_pskel* p =
            static_cast< ::metadata::citation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::citation* tmp = p->post_citation ();
              this->citation (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "curation" && ns.empty ())
        {
          if (start)
          {
            ::metadata::curation_pskel* p = 0;

            if (t == 0 && this->curation_parser_ != 0)
              p = this->curation_parser_;
            else
            {
              const char* ts = ::metadata::curation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->curation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->curation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->curation_parser_map_ != 0)
                  p = static_cast< ::metadata::curation_pskel* > (
                    this->curation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::curation_pskel* p =
            static_cast< ::metadata::curation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::curation* tmp = p->post_curation ();
              this->curation (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "data_origins" && ns.empty ())
        {
          if (start)
          {
            ::metadata::data_origins_pskel* p = 0;

            if (t == 0 && this->data_origins_parser_ != 0)
              p = this->data_origins_parser_;
            else
            {
              const char* ts = ::metadata::data_origins_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->data_origins_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->data_origins_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->data_origins_parser_map_ != 0)
                  p = static_cast< ::metadata::data_origins_pskel* > (
                    this->data_origins_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::data_origins_pskel* p =
            static_cast< ::metadata::data_origins_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::data_origins* tmp = p->post_data_origins ();
              this->data_origins (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "data_analysis" && ns.empty ())
        {
          if (start)
          {
            ::metadata::data_analysis_pskel* p = 0;

            if (t == 0 && this->data_analysis_parser_ != 0)
              p = this->data_analysis_parser_;
            else
            {
              const char* ts = ::metadata::data_analysis_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->data_analysis_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->data_analysis_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->data_analysis_parser_map_ != 0)
                  p = static_cast< ::metadata::data_analysis_pskel* > (
                    this->data_analysis_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::data_analysis_pskel* p =
            static_cast< ::metadata::data_analysis_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::data_analysis* tmp = p->post_data_analysis ();
              this->data_analysis (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "rights" && ns.empty ())
        {
          if (start)
          {
            ::metadata::rights_pskel* p = 0;

            if (t == 0 && this->rights_parser_ != 0)
              p = this->rights_parser_;
            else
            {
              const char* ts = ::metadata::rights_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->rights_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->rights_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->rights_parser_map_ != 0)
                  p = static_cast< ::metadata::rights_pskel* > (
                    this->rights_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::rights_pskel* p =
            static_cast< ::metadata::rights_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::rights* tmp = p->post_rights ();
              this->rights (tmp);
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "cell_origin" && ns.empty ())
        {
          if (start)
          {
            ::metadata::cell_origin_pskel* p = 0;

            if (t == 0 && this->cell_origin_parser_ != 0)
              p = this->cell_origin_parser_;
            else
            {
              const char* ts = ::metadata::cell_origin_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_origin_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_origin_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_origin_parser_map_ != 0)
                  p = static_cast< ::metadata::cell_origin_pskel* > (
                    this->cell_origin_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::metadata::cell_origin_pskel* p =
            static_cast< ::metadata::cell_origin_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::metadata::cell_origin* tmp = p->post_cell_origin ();
              this->cell_origin (tmp);
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "current_time" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->current_time_parser_ != 0)
              p = this->current_time_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->current_time_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->current_time_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->current_time_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->current_time_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->current_time (tmp);
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "current_runtime" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->current_runtime_parser_ != 0)
              p = this->current_runtime_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->current_runtime_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->current_runtime_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->current_runtime_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->current_runtime_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->current_runtime (tmp);
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "created" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::date_time_pskel* p = 0;

            if (t == 0 && this->created_parser_ != 0)
              p = this->created_parser_;
            else
            {
              const char* ts = ::xml_schema::date_time_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->created_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->created_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->created_parser_map_ != 0)
                  p = static_cast< ::xml_schema::date_time_pskel* > (
                    this->created_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::date_time_pskel* p =
            static_cast< ::xml_schema::date_time_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::xml_schema::date_time& tmp = p->post_date_time ();
              this->created (tmp);
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "last_modified" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::date_time_pskel* p = 0;

            if (t == 0 && this->last_modified_parser_ != 0)
              p = this->last_modified_parser_;
            else
            {
              const char* ts = ::xml_schema::date_time_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->last_modified_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->last_modified_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->last_modified_parser_map_ != 0)
                  p = static_cast< ::xml_schema::date_time_pskel* > (
                    this->last_modified_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::date_time_pskel* p =
            static_cast< ::xml_schema::date_time_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::xml_schema::date_time& tmp = p->post_date_time ();
              this->last_modified (tmp);
            }

            count = 0;
            state = 13UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "notes" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->notes_parser_ != 0)
              p = this->notes_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->notes_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->notes_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->notes_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->notes_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->notes (tmp);
            }

            count = 0;
            state = 14UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 14UL;
          // Fall through.
        }
      }
      case 14UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace metadata
{
  // Attribute validation and dispatch functions for curation_pskel.
  //
  bool curation_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "curated" && ns.empty ())
    {
      if (this->curated_parser_)
      {
        this->curated_parser_->pre ();

        this->curated_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->curated_parser_->_characters (s);

        if (!ctx.error_type ())
          this->curated_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          bool tmp = this->curated_parser_->post_boolean ();

          this->curated (tmp);
        }
      }

      return true;
    }

    return false;
  }

  bool curation_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if (!n.empty ())
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for data_origin_pskel.
  //
  bool data_origin_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned long long tmp = this->ID_parser_->post_unsigned_long ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for species_pskel.
  //
  bool species_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "MeSH_ID" && ns.empty ())
    {
      if (this->MeSH_ID_parser_)
      {
        this->MeSH_ID_parser_->pre ();

        this->MeSH_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->MeSH_ID_parser_->post_string ();

          this->MeSH_ID (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::string_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for disease_pskel.
  //
  bool disease_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "EFO_ID" && ns.empty ())
    {
      if (this->EFO_ID_parser_)
      {
        this->EFO_ID_parser_->pre ();

        this->EFO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->EFO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->EFO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->EFO_ID_parser_->post_string ();

          this->EFO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "DOID_ID" && ns.empty ())
    {
      if (this->DOID_ID_parser_)
      {
        this->DOID_ID_parser_->pre ();

        this->DOID_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->DOID_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->DOID_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->DOID_ID_parser_->post_string ();

          this->DOID_ID (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::string_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for patient_derived_pskel.
  //
  bool patient_derived_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "patient_ID" && ns.empty ())
    {
      if (this->patient_ID_parser_)
      {
        this->patient_ID_parser_->pre ();

        this->patient_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->patient_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->patient_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->patient_ID_parser_->post_string ();

          this->patient_ID (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::boolean_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace metadata
{
}

// Begin epilogue.
//
//
// End epilogue.

