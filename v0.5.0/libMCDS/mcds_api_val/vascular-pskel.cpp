// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "vascular-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace vascular
{
  // vascular_node_pskel
  //

  void vascular_node_pskel::
  boundary_node (bool x)
  {
    if (this->vascular_node_impl_)
      this->vascular_node_impl_->boundary_node (x);
  }

  void vascular_node_pskel::
  _reset ()
  {
    typedef ::mesh::node_pskel base;
    base::_reset ();

    if (this->boundary_node_parser_)
      this->boundary_node_parser_->_reset ();
  }

  const char* vascular_node_pskel::
  _static_type ()
  {
    return "vascular_node vascular";
  }

  const char* vascular_node_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_vascular_node_pskel_inheritance_map_entry_ (
    vascular_node_pskel::_static_type (),
    ::mesh::node_pskel::_static_type ());

  ::mesh::node* vascular_node_pskel::
  post_node ()
  {
    assert (this->node_impl_);
    return this->node_impl_->post_node ();
  }

  // list_of_vascular_nodes_pskel
  //

  void list_of_vascular_nodes_pskel::
  vascular_node (::vascular::vascular_node* x)
  {
    if (this->list_of_vascular_nodes_impl_)
      this->list_of_vascular_nodes_impl_->vascular_node (x);
  }

  void list_of_vascular_nodes_pskel::
  custom (::common::custom* x)
  {
    if (this->list_of_vascular_nodes_impl_)
      this->list_of_vascular_nodes_impl_->custom (x);
  }

  void list_of_vascular_nodes_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->vascular_node_parser_)
      this->vascular_node_parser_->_reset ();

    if (this->vascular_node_parser_map_)
      this->vascular_node_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_vascular_nodes_pskel::
  _static_type ()
  {
    return "list_of_vascular_nodes vascular";
  }

  const char* list_of_vascular_nodes_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // boundary_node_pskel
  //

  void boundary_node_pskel::
  node_ID (unsigned int x)
  {
    if (this->boundary_node_impl_)
      this->boundary_node_impl_->node_ID (x);
  }

  void boundary_node_pskel::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    if (this->boundary_node_impl_)
      this->boundary_node_impl_->fluid_flow_velocity (x);
  }

  void boundary_node_pskel::
  variables (::variables::list_of_variables* x)
  {
    if (this->boundary_node_impl_)
      this->boundary_node_impl_->variables (x);
  }

  void boundary_node_pskel::
  boundary_conditions (::vascular::boundary_conditions* x)
  {
    if (this->boundary_node_impl_)
      this->boundary_node_impl_->boundary_conditions (x);
  }

  void boundary_node_pskel::
  custom (::common::custom* x)
  {
    if (this->boundary_node_impl_)
      this->boundary_node_impl_->custom (x);
  }

  void boundary_node_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    if (this->node_ID_parser_)
      this->node_ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->fluid_flow_velocity_parser_)
      this->fluid_flow_velocity_parser_->_reset ();

    if (this->fluid_flow_velocity_parser_map_)
      this->fluid_flow_velocity_parser_map_->reset ();

    if (this->variables_parser_)
      this->variables_parser_->_reset ();

    if (this->variables_parser_map_)
      this->variables_parser_map_->reset ();

    if (this->boundary_conditions_parser_)
      this->boundary_conditions_parser_->_reset ();

    if (this->boundary_conditions_parser_map_)
      this->boundary_conditions_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* boundary_node_pskel::
  _static_type ()
  {
    return "boundary_node vascular";
  }

  const char* boundary_node_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // list_of_boundary_nodes_pskel
  //

  void list_of_boundary_nodes_pskel::
  boundary_node (::vascular::boundary_node* x)
  {
    if (this->list_of_boundary_nodes_impl_)
      this->list_of_boundary_nodes_impl_->boundary_node (x);
  }

  void list_of_boundary_nodes_pskel::
  custom (::common::custom* x)
  {
    if (this->list_of_boundary_nodes_impl_)
      this->list_of_boundary_nodes_impl_->custom (x);
  }

  void list_of_boundary_nodes_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->boundary_node_parser_)
      this->boundary_node_parser_->_reset ();

    if (this->boundary_node_parser_map_)
      this->boundary_node_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_boundary_nodes_pskel::
  _static_type ()
  {
    return "list_of_boundary_nodes vascular";
  }

  const char* list_of_boundary_nodes_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // boundary_conditions_pskel
  //

  void boundary_conditions_pskel::
  ID (unsigned int x)
  {
    if (this->boundary_conditions_impl_)
      this->boundary_conditions_impl_->ID (x);
  }

  void boundary_conditions_pskel::
  boundary_condition (::vascular::boundary_condition* x)
  {
    if (this->boundary_conditions_impl_)
      this->boundary_conditions_impl_->boundary_condition (x);
  }

  void boundary_conditions_pskel::
  custom (::common::custom* x)
  {
    if (this->boundary_conditions_impl_)
      this->boundary_conditions_impl_->custom (x);
  }

  void boundary_conditions_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->boundary_condition_parser_)
      this->boundary_condition_parser_->_reset ();

    if (this->boundary_condition_parser_map_)
      this->boundary_condition_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* boundary_conditions_pskel::
  _static_type ()
  {
    return "boundary_conditions vascular";
  }

  const char* boundary_conditions_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // boundary_type_pskel
  //

  const char* boundary_type_pskel::
  _static_type ()
  {
    return "boundary_type vascular";
  }

  const char* boundary_type_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_boundary_type_pskel_inheritance_map_entry_ (
    boundary_type_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string boundary_type_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const boundary_type_pskel::_xsde_boundary_type_pskel_enums_[6UL] = 
  {
    "Anti-Periodic",
    "Anti-Reflecting",
    "Dirichlet",
    "Neumann",
    "Periodic",
    "Reflecting"
  };

  // boundary_condition_pskel
  //

  void boundary_condition_pskel::
  ID (unsigned int x)
  {
    if (this->boundary_condition_impl_)
      this->boundary_condition_impl_->ID (x);
  }

  void boundary_condition_pskel::
  variable_ID (unsigned int x)
  {
    if (this->boundary_condition_impl_)
      this->boundary_condition_impl_->variable_ID (x);
  }

  void boundary_condition_pskel::
  boundary_type (const ::vascular::boundary_type& x)
  {
    if (this->boundary_condition_impl_)
      this->boundary_condition_impl_->boundary_type (x);
  }

  void boundary_condition_pskel::
  value (::common::units_decimal* x)
  {
    if (this->boundary_condition_impl_)
      this->boundary_condition_impl_->value (x);
  }

  void boundary_condition_pskel::
  direction (const ::std::string& x)
  {
    if (this->boundary_condition_impl_)
      this->boundary_condition_impl_->direction (x);
  }

  void boundary_condition_pskel::
  custom (::common::custom* x)
  {
    if (this->boundary_condition_impl_)
      this->boundary_condition_impl_->custom (x);
  }

  void boundary_condition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->variable_ID_parser_)
      this->variable_ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->boundary_type_parser_)
      this->boundary_type_parser_->_reset ();

    if (this->boundary_type_parser_map_)
      this->boundary_type_parser_map_->reset ();

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->value_parser_map_)
      this->value_parser_map_->reset ();

    if (this->direction_parser_)
      this->direction_parser_->_reset ();

    if (this->direction_parser_map_)
      this->direction_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* boundary_condition_pskel::
  _static_type ()
  {
    return "boundary_condition vascular";
  }

  const char* boundary_condition_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // vascular_segments_pskel
  //

  void vascular_segments_pskel::
  vascular_segment (::vascular::vascular_segment* x)
  {
    if (this->vascular_segments_impl_)
      this->vascular_segments_impl_->vascular_segment (x);
  }

  void vascular_segments_pskel::
  custom (::common::custom* x)
  {
    if (this->vascular_segments_impl_)
      this->vascular_segments_impl_->custom (x);
  }

  void vascular_segments_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->vascular_segment_parser_)
      this->vascular_segment_parser_->_reset ();

    if (this->vascular_segment_parser_map_)
      this->vascular_segment_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* vascular_segments_pskel::
  _static_type ()
  {
    return "vascular_segments vascular";
  }

  const char* vascular_segments_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // vascular_segment_pskel
  //

  void vascular_segment_pskel::
  endpoint_1 (::vascular::endpoint* x)
  {
    if (this->vascular_segment_impl_)
      this->vascular_segment_impl_->endpoint_1 (x);
  }

  void vascular_segment_pskel::
  endpoint_2 (::vascular::endpoint* x)
  {
    if (this->vascular_segment_impl_)
      this->vascular_segment_impl_->endpoint_2 (x);
  }

  void vascular_segment_pskel::
  surface (::vascular::surface_properties* x)
  {
    if (this->vascular_segment_impl_)
      this->vascular_segment_impl_->surface (x);
  }

  void vascular_segment_pskel::
  interior (::vascular::volume_properties* x)
  {
    if (this->vascular_segment_impl_)
      this->vascular_segment_impl_->interior (x);
  }

  void vascular_segment_pskel::
  custom (::common::custom* x)
  {
    if (this->vascular_segment_impl_)
      this->vascular_segment_impl_->custom (x);
  }

  void vascular_segment_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->endpoint_1_parser_)
      this->endpoint_1_parser_->_reset ();

    if (this->endpoint_1_parser_map_)
      this->endpoint_1_parser_map_->reset ();

    if (this->endpoint_2_parser_)
      this->endpoint_2_parser_->_reset ();

    if (this->endpoint_2_parser_map_)
      this->endpoint_2_parser_map_->reset ();

    if (this->surface_parser_)
      this->surface_parser_->_reset ();

    if (this->surface_parser_map_)
      this->surface_parser_map_->reset ();

    if (this->interior_parser_)
      this->interior_parser_->_reset ();

    if (this->interior_parser_map_)
      this->interior_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* vascular_segment_pskel::
  _static_type ()
  {
    return "vascular_segment vascular";
  }

  const char* vascular_segment_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // endpoint_pskel
  //

  void endpoint_pskel::
  node_ID (unsigned int x)
  {
    if (this->endpoint_impl_)
      this->endpoint_impl_->node_ID (x);
  }

  void endpoint_pskel::
  lengths (::phenotype_common::lengths* x)
  {
    if (this->endpoint_impl_)
      this->endpoint_impl_->lengths (x);
  }

  void endpoint_pskel::
  areas (::phenotype_common::areas_2D* x)
  {
    if (this->endpoint_impl_)
      this->endpoint_impl_->areas (x);
  }

  void endpoint_pskel::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    if (this->endpoint_impl_)
      this->endpoint_impl_->fluid_flow_velocity (x);
  }

  void endpoint_pskel::
  custom (::common::custom* x)
  {
    if (this->endpoint_impl_)
      this->endpoint_impl_->custom (x);
  }

  void endpoint_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    if (this->node_ID_parser_)
      this->node_ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->lengths_parser_)
      this->lengths_parser_->_reset ();

    if (this->lengths_parser_map_)
      this->lengths_parser_map_->reset ();

    if (this->areas_parser_)
      this->areas_parser_->_reset ();

    if (this->areas_parser_map_)
      this->areas_parser_map_->reset ();

    if (this->fluid_flow_velocity_parser_)
      this->fluid_flow_velocity_parser_->_reset ();

    if (this->fluid_flow_velocity_parser_map_)
      this->fluid_flow_velocity_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* endpoint_pskel::
  _static_type ()
  {
    return "endpoint vascular";
  }

  const char* endpoint_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // surface_properties_pskel
  //

  void surface_properties_pskel::
  areas (::phenotype_common::areas_3D* x)
  {
    if (this->surface_properties_impl_)
      this->surface_properties_impl_->areas (x);
  }

  void surface_properties_pskel::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    if (this->surface_properties_impl_)
      this->surface_properties_impl_->fluid_flow_velocity (x);
  }

  void surface_properties_pskel::
  mechanics (::phenotype_common::mechanics* x)
  {
    if (this->surface_properties_impl_)
      this->surface_properties_impl_->mechanics (x);
  }

  void surface_properties_pskel::
  permeability (::common::units_decimal* x)
  {
    if (this->surface_properties_impl_)
      this->surface_properties_impl_->permeability (x);
  }

  void surface_properties_pskel::
  surface_proteins (::variables::list_of_variables* x)
  {
    if (this->surface_properties_impl_)
      this->surface_properties_impl_->surface_proteins (x);
  }

  void surface_properties_pskel::
  custom (::common::custom* x)
  {
    if (this->surface_properties_impl_)
      this->surface_properties_impl_->custom (x);
  }

  void surface_properties_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->areas_parser_)
      this->areas_parser_->_reset ();

    if (this->areas_parser_map_)
      this->areas_parser_map_->reset ();

    if (this->fluid_flow_velocity_parser_)
      this->fluid_flow_velocity_parser_->_reset ();

    if (this->fluid_flow_velocity_parser_map_)
      this->fluid_flow_velocity_parser_map_->reset ();

    if (this->mechanics_parser_)
      this->mechanics_parser_->_reset ();

    if (this->mechanics_parser_map_)
      this->mechanics_parser_map_->reset ();

    if (this->permeability_parser_)
      this->permeability_parser_->_reset ();

    if (this->permeability_parser_map_)
      this->permeability_parser_map_->reset ();

    if (this->surface_proteins_parser_)
      this->surface_proteins_parser_->_reset ();

    if (this->surface_proteins_parser_map_)
      this->surface_proteins_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* surface_properties_pskel::
  _static_type ()
  {
    return "surface_properties vascular";
  }

  const char* surface_properties_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // volume_properties_pskel
  //

  void volume_properties_pskel::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    if (this->volume_properties_impl_)
      this->volume_properties_impl_->fluid_flow_velocity (x);
  }

  void volume_properties_pskel::
  variables (::variables::list_of_variables* x)
  {
    if (this->volume_properties_impl_)
      this->volume_properties_impl_->variables (x);
  }

  void volume_properties_pskel::
  volumes (::phenotype_common::volumes* x)
  {
    if (this->volume_properties_impl_)
      this->volume_properties_impl_->volumes (x);
  }

  void volume_properties_pskel::
  custom (::common::custom* x)
  {
    if (this->volume_properties_impl_)
      this->volume_properties_impl_->custom (x);
  }

  void volume_properties_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->fluid_flow_velocity_parser_)
      this->fluid_flow_velocity_parser_->_reset ();

    if (this->fluid_flow_velocity_parser_map_)
      this->fluid_flow_velocity_parser_map_->reset ();

    if (this->variables_parser_)
      this->variables_parser_->_reset ();

    if (this->variables_parser_map_)
      this->variables_parser_map_->reset ();

    if (this->volumes_parser_)
      this->volumes_parser_->_reset ();

    if (this->volumes_parser_map_)
      this->volumes_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* volume_properties_pskel::
  _static_type ()
  {
    return "volume_properties vascular";
  }

  const char* volume_properties_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // vascular_network_pskel
  //

  void vascular_network_pskel::
  ID (unsigned int x)
  {
    if (this->vascular_network_impl_)
      this->vascular_network_impl_->ID (x);
  }

  void vascular_network_pskel::
  keywords (const ::std::string& x)
  {
    if (this->vascular_network_impl_)
      this->vascular_network_impl_->keywords (x);
  }

  void vascular_network_pskel::
  name (const ::std::string& x)
  {
    if (this->vascular_network_impl_)
      this->vascular_network_impl_->name (x);
  }

  void vascular_network_pskel::
  vascular_nodes (::vascular::list_of_vascular_nodes* x)
  {
    if (this->vascular_network_impl_)
      this->vascular_network_impl_->vascular_nodes (x);
  }

  void vascular_network_pskel::
  boundary_nodes (::vascular::list_of_boundary_nodes* x)
  {
    if (this->vascular_network_impl_)
      this->vascular_network_impl_->boundary_nodes (x);
  }

  void vascular_network_pskel::
  vascular_segments (::vascular::vascular_segments* x)
  {
    if (this->vascular_network_impl_)
      this->vascular_network_impl_->vascular_segments (x);
  }

  void vascular_network_pskel::
  voxels (::mesh::int_list_xpath* x)
  {
    if (this->vascular_network_impl_)
      this->vascular_network_impl_->voxels (x);
  }

  void vascular_network_pskel::
  custom (::common::custom* x)
  {
    if (this->vascular_network_impl_)
      this->vascular_network_impl_->custom (x);
  }

  void vascular_network_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->keywords_parser_)
      this->keywords_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    this->resetting_ = true;

    if (this->vascular_nodes_parser_)
      this->vascular_nodes_parser_->_reset ();

    if (this->vascular_nodes_parser_map_)
      this->vascular_nodes_parser_map_->reset ();

    if (this->boundary_nodes_parser_)
      this->boundary_nodes_parser_->_reset ();

    if (this->boundary_nodes_parser_map_)
      this->boundary_nodes_parser_map_->reset ();

    if (this->vascular_segments_parser_)
      this->vascular_segments_parser_->_reset ();

    if (this->vascular_segments_parser_map_)
      this->vascular_segments_parser_map_->reset ();

    if (this->voxels_parser_)
      this->voxels_parser_->_reset ();

    if (this->voxels_parser_map_)
      this->voxels_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* vascular_network_pskel::
  _static_type ()
  {
    return "vascular_network vascular";
  }

  const char* vascular_network_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace vascular
{
  // Element validation and dispatch functions for list_of_vascular_nodes_pskel.
  //
  bool list_of_vascular_nodes_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "vascular_node" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &list_of_vascular_nodes_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool list_of_vascular_nodes_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void list_of_vascular_nodes_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void list_of_vascular_nodes_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void list_of_vascular_nodes_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "vascular_node" && ns.empty ())
        {
          if (start)
          {
            ::vascular::vascular_node_pskel* p = 0;

            if (t == 0 && this->vascular_node_parser_ != 0)
              p = this->vascular_node_parser_;
            else
            {
              const char* ts = ::vascular::vascular_node_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->vascular_node_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->vascular_node_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->vascular_node_parser_map_ != 0)
                  p = static_cast< ::vascular::vascular_node_pskel* > (
                    this->vascular_node_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::vascular::vascular_node_pskel* p =
            static_cast< ::vascular::vascular_node_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::vascular::vascular_node* tmp = p->post_vascular_node ();
              this->vascular_node (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for boundary_node_pskel.
  //
  bool boundary_node_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool boundary_node_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void boundary_node_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void boundary_node_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void boundary_node_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "fluid_flow_velocity" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->fluid_flow_velocity_parser_ != 0)
            p = this->fluid_flow_velocity_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->fluid_flow_velocity_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->fluid_flow_velocity_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->fluid_flow_velocity_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->fluid_flow_velocity_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->fluid_flow_velocity (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "variables" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::variables::list_of_variables_pskel* p = 0;

          if (t == 0 && this->variables_parser_ != 0)
            p = this->variables_parser_;
          else
          {
            const char* ts = ::variables::list_of_variables_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->variables_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->variables_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->variables_parser_map_ != 0)
                p = static_cast< ::variables::list_of_variables_pskel* > (
                  this->variables_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::variables::list_of_variables_pskel* p =
          static_cast< ::variables::list_of_variables_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::variables::list_of_variables* tmp = p->post_list_of_variables ();
            this->variables (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "boundary_conditions" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::vascular::boundary_conditions_pskel* p = 0;

          if (t == 0 && this->boundary_conditions_parser_ != 0)
            p = this->boundary_conditions_parser_;
          else
          {
            const char* ts = ::vascular::boundary_conditions_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->boundary_conditions_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->boundary_conditions_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->boundary_conditions_parser_map_ != 0)
                p = static_cast< ::vascular::boundary_conditions_pskel* > (
                  this->boundary_conditions_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::vascular::boundary_conditions_pskel* p =
          static_cast< ::vascular::boundary_conditions_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::vascular::boundary_conditions* tmp = p->post_boundary_conditions ();
            this->boundary_conditions (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for list_of_boundary_nodes_pskel.
  //
  bool list_of_boundary_nodes_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "boundary_node" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &list_of_boundary_nodes_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool list_of_boundary_nodes_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void list_of_boundary_nodes_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void list_of_boundary_nodes_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void list_of_boundary_nodes_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "boundary_node" && ns.empty ())
        {
          if (start)
          {
            ::vascular::boundary_node_pskel* p = 0;

            if (t == 0 && this->boundary_node_parser_ != 0)
              p = this->boundary_node_parser_;
            else
            {
              const char* ts = ::vascular::boundary_node_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->boundary_node_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->boundary_node_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->boundary_node_parser_map_ != 0)
                  p = static_cast< ::vascular::boundary_node_pskel* > (
                    this->boundary_node_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::vascular::boundary_node_pskel* p =
            static_cast< ::vascular::boundary_node_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::vascular::boundary_node* tmp = p->post_boundary_node ();
              this->boundary_node (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for boundary_conditions_pskel.
  //
  bool boundary_conditions_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "boundary_condition" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &boundary_conditions_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool boundary_conditions_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void boundary_conditions_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void boundary_conditions_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void boundary_conditions_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "boundary_condition" && ns.empty ())
        {
          if (start)
          {
            ::vascular::boundary_condition_pskel* p = 0;

            if (t == 0 && this->boundary_condition_parser_ != 0)
              p = this->boundary_condition_parser_;
            else
            {
              const char* ts = ::vascular::boundary_condition_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->boundary_condition_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->boundary_condition_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->boundary_condition_parser_map_ != 0)
                  p = static_cast< ::vascular::boundary_condition_pskel* > (
                    this->boundary_condition_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::vascular::boundary_condition_pskel* p =
            static_cast< ::vascular::boundary_condition_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::vascular::boundary_condition* tmp = p->post_boundary_condition ();
              this->boundary_condition (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for boundary_condition_pskel.
  //
  bool boundary_condition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "boundary_type" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &boundary_condition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool boundary_condition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void boundary_condition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void boundary_condition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void boundary_condition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "boundary_type" && ns.empty ())
        {
          if (start)
          {
            ::vascular::boundary_type_pskel* p = 0;

            if (t == 0 && this->boundary_type_parser_ != 0)
              p = this->boundary_type_parser_;
            else
            {
              const char* ts = ::vascular::boundary_type_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->boundary_type_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->boundary_type_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->boundary_type_parser_map_ != 0)
                  p = static_cast< ::vascular::boundary_type_pskel* > (
                    this->boundary_type_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::vascular::boundary_type_pskel* p =
            static_cast< ::vascular::boundary_type_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::vascular::boundary_type& tmp = p->post_boundary_type ();
              this->boundary_type (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "value" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->value_parser_ != 0)
              p = this->value_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->value_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->value_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->value_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->value_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->value (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "direction" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->direction_parser_ != 0)
              p = this->direction_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->direction_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->direction_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->direction_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->direction_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->direction (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for vascular_segments_pskel.
  //
  bool vascular_segments_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "vascular_segment" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &vascular_segments_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool vascular_segments_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void vascular_segments_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void vascular_segments_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void vascular_segments_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "vascular_segment" && ns.empty ())
        {
          if (start)
          {
            ::vascular::vascular_segment_pskel* p = 0;

            if (t == 0 && this->vascular_segment_parser_ != 0)
              p = this->vascular_segment_parser_;
            else
            {
              const char* ts = ::vascular::vascular_segment_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->vascular_segment_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->vascular_segment_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->vascular_segment_parser_map_ != 0)
                  p = static_cast< ::vascular::vascular_segment_pskel* > (
                    this->vascular_segment_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::vascular::vascular_segment_pskel* p =
            static_cast< ::vascular::vascular_segment_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::vascular::vascular_segment* tmp = p->post_vascular_segment ();
              this->vascular_segment (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for vascular_segment_pskel.
  //
  bool vascular_segment_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool vascular_segment_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void vascular_segment_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void vascular_segment_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }
    else
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void vascular_segment_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "endpoint_1" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::vascular::endpoint_pskel* p = 0;

          if (t == 0 && this->endpoint_1_parser_ != 0)
            p = this->endpoint_1_parser_;
          else
          {
            const char* ts = ::vascular::endpoint_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->endpoint_1_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->endpoint_1_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->endpoint_1_parser_map_ != 0)
                p = static_cast< ::vascular::endpoint_pskel* > (
                  this->endpoint_1_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::vascular::endpoint_pskel* p =
          static_cast< ::vascular::endpoint_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::vascular::endpoint* tmp = p->post_endpoint ();
            this->endpoint_1 (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "endpoint_2" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::vascular::endpoint_pskel* p = 0;

          if (t == 0 && this->endpoint_2_parser_ != 0)
            p = this->endpoint_2_parser_;
          else
          {
            const char* ts = ::vascular::endpoint_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->endpoint_2_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->endpoint_2_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->endpoint_2_parser_map_ != 0)
                p = static_cast< ::vascular::endpoint_pskel* > (
                  this->endpoint_2_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::vascular::endpoint_pskel* p =
          static_cast< ::vascular::endpoint_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::vascular::endpoint* tmp = p->post_endpoint ();
            this->endpoint_2 (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "surface" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::vascular::surface_properties_pskel* p = 0;

          if (t == 0 && this->surface_parser_ != 0)
            p = this->surface_parser_;
          else
          {
            const char* ts = ::vascular::surface_properties_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->surface_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->surface_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->surface_parser_map_ != 0)
                p = static_cast< ::vascular::surface_properties_pskel* > (
                  this->surface_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::vascular::surface_properties_pskel* p =
          static_cast< ::vascular::surface_properties_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::vascular::surface_properties* tmp = p->post_surface_properties ();
            this->surface (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "interior" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::vascular::volume_properties_pskel* p = 0;

          if (t == 0 && this->interior_parser_ != 0)
            p = this->interior_parser_;
          else
          {
            const char* ts = ::vascular::volume_properties_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->interior_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->interior_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->interior_parser_map_ != 0)
                p = static_cast< ::vascular::volume_properties_pskel* > (
                  this->interior_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::vascular::volume_properties_pskel* p =
          static_cast< ::vascular::volume_properties_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::vascular::volume_properties* tmp = p->post_volume_properties ();
            this->interior (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }

      if (count[1UL] == 0)
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }

      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for endpoint_pskel.
  //
  bool endpoint_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool endpoint_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void endpoint_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void endpoint_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void endpoint_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "lengths" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::phenotype_common::lengths_pskel* p = 0;

          if (t == 0 && this->lengths_parser_ != 0)
            p = this->lengths_parser_;
          else
          {
            const char* ts = ::phenotype_common::lengths_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->lengths_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->lengths_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->lengths_parser_map_ != 0)
                p = static_cast< ::phenotype_common::lengths_pskel* > (
                  this->lengths_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::phenotype_common::lengths_pskel* p =
          static_cast< ::phenotype_common::lengths_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::phenotype_common::lengths* tmp = p->post_lengths ();
            this->lengths (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "areas" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::phenotype_common::areas_2D_pskel* p = 0;

          if (t == 0 && this->areas_parser_ != 0)
            p = this->areas_parser_;
          else
          {
            const char* ts = ::phenotype_common::areas_2D_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->areas_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->areas_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->areas_parser_map_ != 0)
                p = static_cast< ::phenotype_common::areas_2D_pskel* > (
                  this->areas_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::phenotype_common::areas_2D_pskel* p =
          static_cast< ::phenotype_common::areas_2D_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::phenotype_common::areas_2D* tmp = p->post_areas_2D ();
            this->areas (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "fluid_flow_velocity" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->fluid_flow_velocity_parser_ != 0)
            p = this->fluid_flow_velocity_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->fluid_flow_velocity_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->fluid_flow_velocity_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->fluid_flow_velocity_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->fluid_flow_velocity_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->fluid_flow_velocity (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for surface_properties_pskel.
  //
  bool surface_properties_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool surface_properties_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void surface_properties_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void surface_properties_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void surface_properties_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "areas" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::phenotype_common::areas_3D_pskel* p = 0;

          if (t == 0 && this->areas_parser_ != 0)
            p = this->areas_parser_;
          else
          {
            const char* ts = ::phenotype_common::areas_3D_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->areas_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->areas_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->areas_parser_map_ != 0)
                p = static_cast< ::phenotype_common::areas_3D_pskel* > (
                  this->areas_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::phenotype_common::areas_3D_pskel* p =
          static_cast< ::phenotype_common::areas_3D_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::phenotype_common::areas_3D* tmp = p->post_areas_3D ();
            this->areas (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "fluid_flow_velocity" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->fluid_flow_velocity_parser_ != 0)
            p = this->fluid_flow_velocity_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->fluid_flow_velocity_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->fluid_flow_velocity_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->fluid_flow_velocity_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->fluid_flow_velocity_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->fluid_flow_velocity (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "mechanics" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::phenotype_common::mechanics_pskel* p = 0;

          if (t == 0 && this->mechanics_parser_ != 0)
            p = this->mechanics_parser_;
          else
          {
            const char* ts = ::phenotype_common::mechanics_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->mechanics_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->mechanics_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->mechanics_parser_map_ != 0)
                p = static_cast< ::phenotype_common::mechanics_pskel* > (
                  this->mechanics_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::phenotype_common::mechanics_pskel* p =
          static_cast< ::phenotype_common::mechanics_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::phenotype_common::mechanics* tmp = p->post_mechanics ();
            this->mechanics (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "permeability" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->permeability_parser_ != 0)
            p = this->permeability_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->permeability_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->permeability_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->permeability_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->permeability_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->permeability (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "surface_proteins" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::variables::list_of_variables_pskel* p = 0;

          if (t == 0 && this->surface_proteins_parser_ != 0)
            p = this->surface_proteins_parser_;
          else
          {
            const char* ts = ::variables::list_of_variables_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->surface_proteins_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->surface_proteins_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->surface_proteins_parser_map_ != 0)
                p = static_cast< ::variables::list_of_variables_pskel* > (
                  this->surface_proteins_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::variables::list_of_variables_pskel* p =
          static_cast< ::variables::list_of_variables_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::variables::list_of_variables* tmp = p->post_list_of_variables ();
            this->surface_proteins (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[5UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[5UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for volume_properties_pskel.
  //
  bool volume_properties_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool volume_properties_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void volume_properties_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void volume_properties_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void volume_properties_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "fluid_flow_velocity" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->fluid_flow_velocity_parser_ != 0)
            p = this->fluid_flow_velocity_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->fluid_flow_velocity_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->fluid_flow_velocity_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->fluid_flow_velocity_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->fluid_flow_velocity_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->fluid_flow_velocity (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "variables" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::variables::list_of_variables_pskel* p = 0;

          if (t == 0 && this->variables_parser_ != 0)
            p = this->variables_parser_;
          else
          {
            const char* ts = ::variables::list_of_variables_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->variables_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->variables_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->variables_parser_map_ != 0)
                p = static_cast< ::variables::list_of_variables_pskel* > (
                  this->variables_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::variables::list_of_variables_pskel* p =
          static_cast< ::variables::list_of_variables_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::variables::list_of_variables* tmp = p->post_list_of_variables ();
            this->variables (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "volumes" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::phenotype_common::volumes_pskel* p = 0;

          if (t == 0 && this->volumes_parser_ != 0)
            p = this->volumes_parser_;
          else
          {
            const char* ts = ::phenotype_common::volumes_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->volumes_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->volumes_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->volumes_parser_map_ != 0)
                p = static_cast< ::phenotype_common::volumes_pskel* > (
                  this->volumes_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::phenotype_common::volumes_pskel* p =
          static_cast< ::phenotype_common::volumes_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::phenotype_common::volumes* tmp = p->post_volumes ();
            this->volumes (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for vascular_network_pskel.
  //
  bool vascular_network_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "vascular_nodes" && ns.empty ())
          s = 0UL;
        else if (n == "boundary_nodes" && ns.empty ())
          s = 1UL;
        else if (n == "vascular_segments" && ns.empty ())
          s = 2UL;
        else if (n == "voxels" && ns.empty ())
          s = 3UL;
        else if (n == "custom" && ns.empty ())
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &vascular_network_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool vascular_network_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void vascular_network_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void vascular_network_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void vascular_network_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "vascular_nodes" && ns.empty ())
        {
          if (start)
          {
            ::vascular::list_of_vascular_nodes_pskel* p = 0;

            if (t == 0 && this->vascular_nodes_parser_ != 0)
              p = this->vascular_nodes_parser_;
            else
            {
              const char* ts = ::vascular::list_of_vascular_nodes_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->vascular_nodes_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->vascular_nodes_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->vascular_nodes_parser_map_ != 0)
                  p = static_cast< ::vascular::list_of_vascular_nodes_pskel* > (
                    this->vascular_nodes_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::vascular::list_of_vascular_nodes_pskel* p =
            static_cast< ::vascular::list_of_vascular_nodes_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::vascular::list_of_vascular_nodes* tmp = p->post_list_of_vascular_nodes ();
              this->vascular_nodes (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "boundary_nodes" && ns.empty ())
        {
          if (start)
          {
            ::vascular::list_of_boundary_nodes_pskel* p = 0;

            if (t == 0 && this->boundary_nodes_parser_ != 0)
              p = this->boundary_nodes_parser_;
            else
            {
              const char* ts = ::vascular::list_of_boundary_nodes_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->boundary_nodes_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->boundary_nodes_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->boundary_nodes_parser_map_ != 0)
                  p = static_cast< ::vascular::list_of_boundary_nodes_pskel* > (
                    this->boundary_nodes_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::vascular::list_of_boundary_nodes_pskel* p =
            static_cast< ::vascular::list_of_boundary_nodes_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::vascular::list_of_boundary_nodes* tmp = p->post_list_of_boundary_nodes ();
              this->boundary_nodes (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "vascular_segments" && ns.empty ())
        {
          if (start)
          {
            ::vascular::vascular_segments_pskel* p = 0;

            if (t == 0 && this->vascular_segments_parser_ != 0)
              p = this->vascular_segments_parser_;
            else
            {
              const char* ts = ::vascular::vascular_segments_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->vascular_segments_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->vascular_segments_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->vascular_segments_parser_map_ != 0)
                  p = static_cast< ::vascular::vascular_segments_pskel* > (
                    this->vascular_segments_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::vascular::vascular_segments_pskel* p =
            static_cast< ::vascular::vascular_segments_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::vascular::vascular_segments* tmp = p->post_vascular_segments ();
              this->vascular_segments (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "voxels" && ns.empty ())
        {
          if (start)
          {
            ::mesh::int_list_xpath_pskel* p = 0;

            if (t == 0 && this->voxels_parser_ != 0)
              p = this->voxels_parser_;
            else
            {
              const char* ts = ::mesh::int_list_xpath_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->voxels_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->voxels_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->voxels_parser_map_ != 0)
                  p = static_cast< ::mesh::int_list_xpath_pskel* > (
                    this->voxels_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::mesh::int_list_xpath_pskel* p =
            static_cast< ::mesh::int_list_xpath_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::mesh::int_list_xpath* tmp = p->post_int_list_xpath ();
              this->voxels (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace vascular
{
  // Attribute validation and dispatch functions for vascular_node_pskel.
  //
  bool vascular_node_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "boundary_node" && ns.empty ())
    {
      if (this->boundary_node_parser_)
      {
        this->boundary_node_parser_->pre ();

        this->boundary_node_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->boundary_node_parser_->_characters (s);

        if (!ctx.error_type ())
          this->boundary_node_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          bool tmp = this->boundary_node_parser_->post_boolean ();

          this->boundary_node (tmp);
        }
      }

      return true;
    }

    typedef ::mesh::node_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for boundary_node_pskel.
  //
  bool boundary_node_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "node_ID" && ns.empty ())
    {
      if (this->node_ID_parser_)
      {
        this->node_ID_parser_->pre ();

        this->node_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->node_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->node_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->node_ID_parser_->post_unsigned_int ();

          this->node_ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for boundary_conditions_pskel.
  //
  bool boundary_conditions_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for boundary_condition_pskel.
  //
  bool boundary_condition_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    if (n == "variable_ID" && ns.empty ())
    {
      if (this->variable_ID_parser_)
      {
        this->variable_ID_parser_->pre ();

        this->variable_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->variable_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->variable_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->variable_ID_parser_->post_unsigned_int ();

          this->variable_ID (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->variable_ID = true;
      return true;
    }

    return false;
  }

  void boundary_condition_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.variable_ID = false;
  }

  void boundary_condition_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.variable_ID)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for endpoint_pskel.
  //
  bool endpoint_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "node_ID" && ns.empty ())
    {
      if (this->node_ID_parser_)
      {
        this->node_ID_parser_->pre ();

        this->node_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->node_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->node_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->node_ID_parser_->post_unsigned_int ();

          this->node_ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for vascular_network_pskel.
  //
  bool vascular_network_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    if (n == "keywords" && ns.empty ())
    {
      if (this->keywords_parser_)
      {
        this->keywords_parser_->pre ();

        this->keywords_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->keywords_parser_->_characters (s);

        if (!ctx.error_type ())
          this->keywords_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->keywords_parser_->post_string ();

          this->keywords (tmp);
        }
      }

      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      return true;
    }

    return false;
  }
}

namespace vascular
{
}

// Begin epilogue.
//
//
// End epilogue.

