// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "phenotype_dataset-simpl.hpp"

#include <xsde/cxx/serializer/validating/string-common.hxx>

namespace phenotype_dataset
{
  // phenotype_dataset_simpl
  //

  void phenotype_dataset_simpl::
  pre (const ::phenotype_dataset::phenotype_dataset& x)
  {
    this->phenotype_dataset_simpl_state_.phenotype_dataset_ = &x;
    this->phenotype_dataset_simpl_state_.phenotype_ = 
    this->phenotype_dataset_simpl_state_.phenotype_dataset_->phenotype ().begin ();
    this->phenotype_dataset_simpl_state_.phenotype_end_ = 
    this->phenotype_dataset_simpl_state_.phenotype_dataset_->phenotype ().end ();
    this->phenotype_dataset_simpl_state_.cell_part_ = 
    this->phenotype_dataset_simpl_state_.phenotype_dataset_->cell_part ().begin ();
    this->phenotype_dataset_simpl_state_.cell_part_end_ = 
    this->phenotype_dataset_simpl_state_.phenotype_dataset_->cell_part ().end ();
  }

  bool phenotype_dataset_simpl::
  keywords_present ()
  {
    return this->phenotype_dataset_simpl_state_.phenotype_dataset_->keywords_present ();
  }

  ::std::string phenotype_dataset_simpl::
  keywords ()
  {
    return this->phenotype_dataset_simpl_state_.phenotype_dataset_->keywords ();
  }

  bool phenotype_dataset_simpl::
  ID_present ()
  {
    return this->phenotype_dataset_simpl_state_.phenotype_dataset_->ID_present ();
  }

  unsigned long long phenotype_dataset_simpl::
  ID ()
  {
    return this->phenotype_dataset_simpl_state_.phenotype_dataset_->ID ();
  }

  bool phenotype_dataset_simpl::
  microenvironment_present ()
  {
    return this->phenotype_dataset_simpl_state_.phenotype_dataset_->microenvironment_present ();
  }

  const ::microenvironment::microenvironment& phenotype_dataset_simpl::
  microenvironment ()
  {
    return this->phenotype_dataset_simpl_state_.phenotype_dataset_->microenvironment ();
  }

  bool phenotype_dataset_simpl::
  phenotype_next ()
  {
    return this->phenotype_dataset_simpl_state_.phenotype_ != 
    this->phenotype_dataset_simpl_state_.phenotype_end_;
  }

  const ::phenotype::phenotype& phenotype_dataset_simpl::
  phenotype ()
  {
    return *this->phenotype_dataset_simpl_state_.phenotype_++;
  }

  bool phenotype_dataset_simpl::
  cell_part_next ()
  {
    return this->phenotype_dataset_simpl_state_.cell_part_ != 
    this->phenotype_dataset_simpl_state_.cell_part_end_;
  }

  const ::phenotype_base::cell_parts& phenotype_dataset_simpl::
  cell_part ()
  {
    return *this->phenotype_dataset_simpl_state_.cell_part_++;
  }

  bool phenotype_dataset_simpl::
  custom_present ()
  {
    return this->phenotype_dataset_simpl_state_.phenotype_dataset_->custom_present ();
  }

  const ::common::custom& phenotype_dataset_simpl::
  custom ()
  {
    return this->phenotype_dataset_simpl_state_.phenotype_dataset_->custom ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

