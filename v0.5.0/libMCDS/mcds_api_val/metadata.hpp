// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef METADATA_HPP
#define METADATA_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "metadata-fwd.hpp"

#ifndef XSDE_DONT_INCLUDE_INLINE
#define XSDE_DONT_INCLUDE_INLINE

#include "common.hpp"

#undef XSDE_DONT_INCLUDE_INLINE
#else

#include "common.hpp"

#endif // XSDE_DONT_INCLUDE_INLINE

namespace metadata
{
  // URL (fixed-length)
  //
  class URL: public ::std::string
  {
    public:
    URL ();
  };

  // orcid-identifier (fixed-length)
  //
  class orcid_identifier
  {
    public:
    orcid_identifier ();

    orcid_identifier (const orcid_identifier&);
    orcid_identifier& operator= (const orcid_identifier&);

    ~orcid_identifier ();

    // path
    //
    bool
    path_present () const;

    void
    path_present (bool);

    const ::std::string&
    path () const;

    ::std::string&
    path ();

    void
    path (const ::std::string&);

    // given-names
    //
    bool
    given_names_present () const;

    void
    given_names_present (bool);

    const ::std::string&
    given_names () const;

    ::std::string&
    given_names ();

    void
    given_names (const ::std::string&);

    // family-name
    //
    bool
    family_name_present () const;

    void
    family_name_present (bool);

    const ::std::string&
    family_name () const;

    ::std::string&
    family_name ();

    void
    family_name (const ::std::string&);

    // email
    //
    bool
    email_present () const;

    void
    email_present (bool);

    const ::std::string&
    email () const;

    ::std::string&
    email ();

    void
    email (const ::std::string&);

    // url
    //
    bool
    url_present () const;

    void
    url_present (bool);

    const ::metadata::URL&
    url () const;

    ::metadata::URL&
    url ();

    void
    url (const ::metadata::URL&);

    // organization-name
    //
    bool
    organization_name_present () const;

    void
    organization_name_present (bool);

    const ::std::string&
    organization_name () const;

    ::std::string&
    organization_name ();

    void
    organization_name (const ::std::string&);

    // department-name
    //
    bool
    department_name_present () const;

    void
    department_name_present (bool);

    const ::std::string&
    department_name () const;

    ::std::string&
    department_name ();

    void
    department_name (const ::std::string&);

    private:
    ::std::string path_;
    unsigned char path_present_;
    ::std::string given_names_;
    unsigned char given_names_present_;
    ::std::string family_name_;
    unsigned char family_name_present_;
    ::std::string email_;
    unsigned char email_present_;
    ::metadata::URL url_;
    unsigned char url_present_;
    ::std::string organization_name_;
    unsigned char organization_name_present_;
    ::std::string department_name_;
    unsigned char department_name_present_;
  };

  // orcid-person (variable-length)
  //
  class orcid_person
  {
    private:
    orcid_person (const orcid_person&);
    orcid_person& operator= (const orcid_person&);

    public:
    orcid_person ();

    orcid_person*
    _clone () const;

    ~orcid_person ();

    // orcid-identifier
    //
    typedef ::xsde::cxx::hybrid::fix_sequence< ::metadata::orcid_identifier > orcid_identifier_sequence;
    typedef orcid_identifier_sequence::iterator orcid_identifier_iterator;
    typedef orcid_identifier_sequence::const_iterator orcid_identifier_const_iterator;

    const orcid_identifier_sequence&
    orcid_identifier () const;

    orcid_identifier_sequence&
    orcid_identifier ();

    void
    _copy (orcid_person&) const;

    private:
    orcid_identifier_sequence orcid_identifier_;
  };

  // classification (fixed-length)
  //
  class classification
  {
    public:
    classification ();

    classification (const classification&);
    classification& operator= (const classification&);

    ~classification ();

    // classification_number
    //
    const ::std::string&
    classification_number () const;

    ::std::string&
    classification_number ();

    void
    classification_number (const ::std::string&);

    // line
    //
    unsigned int
    line () const;

    unsigned int&
    line ();

    void
    line (unsigned int);

    // variant
    //
    unsigned int
    variant () const;

    unsigned int&
    variant ();

    void
    variant (unsigned int);

    // branch
    //
    unsigned int
    branch () const;

    unsigned int&
    branch ();

    void
    branch (unsigned int);

    // version
    //
    unsigned int
    version () const;

    unsigned int&
    version ();

    void
    version (unsigned int);

    private:
    ::std::string classification_number_;
    unsigned int line_;
    unsigned int variant_;
    unsigned int branch_;
    unsigned int version_;
  };

  // curation (variable-length)
  //
  class curation
  {
    private:
    curation (const curation&);
    curation& operator= (const curation&);

    public:
    curation ();

    curation*
    _clone () const;

    ~curation ();

    // curated
    //
    bool
    curated_present () const;

    void
    curated_present (bool);

    bool
    curated () const;

    bool&
    curated ();

    void
    curated (bool);

    // created
    //
    const ::xml_schema::date_time&
    created () const;

    ::xml_schema::date_time&
    created ();

    void
    created (const ::xml_schema::date_time&);

    // last_modified
    //
    const ::xml_schema::date_time&
    last_modified () const;

    ::xml_schema::date_time&
    last_modified ();

    void
    last_modified (const ::xml_schema::date_time&);

    // choice
    //
    enum choice_arm_tag
    {
      classification_tag,
      version_tag
    };

    choice_arm_tag
    choice_arm () const;

    void
    choice_arm (choice_arm_tag);

    // classification
    //
    const ::metadata::classification&
    classification () const;

    ::metadata::classification&
    classification ();

    void
    classification (const ::metadata::classification&);

    // version
    //
    const ::std::string&
    version () const;

    ::std::string&
    version ();

    void
    version (const ::std::string&);

    // creator
    //
    const ::metadata::orcid_person&
    creator () const;

    ::metadata::orcid_person&
    creator ();

    void
    creator (::metadata::orcid_person*);

    ::metadata::orcid_person*
    creator_detach ();

    // current_contact
    //
    const ::metadata::orcid_person&
    current_contact () const;

    ::metadata::orcid_person&
    current_contact ();

    void
    current_contact (::metadata::orcid_person*);

    ::metadata::orcid_person*
    current_contact_detach ();

    // curator
    //
    bool
    curator_present () const;

    const ::metadata::orcid_person&
    curator () const;

    ::metadata::orcid_person&
    curator ();

    void
    curator (::metadata::orcid_person*);

    ::metadata::orcid_person*
    curator_detach ();

    // last_modified_by
    //
    const ::metadata::orcid_person&
    last_modified_by () const;

    ::metadata::orcid_person&
    last_modified_by ();

    void
    last_modified_by (::metadata::orcid_person*);

    ::metadata::orcid_person*
    last_modified_by_detach ();

    void
    _copy (curation&) const;

    private:
    bool curated_;
    unsigned char curated_present_;
    ::xml_schema::date_time created_;
    ::xml_schema::date_time last_modified_;
    union
    {
      union
      {
        size_t align_;
        char data_[sizeof (::metadata::classification)];
      } classification_;
      union
      {
        size_t align_;
        char data_[sizeof (::std::string)];
      } version_;
    } choice_;
    choice_arm_tag choice_arm_;
    ::metadata::orcid_person* creator_;
    ::metadata::orcid_person* current_contact_;
    ::metadata::orcid_person* curator_;
    ::metadata::orcid_person* last_modified_by_;
  };

  // citation (variable-length)
  //
  class citation
  {
    private:
    citation (const citation&);
    citation& operator= (const citation&);

    public:
    citation ();

    citation*
    _clone () const;

    ~citation ();

    // text
    //
    bool
    text_present () const;

    void
    text_present (bool);

    const ::std::string&
    text () const;

    ::std::string&
    text ();

    void
    text (const ::std::string&);

    // DOI
    //
    bool
    DOI_present () const;

    void
    DOI_present (bool);

    const ::std::string&
    DOI () const;

    ::std::string&
    DOI ();

    void
    DOI (const ::std::string&);

    // URL
    //
    typedef ::xsde::cxx::hybrid::fix_sequence< ::metadata::URL > URL_sequence;
    typedef URL_sequence::iterator URL_iterator;
    typedef URL_sequence::const_iterator URL_const_iterator;

    const URL_sequence&
    URL () const;

    URL_sequence&
    URL ();

    // PMID
    //
    bool
    PMID_present () const;

    void
    PMID_present (bool);

    const ::std::string&
    PMID () const;

    ::std::string&
    PMID ();

    void
    PMID (const ::std::string&);

    // PMCID
    //
    bool
    PMCID_present () const;

    void
    PMCID_present (bool);

    const ::std::string&
    PMCID () const;

    ::std::string&
    PMCID ();

    void
    PMCID (const ::std::string&);

    // arXiv
    //
    bool
    arXiv_present () const;

    void
    arXiv_present (bool);

    const ::std::string&
    arXiv () const;

    ::std::string&
    arXiv ();

    void
    arXiv (const ::std::string&);

    // notes
    //
    bool
    notes_present () const;

    void
    notes_present (bool);

    const ::std::string&
    notes () const;

    ::std::string&
    notes ();

    void
    notes (const ::std::string&);

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (citation&) const;

    private:
    ::std::string text_;
    unsigned char text_present_;
    ::std::string DOI_;
    unsigned char DOI_present_;
    URL_sequence URL_;
    ::std::string PMID_;
    unsigned char PMID_present_;
    ::std::string PMCID_;
    unsigned char PMCID_present_;
    ::std::string arXiv_;
    unsigned char arXiv_present_;
    ::std::string notes_;
    unsigned char notes_present_;
    ::common::custom* custom_;
  };

  // data_origin (variable-length)
  //
  class data_origin
  {
    private:
    data_origin (const data_origin&);
    data_origin& operator= (const data_origin&);

    public:
    data_origin ();

    data_origin*
    _clone () const;

    ~data_origin ();

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    unsigned long long
    ID () const;

    unsigned long long&
    ID ();

    void
    ID (unsigned long long);

    // instrumentation_information
    //
    bool
    instrumentation_information_present () const;

    void
    instrumentation_information_present (bool);

    const ::std::string&
    instrumentation_information () const;

    ::std::string&
    instrumentation_information ();

    void
    instrumentation_information (const ::std::string&);

    // experimental_protocol
    //
    bool
    experimental_protocol_present () const;

    void
    experimental_protocol_present (bool);

    const ::std::string&
    experimental_protocol () const;

    ::std::string&
    experimental_protocol ();

    void
    experimental_protocol (const ::std::string&);

    // citation
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::metadata::citation > citation_sequence;
    typedef citation_sequence::iterator citation_iterator;
    typedef citation_sequence::const_iterator citation_const_iterator;

    const citation_sequence&
    citation () const;

    citation_sequence&
    citation ();

    // xpath
    //
    bool
    xpath_present () const;

    void
    xpath_present (bool);

    const ::std::string&
    xpath () const;

    ::std::string&
    xpath ();

    void
    xpath (const ::std::string&);

    // notes
    //
    bool
    notes_present () const;

    void
    notes_present (bool);

    const ::std::string&
    notes () const;

    ::std::string&
    notes ();

    void
    notes (const ::std::string&);

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (data_origin&) const;

    private:
    unsigned long long ID_;
    unsigned char ID_present_;
    ::std::string instrumentation_information_;
    unsigned char instrumentation_information_present_;
    ::std::string experimental_protocol_;
    unsigned char experimental_protocol_present_;
    citation_sequence citation_;
    ::std::string xpath_;
    unsigned char xpath_present_;
    ::std::string notes_;
    unsigned char notes_present_;
    ::common::custom* custom_;
  };

  // data_origins (variable-length)
  //
  class data_origins
  {
    private:
    data_origins (const data_origins&);
    data_origins& operator= (const data_origins&);

    public:
    data_origins ();

    data_origins*
    _clone () const;

    ~data_origins ();

    // data_origin
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::metadata::data_origin > data_origin_sequence;
    typedef data_origin_sequence::iterator data_origin_iterator;
    typedef data_origin_sequence::const_iterator data_origin_const_iterator;

    const data_origin_sequence&
    data_origin () const;

    data_origin_sequence&
    data_origin ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (data_origins&) const;

    private:
    data_origin_sequence data_origin_;
    ::common::custom* custom_;
  };

  // data_analysis (variable-length)
  //
  class data_analysis
  {
    private:
    data_analysis (const data_analysis&);
    data_analysis& operator= (const data_analysis&);

    public:
    data_analysis ();

    data_analysis*
    _clone () const;

    ~data_analysis ();

    // URL
    //
    bool
    URL_present () const;

    void
    URL_present (bool);

    const ::metadata::URL&
    URL () const;

    ::metadata::URL&
    URL ();

    void
    URL (const ::metadata::URL&);

    // citation
    //
    bool
    citation_present () const;

    const ::metadata::citation&
    citation () const;

    ::metadata::citation&
    citation ();

    void
    citation (::metadata::citation*);

    ::metadata::citation*
    citation_detach ();

    // software
    //
    bool
    software_present () const;

    const ::metadata::software&
    software () const;

    ::metadata::software&
    software ();

    void
    software (::metadata::software*);

    ::metadata::software*
    software_detach ();

    // xpath
    //
    bool
    xpath_present () const;

    void
    xpath_present (bool);

    const ::std::string&
    xpath () const;

    ::std::string&
    xpath ();

    void
    xpath (const ::std::string&);

    // notes
    //
    bool
    notes_present () const;

    void
    notes_present (bool);

    const ::std::string&
    notes () const;

    ::std::string&
    notes ();

    void
    notes (const ::std::string&);

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (data_analysis&) const;

    private:
    ::metadata::URL URL_;
    unsigned char URL_present_;
    ::metadata::citation* citation_;
    ::metadata::software* software_;
    ::std::string xpath_;
    unsigned char xpath_present_;
    ::std::string notes_;
    unsigned char notes_present_;
    ::common::custom* custom_;
  };

  // software (variable-length)
  //
  class software
  {
    private:
    software (const software&);
    software& operator= (const software&);

    public:
    software ();

    software*
    _clone () const;

    ~software ();

    // software_name
    //
    bool
    software_name_present () const;

    void
    software_name_present (bool);

    const ::std::string&
    software_name () const;

    ::std::string&
    software_name ();

    void
    software_name (const ::std::string&);

    // software_version
    //
    bool
    software_version_present () const;

    void
    software_version_present (bool);

    const ::std::string&
    software_version () const;

    ::std::string&
    software_version ();

    void
    software_version (const ::std::string&);

    // software_input_configuration
    //
    bool
    software_input_configuration_present () const;

    const ::common::custom&
    software_input_configuration () const;

    ::common::custom&
    software_input_configuration ();

    void
    software_input_configuration (::common::custom*);

    ::common::custom*
    software_input_configuration_detach ();

    // name
    //
    bool
    name_present () const;

    void
    name_present (bool);

    const ::std::string&
    name () const;

    ::std::string&
    name ();

    void
    name (const ::std::string&);

    // version
    //
    bool
    version_present () const;

    void
    version_present (bool);

    const ::std::string&
    version () const;

    ::std::string&
    version ();

    void
    version (const ::std::string&);

    // input_configuration
    //
    bool
    input_configuration_present () const;

    const ::common::custom&
    input_configuration () const;

    ::common::custom&
    input_configuration ();

    void
    input_configuration (::common::custom*);

    ::common::custom*
    input_configuration_detach ();

    // URL
    //
    bool
    URL_present () const;

    void
    URL_present (bool);

    const ::metadata::URL&
    URL () const;

    ::metadata::URL&
    URL ();

    void
    URL (const ::metadata::URL&);

    // creator
    //
    bool
    creator_present () const;

    const ::metadata::orcid_person&
    creator () const;

    ::metadata::orcid_person&
    creator ();

    void
    creator (::metadata::orcid_person*);

    ::metadata::orcid_person*
    creator_detach ();

    // citation
    //
    bool
    citation_present () const;

    const ::metadata::citation&
    citation () const;

    ::metadata::citation&
    citation ();

    void
    citation (::metadata::citation*);

    ::metadata::citation*
    citation_detach ();

    // user
    //
    bool
    user_present () const;

    const ::metadata::orcid_person&
    user () const;

    ::metadata::orcid_person&
    user ();

    void
    user (::metadata::orcid_person*);

    ::metadata::orcid_person*
    user_detach ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (software&) const;

    private:
    ::std::string software_name_;
    unsigned char software_name_present_;
    ::std::string software_version_;
    unsigned char software_version_present_;
    ::common::custom* software_input_configuration_;
    ::std::string name_;
    unsigned char name_present_;
    ::std::string version_;
    unsigned char version_present_;
    ::common::custom* input_configuration_;
    ::metadata::URL URL_;
    unsigned char URL_present_;
    ::metadata::orcid_person* creator_;
    ::metadata::citation* citation_;
    ::metadata::orcid_person* user_;
    ::common::custom* custom_;
  };

  // species (fixed-length)
  //
  class species: public ::std::string
  {
    public:
    species ();

    species (const species&);
    species& operator= (const species&);

    ~species ();

    // MeSH_ID
    //
    bool
    MeSH_ID_present () const;

    void
    MeSH_ID_present (bool);

    const ::std::string&
    MeSH_ID () const;

    ::std::string&
    MeSH_ID ();

    void
    MeSH_ID (const ::std::string&);

    private:
    ::std::string MeSH_ID_;
    unsigned char MeSH_ID_present_;
  };

  // disease (fixed-length)
  //
  class disease: public ::std::string
  {
    public:
    disease ();

    disease (const disease&);
    disease& operator= (const disease&);

    ~disease ();

    // EFO_ID
    //
    bool
    EFO_ID_present () const;

    void
    EFO_ID_present (bool);

    const ::std::string&
    EFO_ID () const;

    ::std::string&
    EFO_ID ();

    void
    EFO_ID (const ::std::string&);

    // DOID_ID
    //
    bool
    DOID_ID_present () const;

    void
    DOID_ID_present (bool);

    const ::std::string&
    DOID_ID () const;

    ::std::string&
    DOID_ID ();

    void
    DOID_ID (const ::std::string&);

    private:
    ::std::string EFO_ID_;
    unsigned char EFO_ID_present_;
    ::std::string DOID_ID_;
    unsigned char DOID_ID_present_;
  };

  // patient_derived (fixed-length)
  //
  class patient_derived: public ::xml_schema::boolean_base
  {
    public:
    patient_derived ();

    patient_derived (const patient_derived&);
    patient_derived& operator= (const patient_derived&);

    ~patient_derived ();

    // patient_ID
    //
    bool
    patient_ID_present () const;

    void
    patient_ID_present (bool);

    const ::std::string&
    patient_ID () const;

    ::std::string&
    patient_ID ();

    void
    patient_ID (const ::std::string&);

    private:
    ::std::string patient_ID_;
    unsigned char patient_ID_present_;
  };

  // cell_origin (variable-length)
  //
  class cell_origin
  {
    private:
    cell_origin (const cell_origin&);
    cell_origin& operator= (const cell_origin&);

    public:
    cell_origin ();

    cell_origin*
    _clone () const;

    ~cell_origin ();

    // BTO_ID
    //
    bool
    BTO_ID_present () const;

    void
    BTO_ID_present (bool);

    const ::std::string&
    BTO_ID () const;

    ::std::string&
    BTO_ID ();

    void
    BTO_ID (const ::std::string&);

    // CLO_ID
    //
    bool
    CLO_ID_present () const;

    void
    CLO_ID_present (bool);

    const ::std::string&
    CLO_ID () const;

    ::std::string&
    CLO_ID ();

    void
    CLO_ID (const ::std::string&);

    // species
    //
    bool
    species_present () const;

    void
    species_present (bool);

    const ::metadata::species&
    species () const;

    ::metadata::species&
    species ();

    void
    species (const ::metadata::species&);

    // strain
    //
    bool
    strain_present () const;

    void
    strain_present (bool);

    const ::std::string&
    strain () const;

    ::std::string&
    strain ();

    void
    strain (const ::std::string&);

    // organ
    //
    bool
    organ_present () const;

    void
    organ_present (bool);

    const ::std::string&
    organ () const;

    ::std::string&
    organ ();

    void
    organ (const ::std::string&);

    // disease
    //
    bool
    disease_present () const;

    void
    disease_present (bool);

    const ::metadata::disease&
    disease () const;

    ::metadata::disease&
    disease ();

    void
    disease (const ::metadata::disease&);

    // morphology
    //
    bool
    morphology_present () const;

    void
    morphology_present (bool);

    const ::std::string&
    morphology () const;

    ::std::string&
    morphology ();

    void
    morphology (const ::std::string&);

    // patient_derived
    //
    bool
    patient_derived_present () const;

    void
    patient_derived_present (bool);

    const ::metadata::patient_derived&
    patient_derived () const;

    ::metadata::patient_derived&
    patient_derived ();

    void
    patient_derived (const ::metadata::patient_derived&);

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (cell_origin&) const;

    private:
    ::std::string BTO_ID_;
    unsigned char BTO_ID_present_;
    ::std::string CLO_ID_;
    unsigned char CLO_ID_present_;
    ::metadata::species species_;
    unsigned char species_present_;
    ::std::string strain_;
    unsigned char strain_present_;
    ::std::string organ_;
    unsigned char organ_present_;
    ::metadata::disease disease_;
    unsigned char disease_present_;
    ::std::string morphology_;
    unsigned char morphology_present_;
    ::metadata::patient_derived patient_derived_;
    unsigned char patient_derived_present_;
    ::common::custom* custom_;
  };

  // MultiCellDB (fixed-length)
  //
  class MultiCellDB
  {
    public:
    MultiCellDB ();

    MultiCellDB (const MultiCellDB&);
    MultiCellDB& operator= (const MultiCellDB&);

    ~MultiCellDB ();

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    const ::std::string&
    ID () const;

    ::std::string&
    ID ();

    void
    ID (const ::std::string&);

    // name
    //
    bool
    name_present () const;

    void
    name_present (bool);

    const ::std::string&
    name () const;

    ::std::string&
    name ();

    void
    name (const ::std::string&);

    private:
    ::std::string ID_;
    unsigned char ID_present_;
    ::std::string name_;
    unsigned char name_present_;
  };

  // rights (variable-length)
  //
  class rights
  {
    private:
    rights (const rights&);
    rights& operator= (const rights&);

    public:
    rights ();

    rights*
    _clone () const;

    ~rights ();

    // license
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::metadata::license > license_sequence;
    typedef license_sequence::iterator license_iterator;
    typedef license_sequence::const_iterator license_const_iterator;

    const license_sequence&
    license () const;

    license_sequence&
    license ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (rights&) const;

    private:
    license_sequence license_;
    ::common::custom* custom_;
  };

  // license (variable-length)
  //
  class license
  {
    private:
    license (const license&);
    license& operator= (const license&);

    public:
    license ();

    license*
    _clone () const;

    ~license ();

    // LicenseDocument
    //
    const ::metadata::LicenseDocument&
    LicenseDocument () const;

    ::metadata::LicenseDocument&
    LicenseDocument ();

    void
    LicenseDocument (::metadata::LicenseDocument*);

    ::metadata::LicenseDocument*
    LicenseDocument_detach ();

    // notes
    //
    bool
    notes_present () const;

    void
    notes_present (bool);

    const ::std::string&
    notes () const;

    ::std::string&
    notes ();

    void
    notes (const ::std::string&);

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (license&) const;

    private:
    ::metadata::LicenseDocument* LicenseDocument_;
    ::std::string notes_;
    unsigned char notes_present_;
    ::common::custom* custom_;
  };

  // LicenseDocument (variable-length)
  //
  class LicenseDocument
  {
    private:
    LicenseDocument (const LicenseDocument&);
    LicenseDocument& operator= (const LicenseDocument&);

    public:
    LicenseDocument ();

    LicenseDocument*
    _clone () const;

    ~LicenseDocument ();

    // name
    //
    const ::std::string&
    name () const;

    ::std::string&
    name ();

    void
    name (const ::std::string&);

    // URL
    //
    bool
    URL_present () const;

    void
    URL_present (bool);

    const ::metadata::URL&
    URL () const;

    ::metadata::URL&
    URL ();

    void
    URL (const ::metadata::URL&);

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (LicenseDocument&) const;

    private:
    ::std::string name_;
    ::metadata::URL URL_;
    unsigned char URL_present_;
    ::common::custom* custom_;
  };

  // metadata (variable-length)
  //
  class metadata
  {
    private:
    metadata (const metadata&);
    metadata& operator= (const metadata&);

    public:
    metadata ();

    metadata*
    _clone () const;

    ~metadata ();

    // MultiCellDB
    //
    bool
    MultiCellDB_present () const;

    void
    MultiCellDB_present (bool);

    const ::metadata::MultiCellDB&
    MultiCellDB () const;

    ::metadata::MultiCellDB&
    MultiCellDB ();

    void
    MultiCellDB (const ::metadata::MultiCellDB&);

    // description
    //
    bool
    description_present () const;

    void
    description_present (bool);

    const ::std::string&
    description () const;

    ::std::string&
    description ();

    void
    description (const ::std::string&);

    // software
    //
    bool
    software_present () const;

    const ::metadata::software&
    software () const;

    ::metadata::software&
    software ();

    void
    software (::metadata::software*);

    ::metadata::software*
    software_detach ();

    // citation
    //
    bool
    citation_present () const;

    const ::metadata::citation&
    citation () const;

    ::metadata::citation&
    citation ();

    void
    citation (::metadata::citation*);

    ::metadata::citation*
    citation_detach ();

    // curation
    //
    bool
    curation_present () const;

    const ::metadata::curation&
    curation () const;

    ::metadata::curation&
    curation ();

    void
    curation (::metadata::curation*);

    ::metadata::curation*
    curation_detach ();

    // data_origins
    //
    bool
    data_origins_present () const;

    const ::metadata::data_origins&
    data_origins () const;

    ::metadata::data_origins&
    data_origins ();

    void
    data_origins (::metadata::data_origins*);

    ::metadata::data_origins*
    data_origins_detach ();

    // data_analysis
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::metadata::data_analysis > data_analysis_sequence;
    typedef data_analysis_sequence::iterator data_analysis_iterator;
    typedef data_analysis_sequence::const_iterator data_analysis_const_iterator;

    const data_analysis_sequence&
    data_analysis () const;

    data_analysis_sequence&
    data_analysis ();

    // rights
    //
    const ::metadata::rights&
    rights () const;

    ::metadata::rights&
    rights ();

    void
    rights (::metadata::rights*);

    ::metadata::rights*
    rights_detach ();

    // cell_origin
    //
    bool
    cell_origin_present () const;

    const ::metadata::cell_origin&
    cell_origin () const;

    ::metadata::cell_origin&
    cell_origin ();

    void
    cell_origin (::metadata::cell_origin*);

    ::metadata::cell_origin*
    cell_origin_detach ();

    // current_time
    //
    bool
    current_time_present () const;

    const ::common::units_decimal_nonnegative&
    current_time () const;

    ::common::units_decimal_nonnegative&
    current_time ();

    void
    current_time (::common::units_decimal_nonnegative*);

    ::common::units_decimal_nonnegative*
    current_time_detach ();

    // current_runtime
    //
    bool
    current_runtime_present () const;

    const ::common::units_decimal_nonnegative&
    current_runtime () const;

    ::common::units_decimal_nonnegative&
    current_runtime ();

    void
    current_runtime (::common::units_decimal_nonnegative*);

    ::common::units_decimal_nonnegative*
    current_runtime_detach ();

    // created
    //
    bool
    created_present () const;

    void
    created_present (bool);

    const ::xml_schema::date_time&
    created () const;

    ::xml_schema::date_time&
    created ();

    void
    created (const ::xml_schema::date_time&);

    // last_modified
    //
    bool
    last_modified_present () const;

    void
    last_modified_present (bool);

    const ::xml_schema::date_time&
    last_modified () const;

    ::xml_schema::date_time&
    last_modified ();

    void
    last_modified (const ::xml_schema::date_time&);

    // notes
    //
    bool
    notes_present () const;

    void
    notes_present (bool);

    const ::std::string&
    notes () const;

    ::std::string&
    notes ();

    void
    notes (const ::std::string&);

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (metadata&) const;

    private:
    ::metadata::MultiCellDB MultiCellDB_;
    unsigned char MultiCellDB_present_;
    ::std::string description_;
    unsigned char description_present_;
    ::metadata::software* software_;
    ::metadata::citation* citation_;
    ::metadata::curation* curation_;
    ::metadata::data_origins* data_origins_;
    data_analysis_sequence data_analysis_;
    ::metadata::rights* rights_;
    ::metadata::cell_origin* cell_origin_;
    ::common::units_decimal_nonnegative* current_time_;
    ::common::units_decimal_nonnegative* current_runtime_;
    ::xml_schema::date_time created_;
    unsigned char created_present_;
    ::xml_schema::date_time last_modified_;
    unsigned char last_modified_present_;
    ::std::string notes_;
    unsigned char notes_present_;
    ::common::custom* custom_;
  };
}

#ifndef XSDE_DONT_INCLUDE_INLINE

#include "common.ipp"

#endif // XSDE_DONT_INCLUDE_INLINE

#ifndef XSDE_DONT_INCLUDE_INLINE
#include "metadata.ipp"
#endif // XSDE_DONT_INCLUDE_INLINE

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // METADATA_HPP
