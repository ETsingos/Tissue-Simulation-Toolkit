// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef METADATA_SSKEL_HPP
#define METADATA_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace metadata
{
  class URL_sskel;
  class orcid_identifier_sskel;
  class orcid_person_sskel;
  class classification_sskel;
  class curation_sskel;
  class citation_sskel;
  class data_origin_sskel;
  class data_origins_sskel;
  class data_analysis_sskel;
  class software_sskel;
  class species_sskel;
  class disease_sskel;
  class patient_derived_sskel;
  class cell_origin_sskel;
  class MultiCellDB_sskel;
  class rights_sskel;
  class license_sskel;
  class LicenseDocument_sskel;
  class metadata_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map-load.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "metadata.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;
  using ::xsde::cxx::serializer::validating::serializer_imap_buckets;
  using ::xsde::cxx::serializer::validating::serializer_imap_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;
  typedef xsde::cxx::serializer::schema serializer_schema;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "common-sskel.hpp"

namespace metadata
{
  class URL_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::URL&) = 0;

    // virtual void
    // post ();

    // Constructor.
    //
    URL_sskel (::xml_schema::string_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::std::string&);

    protected:
    URL_sskel* URL_impl_;
    URL_sskel (URL_sskel*, void*);
  };

  class orcid_identifier_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::orcid_identifier&) = 0;

    // Elements.
    //
    virtual bool
    path_present ();

    virtual ::std::string
    path () = 0;

    virtual bool
    given_names_present ();

    virtual ::std::string
    given_names () = 0;

    virtual bool
    family_name_present ();

    virtual ::std::string
    family_name () = 0;

    virtual bool
    email_present ();

    virtual ::std::string
    email () = 0;

    virtual bool
    url_present ();

    virtual const ::metadata::URL&
    url () = 0;

    virtual bool
    organization_name_present ();

    virtual ::std::string
    organization_name () = 0;

    virtual bool
    department_name_present ();

    virtual ::std::string
    department_name () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* path */,
                 ::xml_schema::string_sskel& /* given-names */,
                 ::xml_schema::string_sskel& /* family-name */,
                 ::xml_schema::string_sskel& /* email */,
                 ::metadata::URL_sskel& /* url */,
                 ::xml_schema::string_sskel& /* organization-name */,
                 ::xml_schema::string_sskel& /* department-name */);

    void
    serializer_maps (::xml_schema::serializer_map& /* path */,
                     ::xml_schema::serializer_map& /* given-names */,
                     ::xml_schema::serializer_map& /* family-name */,
                     ::xml_schema::serializer_map& /* email */,
                     ::xml_schema::serializer_map& /* url */,
                     ::xml_schema::serializer_map& /* organization-name */,
                     ::xml_schema::serializer_map& /* department-name */);

    // Individual element serializers.
    //
    void
    path_serializer (::xml_schema::string_sskel&);

    void
    path_serializer (::xml_schema::serializer_map&);

    void
    given_names_serializer (::xml_schema::string_sskel&);

    void
    given_names_serializer (::xml_schema::serializer_map&);

    void
    family_name_serializer (::xml_schema::string_sskel&);

    void
    family_name_serializer (::xml_schema::serializer_map&);

    void
    email_serializer (::xml_schema::string_sskel&);

    void
    email_serializer (::xml_schema::serializer_map&);

    void
    url_serializer (::metadata::URL_sskel&);

    void
    url_serializer (::xml_schema::serializer_map&);

    void
    organization_name_serializer (::xml_schema::string_sskel&);

    void
    organization_name_serializer (::xml_schema::serializer_map&);

    void
    department_name_serializer (::xml_schema::string_sskel&);

    void
    department_name_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    orcid_identifier_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    orcid_identifier_sskel* orcid_identifier_impl_;
    orcid_identifier_sskel (orcid_identifier_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* path_serializer_;
    ::xml_schema::serializer_map* path_serializer_map_;

    ::xml_schema::string_sskel* given_names_serializer_;
    ::xml_schema::serializer_map* given_names_serializer_map_;

    ::xml_schema::string_sskel* family_name_serializer_;
    ::xml_schema::serializer_map* family_name_serializer_map_;

    ::xml_schema::string_sskel* email_serializer_;
    ::xml_schema::serializer_map* email_serializer_map_;

    ::metadata::URL_sskel* url_serializer_;
    ::xml_schema::serializer_map* url_serializer_map_;

    ::xml_schema::string_sskel* organization_name_serializer_;
    ::xml_schema::serializer_map* organization_name_serializer_map_;

    ::xml_schema::string_sskel* department_name_serializer_;
    ::xml_schema::serializer_map* department_name_serializer_map_;
  };

  class orcid_person_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::orcid_person&) = 0;

    // Elements.
    //
    virtual bool
    orcid_identifier_next () = 0;

    virtual const ::metadata::orcid_identifier&
    orcid_identifier () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::metadata::orcid_identifier_sskel& /* orcid-identifier */);

    void
    serializer_maps (::xml_schema::serializer_map& /* orcid-identifier */);

    // Individual element serializers.
    //
    void
    orcid_identifier_serializer (::metadata::orcid_identifier_sskel&);

    void
    orcid_identifier_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    orcid_person_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    orcid_person_sskel* orcid_person_impl_;
    orcid_person_sskel (orcid_person_sskel*, void*);

    protected:
    ::metadata::orcid_identifier_sskel* orcid_identifier_serializer_;
    ::xml_schema::serializer_map* orcid_identifier_serializer_map_;
  };

  class classification_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::classification&) = 0;

    // Elements.
    //
    virtual ::std::string
    classification_number () = 0;

    virtual unsigned int
    line () = 0;

    virtual unsigned int
    variant () = 0;

    virtual unsigned int
    branch () = 0;

    virtual unsigned int
    version () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* classification_number */,
                 ::xml_schema::unsigned_int_sskel& /* line */,
                 ::xml_schema::unsigned_int_sskel& /* variant */,
                 ::xml_schema::unsigned_int_sskel& /* branch */,
                 ::xml_schema::unsigned_int_sskel& /* version */);

    void
    serializer_maps (::xml_schema::serializer_map& /* classification_number */,
                     ::xml_schema::serializer_map& /* line */,
                     ::xml_schema::serializer_map& /* variant */,
                     ::xml_schema::serializer_map& /* branch */,
                     ::xml_schema::serializer_map& /* version */);

    // Individual element serializers.
    //
    void
    classification_number_serializer (::xml_schema::string_sskel&);

    void
    classification_number_serializer (::xml_schema::serializer_map&);

    void
    line_serializer (::xml_schema::unsigned_int_sskel&);

    void
    line_serializer (::xml_schema::serializer_map&);

    void
    variant_serializer (::xml_schema::unsigned_int_sskel&);

    void
    variant_serializer (::xml_schema::serializer_map&);

    void
    branch_serializer (::xml_schema::unsigned_int_sskel&);

    void
    branch_serializer (::xml_schema::serializer_map&);

    void
    version_serializer (::xml_schema::unsigned_int_sskel&);

    void
    version_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    classification_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    classification_sskel* classification_impl_;
    classification_sskel (classification_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* classification_number_serializer_;
    ::xml_schema::serializer_map* classification_number_serializer_map_;

    ::xml_schema::unsigned_int_sskel* line_serializer_;
    ::xml_schema::serializer_map* line_serializer_map_;

    ::xml_schema::unsigned_int_sskel* variant_serializer_;
    ::xml_schema::serializer_map* variant_serializer_map_;

    ::xml_schema::unsigned_int_sskel* branch_serializer_;
    ::xml_schema::serializer_map* branch_serializer_map_;

    ::xml_schema::unsigned_int_sskel* version_serializer_;
    ::xml_schema::serializer_map* version_serializer_map_;
  };

  class curation_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::curation&) = 0;

    // Attributes.
    //
    virtual bool
    curated_present ();

    virtual bool
    curated () = 0;

    virtual bool
    any_attribute_next ();

    virtual void
    any_attribute (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any_attribute ();

    // Elements.
    //
    virtual ::xml_schema::date_time
    created () = 0;

    virtual ::xml_schema::date_time
    last_modified () = 0;

    enum choice_arm_tag
    {
      classification_tag,
      version_tag
    };

    virtual choice_arm_tag
    choice_arm () = 0;

    virtual const ::metadata::classification&
    classification () = 0;

    virtual ::std::string
    version () = 0;

    virtual const ::metadata::orcid_person&
    creator () = 0;

    virtual const ::metadata::orcid_person&
    current_contact () = 0;

    virtual bool
    curator_present ();

    virtual const ::metadata::orcid_person&
    curator () = 0;

    virtual const ::metadata::orcid_person&
    last_modified_by () = 0;

    virtual bool
    any_next ();

    virtual void
    any (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any ();

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::boolean_sskel& /* curated */,
                 ::xml_schema::date_time_sskel& /* created */,
                 ::xml_schema::date_time_sskel& /* last_modified */,
                 ::metadata::classification_sskel& /* classification */,
                 ::xml_schema::string_sskel& /* version */,
                 ::metadata::orcid_person_sskel& /* creator */,
                 ::metadata::orcid_person_sskel& /* current_contact */,
                 ::metadata::orcid_person_sskel& /* curator */,
                 ::metadata::orcid_person_sskel& /* last_modified_by */);

    void
    serializer_maps (::xml_schema::serializer_map& /* created */,
                     ::xml_schema::serializer_map& /* last_modified */,
                     ::xml_schema::serializer_map& /* classification */,
                     ::xml_schema::serializer_map& /* version */,
                     ::xml_schema::serializer_map& /* creator */,
                     ::xml_schema::serializer_map& /* current_contact */,
                     ::xml_schema::serializer_map& /* curator */,
                     ::xml_schema::serializer_map& /* last_modified_by */);

    // Individual attribute serializers.
    //
    void
    curated_serializer (::xml_schema::boolean_sskel&);

    // Individual element serializers.
    //
    void
    created_serializer (::xml_schema::date_time_sskel&);

    void
    created_serializer (::xml_schema::serializer_map&);

    void
    last_modified_serializer (::xml_schema::date_time_sskel&);

    void
    last_modified_serializer (::xml_schema::serializer_map&);

    void
    classification_serializer (::metadata::classification_sskel&);

    void
    classification_serializer (::xml_schema::serializer_map&);

    void
    version_serializer (::xml_schema::string_sskel&);

    void
    version_serializer (::xml_schema::serializer_map&);

    void
    creator_serializer (::metadata::orcid_person_sskel&);

    void
    creator_serializer (::xml_schema::serializer_map&);

    void
    current_contact_serializer (::metadata::orcid_person_sskel&);

    void
    current_contact_serializer (::xml_schema::serializer_map&);

    void
    curator_serializer (::metadata::orcid_person_sskel&);

    void
    curator_serializer (::xml_schema::serializer_map&);

    void
    last_modified_by_serializer (::metadata::orcid_person_sskel&);

    void
    last_modified_by_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    curation_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    curation_sskel* curation_impl_;
    curation_sskel (curation_sskel*, void*);

    protected:
    ::xml_schema::boolean_sskel* curated_serializer_;
    ::xml_schema::date_time_sskel* created_serializer_;
    ::xml_schema::serializer_map* created_serializer_map_;

    ::xml_schema::date_time_sskel* last_modified_serializer_;
    ::xml_schema::serializer_map* last_modified_serializer_map_;

    ::metadata::classification_sskel* classification_serializer_;
    ::xml_schema::serializer_map* classification_serializer_map_;

    ::xml_schema::string_sskel* version_serializer_;
    ::xml_schema::serializer_map* version_serializer_map_;

    ::metadata::orcid_person_sskel* creator_serializer_;
    ::xml_schema::serializer_map* creator_serializer_map_;

    ::metadata::orcid_person_sskel* current_contact_serializer_;
    ::xml_schema::serializer_map* current_contact_serializer_map_;

    ::metadata::orcid_person_sskel* curator_serializer_;
    ::xml_schema::serializer_map* curator_serializer_map_;

    ::metadata::orcid_person_sskel* last_modified_by_serializer_;
    ::xml_schema::serializer_map* last_modified_by_serializer_map_;
  };

  class citation_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::citation&) = 0;

    // Elements.
    //
    virtual bool
    text_present ();

    virtual ::std::string
    text () = 0;

    virtual bool
    DOI_present ();

    virtual ::std::string
    DOI () = 0;

    virtual bool
    URL_next ();

    virtual const ::metadata::URL&
    URL () = 0;

    virtual bool
    PMID_present ();

    virtual ::std::string
    PMID () = 0;

    virtual bool
    PMCID_present ();

    virtual ::std::string
    PMCID () = 0;

    virtual bool
    arXiv_present ();

    virtual ::std::string
    arXiv () = 0;

    virtual bool
    notes_present ();

    virtual ::std::string
    notes () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* text */,
                 ::xml_schema::string_sskel& /* DOI */,
                 ::metadata::URL_sskel& /* URL */,
                 ::xml_schema::string_sskel& /* PMID */,
                 ::xml_schema::string_sskel& /* PMCID */,
                 ::xml_schema::string_sskel& /* arXiv */,
                 ::xml_schema::string_sskel& /* notes */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* text */,
                     ::xml_schema::serializer_map& /* DOI */,
                     ::xml_schema::serializer_map& /* URL */,
                     ::xml_schema::serializer_map& /* PMID */,
                     ::xml_schema::serializer_map& /* PMCID */,
                     ::xml_schema::serializer_map& /* arXiv */,
                     ::xml_schema::serializer_map& /* notes */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    text_serializer (::xml_schema::string_sskel&);

    void
    text_serializer (::xml_schema::serializer_map&);

    void
    DOI_serializer (::xml_schema::string_sskel&);

    void
    DOI_serializer (::xml_schema::serializer_map&);

    void
    URL_serializer (::metadata::URL_sskel&);

    void
    URL_serializer (::xml_schema::serializer_map&);

    void
    PMID_serializer (::xml_schema::string_sskel&);

    void
    PMID_serializer (::xml_schema::serializer_map&);

    void
    PMCID_serializer (::xml_schema::string_sskel&);

    void
    PMCID_serializer (::xml_schema::serializer_map&);

    void
    arXiv_serializer (::xml_schema::string_sskel&);

    void
    arXiv_serializer (::xml_schema::serializer_map&);

    void
    notes_serializer (::xml_schema::string_sskel&);

    void
    notes_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    citation_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    citation_sskel* citation_impl_;
    citation_sskel (citation_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* text_serializer_;
    ::xml_schema::serializer_map* text_serializer_map_;

    ::xml_schema::string_sskel* DOI_serializer_;
    ::xml_schema::serializer_map* DOI_serializer_map_;

    ::metadata::URL_sskel* URL_serializer_;
    ::xml_schema::serializer_map* URL_serializer_map_;

    ::xml_schema::string_sskel* PMID_serializer_;
    ::xml_schema::serializer_map* PMID_serializer_map_;

    ::xml_schema::string_sskel* PMCID_serializer_;
    ::xml_schema::serializer_map* PMCID_serializer_map_;

    ::xml_schema::string_sskel* arXiv_serializer_;
    ::xml_schema::serializer_map* arXiv_serializer_map_;

    ::xml_schema::string_sskel* notes_serializer_;
    ::xml_schema::serializer_map* notes_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class data_origin_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::data_origin&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned long long
    ID () = 0;

    // Elements.
    //
    virtual bool
    instrumentation_information_present ();

    virtual ::std::string
    instrumentation_information () = 0;

    virtual bool
    experimental_protocol_present ();

    virtual ::std::string
    experimental_protocol () = 0;

    virtual bool
    citation_next ();

    virtual const ::metadata::citation&
    citation () = 0;

    virtual bool
    xpath_present ();

    virtual ::std::string
    xpath () = 0;

    virtual bool
    notes_present ();

    virtual ::std::string
    notes () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_long_sskel& /* ID */,
                 ::xml_schema::string_sskel& /* instrumentation_information */,
                 ::xml_schema::string_sskel& /* experimental_protocol */,
                 ::metadata::citation_sskel& /* citation */,
                 ::xml_schema::string_sskel& /* xpath */,
                 ::xml_schema::string_sskel& /* notes */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* instrumentation_information */,
                     ::xml_schema::serializer_map& /* experimental_protocol */,
                     ::xml_schema::serializer_map& /* citation */,
                     ::xml_schema::serializer_map& /* xpath */,
                     ::xml_schema::serializer_map& /* notes */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_long_sskel&);

    // Individual element serializers.
    //
    void
    instrumentation_information_serializer (::xml_schema::string_sskel&);

    void
    instrumentation_information_serializer (::xml_schema::serializer_map&);

    void
    experimental_protocol_serializer (::xml_schema::string_sskel&);

    void
    experimental_protocol_serializer (::xml_schema::serializer_map&);

    void
    citation_serializer (::metadata::citation_sskel&);

    void
    citation_serializer (::xml_schema::serializer_map&);

    void
    xpath_serializer (::xml_schema::string_sskel&);

    void
    xpath_serializer (::xml_schema::serializer_map&);

    void
    notes_serializer (::xml_schema::string_sskel&);

    void
    notes_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_origin_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    data_origin_sskel* data_origin_impl_;
    data_origin_sskel (data_origin_sskel*, void*);

    protected:
    ::xml_schema::unsigned_long_sskel* ID_serializer_;
    ::xml_schema::string_sskel* instrumentation_information_serializer_;
    ::xml_schema::serializer_map* instrumentation_information_serializer_map_;

    ::xml_schema::string_sskel* experimental_protocol_serializer_;
    ::xml_schema::serializer_map* experimental_protocol_serializer_map_;

    ::metadata::citation_sskel* citation_serializer_;
    ::xml_schema::serializer_map* citation_serializer_map_;

    ::xml_schema::string_sskel* xpath_serializer_;
    ::xml_schema::serializer_map* xpath_serializer_map_;

    ::xml_schema::string_sskel* notes_serializer_;
    ::xml_schema::serializer_map* notes_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class data_origins_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::data_origins&) = 0;

    // Elements.
    //
    virtual bool
    data_origin_next () = 0;

    virtual const ::metadata::data_origin&
    data_origin () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::metadata::data_origin_sskel& /* data_origin */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* data_origin */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    data_origin_serializer (::metadata::data_origin_sskel&);

    void
    data_origin_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_origins_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    data_origins_sskel* data_origins_impl_;
    data_origins_sskel (data_origins_sskel*, void*);

    protected:
    ::metadata::data_origin_sskel* data_origin_serializer_;
    ::xml_schema::serializer_map* data_origin_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class data_analysis_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::data_analysis&) = 0;

    // Elements.
    //
    virtual bool
    URL_present ();

    virtual const ::metadata::URL&
    URL () = 0;

    virtual bool
    citation_present ();

    virtual const ::metadata::citation&
    citation () = 0;

    virtual bool
    software_present ();

    virtual const ::metadata::software&
    software () = 0;

    virtual bool
    xpath_present ();

    virtual ::std::string
    xpath () = 0;

    virtual bool
    notes_present ();

    virtual ::std::string
    notes () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::metadata::URL_sskel& /* URL */,
                 ::metadata::citation_sskel& /* citation */,
                 ::metadata::software_sskel& /* software */,
                 ::xml_schema::string_sskel& /* xpath */,
                 ::xml_schema::string_sskel& /* notes */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* URL */,
                     ::xml_schema::serializer_map& /* citation */,
                     ::xml_schema::serializer_map& /* software */,
                     ::xml_schema::serializer_map& /* xpath */,
                     ::xml_schema::serializer_map& /* notes */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    URL_serializer (::metadata::URL_sskel&);

    void
    URL_serializer (::xml_schema::serializer_map&);

    void
    citation_serializer (::metadata::citation_sskel&);

    void
    citation_serializer (::xml_schema::serializer_map&);

    void
    software_serializer (::metadata::software_sskel&);

    void
    software_serializer (::xml_schema::serializer_map&);

    void
    xpath_serializer (::xml_schema::string_sskel&);

    void
    xpath_serializer (::xml_schema::serializer_map&);

    void
    notes_serializer (::xml_schema::string_sskel&);

    void
    notes_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_analysis_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    data_analysis_sskel* data_analysis_impl_;
    data_analysis_sskel (data_analysis_sskel*, void*);

    protected:
    ::metadata::URL_sskel* URL_serializer_;
    ::xml_schema::serializer_map* URL_serializer_map_;

    ::metadata::citation_sskel* citation_serializer_;
    ::xml_schema::serializer_map* citation_serializer_map_;

    ::metadata::software_sskel* software_serializer_;
    ::xml_schema::serializer_map* software_serializer_map_;

    ::xml_schema::string_sskel* xpath_serializer_;
    ::xml_schema::serializer_map* xpath_serializer_map_;

    ::xml_schema::string_sskel* notes_serializer_;
    ::xml_schema::serializer_map* notes_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class software_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::software&) = 0;

    // Elements.
    //
    virtual bool
    software_name_present ();

    virtual ::std::string
    software_name () = 0;

    virtual bool
    software_version_present ();

    virtual ::std::string
    software_version () = 0;

    virtual bool
    software_input_configuration_present ();

    virtual const ::common::custom&
    software_input_configuration () = 0;

    virtual bool
    name_present ();

    virtual ::std::string
    name () = 0;

    virtual bool
    version_present ();

    virtual ::std::string
    version () = 0;

    virtual bool
    input_configuration_present ();

    virtual const ::common::custom&
    input_configuration () = 0;

    virtual bool
    URL_present ();

    virtual const ::metadata::URL&
    URL () = 0;

    virtual bool
    creator_present ();

    virtual const ::metadata::orcid_person&
    creator () = 0;

    virtual bool
    citation_present ();

    virtual const ::metadata::citation&
    citation () = 0;

    virtual bool
    user_present ();

    virtual const ::metadata::orcid_person&
    user () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* software_name */,
                 ::xml_schema::string_sskel& /* software_version */,
                 ::common::custom_sskel& /* software_input_configuration */,
                 ::xml_schema::string_sskel& /* name */,
                 ::xml_schema::string_sskel& /* version */,
                 ::common::custom_sskel& /* input_configuration */,
                 ::metadata::URL_sskel& /* URL */,
                 ::metadata::orcid_person_sskel& /* creator */,
                 ::metadata::citation_sskel& /* citation */,
                 ::metadata::orcid_person_sskel& /* user */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* software_name */,
                     ::xml_schema::serializer_map& /* software_version */,
                     ::xml_schema::serializer_map& /* software_input_configuration */,
                     ::xml_schema::serializer_map& /* name */,
                     ::xml_schema::serializer_map& /* version */,
                     ::xml_schema::serializer_map& /* input_configuration */,
                     ::xml_schema::serializer_map& /* URL */,
                     ::xml_schema::serializer_map& /* creator */,
                     ::xml_schema::serializer_map& /* citation */,
                     ::xml_schema::serializer_map& /* user */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    software_name_serializer (::xml_schema::string_sskel&);

    void
    software_name_serializer (::xml_schema::serializer_map&);

    void
    software_version_serializer (::xml_schema::string_sskel&);

    void
    software_version_serializer (::xml_schema::serializer_map&);

    void
    software_input_configuration_serializer (::common::custom_sskel&);

    void
    software_input_configuration_serializer (::xml_schema::serializer_map&);

    void
    name_serializer (::xml_schema::string_sskel&);

    void
    name_serializer (::xml_schema::serializer_map&);

    void
    version_serializer (::xml_schema::string_sskel&);

    void
    version_serializer (::xml_schema::serializer_map&);

    void
    input_configuration_serializer (::common::custom_sskel&);

    void
    input_configuration_serializer (::xml_schema::serializer_map&);

    void
    URL_serializer (::metadata::URL_sskel&);

    void
    URL_serializer (::xml_schema::serializer_map&);

    void
    creator_serializer (::metadata::orcid_person_sskel&);

    void
    creator_serializer (::xml_schema::serializer_map&);

    void
    citation_serializer (::metadata::citation_sskel&);

    void
    citation_serializer (::xml_schema::serializer_map&);

    void
    user_serializer (::metadata::orcid_person_sskel&);

    void
    user_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    software_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    software_sskel* software_impl_;
    software_sskel (software_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* software_name_serializer_;
    ::xml_schema::serializer_map* software_name_serializer_map_;

    ::xml_schema::string_sskel* software_version_serializer_;
    ::xml_schema::serializer_map* software_version_serializer_map_;

    ::common::custom_sskel* software_input_configuration_serializer_;
    ::xml_schema::serializer_map* software_input_configuration_serializer_map_;

    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::serializer_map* name_serializer_map_;

    ::xml_schema::string_sskel* version_serializer_;
    ::xml_schema::serializer_map* version_serializer_map_;

    ::common::custom_sskel* input_configuration_serializer_;
    ::xml_schema::serializer_map* input_configuration_serializer_map_;

    ::metadata::URL_sskel* URL_serializer_;
    ::xml_schema::serializer_map* URL_serializer_map_;

    ::metadata::orcid_person_sskel* creator_serializer_;
    ::xml_schema::serializer_map* creator_serializer_map_;

    ::metadata::citation_sskel* citation_serializer_;
    ::xml_schema::serializer_map* citation_serializer_map_;

    ::metadata::orcid_person_sskel* user_serializer_;
    ::xml_schema::serializer_map* user_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class species_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::species&) = 0;

    // Attributes.
    //
    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* MeSH_ID */);

    // Individual attribute serializers.
    //
    void
    MeSH_ID_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    species_sskel (::xml_schema::string_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::std::string&);

    virtual void
    _serialize_attributes ();

    protected:
    species_sskel* species_impl_;
    species_sskel (species_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* MeSH_ID_serializer_;
  };

  class disease_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::disease&) = 0;

    // Attributes.
    //
    virtual bool
    EFO_ID_present ();

    virtual ::std::string
    EFO_ID () = 0;

    virtual bool
    DOID_ID_present ();

    virtual ::std::string
    DOID_ID () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* EFO_ID */,
                 ::xml_schema::string_sskel& /* DOID_ID */);

    // Individual attribute serializers.
    //
    void
    EFO_ID_serializer (::xml_schema::string_sskel&);

    void
    DOID_ID_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    disease_sskel (::xml_schema::string_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::std::string&);

    virtual void
    _serialize_attributes ();

    protected:
    disease_sskel* disease_impl_;
    disease_sskel (disease_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* EFO_ID_serializer_;
    ::xml_schema::string_sskel* DOID_ID_serializer_;
  };

  class patient_derived_sskel: public ::xml_schema::boolean_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::patient_derived&) = 0;

    // Attributes.
    //
    virtual bool
    patient_ID_present ();

    virtual ::std::string
    patient_ID () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* patient_ID */);

    // Individual attribute serializers.
    //
    void
    patient_ID_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    patient_derived_sskel (::xml_schema::boolean_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (bool);

    virtual void
    _serialize_attributes ();

    protected:
    patient_derived_sskel* patient_derived_impl_;
    patient_derived_sskel (patient_derived_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* patient_ID_serializer_;
  };

  class cell_origin_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::cell_origin&) = 0;

    // Elements.
    //
    virtual bool
    BTO_ID_present ();

    virtual ::std::string
    BTO_ID () = 0;

    virtual bool
    CLO_ID_present ();

    virtual ::std::string
    CLO_ID () = 0;

    virtual bool
    species_present ();

    virtual const ::metadata::species&
    species () = 0;

    virtual bool
    strain_present ();

    virtual ::std::string
    strain () = 0;

    virtual bool
    organ_present ();

    virtual ::std::string
    organ () = 0;

    virtual bool
    disease_present ();

    virtual const ::metadata::disease&
    disease () = 0;

    virtual bool
    morphology_present ();

    virtual ::std::string
    morphology () = 0;

    virtual bool
    patient_derived_present ();

    virtual const ::metadata::patient_derived&
    patient_derived () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* BTO_ID */,
                 ::xml_schema::string_sskel& /* CLO_ID */,
                 ::metadata::species_sskel& /* species */,
                 ::xml_schema::string_sskel& /* strain */,
                 ::xml_schema::string_sskel& /* organ */,
                 ::metadata::disease_sskel& /* disease */,
                 ::xml_schema::string_sskel& /* morphology */,
                 ::metadata::patient_derived_sskel& /* patient_derived */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* BTO_ID */,
                     ::xml_schema::serializer_map& /* CLO_ID */,
                     ::xml_schema::serializer_map& /* species */,
                     ::xml_schema::serializer_map& /* strain */,
                     ::xml_schema::serializer_map& /* organ */,
                     ::xml_schema::serializer_map& /* disease */,
                     ::xml_schema::serializer_map& /* morphology */,
                     ::xml_schema::serializer_map& /* patient_derived */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    BTO_ID_serializer (::xml_schema::string_sskel&);

    void
    BTO_ID_serializer (::xml_schema::serializer_map&);

    void
    CLO_ID_serializer (::xml_schema::string_sskel&);

    void
    CLO_ID_serializer (::xml_schema::serializer_map&);

    void
    species_serializer (::metadata::species_sskel&);

    void
    species_serializer (::xml_schema::serializer_map&);

    void
    strain_serializer (::xml_schema::string_sskel&);

    void
    strain_serializer (::xml_schema::serializer_map&);

    void
    organ_serializer (::xml_schema::string_sskel&);

    void
    organ_serializer (::xml_schema::serializer_map&);

    void
    disease_serializer (::metadata::disease_sskel&);

    void
    disease_serializer (::xml_schema::serializer_map&);

    void
    morphology_serializer (::xml_schema::string_sskel&);

    void
    morphology_serializer (::xml_schema::serializer_map&);

    void
    patient_derived_serializer (::metadata::patient_derived_sskel&);

    void
    patient_derived_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_origin_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    cell_origin_sskel* cell_origin_impl_;
    cell_origin_sskel (cell_origin_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* BTO_ID_serializer_;
    ::xml_schema::serializer_map* BTO_ID_serializer_map_;

    ::xml_schema::string_sskel* CLO_ID_serializer_;
    ::xml_schema::serializer_map* CLO_ID_serializer_map_;

    ::metadata::species_sskel* species_serializer_;
    ::xml_schema::serializer_map* species_serializer_map_;

    ::xml_schema::string_sskel* strain_serializer_;
    ::xml_schema::serializer_map* strain_serializer_map_;

    ::xml_schema::string_sskel* organ_serializer_;
    ::xml_schema::serializer_map* organ_serializer_map_;

    ::metadata::disease_sskel* disease_serializer_;
    ::xml_schema::serializer_map* disease_serializer_map_;

    ::xml_schema::string_sskel* morphology_serializer_;
    ::xml_schema::serializer_map* morphology_serializer_map_;

    ::metadata::patient_derived_sskel* patient_derived_serializer_;
    ::xml_schema::serializer_map* patient_derived_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class MultiCellDB_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::MultiCellDB&) = 0;

    // Elements.
    //
    virtual bool
    ID_present ();

    virtual ::std::string
    ID () = 0;

    virtual bool
    name_present ();

    virtual ::std::string
    name () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* ID */,
                 ::xml_schema::string_sskel& /* name */);

    void
    serializer_maps (::xml_schema::serializer_map& /* ID */,
                     ::xml_schema::serializer_map& /* name */);

    // Individual element serializers.
    //
    void
    ID_serializer (::xml_schema::string_sskel&);

    void
    ID_serializer (::xml_schema::serializer_map&);

    void
    name_serializer (::xml_schema::string_sskel&);

    void
    name_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    MultiCellDB_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    MultiCellDB_sskel* MultiCellDB_impl_;
    MultiCellDB_sskel (MultiCellDB_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* ID_serializer_;
    ::xml_schema::serializer_map* ID_serializer_map_;

    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::serializer_map* name_serializer_map_;
  };

  class rights_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::rights&) = 0;

    // Elements.
    //
    virtual bool
    license_next () = 0;

    virtual const ::metadata::license&
    license () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::metadata::license_sskel& /* license */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* license */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    license_serializer (::metadata::license_sskel&);

    void
    license_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    rights_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    rights_sskel* rights_impl_;
    rights_sskel (rights_sskel*, void*);

    protected:
    ::metadata::license_sskel* license_serializer_;
    ::xml_schema::serializer_map* license_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class license_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::license&) = 0;

    // Elements.
    //
    virtual const ::metadata::LicenseDocument&
    LicenseDocument () = 0;

    virtual bool
    notes_present ();

    virtual ::std::string
    notes () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::metadata::LicenseDocument_sskel& /* LicenseDocument */,
                 ::xml_schema::string_sskel& /* notes */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* LicenseDocument */,
                     ::xml_schema::serializer_map& /* notes */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    LicenseDocument_serializer (::metadata::LicenseDocument_sskel&);

    void
    LicenseDocument_serializer (::xml_schema::serializer_map&);

    void
    notes_serializer (::xml_schema::string_sskel&);

    void
    notes_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    license_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    license_sskel* license_impl_;
    license_sskel (license_sskel*, void*);

    protected:
    ::metadata::LicenseDocument_sskel* LicenseDocument_serializer_;
    ::xml_schema::serializer_map* LicenseDocument_serializer_map_;

    ::xml_schema::string_sskel* notes_serializer_;
    ::xml_schema::serializer_map* notes_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class LicenseDocument_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::LicenseDocument&) = 0;

    // Elements.
    //
    virtual ::std::string
    name () = 0;

    virtual bool
    URL_present ();

    virtual const ::metadata::URL&
    URL () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* name */,
                 ::metadata::URL_sskel& /* URL */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* name */,
                     ::xml_schema::serializer_map& /* URL */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    name_serializer (::xml_schema::string_sskel&);

    void
    name_serializer (::xml_schema::serializer_map&);

    void
    URL_serializer (::metadata::URL_sskel&);

    void
    URL_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    LicenseDocument_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    LicenseDocument_sskel* LicenseDocument_impl_;
    LicenseDocument_sskel (LicenseDocument_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::serializer_map* name_serializer_map_;

    ::metadata::URL_sskel* URL_serializer_;
    ::xml_schema::serializer_map* URL_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class metadata_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::metadata::metadata&) = 0;

    // Elements.
    //
    virtual bool
    MultiCellDB_present ();

    virtual const ::metadata::MultiCellDB&
    MultiCellDB () = 0;

    virtual bool
    description_present ();

    virtual ::std::string
    description () = 0;

    virtual bool
    software_present ();

    virtual const ::metadata::software&
    software () = 0;

    virtual bool
    citation_present ();

    virtual const ::metadata::citation&
    citation () = 0;

    virtual bool
    curation_present ();

    virtual const ::metadata::curation&
    curation () = 0;

    virtual bool
    data_origins_present ();

    virtual const ::metadata::data_origins&
    data_origins () = 0;

    virtual bool
    data_analysis_next ();

    virtual const ::metadata::data_analysis&
    data_analysis () = 0;

    virtual const ::metadata::rights&
    rights () = 0;

    virtual bool
    cell_origin_present ();

    virtual const ::metadata::cell_origin&
    cell_origin () = 0;

    virtual bool
    current_time_present ();

    virtual const ::common::units_decimal_nonnegative&
    current_time () = 0;

    virtual bool
    current_runtime_present ();

    virtual const ::common::units_decimal_nonnegative&
    current_runtime () = 0;

    virtual bool
    created_present ();

    virtual ::xml_schema::date_time
    created () = 0;

    virtual bool
    last_modified_present ();

    virtual ::xml_schema::date_time
    last_modified () = 0;

    virtual bool
    notes_present ();

    virtual ::std::string
    notes () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::metadata::MultiCellDB_sskel& /* MultiCellDB */,
                 ::xml_schema::string_sskel& /* description */,
                 ::metadata::software_sskel& /* software */,
                 ::metadata::citation_sskel& /* citation */,
                 ::metadata::curation_sskel& /* curation */,
                 ::metadata::data_origins_sskel& /* data_origins */,
                 ::metadata::data_analysis_sskel& /* data_analysis */,
                 ::metadata::rights_sskel& /* rights */,
                 ::metadata::cell_origin_sskel& /* cell_origin */,
                 ::common::units_decimal_nonnegative_sskel& /* current_time */,
                 ::common::units_decimal_nonnegative_sskel& /* current_runtime */,
                 ::xml_schema::date_time_sskel& /* created */,
                 ::xml_schema::date_time_sskel& /* last_modified */,
                 ::xml_schema::string_sskel& /* notes */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* MultiCellDB */,
                     ::xml_schema::serializer_map& /* description */,
                     ::xml_schema::serializer_map& /* software */,
                     ::xml_schema::serializer_map& /* citation */,
                     ::xml_schema::serializer_map& /* curation */,
                     ::xml_schema::serializer_map& /* data_origins */,
                     ::xml_schema::serializer_map& /* data_analysis */,
                     ::xml_schema::serializer_map& /* rights */,
                     ::xml_schema::serializer_map& /* cell_origin */,
                     ::xml_schema::serializer_map& /* current_time */,
                     ::xml_schema::serializer_map& /* current_runtime */,
                     ::xml_schema::serializer_map& /* created */,
                     ::xml_schema::serializer_map& /* last_modified */,
                     ::xml_schema::serializer_map& /* notes */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    MultiCellDB_serializer (::metadata::MultiCellDB_sskel&);

    void
    MultiCellDB_serializer (::xml_schema::serializer_map&);

    void
    description_serializer (::xml_schema::string_sskel&);

    void
    description_serializer (::xml_schema::serializer_map&);

    void
    software_serializer (::metadata::software_sskel&);

    void
    software_serializer (::xml_schema::serializer_map&);

    void
    citation_serializer (::metadata::citation_sskel&);

    void
    citation_serializer (::xml_schema::serializer_map&);

    void
    curation_serializer (::metadata::curation_sskel&);

    void
    curation_serializer (::xml_schema::serializer_map&);

    void
    data_origins_serializer (::metadata::data_origins_sskel&);

    void
    data_origins_serializer (::xml_schema::serializer_map&);

    void
    data_analysis_serializer (::metadata::data_analysis_sskel&);

    void
    data_analysis_serializer (::xml_schema::serializer_map&);

    void
    rights_serializer (::metadata::rights_sskel&);

    void
    rights_serializer (::xml_schema::serializer_map&);

    void
    cell_origin_serializer (::metadata::cell_origin_sskel&);

    void
    cell_origin_serializer (::xml_schema::serializer_map&);

    void
    current_time_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    current_time_serializer (::xml_schema::serializer_map&);

    void
    current_runtime_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    current_runtime_serializer (::xml_schema::serializer_map&);

    void
    created_serializer (::xml_schema::date_time_sskel&);

    void
    created_serializer (::xml_schema::serializer_map&);

    void
    last_modified_serializer (::xml_schema::date_time_sskel&);

    void
    last_modified_serializer (::xml_schema::serializer_map&);

    void
    notes_serializer (::xml_schema::string_sskel&);

    void
    notes_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    metadata_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    metadata_sskel* metadata_impl_;
    metadata_sskel (metadata_sskel*, void*);

    protected:
    ::metadata::MultiCellDB_sskel* MultiCellDB_serializer_;
    ::xml_schema::serializer_map* MultiCellDB_serializer_map_;

    ::xml_schema::string_sskel* description_serializer_;
    ::xml_schema::serializer_map* description_serializer_map_;

    ::metadata::software_sskel* software_serializer_;
    ::xml_schema::serializer_map* software_serializer_map_;

    ::metadata::citation_sskel* citation_serializer_;
    ::xml_schema::serializer_map* citation_serializer_map_;

    ::metadata::curation_sskel* curation_serializer_;
    ::xml_schema::serializer_map* curation_serializer_map_;

    ::metadata::data_origins_sskel* data_origins_serializer_;
    ::xml_schema::serializer_map* data_origins_serializer_map_;

    ::metadata::data_analysis_sskel* data_analysis_serializer_;
    ::xml_schema::serializer_map* data_analysis_serializer_map_;

    ::metadata::rights_sskel* rights_serializer_;
    ::xml_schema::serializer_map* rights_serializer_map_;

    ::metadata::cell_origin_sskel* cell_origin_serializer_;
    ::xml_schema::serializer_map* cell_origin_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* current_time_serializer_;
    ::xml_schema::serializer_map* current_time_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* current_runtime_serializer_;
    ::xml_schema::serializer_map* current_runtime_serializer_map_;

    ::xml_schema::date_time_sskel* created_serializer_;
    ::xml_schema::serializer_map* created_serializer_map_;

    ::xml_schema::date_time_sskel* last_modified_serializer_;
    ::xml_schema::serializer_map* last_modified_serializer_map_;

    ::xml_schema::string_sskel* notes_serializer_;
    ::xml_schema::serializer_map* notes_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };
}

#include "metadata-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // METADATA_SSKEL_HPP
