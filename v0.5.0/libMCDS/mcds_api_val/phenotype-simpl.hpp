// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_SIMPL_HPP
#define PHENOTYPE_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define PHENOTYPE_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "phenotype-sskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-simpl.hpp"

#include "cell_cycle-simpl.hpp"

#include "phenotype_base-simpl.hpp"

namespace phenotype
{
  class phenotype_elements_simpl: public phenotype_elements_sskel
  {
    public:
    phenotype_elements_simpl ();

    virtual void
    pre (const ::phenotype::phenotype_elements&);

    // Elements.
    //
    virtual bool
    adhesion_present ();

    virtual const ::phenotype_common::adhesion&
    adhesion ();

    virtual bool
    geometrical_properties_present ();

    virtual const ::phenotype_common::geometrical_properties&
    geometrical_properties ();

    virtual bool
    mass_present ();

    virtual const ::phenotype_common::mass&
    mass ();

    virtual bool
    mechanics_present ();

    virtual const ::phenotype_common::mechanics&
    mechanics ();

    virtual bool
    motility_present ();

    virtual const ::phenotype_common::motility&
    motility ();

    virtual bool
    PKPD_present ();

    virtual const ::pkpd::PKPD&
    PKPD ();

    virtual bool
    timescale_present ();

    virtual const ::phenotype_base::expected_timescale&
    timescale ();

    virtual bool
    transport_processes_present ();

    virtual const ::phenotype_common::transport_processes&
    transport_processes ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    ::cell_cycle::cycles_and_deaths_simpl base_impl_;

    public:
    struct phenotype_elements_simpl_state
    {
      const ::phenotype::phenotype_elements* phenotype_elements_;
    };

    phenotype_elements_simpl_state phenotype_elements_simpl_state_;
  };

  class phenotype_simpl: public phenotype_sskel
  {
    public:
    phenotype_simpl ();

    virtual void
    pre (const ::phenotype::phenotype&);

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual const ::phenotype_base::phenotype_type&
    type ();

    public:
    ::phenotype::phenotype_elements_simpl base_impl_;

    public:
    struct phenotype_simpl_state
    {
      const ::phenotype::phenotype* phenotype_;
    };

    phenotype_simpl_state phenotype_simpl_state_;
  };
}

#ifdef PHENOTYPE_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PHENOTYPE_SIMPL_HPP
