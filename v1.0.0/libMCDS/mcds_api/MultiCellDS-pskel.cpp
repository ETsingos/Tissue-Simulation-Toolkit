// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "MultiCellDS-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

// MCDS_type_pskel
//

const char* MCDS_type_pskel::
_static_type ()
{
  return "MCDS_type";
}

const char* MCDS_type_pskel::
_dynamic_type () const
{
  return _static_type ();
}

static
const ::xsde::cxx::parser::validating::inheritance_map_entry
_xsde_MCDS_type_pskel_inheritance_map_entry_ (
  MCDS_type_pskel::_static_type (),
  ::xml_schema::string_pskel::_static_type ());

::std::string MCDS_type_pskel::
post_string ()
{
  assert (this->string_impl_);
  return this->string_impl_->post_string ();
}

const char* const MCDS_type_pskel::_xsde_MCDS_type_pskel_enums_[4UL] = 
{
  "cell_line",
  "snapshot/clinical",
  "snapshot/experiment",
  "snapshot/simulation"
};

// MultiCellDS_pskel
//

void MultiCellDS_pskel::
version (const ::std::string& x)
{
  if (this->MultiCellDS_impl_)
    this->MultiCellDS_impl_->version (x);
}

void MultiCellDS_pskel::
type (const ::MCDS_type& x)
{
  if (this->MultiCellDS_impl_)
    this->MultiCellDS_impl_->type (x);
}

void MultiCellDS_pskel::
cell_line (::cell_line::cell_line* x)
{
  if (this->MultiCellDS_impl_)
    this->MultiCellDS_impl_->cell_line (x);
}

void MultiCellDS_pskel::
metadata (::metadata::metadata* x)
{
  if (this->MultiCellDS_impl_)
    this->MultiCellDS_impl_->metadata (x);
}

void MultiCellDS_pskel::
microenvironment (::microenvironment::microenvironment* x)
{
  if (this->MultiCellDS_impl_)
    this->MultiCellDS_impl_->microenvironment (x);
}

void MultiCellDS_pskel::
cellular_information (::cell::cellular_information* x)
{
  if (this->MultiCellDS_impl_)
    this->MultiCellDS_impl_->cellular_information (x);
}

void MultiCellDS_pskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_stack_.clear ();

  if (this->version_parser_)
    this->version_parser_->_reset ();

  if (this->type_parser_)
    this->type_parser_->_reset ();

  this->resetting_ = true;

  if (this->cell_line_parser_)
    this->cell_line_parser_->_reset ();

  if (this->cell_line_parser_map_)
    this->cell_line_parser_map_->reset ();

  if (this->metadata_parser_)
    this->metadata_parser_->_reset ();

  if (this->metadata_parser_map_)
    this->metadata_parser_map_->reset ();

  if (this->microenvironment_parser_)
    this->microenvironment_parser_->_reset ();

  if (this->microenvironment_parser_map_)
    this->microenvironment_parser_map_->reset ();

  if (this->cellular_information_parser_)
    this->cellular_information_parser_->_reset ();

  if (this->cellular_information_parser_map_)
    this->cellular_information_parser_map_->reset ();

  this->resetting_ = false;
}

const char* MultiCellDS_pskel::
_static_type ()
{
  return "MultiCellDS";
}

const char* MultiCellDS_pskel::
_dynamic_type () const
{
  return _static_type ();
}

#include <assert.h>

// Element validation and dispatch functions for MultiCellDS_pskel.
//
bool MultiCellDS_pskel::
_start_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n,
                     const char* t)
{
  XSDE_UNUSED (t);

  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (base::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL && !ctx.error_type ())
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "cell_line" && ns.empty ())
        s = 0UL;
      else if (n == "metadata" && ns.empty ())
        s = 1UL;
      else if (n == "microenvironment" && ns.empty ())
        s = 2UL;
      else if (n == "cellular_information" && ns.empty ())
        s = 3UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &MultiCellDS_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool MultiCellDS_pskel::
_end_element_impl (const ::xsde::cxx::ro_string& ns,
                   const ::xsde::cxx::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (!base::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void MultiCellDS_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void MultiCellDS_pskel::
_post_e_validate ()
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xsde::cxx::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

    if (ctx.error_type ())
      return;

    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void MultiCellDS_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            const char* t,
            bool start)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  XSDE_UNUSED (t);
  XSDE_UNUSED (ctx);

  switch (state)
  {
    case 0UL:
    {
      if (n == "cell_line" && ns.empty ())
      {
        if (start)
        {
          ::cell_line::cell_line_pskel* p = 0;

          if (t == 0 && this->cell_line_parser_ != 0)
            p = this->cell_line_parser_;
          else
          {
            const char* ts = ::cell_line::cell_line_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->cell_line_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->cell_line_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->cell_line_parser_map_ != 0)
                p = static_cast< ::cell_line::cell_line_pskel* > (
                  this->cell_line_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::cell_line::cell_line_pskel* p =
          static_cast< ::cell_line::cell_line_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::cell_line::cell_line* tmp = p->post_cell_line ();
            this->cell_line (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "metadata" && ns.empty ())
      {
        if (start)
        {
          ::metadata::metadata_pskel* p = 0;

          if (t == 0 && this->metadata_parser_ != 0)
            p = this->metadata_parser_;
          else
          {
            const char* ts = ::metadata::metadata_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->metadata_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->metadata_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->metadata_parser_map_ != 0)
                p = static_cast< ::metadata::metadata_pskel* > (
                  this->metadata_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::metadata::metadata_pskel* p =
          static_cast< ::metadata::metadata_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::metadata::metadata* tmp = p->post_metadata ();
            this->metadata (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "microenvironment" && ns.empty ())
      {
        if (start)
        {
          ::microenvironment::microenvironment_pskel* p = 0;

          if (t == 0 && this->microenvironment_parser_ != 0)
            p = this->microenvironment_parser_;
          else
          {
            const char* ts = ::microenvironment::microenvironment_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->microenvironment_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->microenvironment_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->microenvironment_parser_map_ != 0)
                p = static_cast< ::microenvironment::microenvironment_pskel* > (
                  this->microenvironment_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::microenvironment::microenvironment_pskel* p =
          static_cast< ::microenvironment::microenvironment_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::microenvironment::microenvironment* tmp = p->post_microenvironment ();
            this->microenvironment (tmp);
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "cellular_information" && ns.empty ())
      {
        if (start)
        {
          ::cell::cellular_information_pskel* p = 0;

          if (t == 0 && this->cellular_information_parser_ != 0)
            p = this->cellular_information_parser_;
          else
          {
            const char* ts = ::cell::cellular_information_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->cellular_information_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->cellular_information_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->cellular_information_parser_map_ != 0)
                p = static_cast< ::cell::cellular_information_pskel* > (
                  this->cellular_information_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::cell::cellular_information_pskel* p =
          static_cast< ::cell::cellular_information_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::cell::cellular_information* tmp = p->post_cellular_information ();
            this->cellular_information (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Attribute validation and dispatch functions for MultiCellDS_pskel.
//
bool MultiCellDS_pskel::
_attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                           const ::xsde::cxx::ro_string& n,
                           const ::xsde::cxx::ro_string& s)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  if (n == "version" && ns.empty ())
  {
    if (this->version_parser_)
    {
      this->version_parser_->pre ();

      this->version_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->version_parser_->_characters (s);

      if (!ctx.error_type ())
        this->version_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->version_parser_->post_string ();

        this->version (tmp);
      }
    }

    return true;
  }

  if (n == "type" && ns.empty ())
  {
    if (this->type_parser_)
    {
      this->type_parser_->pre ();

      this->type_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->type_parser_->_characters (s);

      if (!ctx.error_type ())
        this->type_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::MCDS_type& tmp = this->type_parser_->post_MCDS_type ();

        this->type (tmp);
      }
    }

    return true;
  }

  return false;
}

// Begin epilogue.
//
//
// End epilogue.

