// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_PIMPL_HPP
#define CELL_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define CELL_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "cell-pskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-pimpl.hpp"

#include "phenotype_dataset-pimpl.hpp"

#include "mesh-pimpl.hpp"

#include "cell_line-pimpl.hpp"

#include "state-pimpl.hpp"

namespace cell
{
  class population_definition_pimpl: public population_definition_pskel
  {
    public:
    population_definition_pimpl (bool = false);

    ~population_definition_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    virtual void
    name (const ::std::string&);

    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    phenotype_dataset (::phenotype_dataset::phenotype_dataset*);

    virtual void
    custom (::common::custom*);

    virtual ::cell::population_definition*
    post_population_definition ();

    public:
    void
    pre_impl (::cell::population_definition*);

    public:
    struct population_definition_pimpl_state
    {
      ::cell::population_definition* population_definition_;
    };

    population_definition_pimpl_state population_definition_pimpl_state_;
    bool population_definition_pimpl_base_;
  };

  class population_definitions_pimpl: public population_definitions_pskel
  {
    public:
    population_definitions_pimpl (bool = false);

    ~population_definitions_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    population_definition (::cell::population_definition*);

    virtual void
    custom (::common::custom*);

    virtual ::cell::population_definitions*
    post_population_definitions ();

    public:
    void
    pre_impl (::cell::population_definitions*);

    public:
    struct population_definitions_pimpl_state
    {
      ::cell::population_definitions* population_definitions_;
    };

    population_definitions_pimpl_state population_definitions_pimpl_state_;
    bool population_definitions_pimpl_base_;
  };

  class cell_pimpl: public cell_pskel
  {
    public:
    cell_pimpl (bool = false);

    ~cell_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    phenotype_dataset (::phenotype_dataset::phenotype_dataset*);

    virtual void
    state (::state::state*);

    virtual void
    custom (::common::custom*);

    virtual ::cell::cell*
    post_cell ();

    public:
    void
    pre_impl (::cell::cell*);

    public:
    struct cell_pimpl_state
    {
      ::cell::cell* cell_;
    };

    cell_pimpl_state cell_pimpl_state_;
    bool cell_pimpl_base_;
  };

  class cell_population_individual_pimpl: public cell_population_individual_pskel
  {
    public:
    cell_population_individual_pimpl (bool = false);

    ~cell_population_individual_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    type (const ::std::string&);

    virtual void
    population_ID (unsigned int);

    // Elements.
    //
    virtual void
    cell (::cell::cell*);

    virtual void
    custom (::common::custom*);

    virtual ::cell::cell_population_individual*
    post_cell_population_individual ();

    public:
    void
    pre_impl (::cell::cell_population_individual*);

    public:
    struct cell_population_individual_pimpl_state
    {
      ::cell::cell_population_individual* cell_population_individual_;
    };

    cell_population_individual_pimpl_state cell_population_individual_pimpl_state_;
    bool cell_population_individual_pimpl_base_;
  };

  class cell_population_aggregate_pimpl: public cell_population_aggregate_pskel
  {
    public:
    cell_population_aggregate_pimpl (bool = false);

    ~cell_population_aggregate_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    type (const ::std::string&);

    virtual void
    population_ID (unsigned int);

    // Elements.
    //
    virtual void
    value (::common::units_decimal*);

    virtual void
    sequence_present ();

    virtual void
    phenotype_dataset (::phenotype_dataset::phenotype_dataset*);

    virtual void
    state (::state::state*);

    virtual void
    custom (::common::custom*);

    virtual ::cell::cell_population_aggregate*
    post_cell_population_aggregate ();

    public:
    void
    pre_impl (::cell::cell_population_aggregate*);

    public:
    struct cell_population_aggregate_pimpl_state
    {
      ::cell::cell_population_aggregate* cell_population_aggregate_;
    };

    cell_population_aggregate_pimpl_state cell_population_aggregate_pimpl_state_;
    bool cell_population_aggregate_pimpl_base_;
  };

  class population_vector_pimpl: public population_vector_pskel
  {
    public:
    population_vector_pimpl (bool = false);

    ~population_vector_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    voxel_ID (::common::unsigned_int_list*);

    // Elements.
    //
    virtual void
    value (::common::units_double_list*);

    virtual void
    cell_population (::cell::cell_population_aggregate*);

    virtual void
    custom (::common::custom*);

    virtual ::cell::population_vector*
    post_population_vector ();

    public:
    void
    pre_impl (::cell::population_vector*);

    public:
    struct population_vector_pimpl_state
    {
      ::cell::population_vector* population_vector_;
    };

    population_vector_pimpl_state population_vector_pimpl_state_;
    bool population_vector_pimpl_base_;
  };

  class cell_populations_pimpl: public cell_populations_pskel
  {
    public:
    cell_populations_pimpl (bool = false);

    ~cell_populations_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    population_vector (::cell::population_vector*);

    virtual void
    cell_population (::cell::cell_population_individual*);

    virtual ::cell::cell_populations*
    post_cell_populations ();

    public:
    void
    pre_impl (::cell::cell_populations*);

    public:
    struct cell_populations_pimpl_state
    {
      ::cell::cell_populations* cell_populations_;
    };

    cell_populations_pimpl_state cell_populations_pimpl_state_;
    bool cell_populations_pimpl_base_;
  };

  class cellular_information_pimpl: public cellular_information_pskel
  {
    public:
    cellular_information_pimpl (bool = false);

    ~cellular_information_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    DCLs (::cell_line::DCLs*);

    virtual void
    population_definitions (::cell::population_definitions*);

    virtual void
    mesh (::mesh::mesh*);

    virtual void
    cell_populations (::cell::cell_populations*);

    virtual ::cell::cellular_information*
    post_cellular_information ();

    public:
    void
    pre_impl (::cell::cellular_information*);

    public:
    struct cellular_information_pimpl_state
    {
      ::cell::cellular_information* cellular_information_;
    };

    cellular_information_pimpl_state cellular_information_pimpl_state_;
    bool cellular_information_pimpl_base_;
  };
}

#ifdef CELL_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // CELL_PIMPL_HPP
