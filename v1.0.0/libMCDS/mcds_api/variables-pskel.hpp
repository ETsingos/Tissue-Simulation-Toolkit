// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VARIABLES_PSKEL_HPP
#define VARIABLES_PSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
namespace variables
{
  class amount_type_pskel;
  class variable_pskel;
  class material_amount_pskel;
  class physical_parameter_set_pskel;
  class physical_conditions_pskel;
  class system_pskel;
  class conditions_pskel;
  class experimental_conditions_pskel;
  class data_vector_pskel;
  class data_pskel;
  class list_of_variables_pskel;
  class transition_threshold_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/parser/map.hxx>
#include <xsde/cxx/parser/substitution-map-callback.hxx>
#include <xsde/cxx/parser/substitution-map-load.hxx>
#include <xsde/cxx/parser/validating/inheritance-map-load.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "variables.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser map interface and default implementation.
  //
  using ::xsde::cxx::parser::parser_map;
  using ::xsde::cxx::parser::parser_map_impl;

  // Parser substitution map callack.
  //
  using ::xsde::cxx::parser::parser_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::parser::parser_smap_buckets;
  using ::xsde::cxx::parser::parser_smap_elements;
  using ::xsde::cxx::parser::validating::parser_imap_buckets;
  using ::xsde::cxx::parser::validating::parser_imap_elements;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "common-pskel.hpp"

namespace variables
{
  class amount_type_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::variables::amount_type
    post_amount_type () = 0;

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    amount_type_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    amount_type_pskel* amount_type_impl_;
    amount_type_pskel (amount_type_pskel*, void*);

    protected:
    static const char* const _xsde_amount_type_pskel_enums_[12UL];
  };

  class variable_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    name (const ::std::string&);

    virtual void
    units (const ::std::string&);

    virtual void
    ID (unsigned long long);

    virtual void
    type (const ::variables::amount_type&);

    virtual void
    ChEBI_ID (const ::std::string&);

    virtual void
    MeSH_ID (const ::std::string&);

    virtual void
    DrugBank_ID (const ::std::string&);

    virtual void
    GMO_ID (const ::std::string&);

    virtual void
    GO_ID (const ::std::string&);

    virtual void
    UniProt_ID (const ::std::string&);

    virtual void
    PR_ID (const ::std::string&);

    // Elements.
    //
    virtual void
    material_amount (::variables::material_amount*);

    virtual void
    physical_parameter_set (::variables::physical_parameter_set*);

    virtual ::variables::variable*
    post_variable () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* units */,
             ::xml_schema::unsigned_long_pskel& /* ID */,
             ::variables::amount_type_pskel& /* type */,
             ::xml_schema::string_pskel& /* ChEBI_ID */,
             ::xml_schema::string_pskel& /* MeSH_ID */,
             ::xml_schema::string_pskel& /* DrugBank_ID */,
             ::xml_schema::string_pskel& /* GMO_ID */,
             ::xml_schema::string_pskel& /* GO_ID */,
             ::xml_schema::string_pskel& /* UniProt_ID */,
             ::xml_schema::string_pskel& /* PR_ID */,
             ::variables::material_amount_pskel& /* material_amount */,
             ::variables::physical_parameter_set_pskel& /* physical_parameter_set */);

    void
    parser_maps (::xml_schema::parser_map& /* material_amount */,
                 ::xml_schema::parser_map& /* physical_parameter_set */);

    // Individual attribute parsers.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    units_parser (::xml_schema::string_pskel&);

    void
    ID_parser (::xml_schema::unsigned_long_pskel&);

    void
    type_parser (::variables::amount_type_pskel&);

    void
    ChEBI_ID_parser (::xml_schema::string_pskel&);

    void
    MeSH_ID_parser (::xml_schema::string_pskel&);

    void
    DrugBank_ID_parser (::xml_schema::string_pskel&);

    void
    GMO_ID_parser (::xml_schema::string_pskel&);

    void
    GO_ID_parser (::xml_schema::string_pskel&);

    void
    UniProt_ID_parser (::xml_schema::string_pskel&);

    void
    PR_ID_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    material_amount_parser (::variables::material_amount_pskel&);

    void
    material_amount_parser (::xml_schema::parser_map&);

    void
    physical_parameter_set_parser (::variables::physical_parameter_set_pskel&);

    void
    physical_parameter_set_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    variable_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    variable_pskel* variable_impl_;
    variable_pskel (variable_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    virtual bool
    _attribute_impl_phase_two (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* units_parser_;
    ::xml_schema::unsigned_long_pskel* ID_parser_;
    ::variables::amount_type_pskel* type_parser_;
    ::xml_schema::string_pskel* ChEBI_ID_parser_;
    ::xml_schema::string_pskel* MeSH_ID_parser_;
    ::xml_schema::string_pskel* DrugBank_ID_parser_;
    ::xml_schema::string_pskel* GMO_ID_parser_;
    ::xml_schema::string_pskel* GO_ID_parser_;
    ::xml_schema::string_pskel* UniProt_ID_parser_;
    ::xml_schema::string_pskel* PR_ID_parser_;
    ::variables::material_amount_pskel* material_amount_parser_;
    ::xml_schema::parser_map* material_amount_parser_map_;

    ::variables::physical_parameter_set_pskel* physical_parameter_set_parser_;
    ::xml_schema::parser_map* physical_parameter_set_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::variables::variable_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class material_amount_pskel: public ::common::units_decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::variables::amount_type&);

    virtual void
    scale_units (const ::std::string&);

    virtual ::variables::material_amount*
    post_material_amount () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */,
             ::variables::amount_type_pskel& /* type */,
             ::xml_schema::string_pskel& /* scale_units */);

    // Individual attribute parsers.
    //
    void
    type_parser (::variables::amount_type_pskel&);

    void
    scale_units_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    material_amount_pskel (::common::units_decimal_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_decimal*
    post_units_decimal ();

    protected:
    material_amount_pskel* material_amount_impl_;
    material_amount_pskel (material_amount_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::variables::amount_type_pskel* type_parser_;
    ::xml_schema::string_pskel* scale_units_parser_;
  };

  class physical_parameter_set_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    conditions (::variables::physical_conditions*);

    virtual void
    diffusion_coefficient (::common::units_decimal*);

    virtual void
    decay_rate (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::variables::physical_parameter_set*
    post_physical_parameter_set () = 0;

    // Parser construction API.
    //
    void
    parsers (::variables::physical_conditions_pskel& /* conditions */,
             ::common::units_decimal_pskel& /* diffusion_coefficient */,
             ::common::units_decimal_pskel& /* decay_rate */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* conditions */,
                 ::xml_schema::parser_map& /* diffusion_coefficient */,
                 ::xml_schema::parser_map& /* decay_rate */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    conditions_parser (::variables::physical_conditions_pskel&);

    void
    conditions_parser (::xml_schema::parser_map&);

    void
    diffusion_coefficient_parser (::common::units_decimal_pskel&);

    void
    diffusion_coefficient_parser (::xml_schema::parser_map&);

    void
    decay_rate_parser (::common::units_decimal_pskel&);

    void
    decay_rate_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    physical_parameter_set_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    physical_parameter_set_pskel* physical_parameter_set_impl_;
    physical_parameter_set_pskel (physical_parameter_set_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::variables::physical_conditions_pskel* conditions_parser_;
    ::xml_schema::parser_map* conditions_parser_map_;

    ::common::units_decimal_pskel* diffusion_coefficient_parser_;
    ::xml_schema::parser_map* diffusion_coefficient_parser_map_;

    ::common::units_decimal_pskel* decay_rate_parser_;
    ::xml_schema::parser_map* decay_rate_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::variables::physical_parameter_set_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[4UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class physical_conditions_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    temperature (::common::units_decimal*);

    virtual void
    mechanical_pressure (::common::units_decimal*);

    virtual void
    acidity (::common::units_decimal*);

    virtual void
    pH (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::variables::physical_conditions*
    post_physical_conditions () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_pskel& /* temperature */,
             ::common::units_decimal_pskel& /* mechanical_pressure */,
             ::common::units_decimal_pskel& /* acidity */,
             ::common::units_decimal_pskel& /* pH */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* temperature */,
                 ::xml_schema::parser_map& /* mechanical_pressure */,
                 ::xml_schema::parser_map& /* acidity */,
                 ::xml_schema::parser_map& /* pH */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    temperature_parser (::common::units_decimal_pskel&);

    void
    temperature_parser (::xml_schema::parser_map&);

    void
    mechanical_pressure_parser (::common::units_decimal_pskel&);

    void
    mechanical_pressure_parser (::xml_schema::parser_map&);

    void
    acidity_parser (::common::units_decimal_pskel&);

    void
    acidity_parser (::xml_schema::parser_map&);

    void
    pH_parser (::common::units_decimal_pskel&);

    void
    pH_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    physical_conditions_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    physical_conditions_pskel* physical_conditions_impl_;
    physical_conditions_pskel (physical_conditions_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_pskel* temperature_parser_;
    ::xml_schema::parser_map* temperature_parser_map_;

    ::common::units_decimal_pskel* mechanical_pressure_parser_;
    ::xml_schema::parser_map* mechanical_pressure_parser_map_;

    ::common::units_decimal_pskel* acidity_parser_;
    ::xml_schema::parser_map* acidity_parser_map_;

    ::common::units_decimal_pskel* pH_parser_;
    ::xml_schema::parser_map* pH_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::variables::physical_conditions_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[5UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class system_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::variables::system
    post_system () = 0;

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    system_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    system_pskel* system_impl_;
    system_pskel (system_pskel*, void*);

    protected:
    static const char* const _xsde_system_pskel_enums_[4UL];
  };

  class conditions_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::variables::conditions
    post_conditions () = 0;

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    conditions_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    conditions_pskel* conditions_impl_;
    conditions_pskel (conditions_pskel*, void*);

    protected:
    static const char* const _xsde_conditions_pskel_enums_[3UL];
  };

  class experimental_conditions_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::std::string&);

    // Elements.
    //
    virtual void
    dimensionality (unsigned short);

    virtual void
    system (const ::variables::system&);

    virtual void
    conditions (const ::variables::conditions&);

    virtual void
    surface_variable (::variables::variable*);

    virtual ::variables::experimental_conditions*
    post_experimental_conditions () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* type */,
             ::xml_schema::unsigned_short_pskel& /* dimensionality */,
             ::variables::system_pskel& /* system */,
             ::variables::conditions_pskel& /* conditions */,
             ::variables::variable_pskel& /* surface_variable */);

    void
    parser_maps (::xml_schema::parser_map& /* dimensionality */,
                 ::xml_schema::parser_map& /* system */,
                 ::xml_schema::parser_map& /* conditions */,
                 ::xml_schema::parser_map& /* surface_variable */);

    // Individual attribute parsers.
    //
    void
    type_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    dimensionality_parser (::xml_schema::unsigned_short_pskel&);

    void
    dimensionality_parser (::xml_schema::parser_map&);

    void
    system_parser (::variables::system_pskel&);

    void
    system_parser (::xml_schema::parser_map&);

    void
    conditions_parser (::variables::conditions_pskel&);

    void
    conditions_parser (::xml_schema::parser_map&);

    void
    surface_variable_parser (::variables::variable_pskel&);

    void
    surface_variable_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    experimental_conditions_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    experimental_conditions_pskel* experimental_conditions_impl_;
    experimental_conditions_pskel (experimental_conditions_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* type_parser_;
    ::xml_schema::unsigned_short_pskel* dimensionality_parser_;
    ::xml_schema::parser_map* dimensionality_parser_map_;

    ::variables::system_pskel* system_parser_;
    ::xml_schema::parser_map* system_parser_map_;

    ::variables::conditions_pskel* conditions_parser_;
    ::xml_schema::parser_map* conditions_parser_map_;

    ::variables::variable_pskel* surface_variable_parser_;
    ::xml_schema::parser_map* surface_variable_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::variables::experimental_conditions_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class data_vector_pskel: public ::common::units_double_list_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    voxel_ID (::common::unsigned_int_list*);

    virtual ::variables::data_vector*
    post_data_vector () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::double_pskel& /* double_list item */,
             ::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */,
             ::common::unsigned_int_list_pskel& /* voxel_ID */);

    // Individual attribute parsers.
    //
    void
    voxel_ID_parser (::common::unsigned_int_list_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_vector_pskel (::common::units_double_list_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_double_list*
    post_units_double_list ();

    protected:
    data_vector_pskel* data_vector_impl_;
    data_vector_pskel (data_vector_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::common::unsigned_int_list_pskel* voxel_ID_parser_;
  };

  class data_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::common::data_storage_formats&);

    // Elements.
    //
    virtual void
    filename (const ::std::string&);

    virtual void
    data_vector (::variables::data_vector*);

    virtual void
    custom (::common::custom*);

    virtual ::variables::data*
    post_data () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::data_storage_formats_pskel& /* type */,
             ::xml_schema::string_pskel& /* filename */,
             ::variables::data_vector_pskel& /* data_vector */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* filename */,
                 ::xml_schema::parser_map& /* data_vector */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    type_parser (::common::data_storage_formats_pskel&);

    // Individual element parsers.
    //
    void
    filename_parser (::xml_schema::string_pskel&);

    void
    filename_parser (::xml_schema::parser_map&);

    void
    data_vector_parser (::variables::data_vector_pskel&);

    void
    data_vector_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    data_pskel* data_impl_;
    data_pskel (data_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::common::data_storage_formats_pskel* type_parser_;
    ::xml_schema::string_pskel* filename_parser_;
    ::xml_schema::parser_map* filename_parser_map_;

    ::variables::data_vector_pskel* data_vector_parser_;
    ::xml_schema::parser_map* data_vector_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::variables::data_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class list_of_variables_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    variable (::variables::variable*);

    virtual void
    physical_parameter_set (::variables::physical_parameter_set*);

    virtual void
    custom (::common::custom*);

    virtual ::variables::list_of_variables*
    post_list_of_variables () = 0;

    // Parser construction API.
    //
    void
    parsers (::variables::variable_pskel& /* variable */,
             ::variables::physical_parameter_set_pskel& /* physical_parameter_set */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* variable */,
                 ::xml_schema::parser_map& /* physical_parameter_set */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    variable_parser (::variables::variable_pskel&);

    void
    variable_parser (::xml_schema::parser_map&);

    void
    physical_parameter_set_parser (::variables::physical_parameter_set_pskel&);

    void
    physical_parameter_set_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    list_of_variables_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    list_of_variables_pskel* list_of_variables_impl_;
    list_of_variables_pskel (list_of_variables_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::variables::variable_pskel* variable_parser_;
    ::xml_schema::parser_map* variable_parser_map_;

    ::variables::physical_parameter_set_pskel* physical_parameter_set_parser_;
    ::xml_schema::parser_map* physical_parameter_set_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::variables::list_of_variables_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class transition_threshold_pskel: public ::common::transition_threshold_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ChEBI_ID (const ::std::string&);

    virtual void
    MeSH_ID (const ::std::string&);

    virtual void
    DrugBank_ID (const ::std::string&);

    virtual void
    GMO_ID (const ::std::string&);

    virtual void
    GO_ID (const ::std::string&);

    virtual void
    UniProt_ID (const ::std::string&);

    virtual void
    PR_ID (const ::std::string&);

    virtual ::variables::transition_threshold*
    post_transition_threshold1 () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */,
             ::xml_schema::string_pskel& /* quantity */,
             ::common::threshold_type_pskel& /* type */,
             ::xml_schema::unsigned_long_pskel& /* variable_ID */,
             ::xml_schema::string_pskel& /* ChEBI_ID */,
             ::xml_schema::string_pskel& /* MeSH_ID */,
             ::xml_schema::string_pskel& /* DrugBank_ID */,
             ::xml_schema::string_pskel& /* GMO_ID */,
             ::xml_schema::string_pskel& /* GO_ID */,
             ::xml_schema::string_pskel& /* UniProt_ID */,
             ::xml_schema::string_pskel& /* PR_ID */);

    // Individual attribute parsers.
    //
    void
    ChEBI_ID_parser (::xml_schema::string_pskel&);

    void
    MeSH_ID_parser (::xml_schema::string_pskel&);

    void
    DrugBank_ID_parser (::xml_schema::string_pskel&);

    void
    GMO_ID_parser (::xml_schema::string_pskel&);

    void
    GO_ID_parser (::xml_schema::string_pskel&);

    void
    UniProt_ID_parser (::xml_schema::string_pskel&);

    void
    PR_ID_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    transition_threshold_pskel (::common::transition_threshold_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::transition_threshold*
    post_transition_threshold ();

    protected:
    transition_threshold_pskel* transition_threshold_impl_;
    transition_threshold_pskel (transition_threshold_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* ChEBI_ID_parser_;
    ::xml_schema::string_pskel* MeSH_ID_parser_;
    ::xml_schema::string_pskel* DrugBank_ID_parser_;
    ::xml_schema::string_pskel* GMO_ID_parser_;
    ::xml_schema::string_pskel* GO_ID_parser_;
    ::xml_schema::string_pskel* UniProt_ID_parser_;
    ::xml_schema::string_pskel* PR_ID_parser_;
  };
}

#include "variables-pskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // VARIABLES_PSKEL_HPP
