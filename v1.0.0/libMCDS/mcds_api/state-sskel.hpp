// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef STATE_SSKEL_HPP
#define STATE_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_SERIALIZER_VALIDATION
#error the XSD/e runtime uses validation while the generated code does not (reconfigure the runtime or remove --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace state
{
  class phase_name_sskel;
  class phase_sskel;
  class orientation_formalism_sskel;
  class orientation_sskel;
  class cell_parts_sskel;
  class state_sskel;
  class adhered_cell_sskel;
  class list_of_adhered_cells_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>

#include <xsde/cxx/serializer/non-validating/serializer.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "state.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::non_validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::non_validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::non_validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::non_validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::non_validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::non_validating::byte_sskel;
  using ::xsde::cxx::serializer::non_validating::byte_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::non_validating::short_sskel;
  using ::xsde::cxx::serializer::non_validating::short_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::non_validating::int_sskel;
  using ::xsde::cxx::serializer::non_validating::int_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::non_validating::long_sskel;
  using ::xsde::cxx::serializer::non_validating::long_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::non_validating::integer_sskel;
  using ::xsde::cxx::serializer::non_validating::integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::boolean_sskel;
  using ::xsde::cxx::serializer::non_validating::boolean_simpl;

  using ::xsde::cxx::serializer::non_validating::float_sskel;
  using ::xsde::cxx::serializer::non_validating::float_simpl;

  using ::xsde::cxx::serializer::non_validating::double_sskel;
  using ::xsde::cxx::serializer::non_validating::double_simpl;

  using ::xsde::cxx::serializer::non_validating::decimal_sskel;
  using ::xsde::cxx::serializer::non_validating::decimal_simpl;

  using ::xsde::cxx::serializer::non_validating::string_sskel;
  using ::xsde::cxx::serializer::non_validating::string_simpl;

  using ::xsde::cxx::serializer::non_validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::non_validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::non_validating::token_sskel;
  using ::xsde::cxx::serializer::non_validating::token_simpl;

  using ::xsde::cxx::serializer::non_validating::name_sskel;
  using ::xsde::cxx::serializer::non_validating::name_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::non_validating::ncname_sskel;
  using ::xsde::cxx::serializer::non_validating::ncname_simpl;

  using ::xsde::cxx::serializer::non_validating::language_sskel;
  using ::xsde::cxx::serializer::non_validating::language_simpl;

  using ::xsde::cxx::serializer::non_validating::id_sskel;
  using ::xsde::cxx::serializer::non_validating::id_simpl;

  using ::xsde::cxx::serializer::non_validating::idref_sskel;
  using ::xsde::cxx::serializer::non_validating::idref_simpl;

  using ::xsde::cxx::serializer::non_validating::idrefs_sskel;
  using ::xsde::cxx::serializer::non_validating::idrefs_simpl;

  using ::xsde::cxx::serializer::non_validating::uri_sskel;
  using ::xsde::cxx::serializer::non_validating::uri_simpl;

  using ::xsde::cxx::serializer::non_validating::qname_sskel;
  using ::xsde::cxx::serializer::non_validating::qname_simpl;

  using ::xsde::cxx::serializer::non_validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::date_sskel;
  using ::xsde::cxx::serializer::non_validating::date_simpl;

  using ::xsde::cxx::serializer::non_validating::date_time_sskel;
  using ::xsde::cxx::serializer::non_validating::date_time_simpl;

  using ::xsde::cxx::serializer::non_validating::duration_sskel;
  using ::xsde::cxx::serializer::non_validating::duration_simpl;

  using ::xsde::cxx::serializer::non_validating::gday_sskel;
  using ::xsde::cxx::serializer::non_validating::gday_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::non_validating::time_sskel;
  using ::xsde::cxx::serializer::non_validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "common-sskel.hpp"

#include "phenotype_common-sskel.hpp"

#include "mesh-sskel.hpp"

namespace state
{
  class phase_name_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::state::phase_name&) = 0;

    // Attributes.
    //
    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* GO_ID */);

    // Individual attribute serializers.
    //
    void
    GO_ID_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    phase_name_sskel (::xml_schema::string_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::std::string&);

    virtual void
    _serialize_attributes ();

    protected:
    phase_name_sskel* phase_name_impl_;
    phase_name_sskel (phase_name_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* GO_ID_serializer_;
  };

  class phase_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::state::phase&) = 0;

    // Elements.
    //
    virtual bool
    model_name_present ();

    virtual ::std::string
    model_name () = 0;

    virtual bool
    phase_name_present ();

    virtual const ::state::phase_name&
    phase_name () = 0;

    virtual bool
    cell_cycle_model_index_present ();

    virtual unsigned short
    cell_cycle_model_index () = 0;

    virtual bool
    cell_cycle_phase_index_present ();

    virtual unsigned short
    cell_cycle_phase_index () = 0;

    virtual bool
    elapsed_time_present ();

    virtual const ::common::units_decimal&
    elapsed_time () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* model_name */,
                 ::state::phase_name_sskel& /* phase_name */,
                 ::xml_schema::unsigned_short_sskel& /* cell_cycle_model_index */,
                 ::xml_schema::unsigned_short_sskel& /* cell_cycle_phase_index */,
                 ::common::units_decimal_sskel& /* elapsed_time */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* model_name */,
                     ::xml_schema::serializer_map& /* phase_name */,
                     ::xml_schema::serializer_map& /* cell_cycle_model_index */,
                     ::xml_schema::serializer_map& /* cell_cycle_phase_index */,
                     ::xml_schema::serializer_map& /* elapsed_time */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    model_name_serializer (::xml_schema::string_sskel&);

    void
    model_name_serializer (::xml_schema::serializer_map&);

    void
    phase_name_serializer (::state::phase_name_sskel&);

    void
    phase_name_serializer (::xml_schema::serializer_map&);

    void
    cell_cycle_model_index_serializer (::xml_schema::unsigned_short_sskel&);

    void
    cell_cycle_model_index_serializer (::xml_schema::serializer_map&);

    void
    cell_cycle_phase_index_serializer (::xml_schema::unsigned_short_sskel&);

    void
    cell_cycle_phase_index_serializer (::xml_schema::serializer_map&);

    void
    elapsed_time_serializer (::common::units_decimal_sskel&);

    void
    elapsed_time_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    phase_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    phase_sskel* phase_impl_;
    phase_sskel (phase_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* model_name_serializer_;
    ::xml_schema::serializer_map* model_name_serializer_map_;

    ::state::phase_name_sskel* phase_name_serializer_;
    ::xml_schema::serializer_map* phase_name_serializer_map_;

    ::xml_schema::unsigned_short_sskel* cell_cycle_model_index_serializer_;
    ::xml_schema::serializer_map* cell_cycle_model_index_serializer_map_;

    ::xml_schema::unsigned_short_sskel* cell_cycle_phase_index_serializer_;
    ::xml_schema::serializer_map* cell_cycle_phase_index_serializer_map_;

    ::common::units_decimal_sskel* elapsed_time_serializer_;
    ::xml_schema::serializer_map* elapsed_time_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class orientation_formalism_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::state::orientation_formalism&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    orientation_formalism_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    orientation_formalism_sskel* orientation_formalism_impl_;
    orientation_formalism_sskel (orientation_formalism_sskel*, void*);
  };

  class orientation_sskel: public ::common::units_double_list_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::state::orientation&) = 0;

    // Attributes.
    //
    virtual bool
    formalism_present ();

    virtual const ::state::orientation_formalism&
    formalism () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::double_sskel& /* double_list item */,
                 ::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::state::orientation_formalism_sskel& /* formalism */);

    // Individual attribute serializers.
    //
    void
    formalism_serializer (::state::orientation_formalism_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    orientation_sskel (::common::units_double_list_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_double_list&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    orientation_sskel* orientation_impl_;
    orientation_sskel (orientation_sskel*, void*);

    protected:
    ::state::orientation_formalism_sskel* formalism_serializer_;
  };

  class cell_parts_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::state::cell_parts&) = 0;

    // Attributes.
    //
    virtual ::std::string
    name () = 0;

    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    // Elements.
    //
    virtual bool
    orientation_present ();

    virtual const ::state::orientation&
    orientation () = 0;

    virtual bool
    position_present ();

    virtual const ::common::units_double_list&
    position () = 0;

    virtual bool
    velocity_present ();

    virtual const ::common::units_double_list&
    velocity () = 0;

    virtual bool
    voxels_present ();

    virtual const ::mesh::int_list_xpath&
    voxels () = 0;

    virtual bool
    cell_part_next ();

    virtual const ::state::cell_parts&
    cell_part () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* name */,
                 ::xml_schema::unsigned_int_sskel& /* ID */,
                 ::state::orientation_sskel& /* orientation */,
                 ::common::units_double_list_sskel& /* position */,
                 ::common::units_double_list_sskel& /* velocity */,
                 ::mesh::int_list_xpath_sskel& /* voxels */,
                 ::state::cell_parts_sskel& /* cell_part */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* orientation */,
                     ::xml_schema::serializer_map& /* position */,
                     ::xml_schema::serializer_map& /* velocity */,
                     ::xml_schema::serializer_map& /* voxels */,
                     ::xml_schema::serializer_map& /* cell_part */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    name_serializer (::xml_schema::string_sskel&);

    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    orientation_serializer (::state::orientation_sskel&);

    void
    orientation_serializer (::xml_schema::serializer_map&);

    void
    position_serializer (::common::units_double_list_sskel&);

    void
    position_serializer (::xml_schema::serializer_map&);

    void
    velocity_serializer (::common::units_double_list_sskel&);

    void
    velocity_serializer (::xml_schema::serializer_map&);

    void
    voxels_serializer (::mesh::int_list_xpath_sskel&);

    void
    voxels_serializer (::xml_schema::serializer_map&);

    void
    cell_part_serializer (::state::cell_parts_sskel&);

    void
    cell_part_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_parts_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    cell_parts_sskel* cell_parts_impl_;
    cell_parts_sskel (cell_parts_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::state::orientation_sskel* orientation_serializer_;
    ::xml_schema::serializer_map* orientation_serializer_map_;

    ::common::units_double_list_sskel* position_serializer_;
    ::xml_schema::serializer_map* position_serializer_map_;

    ::common::units_double_list_sskel* velocity_serializer_;
    ::xml_schema::serializer_map* velocity_serializer_map_;

    ::mesh::int_list_xpath_sskel* voxels_serializer_;
    ::xml_schema::serializer_map* voxels_serializer_map_;

    ::state::cell_parts_sskel* cell_part_serializer_;
    ::xml_schema::serializer_map* cell_part_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class state_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::state::state&) = 0;

    // Elements.
    //
    virtual bool
    orientation_present ();

    virtual const ::state::orientation&
    orientation () = 0;

    virtual bool
    position_present ();

    virtual const ::common::units_double_list&
    position () = 0;

    virtual bool
    velocity_present ();

    virtual const ::common::units_double_list&
    velocity () = 0;

    virtual bool
    voxels_present ();

    virtual const ::mesh::int_list_xpath&
    voxels () = 0;

    virtual bool
    cell_part_next ();

    virtual const ::state::cell_parts&
    cell_part () = 0;

    virtual bool
    phase_present ();

    virtual const ::state::phase&
    phase () = 0;

    virtual bool
    adhered_cells_present ();

    virtual const ::state::list_of_adhered_cells&
    adhered_cells () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::state::orientation_sskel& /* orientation */,
                 ::common::units_double_list_sskel& /* position */,
                 ::common::units_double_list_sskel& /* velocity */,
                 ::mesh::int_list_xpath_sskel& /* voxels */,
                 ::state::cell_parts_sskel& /* cell_part */,
                 ::state::phase_sskel& /* phase */,
                 ::state::list_of_adhered_cells_sskel& /* adhered_cells */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* orientation */,
                     ::xml_schema::serializer_map& /* position */,
                     ::xml_schema::serializer_map& /* velocity */,
                     ::xml_schema::serializer_map& /* voxels */,
                     ::xml_schema::serializer_map& /* cell_part */,
                     ::xml_schema::serializer_map& /* phase */,
                     ::xml_schema::serializer_map& /* adhered_cells */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    orientation_serializer (::state::orientation_sskel&);

    void
    orientation_serializer (::xml_schema::serializer_map&);

    void
    position_serializer (::common::units_double_list_sskel&);

    void
    position_serializer (::xml_schema::serializer_map&);

    void
    velocity_serializer (::common::units_double_list_sskel&);

    void
    velocity_serializer (::xml_schema::serializer_map&);

    void
    voxels_serializer (::mesh::int_list_xpath_sskel&);

    void
    voxels_serializer (::xml_schema::serializer_map&);

    void
    cell_part_serializer (::state::cell_parts_sskel&);

    void
    cell_part_serializer (::xml_schema::serializer_map&);

    void
    phase_serializer (::state::phase_sskel&);

    void
    phase_serializer (::xml_schema::serializer_map&);

    void
    adhered_cells_serializer (::state::list_of_adhered_cells_sskel&);

    void
    adhered_cells_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    state_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    state_sskel* state_impl_;
    state_sskel (state_sskel*, void*);

    protected:
    ::state::orientation_sskel* orientation_serializer_;
    ::xml_schema::serializer_map* orientation_serializer_map_;

    ::common::units_double_list_sskel* position_serializer_;
    ::xml_schema::serializer_map* position_serializer_map_;

    ::common::units_double_list_sskel* velocity_serializer_;
    ::xml_schema::serializer_map* velocity_serializer_map_;

    ::mesh::int_list_xpath_sskel* voxels_serializer_;
    ::xml_schema::serializer_map* voxels_serializer_map_;

    ::state::cell_parts_sskel* cell_part_serializer_;
    ::xml_schema::serializer_map* cell_part_serializer_map_;

    ::state::phase_sskel* phase_serializer_;
    ::xml_schema::serializer_map* phase_serializer_map_;

    ::state::list_of_adhered_cells_sskel* adhered_cells_serializer_;
    ::xml_schema::serializer_map* adhered_cells_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class adhered_cell_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::state::adhered_cell&) = 0;

    // Elements.
    //
    virtual unsigned int
    ID () = 0;

    virtual const ::common::units_decimal_nonnegative&
    contact_area () = 0;

    virtual const ::phenotype_common::cross_section&
    contact () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::common::units_decimal_nonnegative_sskel& /* contact_area */,
                 ::phenotype_common::cross_section_sskel& /* contact */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* ID */,
                     ::xml_schema::serializer_map& /* contact_area */,
                     ::xml_schema::serializer_map& /* contact */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    void
    ID_serializer (::xml_schema::serializer_map&);

    void
    contact_area_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    contact_area_serializer (::xml_schema::serializer_map&);

    void
    contact_serializer (::phenotype_common::cross_section_sskel&);

    void
    contact_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    adhered_cell_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    adhered_cell_sskel* adhered_cell_impl_;
    adhered_cell_sskel (adhered_cell_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::xml_schema::serializer_map* ID_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* contact_area_serializer_;
    ::xml_schema::serializer_map* contact_area_serializer_map_;

    ::phenotype_common::cross_section_sskel* contact_serializer_;
    ::xml_schema::serializer_map* contact_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class list_of_adhered_cells_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::state::list_of_adhered_cells&) = 0;

    // Elements.
    //
    virtual bool
    adhered_cell_next ();

    virtual const ::state::adhered_cell&
    adhered_cell () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::state::adhered_cell_sskel& /* adhered_cell */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* adhered_cell */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    adhered_cell_serializer (::state::adhered_cell_sskel&);

    void
    adhered_cell_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    list_of_adhered_cells_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    list_of_adhered_cells_sskel* list_of_adhered_cells_impl_;
    list_of_adhered_cells_sskel (list_of_adhered_cells_sskel*, void*);

    protected:
    ::state::adhered_cell_sskel* adhered_cell_serializer_;
    ::xml_schema::serializer_map* adhered_cell_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };
}

#include "state-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // STATE_SSKEL_HPP
