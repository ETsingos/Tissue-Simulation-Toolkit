// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef COMMON_PIMPL_HPP
#define COMMON_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define COMMON_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "common-pskel.hpp"

#include <xsde/cxx/stack.hxx>

namespace common
{
  class custom_base_pimpl: public custom_pskel
  {
    public:
    custom_base_pimpl (bool = false);

    ~custom_base_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual ::common::custom*
    post_custom ();

    public:
    void
    pre_impl (::common::custom*);

    public:
    struct custom_base_pimpl_state
    {
      ::common::custom* custom_;
    };

    custom_base_pimpl_state custom_base_pimpl_state_;
    bool custom_base_pimpl_base_;
  };
}

#include "custom-pimpl.hpp"

namespace common
{
  class double_list_pimpl: public double_list_pskel
  {
    public:
    ~double_list_pimpl ();
    double_list_pimpl (bool = false);

    virtual void
    _reset ();

    virtual void
    pre ();

    virtual void
    item (double);

    virtual ::common::double_list*
    post_double_list ();

    void
    pre_impl (::common::double_list*);

    public:
    ::common::double_list* double_list_;
    bool double_list_pimpl_base_;
  };

  class unsigned_int_list_pimpl: public unsigned_int_list_pskel
  {
    public:
    ~unsigned_int_list_pimpl ();
    unsigned_int_list_pimpl (bool = false);

    virtual void
    _reset ();

    virtual void
    pre ();

    virtual void
    item (unsigned int);

    virtual ::common::unsigned_int_list*
    post_unsigned_int_list ();

    void
    pre_impl (::common::unsigned_int_list*);

    public:
    ::common::unsigned_int_list* unsigned_int_list_;
    bool unsigned_int_list_pimpl_base_;
  };

  class two_doubles_pimpl: public two_doubles_pskel
  {
    public:
    two_doubles_pimpl (bool = false);

    ~two_doubles_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    virtual ::common::two_doubles*
    post_two_doubles ();

    public:
    void
    pre_impl (::common::two_doubles*);

    public:
    ::common::double_list_pimpl base_impl_;

    public:
    struct two_doubles_pimpl_state
    {
      ::common::two_doubles* two_doubles_;
    };

    two_doubles_pimpl_state two_doubles_pimpl_state_;
    bool two_doubles_pimpl_base_;
  };

  class units_double_list_pimpl: public units_double_list_pskel
  {
    public:
    units_double_list_pimpl (bool = false);

    ~units_double_list_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual void
    measurement_type (const ::std::string&);

    virtual void
    uncertainty (double);

    virtual void
    negative_uncertainty (double);

    virtual void
    positive_uncertainty (double);

    virtual void
    uncertainty_percentage (double);

    virtual void
    negative_uncertainty_percentage (double);

    virtual void
    positive_uncertainty_percentage (double);

    virtual void
    median (double);

    virtual void
    standard_deviation (double);

    virtual void
    interquartile_range (::common::two_doubles*);

    virtual void
    range (::common::two_doubles*);

    virtual void
    min (double);

    virtual void
    max (double);

    virtual void
    standard_error (double);

    virtual void
    standard_error_of_the_mean (double);

    virtual void
    number_obs (int);

    virtual void
    skewnesss (double);

    virtual void
    kurtosis (double);

    virtual ::common::units_double_list*
    post_units_double_list ();

    public:
    void
    pre_impl (::common::units_double_list*);

    public:
    ::common::double_list_pimpl base_impl_;

    public:
    struct units_double_list_pimpl_state
    {
      ::common::units_double_list* units_double_list_;
    };

    units_double_list_pimpl_state units_double_list_pimpl_state_;
    bool units_double_list_pimpl_base_;
  };

  class delimited_list_pimpl: public delimited_list_pskel
  {
    public:
    delimited_list_pimpl ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    delimiter (const ::std::string&);

    virtual ::common::delimited_list
    post_delimited_list ();

    public:
    ::xml_schema::string_pimpl base_impl_;

    public:
    struct delimited_list_pimpl_state
    {
      ::common::delimited_list delimited_list_;
    };

    delimited_list_pimpl_state delimited_list_pimpl_state_;
  };

  class units_delimited_list_pimpl: public units_delimited_list_pskel
  {
    public:
    units_delimited_list_pimpl (bool = false);

    ~units_delimited_list_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual void
    measurement_type (const ::std::string&);

    virtual void
    uncertainty (double);

    virtual void
    negative_uncertainty (double);

    virtual void
    positive_uncertainty (double);

    virtual void
    uncertainty_percentage (double);

    virtual void
    negative_uncertainty_percentage (double);

    virtual void
    positive_uncertainty_percentage (double);

    virtual void
    median (double);

    virtual void
    standard_deviation (double);

    virtual void
    interquartile_range (::common::two_doubles*);

    virtual void
    range (::common::two_doubles*);

    virtual void
    min (double);

    virtual void
    max (double);

    virtual void
    standard_error (double);

    virtual void
    standard_error_of_the_mean (double);

    virtual void
    number_obs (int);

    virtual void
    skewnesss (double);

    virtual void
    kurtosis (double);

    virtual ::common::units_delimited_list*
    post_units_delimited_list ();

    public:
    void
    pre_impl (::common::units_delimited_list*);

    public:
    ::common::delimited_list_pimpl base_impl_;

    public:
    struct units_delimited_list_pimpl_state
    {
      ::common::units_delimited_list* units_delimited_list_;
    };

    units_delimited_list_pimpl_state units_delimited_list_pimpl_state_;
    bool units_delimited_list_pimpl_base_;
  };

  class units_decimal_pimpl: public units_decimal_pskel
  {
    public:
    units_decimal_pimpl (bool = false);

    ~units_decimal_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual void
    measurement_type (const ::std::string&);

    virtual void
    uncertainty (double);

    virtual void
    negative_uncertainty (double);

    virtual void
    positive_uncertainty (double);

    virtual void
    uncertainty_percentage (double);

    virtual void
    negative_uncertainty_percentage (double);

    virtual void
    positive_uncertainty_percentage (double);

    virtual void
    median (double);

    virtual void
    standard_deviation (double);

    virtual void
    interquartile_range (::common::two_doubles*);

    virtual void
    range (::common::two_doubles*);

    virtual void
    min (double);

    virtual void
    max (double);

    virtual void
    standard_error (double);

    virtual void
    standard_error_of_the_mean (double);

    virtual void
    number_obs (int);

    virtual void
    skewnesss (double);

    virtual void
    kurtosis (double);

    virtual ::common::units_decimal*
    post_units_decimal ();

    public:
    void
    pre_impl (::common::units_decimal*);

    public:
    ::xml_schema::double_pimpl base_impl_;

    public:
    struct units_decimal_pimpl_state
    {
      ::common::units_decimal* units_decimal_;
    };

    units_decimal_pimpl_state units_decimal_pimpl_state_;
    bool units_decimal_pimpl_base_;
  };

  class units_decimal_nonnegative_pimpl: public units_decimal_nonnegative_pskel
  {
    public:
    units_decimal_nonnegative_pimpl (bool = false);

    ~units_decimal_nonnegative_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    virtual ::common::units_decimal_nonnegative*
    post_units_decimal_nonnegative ();

    public:
    void
    pre_impl (::common::units_decimal_nonnegative*);

    public:
    ::common::units_decimal_pimpl base_impl_;

    public:
    struct units_decimal_nonnegative_pimpl_state
    {
      ::common::units_decimal_nonnegative* units_decimal_nonnegative_;
    };

    units_decimal_nonnegative_pimpl_state units_decimal_nonnegative_pimpl_state_;
    bool units_decimal_nonnegative_pimpl_base_;
  };

  class units_unsignedShort_pimpl: public units_unsignedShort_pskel
  {
    public:
    units_unsignedShort_pimpl ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    measurement_type (const ::std::string&);

    virtual void
    units (const ::std::string&);

    virtual ::common::units_unsignedShort
    post_units_unsignedShort ();

    public:
    ::xml_schema::unsigned_short_pimpl base_impl_;

    public:
    struct units_unsignedShort_pimpl_state
    {
      ::common::units_unsignedShort units_unsignedShort_;
    };

    units_unsignedShort_pimpl_state units_unsignedShort_pimpl_state_;
  };

  class units_boolean_pimpl: public units_boolean_pskel
  {
    public:
    units_boolean_pimpl ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual ::common::units_boolean
    post_units_boolean ();

    public:
    ::xml_schema::boolean_pimpl base_impl_;

    public:
    struct units_boolean_pimpl_state
    {
      ::common::units_boolean units_boolean_;
    };

    units_boolean_pimpl_state units_boolean_pimpl_state_;
  };

  class fraction_pimpl: public fraction_pskel
  {
    public:
    fraction_pimpl ();

    virtual void
    pre ();

    virtual ::common::fraction
    post_fraction ();

    public:
    ::xml_schema::double_pimpl base_impl_;

    public:
    struct fraction_pimpl_state
    {
      ::common::fraction fraction_;
    };

    fraction_pimpl_state fraction_pimpl_state_;
  };

  class units_fraction_pimpl: public units_fraction_pskel
  {
    public:
    units_fraction_pimpl (bool = false);

    ~units_fraction_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    virtual ::common::units_fraction*
    post_units_fraction ();

    public:
    void
    pre_impl (::common::units_fraction*);

    public:
    ::common::units_decimal_pimpl base_impl_;

    public:
    struct units_fraction_pimpl_state
    {
      ::common::units_fraction* units_fraction_;
    };

    units_fraction_pimpl_state units_fraction_pimpl_state_;
    bool units_fraction_pimpl_base_;
  };

  class units_string_pimpl: public units_string_pskel
  {
    public:
    units_string_pimpl (bool = false);

    ~units_string_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    units (const ::std::string&);

    virtual void
    measurement_type (const ::std::string&);

    virtual void
    uncertainty (double);

    virtual void
    negative_uncertainty (double);

    virtual void
    positive_uncertainty (double);

    virtual void
    uncertainty_percentage (double);

    virtual void
    negative_uncertainty_percentage (double);

    virtual void
    positive_uncertainty_percentage (double);

    virtual void
    median (double);

    virtual void
    standard_deviation (double);

    virtual void
    interquartile_range (::common::two_doubles*);

    virtual void
    range (::common::two_doubles*);

    virtual void
    min (double);

    virtual void
    max (double);

    virtual void
    standard_error (double);

    virtual void
    standard_error_of_the_mean (double);

    virtual void
    number_obs (int);

    virtual void
    skewnesss (double);

    virtual void
    kurtosis (double);

    virtual ::common::units_string*
    post_units_string ();

    public:
    void
    pre_impl (::common::units_string*);

    public:
    ::xml_schema::string_pimpl base_impl_;

    public:
    struct units_string_pimpl_state
    {
      ::common::units_string* units_string_;
    };

    units_string_pimpl_state units_string_pimpl_state_;
    bool units_string_pimpl_base_;
  };

  class data_storage_formats_pimpl: public data_storage_formats_pskel
  {
    public:
    data_storage_formats_pimpl ();

    virtual void
    pre ();

    virtual void
    _characters (const ::xsde::cxx::ro_string&);

    virtual void
    _post ();

    virtual ::common::data_storage_formats
    post_data_storage_formats ();

    public:
    struct data_storage_formats_pimpl_state
    {
      ::std::string str_;
    };

    data_storage_formats_pimpl_state data_storage_formats_pimpl_state_;
  };

  class threshold_type_pimpl: public threshold_type_pskel
  {
    public:
    threshold_type_pimpl ();

    virtual void
    pre ();

    virtual void
    _characters (const ::xsde::cxx::ro_string&);

    virtual void
    _post ();

    virtual ::common::threshold_type
    post_threshold_type ();

    public:
    struct threshold_type_pimpl_state
    {
      ::std::string str_;
    };

    threshold_type_pimpl_state threshold_type_pimpl_state_;
  };

  class transition_threshold_pimpl: public transition_threshold_pskel
  {
    public:
    transition_threshold_pimpl (bool = false);

    ~transition_threshold_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    quantity (const ::std::string&);

    virtual void
    type (const ::common::threshold_type&);

    virtual void
    variable_ID (unsigned long long);

    virtual ::common::transition_threshold*
    post_transition_threshold ();

    public:
    void
    pre_impl (::common::transition_threshold*);

    public:
    ::common::units_decimal_pimpl base_impl_;

    public:
    struct transition_threshold_pimpl_state
    {
      ::common::transition_threshold* transition_threshold_;
    };

    transition_threshold_pimpl_state transition_threshold_pimpl_state_;
    bool transition_threshold_pimpl_base_;
  };
}

#ifdef COMMON_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // COMMON_PIMPL_HPP
