// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell_cycle-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

namespace cell_cycle
{
  // death_type_sskel
  //

  const char* death_type_sskel::
  _static_type ()
  {
    return "death_type cell_cycle";
  }

  const char* death_type_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void death_type_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // death_rate_type_sskel
  //

  bool death_rate_type_sskel::
  any_attribute_next ()
  {
    return this->death_rate_type_impl_ ? this->death_rate_type_impl_->any_attribute_next () : false;
  }

  void death_rate_type_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->death_rate_type_impl_)
      this->death_rate_type_impl_->any_attribute (ns, n);
  }

  void death_rate_type_sskel::
  serialize_any_attribute ()
  {
    if (this->death_rate_type_impl_)
      this->death_rate_type_impl_->serialize_any_attribute ();
  }

  void death_rate_type_sskel::
  _reset ()
  {
    typedef ::common::units_decimal_nonnegative_sskel base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();
  }

  const char* death_rate_type_sskel::
  _static_type ()
  {
    return "death_rate_type cell_cycle";
  }

  const char* death_rate_type_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void death_rate_type_sskel::
  pre (const ::common::units_decimal_nonnegative& x)
  {
    assert (this->units_decimal_nonnegative_impl_);
    this->units_decimal_nonnegative_impl_->pre (x);
  }

  void death_rate_type_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::units_decimal_nonnegative_sskel base;
    base::_serialize_attributes ();

    // type
    //
    {
      const ::cell_cycle::death_type& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);
        this->type_serializer_->_serialize_content ();
        this->type_serializer_->_post_impl ();
        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if (ns.empty ())
        this->_start_attribute (name.c_str ());
      else
        this->_start_attribute (ns.c_str (), name.c_str ());

      this->serialize_any_attribute ();
      this->_end_attribute ();
    }
  }

  // cell_cycle_arrest_sskel
  //

  bool cell_cycle_arrest_sskel::
  condition_present ()
  {
    return this->cell_cycle_arrest_impl_ ? this->cell_cycle_arrest_impl_->condition_present () : false;
  }

  void cell_cycle_arrest_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->condition_serializer_)
      this->condition_serializer_->_reset ();

    if (this->condition_serializer_map_)
      this->condition_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_cycle_arrest_sskel::
  _static_type ()
  {
    return "cell_cycle_arrest cell_cycle";
  }

  const char* cell_cycle_arrest_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cell_cycle_arrest_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // condition
    //
    if (this->condition_present ())
    {
      ctx.type_id (0);
      const ::cell_cycle::arrest_condition& r = this->condition ();

      const void* t = ctx.type_id ();
      ::cell_cycle::arrest_condition_sskel* s = 0;

      if (t == 0 && this->condition_serializer_ != 0)
        s = this->condition_serializer_;
      else if (this->condition_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::arrest_condition_sskel* > (
          this->condition_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::arrest_condition_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("condition");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // transition_sskel
  //

  bool transition_sskel::
  checkpoint_failure_probability_present ()
  {
    return this->transition_impl_ ? this->transition_impl_->checkpoint_failure_probability_present () : false;
  }

  bool transition_sskel::
  subsequent_phase_present ()
  {
    return this->transition_impl_ ? this->transition_impl_->subsequent_phase_present () : false;
  }

  bool transition_sskel::
  threshold_next ()
  {
    return this->transition_impl_ ? this->transition_impl_->threshold_next () : false;
  }

  bool transition_sskel::
  transition_rate_present ()
  {
    return this->transition_impl_ ? this->transition_impl_->transition_rate_present () : false;
  }

  void transition_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->checkpoint_failure_probability_serializer_)
      this->checkpoint_failure_probability_serializer_->_reset ();

    if (this->checkpoint_failure_probability_serializer_map_)
      this->checkpoint_failure_probability_serializer_map_->reset ();

    if (this->subsequent_phase_serializer_)
      this->subsequent_phase_serializer_->_reset ();

    if (this->subsequent_phase_serializer_map_)
      this->subsequent_phase_serializer_map_->reset ();

    if (this->threshold_serializer_)
      this->threshold_serializer_->_reset ();

    if (this->threshold_serializer_map_)
      this->threshold_serializer_map_->reset ();

    if (this->transition_rate_serializer_)
      this->transition_rate_serializer_->_reset ();

    if (this->transition_rate_serializer_map_)
      this->transition_rate_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* transition_sskel::
  _static_type ()
  {
    return "transition cell_cycle";
  }

  const char* transition_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void transition_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // checkpoint_failure_probability
    //
    if (this->checkpoint_failure_probability_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->checkpoint_failure_probability ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->checkpoint_failure_probability_serializer_ != 0)
        s = this->checkpoint_failure_probability_serializer_;
      else if (this->checkpoint_failure_probability_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->checkpoint_failure_probability_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("checkpoint_failure_probability");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // subsequent_phase
    //
    if (this->subsequent_phase_present ())
    {
      ctx.type_id (0);
      unsigned long long r = this->subsequent_phase ();

      const void* t = ctx.type_id ();
      ::xml_schema::unsigned_long_sskel* s = 0;

      if (t == 0 && this->subsequent_phase_serializer_ != 0)
        s = this->subsequent_phase_serializer_;
      else if (this->subsequent_phase_serializer_map_ != 0)
        s = static_cast< ::xml_schema::unsigned_long_sskel* > (
          this->subsequent_phase_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::xml_schema::unsigned_long_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("subsequent_phase");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // threshold
    //
    while (this->threshold_next ())
    {
      ctx.type_id (0);
      const ::variables::transition_threshold& r = this->threshold ();

      const void* t = ctx.type_id ();
      ::variables::transition_threshold_sskel* s = 0;

      if (t == 0 && this->threshold_serializer_ != 0)
        s = this->threshold_serializer_;
      else if (this->threshold_serializer_map_ != 0)
        s = static_cast< ::variables::transition_threshold_sskel* > (
          this->threshold_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::variables::transition_threshold_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("threshold");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // transition_rate
    //
    if (this->transition_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->transition_rate ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->transition_rate_serializer_ != 0)
        s = this->transition_rate_serializer_;
      else if (this->transition_rate_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->transition_rate_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("transition_rate");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // cell_cycle_phase_sskel
  //

  bool cell_cycle_phase_sskel::
  ID_present ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->ID_present () : false;
  }

  bool cell_cycle_phase_sskel::
  any_attribute_next ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->any_attribute_next () : false;
  }

  void cell_cycle_phase_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->any_attribute (ns, n);
  }

  void cell_cycle_phase_sskel::
  serialize_any_attribute ()
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->serialize_any_attribute ();
  }

  bool cell_cycle_phase_sskel::
  birth_rate_present ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->birth_rate_present () : false;
  }

  bool cell_cycle_phase_sskel::
  duration_present ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->duration_present () : false;
  }

  bool cell_cycle_phase_sskel::
  death_rate_next ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->death_rate_next () : false;
  }

  bool cell_cycle_phase_sskel::
  net_birth_rate_present ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->net_birth_rate_present () : false;
  }

  bool cell_cycle_phase_sskel::
  population_doubling_time_present ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->population_doubling_time_present () : false;
  }

  bool cell_cycle_phase_sskel::
  cell_cycle_arrest_present ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->cell_cycle_arrest_present () : false;
  }

  bool cell_cycle_phase_sskel::
  transition_next ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->transition_next () : false;
  }

  bool cell_cycle_phase_sskel::
  cell_part_next ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->cell_part_next () : false;
  }

  bool cell_cycle_phase_sskel::
  custom_present ()
  {
    return this->cell_cycle_phase_impl_ ? this->cell_cycle_phase_impl_->custom_present () : false;
  }

  void cell_cycle_phase_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->birth_rate_serializer_)
      this->birth_rate_serializer_->_reset ();

    if (this->birth_rate_serializer_map_)
      this->birth_rate_serializer_map_->reset ();

    if (this->duration_serializer_)
      this->duration_serializer_->_reset ();

    if (this->duration_serializer_map_)
      this->duration_serializer_map_->reset ();

    if (this->death_rate_serializer_)
      this->death_rate_serializer_->_reset ();

    if (this->death_rate_serializer_map_)
      this->death_rate_serializer_map_->reset ();

    if (this->net_birth_rate_serializer_)
      this->net_birth_rate_serializer_->_reset ();

    if (this->net_birth_rate_serializer_map_)
      this->net_birth_rate_serializer_map_->reset ();

    if (this->population_doubling_time_serializer_)
      this->population_doubling_time_serializer_->_reset ();

    if (this->population_doubling_time_serializer_map_)
      this->population_doubling_time_serializer_map_->reset ();

    if (this->cell_cycle_arrest_serializer_)
      this->cell_cycle_arrest_serializer_->_reset ();

    if (this->cell_cycle_arrest_serializer_map_)
      this->cell_cycle_arrest_serializer_map_->reset ();

    if (this->transition_serializer_)
      this->transition_serializer_->_reset ();

    if (this->transition_serializer_map_)
      this->transition_serializer_map_->reset ();

    if (this->cell_part_serializer_)
      this->cell_part_serializer_->_reset ();

    if (this->cell_part_serializer_map_)
      this->cell_part_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_cycle_phase_sskel::
  _static_type ()
  {
    return "cell_cycle_phase cell_cycle";
  }

  const char* cell_cycle_phase_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cell_cycle_phase_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // name
    //
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);
        this->name_serializer_->_serialize_content ();
        this->name_serializer_->_post_impl ();
        this->_end_attribute ();
        this->name_serializer_->post ();
      }
    }

    // ID
    //
    if (this->ID_present ())
    {
      unsigned long long r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if (ns.empty ())
        this->_start_attribute (name.c_str ());
      else
        this->_start_attribute (ns.c_str (), name.c_str ());

      this->serialize_any_attribute ();
      this->_end_attribute ();
    }
  }

  void cell_cycle_phase_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // birth_rate
    //
    if (this->birth_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->birth_rate ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->birth_rate_serializer_ != 0)
        s = this->birth_rate_serializer_;
      else if (this->birth_rate_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_nonnegative_sskel* > (
          this->birth_rate_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_nonnegative_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("birth_rate");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // duration
    //
    if (this->duration_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->duration ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->duration_serializer_ != 0)
        s = this->duration_serializer_;
      else if (this->duration_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_nonnegative_sskel* > (
          this->duration_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_nonnegative_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("duration");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // death_rate
    //
    while (this->death_rate_next ())
    {
      ctx.type_id (0);
      const ::cell_cycle::death_rate_type& r = this->death_rate ();

      const void* t = ctx.type_id ();
      ::cell_cycle::death_rate_type_sskel* s = 0;

      if (t == 0 && this->death_rate_serializer_ != 0)
        s = this->death_rate_serializer_;
      else if (this->death_rate_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::death_rate_type_sskel* > (
          this->death_rate_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::death_rate_type_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("death_rate");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // net_birth_rate
    //
    if (this->net_birth_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->net_birth_rate ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->net_birth_rate_serializer_ != 0)
        s = this->net_birth_rate_serializer_;
      else if (this->net_birth_rate_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->net_birth_rate_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("net_birth_rate");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // population_doubling_time
    //
    if (this->population_doubling_time_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->population_doubling_time ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->population_doubling_time_serializer_ != 0)
        s = this->population_doubling_time_serializer_;
      else if (this->population_doubling_time_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_nonnegative_sskel* > (
          this->population_doubling_time_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_nonnegative_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("population_doubling_time");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // cell_cycle_arrest
    //
    if (this->cell_cycle_arrest_present ())
    {
      ctx.type_id (0);
      const ::cell_cycle::cell_cycle_arrest& r = this->cell_cycle_arrest ();

      const void* t = ctx.type_id ();
      ::cell_cycle::cell_cycle_arrest_sskel* s = 0;

      if (t == 0 && this->cell_cycle_arrest_serializer_ != 0)
        s = this->cell_cycle_arrest_serializer_;
      else if (this->cell_cycle_arrest_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::cell_cycle_arrest_sskel* > (
          this->cell_cycle_arrest_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::cell_cycle_arrest_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_cycle_arrest");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // transition
    //
    while (this->transition_next ())
    {
      ctx.type_id (0);
      const ::cell_cycle::transition& r = this->transition ();

      const void* t = ctx.type_id ();
      ::cell_cycle::transition_sskel* s = 0;

      if (t == 0 && this->transition_serializer_ != 0)
        s = this->transition_serializer_;
      else if (this->transition_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::transition_sskel* > (
          this->transition_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::transition_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("transition");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // cell_part
    //
    while (this->cell_part_next ())
    {
      ctx.type_id (0);
      const ::phenotype_base::cell_parts& r = this->cell_part ();

      const void* t = ctx.type_id ();
      ::phenotype_base::cell_parts_sskel* s = 0;

      if (t == 0 && this->cell_part_serializer_ != 0)
        s = this->cell_part_serializer_;
      else if (this->cell_part_serializer_map_ != 0)
        s = static_cast< ::phenotype_base::cell_parts_sskel* > (
          this->cell_part_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_base::cell_parts_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_part");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // summary_elements_sskel
  //

  bool summary_elements_sskel::
  birth_rate_present ()
  {
    return this->summary_elements_impl_ ? this->summary_elements_impl_->birth_rate_present () : false;
  }

  bool summary_elements_sskel::
  duration_present ()
  {
    return this->summary_elements_impl_ ? this->summary_elements_impl_->duration_present () : false;
  }

  bool summary_elements_sskel::
  death_rate_next ()
  {
    return this->summary_elements_impl_ ? this->summary_elements_impl_->death_rate_next () : false;
  }

  bool summary_elements_sskel::
  net_birth_rate_present ()
  {
    return this->summary_elements_impl_ ? this->summary_elements_impl_->net_birth_rate_present () : false;
  }

  bool summary_elements_sskel::
  population_doubling_time_present ()
  {
    return this->summary_elements_impl_ ? this->summary_elements_impl_->population_doubling_time_present () : false;
  }

  void summary_elements_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->birth_rate_serializer_)
      this->birth_rate_serializer_->_reset ();

    if (this->birth_rate_serializer_map_)
      this->birth_rate_serializer_map_->reset ();

    if (this->duration_serializer_)
      this->duration_serializer_->_reset ();

    if (this->duration_serializer_map_)
      this->duration_serializer_map_->reset ();

    if (this->death_rate_serializer_)
      this->death_rate_serializer_->_reset ();

    if (this->death_rate_serializer_map_)
      this->death_rate_serializer_map_->reset ();

    if (this->net_birth_rate_serializer_)
      this->net_birth_rate_serializer_->_reset ();

    if (this->net_birth_rate_serializer_map_)
      this->net_birth_rate_serializer_map_->reset ();

    if (this->population_doubling_time_serializer_)
      this->population_doubling_time_serializer_->_reset ();

    if (this->population_doubling_time_serializer_map_)
      this->population_doubling_time_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* summary_elements_sskel::
  _static_type ()
  {
    return "summary_elements cell_cycle";
  }

  const char* summary_elements_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void summary_elements_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // birth_rate
    //
    if (this->birth_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->birth_rate ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->birth_rate_serializer_ != 0)
        s = this->birth_rate_serializer_;
      else if (this->birth_rate_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_nonnegative_sskel* > (
          this->birth_rate_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_nonnegative_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("birth_rate");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // duration
    //
    if (this->duration_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->duration ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->duration_serializer_ != 0)
        s = this->duration_serializer_;
      else if (this->duration_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_nonnegative_sskel* > (
          this->duration_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_nonnegative_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("duration");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // death_rate
    //
    while (this->death_rate_next ())
    {
      ctx.type_id (0);
      const ::cell_cycle::death_rate_type& r = this->death_rate ();

      const void* t = ctx.type_id ();
      ::cell_cycle::death_rate_type_sskel* s = 0;

      if (t == 0 && this->death_rate_serializer_ != 0)
        s = this->death_rate_serializer_;
      else if (this->death_rate_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::death_rate_type_sskel* > (
          this->death_rate_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::death_rate_type_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("death_rate");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // net_birth_rate
    //
    if (this->net_birth_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->net_birth_rate ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->net_birth_rate_serializer_ != 0)
        s = this->net_birth_rate_serializer_;
      else if (this->net_birth_rate_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->net_birth_rate_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("net_birth_rate");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // population_doubling_time
    //
    if (this->population_doubling_time_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->population_doubling_time ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->population_doubling_time_serializer_ != 0)
        s = this->population_doubling_time_serializer_;
      else if (this->population_doubling_time_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_nonnegative_sskel* > (
          this->population_doubling_time_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_nonnegative_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("population_doubling_time");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // cell_cycle_sskel
  //

  bool cell_cycle_sskel::
  ID_present ()
  {
    return this->cell_cycle_impl_ ? this->cell_cycle_impl_->ID_present () : false;
  }

  bool cell_cycle_sskel::
  any_attribute_next ()
  {
    return this->cell_cycle_impl_ ? this->cell_cycle_impl_->any_attribute_next () : false;
  }

  void cell_cycle_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->cell_cycle_impl_)
      this->cell_cycle_impl_->any_attribute (ns, n);
  }

  void cell_cycle_sskel::
  serialize_any_attribute ()
  {
    if (this->cell_cycle_impl_)
      this->cell_cycle_impl_->serialize_any_attribute ();
  }

  bool cell_cycle_sskel::
  cell_cycle_phase_next ()
  {
    return this->cell_cycle_impl_ ? this->cell_cycle_impl_->cell_cycle_phase_next () : false;
  }

  bool cell_cycle_sskel::
  cell_death_next ()
  {
    return this->cell_cycle_impl_ ? this->cell_cycle_impl_->cell_death_next () : false;
  }

  bool cell_cycle_sskel::
  summary_elements_present ()
  {
    return this->cell_cycle_impl_ ? this->cell_cycle_impl_->summary_elements_present () : false;
  }

  bool cell_cycle_sskel::
  custom_present ()
  {
    return this->cell_cycle_impl_ ? this->cell_cycle_impl_->custom_present () : false;
  }

  void cell_cycle_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->model_serializer_)
      this->model_serializer_->_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->cell_cycle_phase_serializer_)
      this->cell_cycle_phase_serializer_->_reset ();

    if (this->cell_cycle_phase_serializer_map_)
      this->cell_cycle_phase_serializer_map_->reset ();

    if (this->cell_death_serializer_)
      this->cell_death_serializer_->_reset ();

    if (this->cell_death_serializer_map_)
      this->cell_death_serializer_map_->reset ();

    if (this->summary_elements_serializer_)
      this->summary_elements_serializer_->_reset ();

    if (this->summary_elements_serializer_map_)
      this->summary_elements_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_cycle_sskel::
  _static_type ()
  {
    return "cell_cycle cell_cycle";
  }

  const char* cell_cycle_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cell_cycle_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // model
    //
    {
      const ::std::string& r = this->model ();

      if (this->model_serializer_)
      {
        this->model_serializer_->pre (r);
        this->_start_attribute ("model");
        this->model_serializer_->_pre_impl (ctx);
        this->model_serializer_->_serialize_content ();
        this->model_serializer_->_post_impl ();
        this->_end_attribute ();
        this->model_serializer_->post ();
      }
    }

    // ID
    //
    if (this->ID_present ())
    {
      unsigned long long r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if (ns.empty ())
        this->_start_attribute (name.c_str ());
      else
        this->_start_attribute (ns.c_str (), name.c_str ());

      this->serialize_any_attribute ();
      this->_end_attribute ();
    }
  }

  void cell_cycle_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // cell_cycle_phase
    //
    while (this->cell_cycle_phase_next ())
    {
      ctx.type_id (0);
      const ::cell_cycle::cell_cycle_phase& r = this->cell_cycle_phase ();

      const void* t = ctx.type_id ();
      ::cell_cycle::cell_cycle_phase_sskel* s = 0;

      if (t == 0 && this->cell_cycle_phase_serializer_ != 0)
        s = this->cell_cycle_phase_serializer_;
      else if (this->cell_cycle_phase_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::cell_cycle_phase_sskel* > (
          this->cell_cycle_phase_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::cell_cycle_phase_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_cycle_phase");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // cell_death
    //
    while (this->cell_death_next ())
    {
      ctx.type_id (0);
      const ::cell_cycle::cell_death& r = this->cell_death ();

      const void* t = ctx.type_id ();
      ::cell_cycle::cell_death_sskel* s = 0;

      if (t == 0 && this->cell_death_serializer_ != 0)
        s = this->cell_death_serializer_;
      else if (this->cell_death_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::cell_death_sskel* > (
          this->cell_death_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::cell_death_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_death");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // summary_elements
    //
    if (this->summary_elements_present ())
    {
      ctx.type_id (0);
      const ::cell_cycle::summary_elements& r = this->summary_elements ();

      const void* t = ctx.type_id ();
      ::cell_cycle::summary_elements_sskel* s = 0;

      if (t == 0 && this->summary_elements_serializer_ != 0)
        s = this->summary_elements_serializer_;
      else if (this->summary_elements_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::summary_elements_sskel* > (
          this->summary_elements_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::summary_elements_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("summary_elements");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // cell_death_sskel
  //

  bool cell_death_sskel::
  ID_present ()
  {
    return this->cell_death_impl_ ? this->cell_death_impl_->ID_present () : false;
  }

  bool cell_death_sskel::
  any_attribute_next ()
  {
    return this->cell_death_impl_ ? this->cell_death_impl_->any_attribute_next () : false;
  }

  void cell_death_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->cell_death_impl_)
      this->cell_death_impl_->any_attribute (ns, n);
  }

  void cell_death_sskel::
  serialize_any_attribute ()
  {
    if (this->cell_death_impl_)
      this->cell_death_impl_->serialize_any_attribute ();
  }

  bool cell_death_sskel::
  cell_part_next ()
  {
    return this->cell_death_impl_ ? this->cell_death_impl_->cell_part_next () : false;
  }

  bool cell_death_sskel::
  custom_present ()
  {
    return this->cell_death_impl_ ? this->cell_death_impl_->custom_present () : false;
  }

  void cell_death_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->duration_serializer_)
      this->duration_serializer_->_reset ();

    if (this->duration_serializer_map_)
      this->duration_serializer_map_->reset ();

    if (this->cell_part_serializer_)
      this->cell_part_serializer_->_reset ();

    if (this->cell_part_serializer_map_)
      this->cell_part_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_death_sskel::
  _static_type ()
  {
    return "cell_death cell_cycle";
  }

  const char* cell_death_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cell_death_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // type
    //
    {
      const ::cell_cycle::death_type& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);
        this->type_serializer_->_serialize_content ();
        this->type_serializer_->_post_impl ();
        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }

    // ID
    //
    if (this->ID_present ())
    {
      unsigned long long r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if (ns.empty ())
        this->_start_attribute (name.c_str ());
      else
        this->_start_attribute (ns.c_str (), name.c_str ());

      this->serialize_any_attribute ();
      this->_end_attribute ();
    }
  }

  void cell_death_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // duration
    //
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->duration ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->duration_serializer_ != 0)
        s = this->duration_serializer_;
      else if (this->duration_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->duration_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("duration");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // cell_part
    //
    while (this->cell_part_next ())
    {
      ctx.type_id (0);
      const ::phenotype_base::cell_parts& r = this->cell_part ();

      const void* t = ctx.type_id ();
      ::phenotype_base::cell_parts_sskel* s = 0;

      if (t == 0 && this->cell_part_serializer_ != 0)
        s = this->cell_part_serializer_;
      else if (this->cell_part_serializer_map_ != 0)
        s = static_cast< ::phenotype_base::cell_parts_sskel* > (
          this->cell_part_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_base::cell_parts_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_part");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // arrest_type_sskel
  //

  const char* arrest_type_sskel::
  _static_type ()
  {
    return "arrest_type cell_cycle";
  }

  const char* arrest_type_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void arrest_type_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // arrest_condition_sskel
  //

  bool arrest_condition_sskel::
  type_present ()
  {
    return this->arrest_condition_impl_ ? this->arrest_condition_impl_->type_present () : false;
  }

  void arrest_condition_sskel::
  _reset ()
  {
    typedef ::common::units_decimal_sskel base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();
  }

  const char* arrest_condition_sskel::
  _static_type ()
  {
    return "arrest_condition cell_cycle";
  }

  const char* arrest_condition_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void arrest_condition_sskel::
  pre (const ::common::units_decimal& x)
  {
    assert (this->units_decimal_impl_);
    this->units_decimal_impl_->pre (x);
  }

  ::std::string arrest_condition_sskel::
  units ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->units ();
  }

  ::std::string arrest_condition_sskel::
  measurement_type ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->measurement_type ();
  }

  double arrest_condition_sskel::
  uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty ();
  }

  double arrest_condition_sskel::
  negative_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty ();
  }

  double arrest_condition_sskel::
  positive_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty ();
  }

  double arrest_condition_sskel::
  uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty_percentage ();
  }

  double arrest_condition_sskel::
  negative_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty_percentage ();
  }

  double arrest_condition_sskel::
  positive_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty_percentage ();
  }

  double arrest_condition_sskel::
  median ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->median ();
  }

  double arrest_condition_sskel::
  standard_deviation ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_deviation ();
  }

  const ::common::two_doubles& arrest_condition_sskel::
  interquartile_range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->interquartile_range ();
  }

  const ::common::two_doubles& arrest_condition_sskel::
  range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->range ();
  }

  double arrest_condition_sskel::
  min ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->min ();
  }

  double arrest_condition_sskel::
  max ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->max ();
  }

  double arrest_condition_sskel::
  standard_error ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error ();
  }

  double arrest_condition_sskel::
  standard_error_of_the_mean ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error_of_the_mean ();
  }

  int arrest_condition_sskel::
  number_obs ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->number_obs ();
  }

  double arrest_condition_sskel::
  skewnesss ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->skewnesss ();
  }

  double arrest_condition_sskel::
  kurtosis ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->kurtosis ();
  }

  void arrest_condition_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::units_decimal_sskel base;
    base::_serialize_attributes ();

    // type
    //
    if (this->type_present ())
    {
      const ::cell_cycle::arrest_type& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);
        this->type_serializer_->_serialize_content ();
        this->type_serializer_->_post_impl ();
        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }
  }

  // cycles_and_deaths_sskel
  //

  bool cycles_and_deaths_sskel::
  cell_cycle_next ()
  {
    return this->cycles_and_deaths_impl_ ? this->cycles_and_deaths_impl_->cell_cycle_next () : false;
  }

  bool cycles_and_deaths_sskel::
  cell_death_next ()
  {
    return this->cycles_and_deaths_impl_ ? this->cycles_and_deaths_impl_->cell_death_next () : false;
  }

  void cycles_and_deaths_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->cell_cycle_serializer_)
      this->cell_cycle_serializer_->_reset ();

    if (this->cell_cycle_serializer_map_)
      this->cell_cycle_serializer_map_->reset ();

    if (this->cell_death_serializer_)
      this->cell_death_serializer_->_reset ();

    if (this->cell_death_serializer_map_)
      this->cell_death_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cycles_and_deaths_sskel::
  _static_type ()
  {
    return "cycles_and_deaths cell_cycle";
  }

  const char* cycles_and_deaths_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cycles_and_deaths_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // cell_cycle
    //
    while (this->cell_cycle_next ())
    {
      ctx.type_id (0);
      const ::cell_cycle::cell_cycle& r = this->cell_cycle ();

      const void* t = ctx.type_id ();
      ::cell_cycle::cell_cycle_sskel* s = 0;

      if (t == 0 && this->cell_cycle_serializer_ != 0)
        s = this->cell_cycle_serializer_;
      else if (this->cell_cycle_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::cell_cycle_sskel* > (
          this->cell_cycle_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::cell_cycle_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_cycle");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // cell_death
    //
    while (this->cell_death_next ())
    {
      ctx.type_id (0);
      const ::cell_cycle::cell_death& r = this->cell_death ();

      const void* t = ctx.type_id ();
      ::cell_cycle::cell_death_sskel* s = 0;

      if (t == 0 && this->cell_death_serializer_ != 0)
        s = this->cell_death_serializer_;
      else if (this->cell_death_serializer_map_ != 0)
        s = static_cast< ::cell_cycle::cell_death_sskel* > (
          this->cell_death_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_cycle::cell_death_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_death");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

