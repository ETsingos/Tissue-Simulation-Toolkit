// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MESH_PIMPL_HPP
#define MESH_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define MESH_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "mesh-pskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-pimpl.hpp"

namespace mesh
{
  class bounding_box_pimpl: public bounding_box_pskel
  {
    public:
    bounding_box_pimpl (bool = false);

    ~bounding_box_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    type (const ::std::string&);

    virtual ::mesh::bounding_box*
    post_bounding_box ();

    public:
    void
    pre_impl (::mesh::bounding_box*);

    public:
    ::common::units_double_list_pimpl base_impl_;

    public:
    struct bounding_box_pimpl_state
    {
      ::mesh::bounding_box* bounding_box_;
    };

    bounding_box_pimpl_state bounding_box_pimpl_state_;
    bool bounding_box_pimpl_base_;
  };

  class mesh_pimpl: public mesh_pskel
  {
    public:
    mesh_pimpl (bool = false);

    ~mesh_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    type (const ::std::string&);

    virtual void
    uniform (bool);

    virtual void
    regular (bool);

    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    bounding_box (::mesh::bounding_box*);

    virtual void
    x_coordinates (::common::units_double_list*);

    virtual void
    y_coordinates (::common::units_double_list*);

    virtual void
    z_coordinates (::common::units_double_list*);

    virtual void
    voxels (::mesh::list_of_voxels*);

    virtual void
    custom (::common::custom*);

    virtual ::mesh::mesh*
    post_mesh ();

    public:
    void
    pre_impl (::mesh::mesh*);

    public:
    struct mesh_pimpl_state
    {
      ::mesh::mesh* mesh_;
    };

    mesh_pimpl_state mesh_pimpl_state_;
    bool mesh_pimpl_base_;
  };

  class list_of_voxels_pimpl: public list_of_voxels_pskel
  {
    public:
    list_of_voxels_pimpl (bool = false);

    ~list_of_voxels_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    type (const ::common::data_storage_formats&);

    // Elements.
    //
    virtual void
    filename (const ::std::string&);

    virtual void
    voxel (::mesh::voxel*);

    virtual void
    custom (::common::custom*);

    virtual ::mesh::list_of_voxels*
    post_list_of_voxels ();

    public:
    void
    pre_impl (::mesh::list_of_voxels*);

    public:
    struct list_of_voxels_pimpl_state
    {
      ::mesh::list_of_voxels* list_of_voxels_;
    };

    list_of_voxels_pimpl_state list_of_voxels_pimpl_state_;
    bool list_of_voxels_pimpl_base_;
  };

  class voxel_pimpl: public voxel_pskel
  {
    public:
    voxel_pimpl (bool = false);

    ~voxel_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    virtual void
    type (const ::std::string&);

    // Elements.
    //
    virtual void
    center (::common::units_double_list*);

    virtual void
    volume (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::mesh::voxel*
    post_voxel ();

    public:
    void
    pre_impl (::mesh::voxel*);

    public:
    struct voxel_pimpl_state
    {
      ::mesh::voxel* voxel_;
    };

    voxel_pimpl_state voxel_pimpl_state_;
    bool voxel_pimpl_base_;
  };

  class node_pimpl: public node_pskel
  {
    public:
    node_pimpl (bool = false);

    ~node_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    position (::common::units_double_list*);

    virtual void
    custom (::common::custom*);

    virtual ::mesh::node*
    post_node ();

    public:
    void
    pre_impl (::mesh::node*);

    public:
    struct node_pimpl_state
    {
      ::mesh::node* node_;
    };

    node_pimpl_state node_pimpl_state_;
    bool node_pimpl_base_;
  };

  class edge_pimpl: public edge_pskel
  {
    public:
    edge_pimpl (bool = false);

    ~edge_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    node_ID (unsigned int);

    virtual ::mesh::edge*
    post_edge ();

    public:
    void
    pre_impl (::mesh::edge*);

    public:
    struct edge_pimpl_state
    {
      ::mesh::edge* edge_;
    };

    edge_pimpl_state edge_pimpl_state_;
    bool edge_pimpl_base_;
  };

  class face_pimpl: public face_pskel
  {
    public:
    face_pimpl (bool = false);

    ~face_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    edge_ID (unsigned int);

    virtual ::mesh::face*
    post_face ();

    public:
    void
    pre_impl (::mesh::face*);

    public:
    struct face_pimpl_state
    {
      ::mesh::face* face_;
    };

    face_pimpl_state face_pimpl_state_;
    bool face_pimpl_base_;
  };

  class int_list_xpath_pimpl: public int_list_xpath_pskel
  {
    public:
    int_list_xpath_pimpl (bool = false);

    ~int_list_xpath_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    xpath (const ::std::string&);

    virtual void
    grouping_number (unsigned short);

    virtual ::mesh::int_list_xpath*
    post_int_list_xpath ();

    public:
    void
    pre_impl (::mesh::int_list_xpath*);

    public:
    ::common::unsigned_int_list_pimpl base_impl_;

    public:
    struct int_list_xpath_pimpl_state
    {
      ::mesh::int_list_xpath* int_list_xpath_;
    };

    int_list_xpath_pimpl_state int_list_xpath_pimpl_state_;
    bool int_list_xpath_pimpl_base_;
  };
}

#ifdef MESH_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // MESH_PIMPL_HPP
