// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell_cycle-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace cell_cycle
{
  // death_type_pskel
  //

  const char* death_type_pskel::
  _static_type ()
  {
    return "death_type cell_cycle";
  }

  const char* death_type_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_death_type_pskel_inheritance_map_entry_ (
    death_type_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string death_type_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const death_type_pskel::_xsde_death_type_pskel_enums_[3UL] = 
  {
    "apoptosis",
    "autophagy",
    "necrosis"
  };

  // death_rate_type_pskel
  //

  void death_rate_type_pskel::
  type (const ::cell_cycle::death_type& x)
  {
    if (this->death_rate_type_impl_)
      this->death_rate_type_impl_->type (x);
  }

  void death_rate_type_pskel::
  _reset ()
  {
    typedef ::common::units_decimal_nonnegative_pskel base;
    base::_reset ();

    this->v_state_attr_stack_.clear ();

    if (this->type_parser_)
      this->type_parser_->_reset ();
  }

  const char* death_rate_type_pskel::
  _static_type ()
  {
    return "death_rate_type cell_cycle";
  }

  const char* death_rate_type_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_death_rate_type_pskel_inheritance_map_entry_ (
    death_rate_type_pskel::_static_type (),
    ::common::units_decimal_nonnegative_pskel::_static_type ());

  ::common::units_decimal_nonnegative* death_rate_type_pskel::
  post_units_decimal_nonnegative ()
  {
    assert (this->units_decimal_nonnegative_impl_);
    return this->units_decimal_nonnegative_impl_->post_units_decimal_nonnegative ();
  }

  // cell_cycle_arrest_pskel
  //

  void cell_cycle_arrest_pskel::
  condition (::cell_cycle::arrest_condition* x)
  {
    if (this->cell_cycle_arrest_impl_)
      this->cell_cycle_arrest_impl_->condition (x);
  }

  void cell_cycle_arrest_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->condition_parser_)
      this->condition_parser_->_reset ();

    if (this->condition_parser_map_)
      this->condition_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_cycle_arrest_pskel::
  _static_type ()
  {
    return "cell_cycle_arrest cell_cycle";
  }

  const char* cell_cycle_arrest_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // transition_pskel
  //

  void transition_pskel::
  checkpoint_failure_probability (::common::units_decimal* x)
  {
    if (this->transition_impl_)
      this->transition_impl_->checkpoint_failure_probability (x);
  }

  void transition_pskel::
  subsequent_phase (unsigned long long x)
  {
    if (this->transition_impl_)
      this->transition_impl_->subsequent_phase (x);
  }

  void transition_pskel::
  threshold (::variables::transition_threshold* x)
  {
    if (this->transition_impl_)
      this->transition_impl_->threshold (x);
  }

  void transition_pskel::
  transition_rate (::common::units_decimal* x)
  {
    if (this->transition_impl_)
      this->transition_impl_->transition_rate (x);
  }

  void transition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->checkpoint_failure_probability_parser_)
      this->checkpoint_failure_probability_parser_->_reset ();

    if (this->checkpoint_failure_probability_parser_map_)
      this->checkpoint_failure_probability_parser_map_->reset ();

    if (this->subsequent_phase_parser_)
      this->subsequent_phase_parser_->_reset ();

    if (this->subsequent_phase_parser_map_)
      this->subsequent_phase_parser_map_->reset ();

    if (this->threshold_parser_)
      this->threshold_parser_->_reset ();

    if (this->threshold_parser_map_)
      this->threshold_parser_map_->reset ();

    if (this->transition_rate_parser_)
      this->transition_rate_parser_->_reset ();

    if (this->transition_rate_parser_map_)
      this->transition_rate_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* transition_pskel::
  _static_type ()
  {
    return "transition cell_cycle";
  }

  const char* transition_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // cell_cycle_phase_pskel
  //

  void cell_cycle_phase_pskel::
  name (const ::std::string& x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->name (x);
  }

  void cell_cycle_phase_pskel::
  ID (unsigned long long x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->ID (x);
  }

  void cell_cycle_phase_pskel::
  birth_rate (::common::units_decimal_nonnegative* x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->birth_rate (x);
  }

  void cell_cycle_phase_pskel::
  duration (::common::units_decimal_nonnegative* x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->duration (x);
  }

  void cell_cycle_phase_pskel::
  death_rate (::cell_cycle::death_rate_type* x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->death_rate (x);
  }

  void cell_cycle_phase_pskel::
  net_birth_rate (::common::units_decimal* x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->net_birth_rate (x);
  }

  void cell_cycle_phase_pskel::
  population_doubling_time (::common::units_decimal_nonnegative* x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->population_doubling_time (x);
  }

  void cell_cycle_phase_pskel::
  cell_cycle_arrest (::cell_cycle::cell_cycle_arrest* x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->cell_cycle_arrest (x);
  }

  void cell_cycle_phase_pskel::
  transition (::cell_cycle::transition* x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->transition (x);
  }

  void cell_cycle_phase_pskel::
  cell_part (::phenotype_base::cell_parts* x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->cell_part (x);
  }

  void cell_cycle_phase_pskel::
  custom (::common::custom* x)
  {
    if (this->cell_cycle_phase_impl_)
      this->cell_cycle_phase_impl_->custom (x);
  }

  void cell_cycle_phase_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->birth_rate_parser_)
      this->birth_rate_parser_->_reset ();

    if (this->birth_rate_parser_map_)
      this->birth_rate_parser_map_->reset ();

    if (this->duration_parser_)
      this->duration_parser_->_reset ();

    if (this->duration_parser_map_)
      this->duration_parser_map_->reset ();

    if (this->death_rate_parser_)
      this->death_rate_parser_->_reset ();

    if (this->death_rate_parser_map_)
      this->death_rate_parser_map_->reset ();

    if (this->net_birth_rate_parser_)
      this->net_birth_rate_parser_->_reset ();

    if (this->net_birth_rate_parser_map_)
      this->net_birth_rate_parser_map_->reset ();

    if (this->population_doubling_time_parser_)
      this->population_doubling_time_parser_->_reset ();

    if (this->population_doubling_time_parser_map_)
      this->population_doubling_time_parser_map_->reset ();

    if (this->cell_cycle_arrest_parser_)
      this->cell_cycle_arrest_parser_->_reset ();

    if (this->cell_cycle_arrest_parser_map_)
      this->cell_cycle_arrest_parser_map_->reset ();

    if (this->transition_parser_)
      this->transition_parser_->_reset ();

    if (this->transition_parser_map_)
      this->transition_parser_map_->reset ();

    if (this->cell_part_parser_)
      this->cell_part_parser_->_reset ();

    if (this->cell_part_parser_map_)
      this->cell_part_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_cycle_phase_pskel::
  _static_type ()
  {
    return "cell_cycle_phase cell_cycle";
  }

  const char* cell_cycle_phase_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // summary_elements_pskel
  //

  void summary_elements_pskel::
  birth_rate (::common::units_decimal_nonnegative* x)
  {
    if (this->summary_elements_impl_)
      this->summary_elements_impl_->birth_rate (x);
  }

  void summary_elements_pskel::
  duration (::common::units_decimal_nonnegative* x)
  {
    if (this->summary_elements_impl_)
      this->summary_elements_impl_->duration (x);
  }

  void summary_elements_pskel::
  death_rate (::cell_cycle::death_rate_type* x)
  {
    if (this->summary_elements_impl_)
      this->summary_elements_impl_->death_rate (x);
  }

  void summary_elements_pskel::
  net_birth_rate (::common::units_decimal* x)
  {
    if (this->summary_elements_impl_)
      this->summary_elements_impl_->net_birth_rate (x);
  }

  void summary_elements_pskel::
  population_doubling_time (::common::units_decimal_nonnegative* x)
  {
    if (this->summary_elements_impl_)
      this->summary_elements_impl_->population_doubling_time (x);
  }

  void summary_elements_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->birth_rate_parser_)
      this->birth_rate_parser_->_reset ();

    if (this->birth_rate_parser_map_)
      this->birth_rate_parser_map_->reset ();

    if (this->duration_parser_)
      this->duration_parser_->_reset ();

    if (this->duration_parser_map_)
      this->duration_parser_map_->reset ();

    if (this->death_rate_parser_)
      this->death_rate_parser_->_reset ();

    if (this->death_rate_parser_map_)
      this->death_rate_parser_map_->reset ();

    if (this->net_birth_rate_parser_)
      this->net_birth_rate_parser_->_reset ();

    if (this->net_birth_rate_parser_map_)
      this->net_birth_rate_parser_map_->reset ();

    if (this->population_doubling_time_parser_)
      this->population_doubling_time_parser_->_reset ();

    if (this->population_doubling_time_parser_map_)
      this->population_doubling_time_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* summary_elements_pskel::
  _static_type ()
  {
    return "summary_elements cell_cycle";
  }

  const char* summary_elements_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // cell_cycle_pskel
  //

  void cell_cycle_pskel::
  model (const ::std::string& x)
  {
    if (this->cell_cycle_impl_)
      this->cell_cycle_impl_->model (x);
  }

  void cell_cycle_pskel::
  ID (unsigned long long x)
  {
    if (this->cell_cycle_impl_)
      this->cell_cycle_impl_->ID (x);
  }

  void cell_cycle_pskel::
  cell_cycle_phase (::cell_cycle::cell_cycle_phase* x)
  {
    if (this->cell_cycle_impl_)
      this->cell_cycle_impl_->cell_cycle_phase (x);
  }

  void cell_cycle_pskel::
  cell_death (::cell_cycle::cell_death* x)
  {
    if (this->cell_cycle_impl_)
      this->cell_cycle_impl_->cell_death (x);
  }

  void cell_cycle_pskel::
  summary_elements (::cell_cycle::summary_elements* x)
  {
    if (this->cell_cycle_impl_)
      this->cell_cycle_impl_->summary_elements (x);
  }

  void cell_cycle_pskel::
  custom (::common::custom* x)
  {
    if (this->cell_cycle_impl_)
      this->cell_cycle_impl_->custom (x);
  }

  void cell_cycle_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->model_parser_)
      this->model_parser_->_reset ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->cell_cycle_phase_parser_)
      this->cell_cycle_phase_parser_->_reset ();

    if (this->cell_cycle_phase_parser_map_)
      this->cell_cycle_phase_parser_map_->reset ();

    if (this->cell_death_parser_)
      this->cell_death_parser_->_reset ();

    if (this->cell_death_parser_map_)
      this->cell_death_parser_map_->reset ();

    if (this->summary_elements_parser_)
      this->summary_elements_parser_->_reset ();

    if (this->summary_elements_parser_map_)
      this->summary_elements_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_cycle_pskel::
  _static_type ()
  {
    return "cell_cycle cell_cycle";
  }

  const char* cell_cycle_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // cell_death_pskel
  //

  void cell_death_pskel::
  type (const ::cell_cycle::death_type& x)
  {
    if (this->cell_death_impl_)
      this->cell_death_impl_->type (x);
  }

  void cell_death_pskel::
  ID (unsigned long long x)
  {
    if (this->cell_death_impl_)
      this->cell_death_impl_->ID (x);
  }

  void cell_death_pskel::
  duration (::common::units_decimal* x)
  {
    if (this->cell_death_impl_)
      this->cell_death_impl_->duration (x);
  }

  void cell_death_pskel::
  cell_part (::phenotype_base::cell_parts* x)
  {
    if (this->cell_death_impl_)
      this->cell_death_impl_->cell_part (x);
  }

  void cell_death_pskel::
  custom (::common::custom* x)
  {
    if (this->cell_death_impl_)
      this->cell_death_impl_->custom (x);
  }

  void cell_death_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->duration_parser_)
      this->duration_parser_->_reset ();

    if (this->duration_parser_map_)
      this->duration_parser_map_->reset ();

    if (this->cell_part_parser_)
      this->cell_part_parser_->_reset ();

    if (this->cell_part_parser_map_)
      this->cell_part_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_death_pskel::
  _static_type ()
  {
    return "cell_death cell_cycle";
  }

  const char* cell_death_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // arrest_type_pskel
  //

  const char* arrest_type_pskel::
  _static_type ()
  {
    return "arrest_type cell_cycle";
  }

  const char* arrest_type_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_arrest_type_pskel_inheritance_map_entry_ (
    arrest_type_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string arrest_type_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const arrest_type_pskel::_xsde_arrest_type_pskel_enums_[6UL] = 
  {
    "maximum_area_fraction",
    "maximum_cell_density",
    "maximum_cell_number",
    "maximum_cell_surface_density",
    "maximum_cell_volume_density",
    "maximum_volume_fraction"
  };

  // arrest_condition_pskel
  //

  void arrest_condition_pskel::
  type (const ::cell_cycle::arrest_type& x)
  {
    if (this->arrest_condition_impl_)
      this->arrest_condition_impl_->type (x);
  }

  void arrest_condition_pskel::
  _reset ()
  {
    typedef ::common::units_decimal_pskel base;
    base::_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();
  }

  const char* arrest_condition_pskel::
  _static_type ()
  {
    return "arrest_condition cell_cycle";
  }

  const char* arrest_condition_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_arrest_condition_pskel_inheritance_map_entry_ (
    arrest_condition_pskel::_static_type (),
    ::common::units_decimal_pskel::_static_type ());

  ::common::units_decimal* arrest_condition_pskel::
  post_units_decimal ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->post_units_decimal ();
  }

  // cycles_and_deaths_pskel
  //

  void cycles_and_deaths_pskel::
  cell_cycle (::cell_cycle::cell_cycle* x)
  {
    if (this->cycles_and_deaths_impl_)
      this->cycles_and_deaths_impl_->cell_cycle (x);
  }

  void cycles_and_deaths_pskel::
  cell_death (::cell_cycle::cell_death* x)
  {
    if (this->cycles_and_deaths_impl_)
      this->cycles_and_deaths_impl_->cell_death (x);
  }

  void cycles_and_deaths_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->cell_cycle_parser_)
      this->cell_cycle_parser_->_reset ();

    if (this->cell_cycle_parser_map_)
      this->cell_cycle_parser_map_->reset ();

    if (this->cell_death_parser_)
      this->cell_death_parser_->_reset ();

    if (this->cell_death_parser_map_)
      this->cell_death_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cycles_and_deaths_pskel::
  _static_type ()
  {
    return "cycles_and_deaths cell_cycle";
  }

  const char* cycles_and_deaths_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace cell_cycle
{
  // Element validation and dispatch functions for cell_cycle_arrest_pskel.
  //
  bool cell_cycle_arrest_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "condition" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_cycle_arrest_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_cycle_arrest_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_cycle_arrest_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_cycle_arrest_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cell_cycle_arrest_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "condition" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::arrest_condition_pskel* p = 0;

            if (t == 0 && this->condition_parser_ != 0)
              p = this->condition_parser_;
            else
            {
              const char* ts = ::cell_cycle::arrest_condition_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->condition_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->condition_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->condition_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::arrest_condition_pskel* > (
                    this->condition_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::arrest_condition_pskel* p =
            static_cast< ::cell_cycle::arrest_condition_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::arrest_condition* tmp = p->post_arrest_condition ();
              this->condition (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for transition_pskel.
  //
  bool transition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "checkpoint_failure_probability" && ns.empty ())
          s = 0UL;
        else if (n == "subsequent_phase" && ns.empty ())
          s = 1UL;
        else if (n == "threshold" && ns.empty ())
          s = 2UL;
        else if (n == "transition_rate" && ns.empty ())
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &transition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool transition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void transition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void transition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void transition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "checkpoint_failure_probability" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->checkpoint_failure_probability_parser_ != 0)
              p = this->checkpoint_failure_probability_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->checkpoint_failure_probability_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->checkpoint_failure_probability_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->checkpoint_failure_probability_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->checkpoint_failure_probability_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->checkpoint_failure_probability (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "subsequent_phase" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::unsigned_long_pskel* p = 0;

            if (t == 0 && this->subsequent_phase_parser_ != 0)
              p = this->subsequent_phase_parser_;
            else
            {
              const char* ts = ::xml_schema::unsigned_long_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->subsequent_phase_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->subsequent_phase_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->subsequent_phase_parser_map_ != 0)
                  p = static_cast< ::xml_schema::unsigned_long_pskel* > (
                    this->subsequent_phase_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::unsigned_long_pskel* p =
            static_cast< ::xml_schema::unsigned_long_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              unsigned long long tmp = p->post_unsigned_long ();
              this->subsequent_phase (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "threshold" && ns.empty ())
        {
          if (start)
          {
            ::variables::transition_threshold_pskel* p = 0;

            if (t == 0 && this->threshold_parser_ != 0)
              p = this->threshold_parser_;
            else
            {
              const char* ts = ::variables::transition_threshold_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->threshold_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->threshold_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->threshold_parser_map_ != 0)
                  p = static_cast< ::variables::transition_threshold_pskel* > (
                    this->threshold_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::transition_threshold_pskel* p =
            static_cast< ::variables::transition_threshold_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::variables::transition_threshold* tmp = p->post_transition_threshold1 ();
              this->threshold (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "transition_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->transition_rate_parser_ != 0)
              p = this->transition_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->transition_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->transition_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->transition_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->transition_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->transition_rate (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cell_cycle_phase_pskel.
  //
  bool cell_cycle_phase_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if ((n == "birth_rate" && ns.empty ()) ||
            (n == "duration" && ns.empty ()) ||
            (n == "death_rate" && ns.empty ()) ||
            (n == "net_birth_rate" && ns.empty ()) ||
            (n == "population_doubling_time" && ns.empty ()))
          s = 0UL;
        else if (n == "cell_cycle_arrest" && ns.empty ())
          s = 1UL;
        else if (n == "transition" && ns.empty ())
          s = 2UL;
        else if (n == "cell_part" && ns.empty ())
          s = 3UL;
        else if (n == "custom" && ns.empty ())
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_cycle_phase_pskel::sequence_1;
          vd->state = s;
          vd->count = 0;

          this->sequence_1 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_cycle_phase_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_cycle_phase_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_cycle_phase_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cell_cycle_phase_pskel::
  sequence_1 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        unsigned long s = ~0UL;

        if (n == "birth_rate" && ns.empty ())
          s = 0UL;
        else if (n == "duration" && ns.empty ())
          s = 1UL;
        else if (n == "death_rate" && ns.empty ())
          s = 2UL;
        else if (n == "net_birth_rate" && ns.empty ())
          s = 3UL;
        else if (n == "population_doubling_time" && ns.empty ())
          s = 4UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = 1UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &cell_cycle_phase_pskel::sequence_0;
          vd.state = s;
          vd.count = 0;

          this->sequence_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "cell_cycle_arrest" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::cell_cycle_arrest_pskel* p = 0;

            if (t == 0 && this->cell_cycle_arrest_parser_ != 0)
              p = this->cell_cycle_arrest_parser_;
            else
            {
              const char* ts = ::cell_cycle::cell_cycle_arrest_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_cycle_arrest_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_cycle_arrest_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_cycle_arrest_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::cell_cycle_arrest_pskel* > (
                    this->cell_cycle_arrest_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::cell_cycle_arrest_pskel* p =
            static_cast< ::cell_cycle::cell_cycle_arrest_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::cell_cycle_arrest* tmp = p->post_cell_cycle_arrest ();
              this->cell_cycle_arrest (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "transition" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::transition_pskel* p = 0;

            if (t == 0 && this->transition_parser_ != 0)
              p = this->transition_parser_;
            else
            {
              const char* ts = ::cell_cycle::transition_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->transition_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->transition_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->transition_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::transition_pskel* > (
                    this->transition_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::transition_pskel* p =
            static_cast< ::cell_cycle::transition_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::transition* tmp = p->post_transition ();
              this->transition (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "cell_part" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_base::cell_parts_pskel* p = 0;

            if (t == 0 && this->cell_part_parser_ != 0)
              p = this->cell_part_parser_;
            else
            {
              const char* ts = ::phenotype_base::cell_parts_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_part_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_part_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_part_parser_map_ != 0)
                  p = static_cast< ::phenotype_base::cell_parts_pskel* > (
                    this->cell_part_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_base::cell_parts_pskel* p =
            static_cast< ::phenotype_base::cell_parts_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_base::cell_parts* tmp = p->post_cell_parts ();
              this->cell_part (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void cell_cycle_phase_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "birth_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->birth_rate_parser_ != 0)
              p = this->birth_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->birth_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->birth_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->birth_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->birth_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->birth_rate (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "duration" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->duration_parser_ != 0)
              p = this->duration_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->duration_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->duration_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->duration_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->duration_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->duration (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "death_rate" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::death_rate_type_pskel* p = 0;

            if (t == 0 && this->death_rate_parser_ != 0)
              p = this->death_rate_parser_;
            else
            {
              const char* ts = ::cell_cycle::death_rate_type_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->death_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->death_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->death_rate_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::death_rate_type_pskel* > (
                    this->death_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::death_rate_type_pskel* p =
            static_cast< ::cell_cycle::death_rate_type_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::death_rate_type* tmp = p->post_death_rate_type ();
              this->death_rate (tmp);
            }

            if (++count == 3UL)
            {
              count = 0;
              state = 3UL;
            }
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "net_birth_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->net_birth_rate_parser_ != 0)
              p = this->net_birth_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->net_birth_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->net_birth_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->net_birth_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->net_birth_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->net_birth_rate (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "population_doubling_time" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->population_doubling_time_parser_ != 0)
              p = this->population_doubling_time_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->population_doubling_time_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->population_doubling_time_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->population_doubling_time_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->population_doubling_time_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->population_doubling_time (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for summary_elements_pskel.
  //
  bool summary_elements_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "birth_rate" && ns.empty ())
          s = 0UL;
        else if (n == "duration" && ns.empty ())
          s = 1UL;
        else if (n == "death_rate" && ns.empty ())
          s = 2UL;
        else if (n == "net_birth_rate" && ns.empty ())
          s = 3UL;
        else if (n == "population_doubling_time" && ns.empty ())
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &summary_elements_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool summary_elements_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void summary_elements_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void summary_elements_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void summary_elements_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "birth_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->birth_rate_parser_ != 0)
              p = this->birth_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->birth_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->birth_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->birth_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->birth_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->birth_rate (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "duration" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->duration_parser_ != 0)
              p = this->duration_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->duration_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->duration_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->duration_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->duration_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->duration (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "death_rate" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::death_rate_type_pskel* p = 0;

            if (t == 0 && this->death_rate_parser_ != 0)
              p = this->death_rate_parser_;
            else
            {
              const char* ts = ::cell_cycle::death_rate_type_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->death_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->death_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->death_rate_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::death_rate_type_pskel* > (
                    this->death_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::death_rate_type_pskel* p =
            static_cast< ::cell_cycle::death_rate_type_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::death_rate_type* tmp = p->post_death_rate_type ();
              this->death_rate (tmp);
            }

            if (++count == 3UL)
            {
              count = 0;
              state = 3UL;
            }
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "net_birth_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->net_birth_rate_parser_ != 0)
              p = this->net_birth_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->net_birth_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->net_birth_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->net_birth_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->net_birth_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->net_birth_rate (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "population_doubling_time" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->population_doubling_time_parser_ != 0)
              p = this->population_doubling_time_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->population_doubling_time_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->population_doubling_time_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->population_doubling_time_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->population_doubling_time_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->population_doubling_time (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cell_cycle_pskel.
  //
  bool cell_cycle_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "cell_cycle_phase" && ns.empty ())
          s = 0UL;
        else if (n == "cell_death" && ns.empty ())
          s = 1UL;
        else if (n == "summary_elements" && ns.empty ())
          s = 2UL;
        else if (n == "custom" && ns.empty ())
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_cycle_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_cycle_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_cycle_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_cycle_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cell_cycle_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "cell_cycle_phase" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::cell_cycle_phase_pskel* p = 0;

            if (t == 0 && this->cell_cycle_phase_parser_ != 0)
              p = this->cell_cycle_phase_parser_;
            else
            {
              const char* ts = ::cell_cycle::cell_cycle_phase_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_cycle_phase_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_cycle_phase_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_cycle_phase_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::cell_cycle_phase_pskel* > (
                    this->cell_cycle_phase_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::cell_cycle_phase_pskel* p =
            static_cast< ::cell_cycle::cell_cycle_phase_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::cell_cycle_phase* tmp = p->post_cell_cycle_phase ();
              this->cell_cycle_phase (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "cell_death" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::cell_death_pskel* p = 0;

            if (t == 0 && this->cell_death_parser_ != 0)
              p = this->cell_death_parser_;
            else
            {
              const char* ts = ::cell_cycle::cell_death_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_death_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_death_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_death_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::cell_death_pskel* > (
                    this->cell_death_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::cell_death_pskel* p =
            static_cast< ::cell_cycle::cell_death_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::cell_death* tmp = p->post_cell_death ();
              this->cell_death (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "summary_elements" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::summary_elements_pskel* p = 0;

            if (t == 0 && this->summary_elements_parser_ != 0)
              p = this->summary_elements_parser_;
            else
            {
              const char* ts = ::cell_cycle::summary_elements_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->summary_elements_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->summary_elements_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->summary_elements_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::summary_elements_pskel* > (
                    this->summary_elements_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::summary_elements_pskel* p =
            static_cast< ::cell_cycle::summary_elements_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::summary_elements* tmp = p->post_summary_elements ();
              this->summary_elements (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cell_death_pskel.
  //
  bool cell_death_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "duration" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_death_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_death_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_death_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_death_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void cell_death_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "duration" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->duration_parser_ != 0)
              p = this->duration_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->duration_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->duration_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->duration_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->duration_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->duration (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "cell_part" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_base::cell_parts_pskel* p = 0;

            if (t == 0 && this->cell_part_parser_ != 0)
              p = this->cell_part_parser_;
            else
            {
              const char* ts = ::phenotype_base::cell_parts_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_part_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_part_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_part_parser_map_ != 0)
                  p = static_cast< ::phenotype_base::cell_parts_pskel* > (
                    this->cell_part_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_base::cell_parts_pskel* p =
            static_cast< ::phenotype_base::cell_parts_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_base::cell_parts* tmp = p->post_cell_parts ();
              this->cell_part (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cycles_and_deaths_pskel.
  //
  bool cycles_and_deaths_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "cell_cycle" && ns.empty ())
          s = 0UL;
        else if (n == "cell_death" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cycles_and_deaths_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cycles_and_deaths_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cycles_and_deaths_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cycles_and_deaths_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cycles_and_deaths_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "cell_cycle" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::cell_cycle_pskel* p = 0;

            if (t == 0 && this->cell_cycle_parser_ != 0)
              p = this->cell_cycle_parser_;
            else
            {
              const char* ts = ::cell_cycle::cell_cycle_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_cycle_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_cycle_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_cycle_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::cell_cycle_pskel* > (
                    this->cell_cycle_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::cell_cycle_pskel* p =
            static_cast< ::cell_cycle::cell_cycle_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::cell_cycle* tmp = p->post_cell_cycle ();
              this->cell_cycle (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "cell_death" && ns.empty ())
        {
          if (start)
          {
            ::cell_cycle::cell_death_pskel* p = 0;

            if (t == 0 && this->cell_death_parser_ != 0)
              p = this->cell_death_parser_;
            else
            {
              const char* ts = ::cell_cycle::cell_death_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_death_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_death_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_death_parser_map_ != 0)
                  p = static_cast< ::cell_cycle::cell_death_pskel* > (
                    this->cell_death_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell_cycle::cell_death_pskel* p =
            static_cast< ::cell_cycle::cell_death_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell_cycle::cell_death* tmp = p->post_cell_death ();
              this->cell_death (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace cell_cycle
{
  // Attribute validation and dispatch functions for death_rate_type_pskel.
  //
  bool death_rate_type_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::cell_cycle::death_type& tmp = this->type_parser_->post_death_type ();

          this->type (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
      return true;
    }

    typedef ::common::units_decimal_nonnegative_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  bool death_rate_type_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if (!n.empty ())
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    typedef ::common::units_decimal_nonnegative_pskel base;
    return base::_attribute_impl_phase_two (ns, n, s);
  }

  void death_rate_type_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.type = false;
    typedef ::common::units_decimal_nonnegative_pskel base;
    base::_pre_a_validate ();
  }

  void death_rate_type_pskel::
  _post_a_validate ()
  {
    typedef ::common::units_decimal_nonnegative_pskel base;
    base::_post_a_validate ();

    if (this->_context ().error_type ())
      return;

    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.type)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for cell_cycle_phase_pskel.
  //
  bool cell_cycle_phase_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned long long tmp = this->ID_parser_->post_unsigned_long ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  bool cell_cycle_phase_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if (!n.empty ())
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }

  void cell_cycle_phase_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void cell_cycle_phase_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for cell_cycle_pskel.
  //
  bool cell_cycle_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "model" && ns.empty ())
    {
      if (this->model_parser_)
      {
        this->model_parser_->pre ();

        this->model_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->model_parser_->_characters (s);

        if (!ctx.error_type ())
          this->model_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->model_parser_->post_string ();

          this->model (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->model = true;
      return true;
    }

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned long long tmp = this->ID_parser_->post_unsigned_long ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  bool cell_cycle_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if (!n.empty ())
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }

  void cell_cycle_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.model = false;
  }

  void cell_cycle_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.model)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for cell_death_pskel.
  //
  bool cell_death_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::cell_cycle::death_type& tmp = this->type_parser_->post_death_type ();

          this->type (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
      return true;
    }

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned long long tmp = this->ID_parser_->post_unsigned_long ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  bool cell_death_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if (!n.empty ())
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }

  void cell_death_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.type = false;
  }

  void cell_death_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.type)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for arrest_condition_pskel.
  //
  bool arrest_condition_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::cell_cycle::arrest_type& tmp = this->type_parser_->post_arrest_type ();

          this->type (tmp);
        }
      }

      return true;
    }

    typedef ::common::units_decimal_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace cell_cycle
{
}

// Begin epilogue.
//
//
// End epilogue.

