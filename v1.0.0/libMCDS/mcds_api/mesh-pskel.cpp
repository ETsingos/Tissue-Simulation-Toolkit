// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "mesh-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace mesh
{
  // bounding_box_pskel
  //

  void bounding_box_pskel::
  type (const ::std::string& x)
  {
    if (this->bounding_box_impl_)
      this->bounding_box_impl_->type (x);
  }

  void bounding_box_pskel::
  _reset ()
  {
    typedef ::common::units_double_list_pskel base;
    base::_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();
  }

  const char* bounding_box_pskel::
  _static_type ()
  {
    return "bounding_box mesh";
  }

  const char* bounding_box_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_bounding_box_pskel_inheritance_map_entry_ (
    bounding_box_pskel::_static_type (),
    ::common::units_double_list_pskel::_static_type ());

  ::common::units_double_list* bounding_box_pskel::
  post_units_double_list ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->post_units_double_list ();
  }

  // mesh_pskel
  //

  void mesh_pskel::
  type (const ::std::string& x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->type (x);
  }

  void mesh_pskel::
  uniform (bool x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->uniform (x);
  }

  void mesh_pskel::
  regular (bool x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->regular (x);
  }

  void mesh_pskel::
  units (const ::std::string& x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->units (x);
  }

  void mesh_pskel::
  bounding_box (::mesh::bounding_box* x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->bounding_box (x);
  }

  void mesh_pskel::
  x_coordinates (::common::units_double_list* x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->x_coordinates (x);
  }

  void mesh_pskel::
  y_coordinates (::common::units_double_list* x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->y_coordinates (x);
  }

  void mesh_pskel::
  z_coordinates (::common::units_double_list* x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->z_coordinates (x);
  }

  void mesh_pskel::
  voxels (::mesh::list_of_voxels* x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->voxels (x);
  }

  void mesh_pskel::
  custom (::common::custom* x)
  {
    if (this->mesh_impl_)
      this->mesh_impl_->custom (x);
  }

  void mesh_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->uniform_parser_)
      this->uniform_parser_->_reset ();

    if (this->regular_parser_)
      this->regular_parser_->_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    this->resetting_ = true;

    if (this->bounding_box_parser_)
      this->bounding_box_parser_->_reset ();

    if (this->bounding_box_parser_map_)
      this->bounding_box_parser_map_->reset ();

    if (this->x_coordinates_parser_)
      this->x_coordinates_parser_->_reset ();

    if (this->x_coordinates_parser_map_)
      this->x_coordinates_parser_map_->reset ();

    if (this->y_coordinates_parser_)
      this->y_coordinates_parser_->_reset ();

    if (this->y_coordinates_parser_map_)
      this->y_coordinates_parser_map_->reset ();

    if (this->z_coordinates_parser_)
      this->z_coordinates_parser_->_reset ();

    if (this->z_coordinates_parser_map_)
      this->z_coordinates_parser_map_->reset ();

    if (this->voxels_parser_)
      this->voxels_parser_->_reset ();

    if (this->voxels_parser_map_)
      this->voxels_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* mesh_pskel::
  _static_type ()
  {
    return "mesh mesh";
  }

  const char* mesh_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // list_of_voxels_pskel
  //

  void list_of_voxels_pskel::
  type (const ::common::data_storage_formats& x)
  {
    if (this->list_of_voxels_impl_)
      this->list_of_voxels_impl_->type (x);
  }

  void list_of_voxels_pskel::
  filename (const ::std::string& x)
  {
    if (this->list_of_voxels_impl_)
      this->list_of_voxels_impl_->filename (x);
  }

  void list_of_voxels_pskel::
  voxel (::mesh::voxel* x)
  {
    if (this->list_of_voxels_impl_)
      this->list_of_voxels_impl_->voxel (x);
  }

  void list_of_voxels_pskel::
  custom (::common::custom* x)
  {
    if (this->list_of_voxels_impl_)
      this->list_of_voxels_impl_->custom (x);
  }

  void list_of_voxels_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = true;

    if (this->filename_parser_)
      this->filename_parser_->_reset ();

    if (this->filename_parser_map_)
      this->filename_parser_map_->reset ();

    if (this->voxel_parser_)
      this->voxel_parser_->_reset ();

    if (this->voxel_parser_map_)
      this->voxel_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_voxels_pskel::
  _static_type ()
  {
    return "list_of_voxels mesh";
  }

  const char* list_of_voxels_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // voxel_pskel
  //

  void voxel_pskel::
  ID (unsigned int x)
  {
    if (this->voxel_impl_)
      this->voxel_impl_->ID (x);
  }

  void voxel_pskel::
  type (const ::std::string& x)
  {
    if (this->voxel_impl_)
      this->voxel_impl_->type (x);
  }

  void voxel_pskel::
  center (::common::units_double_list* x)
  {
    if (this->voxel_impl_)
      this->voxel_impl_->center (x);
  }

  void voxel_pskel::
  volume (::common::units_decimal_nonnegative* x)
  {
    if (this->voxel_impl_)
      this->voxel_impl_->volume (x);
  }

  void voxel_pskel::
  custom (::common::custom* x)
  {
    if (this->voxel_impl_)
      this->voxel_impl_->custom (x);
  }

  void voxel_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = true;

    if (this->center_parser_)
      this->center_parser_->_reset ();

    if (this->center_parser_map_)
      this->center_parser_map_->reset ();

    if (this->volume_parser_)
      this->volume_parser_->_reset ();

    if (this->volume_parser_map_)
      this->volume_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* voxel_pskel::
  _static_type ()
  {
    return "voxel mesh";
  }

  const char* voxel_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // node_pskel
  //

  void node_pskel::
  ID (unsigned int x)
  {
    if (this->node_impl_)
      this->node_impl_->ID (x);
  }

  void node_pskel::
  position (::common::units_double_list* x)
  {
    if (this->node_impl_)
      this->node_impl_->position (x);
  }

  void node_pskel::
  custom (::common::custom* x)
  {
    if (this->node_impl_)
      this->node_impl_->custom (x);
  }

  void node_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->position_parser_)
      this->position_parser_->_reset ();

    if (this->position_parser_map_)
      this->position_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* node_pskel::
  _static_type ()
  {
    return "node mesh";
  }

  const char* node_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // edge_pskel
  //

  void edge_pskel::
  ID (unsigned int x)
  {
    if (this->edge_impl_)
      this->edge_impl_->ID (x);
  }

  void edge_pskel::
  node_ID (unsigned int x)
  {
    if (this->edge_impl_)
      this->edge_impl_->node_ID (x);
  }

  void edge_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->node_ID_parser_)
      this->node_ID_parser_->_reset ();

    if (this->node_ID_parser_map_)
      this->node_ID_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* edge_pskel::
  _static_type ()
  {
    return "edge mesh";
  }

  const char* edge_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // face_pskel
  //

  void face_pskel::
  ID (unsigned int x)
  {
    if (this->face_impl_)
      this->face_impl_->ID (x);
  }

  void face_pskel::
  edge_ID (unsigned int x)
  {
    if (this->face_impl_)
      this->face_impl_->edge_ID (x);
  }

  void face_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->edge_ID_parser_)
      this->edge_ID_parser_->_reset ();

    if (this->edge_ID_parser_map_)
      this->edge_ID_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* face_pskel::
  _static_type ()
  {
    return "face mesh";
  }

  const char* face_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // int_list_xpath_pskel
  //

  void int_list_xpath_pskel::
  xpath (const ::std::string& x)
  {
    if (this->int_list_xpath_impl_)
      this->int_list_xpath_impl_->xpath (x);
  }

  void int_list_xpath_pskel::
  grouping_number (unsigned short x)
  {
    if (this->int_list_xpath_impl_)
      this->int_list_xpath_impl_->grouping_number (x);
  }

  void int_list_xpath_pskel::
  _reset ()
  {
    typedef ::common::unsigned_int_list_pskel base;
    base::_reset ();

    if (this->xpath_parser_)
      this->xpath_parser_->_reset ();

    if (this->grouping_number_parser_)
      this->grouping_number_parser_->_reset ();
  }

  const char* int_list_xpath_pskel::
  _static_type ()
  {
    return "int_list_xpath mesh";
  }

  const char* int_list_xpath_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_int_list_xpath_pskel_inheritance_map_entry_ (
    int_list_xpath_pskel::_static_type (),
    ::common::unsigned_int_list_pskel::_static_type ());

  ::common::unsigned_int_list* int_list_xpath_pskel::
  post_unsigned_int_list ()
  {
    assert (this->unsigned_int_list_impl_);
    return this->unsigned_int_list_impl_->post_unsigned_int_list ();
  }
}

#include <assert.h>

namespace mesh
{
  // Element validation and dispatch functions for mesh_pskel.
  //
  bool mesh_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool mesh_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void mesh_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void mesh_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void mesh_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "bounding_box" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::mesh::bounding_box_pskel* p = 0;

          if (t == 0 && this->bounding_box_parser_ != 0)
            p = this->bounding_box_parser_;
          else
          {
            const char* ts = ::mesh::bounding_box_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->bounding_box_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->bounding_box_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->bounding_box_parser_map_ != 0)
                p = static_cast< ::mesh::bounding_box_pskel* > (
                  this->bounding_box_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::mesh::bounding_box_pskel* p =
          static_cast< ::mesh::bounding_box_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::mesh::bounding_box* tmp = p->post_bounding_box ();
            this->bounding_box (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "x_coordinates" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_double_list_pskel* p = 0;

          if (t == 0 && this->x_coordinates_parser_ != 0)
            p = this->x_coordinates_parser_;
          else
          {
            const char* ts = ::common::units_double_list_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->x_coordinates_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->x_coordinates_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->x_coordinates_parser_map_ != 0)
                p = static_cast< ::common::units_double_list_pskel* > (
                  this->x_coordinates_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_double_list_pskel* p =
          static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_double_list* tmp = p->post_units_double_list ();
            this->x_coordinates (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "y_coordinates" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::units_double_list_pskel* p = 0;

          if (t == 0 && this->y_coordinates_parser_ != 0)
            p = this->y_coordinates_parser_;
          else
          {
            const char* ts = ::common::units_double_list_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->y_coordinates_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->y_coordinates_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->y_coordinates_parser_map_ != 0)
                p = static_cast< ::common::units_double_list_pskel* > (
                  this->y_coordinates_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_double_list_pskel* p =
          static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_double_list* tmp = p->post_units_double_list ();
            this->y_coordinates (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "z_coordinates" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::units_double_list_pskel* p = 0;

          if (t == 0 && this->z_coordinates_parser_ != 0)
            p = this->z_coordinates_parser_;
          else
          {
            const char* ts = ::common::units_double_list_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->z_coordinates_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->z_coordinates_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->z_coordinates_parser_map_ != 0)
                p = static_cast< ::common::units_double_list_pskel* > (
                  this->z_coordinates_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_double_list_pskel* p =
          static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_double_list* tmp = p->post_units_double_list ();
            this->z_coordinates (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "voxels" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::mesh::list_of_voxels_pskel* p = 0;

          if (t == 0 && this->voxels_parser_ != 0)
            p = this->voxels_parser_;
          else
          {
            const char* ts = ::mesh::list_of_voxels_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->voxels_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->voxels_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->voxels_parser_map_ != 0)
                p = static_cast< ::mesh::list_of_voxels_pskel* > (
                  this->voxels_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::mesh::list_of_voxels_pskel* p =
          static_cast< ::mesh::list_of_voxels_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::mesh::list_of_voxels* tmp = p->post_list_of_voxels ();
            this->voxels (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[5UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[5UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for list_of_voxels_pskel.
  //
  bool list_of_voxels_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "filename" && ns.empty ())
          s = 0UL;
        else if (n == "voxel" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &list_of_voxels_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool list_of_voxels_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void list_of_voxels_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void list_of_voxels_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void list_of_voxels_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "filename" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->filename_parser_ != 0)
              p = this->filename_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->filename_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->filename_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->filename_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->filename_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->filename (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "voxel" && ns.empty ())
        {
          if (start)
          {
            ::mesh::voxel_pskel* p = 0;

            if (t == 0 && this->voxel_parser_ != 0)
              p = this->voxel_parser_;
            else
            {
              const char* ts = ::mesh::voxel_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->voxel_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->voxel_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->voxel_parser_map_ != 0)
                  p = static_cast< ::mesh::voxel_pskel* > (
                    this->voxel_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::mesh::voxel_pskel* p =
            static_cast< ::mesh::voxel_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::mesh::voxel* tmp = p->post_voxel ();
              this->voxel (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for voxel_pskel.
  //
  bool voxel_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool voxel_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void voxel_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void voxel_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }
    else
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void voxel_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "center" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_double_list_pskel* p = 0;

          if (t == 0 && this->center_parser_ != 0)
            p = this->center_parser_;
          else
          {
            const char* ts = ::common::units_double_list_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->center_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->center_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->center_parser_map_ != 0)
                p = static_cast< ::common::units_double_list_pskel* > (
                  this->center_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_double_list_pskel* p =
          static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_double_list* tmp = p->post_units_double_list ();
            this->center (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "volume" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->volume_parser_ != 0)
            p = this->volume_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->volume_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->volume_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->volume_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->volume_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->volume (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }

      if (count[1UL] == 0)
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }

      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for node_pskel.
  //
  bool node_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "position" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &node_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool node_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void node_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void node_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void node_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "position" && ns.empty ())
        {
          if (start)
          {
            ::common::units_double_list_pskel* p = 0;

            if (t == 0 && this->position_parser_ != 0)
              p = this->position_parser_;
            else
            {
              const char* ts = ::common::units_double_list_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->position_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->position_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->position_parser_map_ != 0)
                  p = static_cast< ::common::units_double_list_pskel* > (
                    this->position_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_double_list_pskel* p =
            static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_double_list* tmp = p->post_units_double_list ();
              this->position (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for edge_pskel.
  //
  bool edge_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "node_ID" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &edge_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool edge_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void edge_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void edge_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void edge_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "node_ID" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::unsigned_int_pskel* p = 0;

            if (t == 0 && this->node_ID_parser_ != 0)
              p = this->node_ID_parser_;
            else
            {
              const char* ts = ::xml_schema::unsigned_int_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->node_ID_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->node_ID_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->node_ID_parser_map_ != 0)
                  p = static_cast< ::xml_schema::unsigned_int_pskel* > (
                    this->node_ID_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::unsigned_int_pskel* p =
            static_cast< ::xml_schema::unsigned_int_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              unsigned int tmp = p->post_unsigned_int ();
              this->node_ID (tmp);
            }

            if (++count == 2UL)
            {
              count = 0;
              state = ~0UL;
            }
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 2UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for face_pskel.
  //
  bool face_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "edge_ID" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &face_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool face_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void face_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void face_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void face_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "edge_ID" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::unsigned_int_pskel* p = 0;

            if (t == 0 && this->edge_ID_parser_ != 0)
              p = this->edge_ID_parser_;
            else
            {
              const char* ts = ::xml_schema::unsigned_int_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->edge_ID_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->edge_ID_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->edge_ID_parser_map_ != 0)
                  p = static_cast< ::xml_schema::unsigned_int_pskel* > (
                    this->edge_ID_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::unsigned_int_pskel* p =
            static_cast< ::xml_schema::unsigned_int_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              unsigned int tmp = p->post_unsigned_int ();
              this->edge_ID (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 3UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace mesh
{
  // Attribute validation and dispatch functions for bounding_box_pskel.
  //
  bool bounding_box_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->type_parser_->post_string ();

          this->type (tmp);
        }
      }

      return true;
    }

    typedef ::common::units_double_list_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for mesh_pskel.
  //
  bool mesh_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->type_parser_->post_string ();

          this->type (tmp);
        }
      }

      return true;
    }

    if (n == "uniform" && ns.empty ())
    {
      if (this->uniform_parser_)
      {
        this->uniform_parser_->pre ();

        this->uniform_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uniform_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uniform_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          bool tmp = this->uniform_parser_->post_boolean ();

          this->uniform (tmp);
        }
      }

      return true;
    }

    if (n == "regular" && ns.empty ())
    {
      if (this->regular_parser_)
      {
        this->regular_parser_->pre ();

        this->regular_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->regular_parser_->_characters (s);

        if (!ctx.error_type ())
          this->regular_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          bool tmp = this->regular_parser_->post_boolean ();

          this->regular (tmp);
        }
      }

      return true;
    }

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for list_of_voxels_pskel.
  //
  bool list_of_voxels_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::common::data_storage_formats& tmp = this->type_parser_->post_data_storage_formats ();

          this->type (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for voxel_pskel.
  //
  bool voxel_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->type_parser_->post_string ();

          this->type (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for node_pskel.
  //
  bool node_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for edge_pskel.
  //
  bool edge_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for face_pskel.
  //
  bool face_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for int_list_xpath_pskel.
  //
  bool int_list_xpath_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "xpath" && ns.empty ())
    {
      if (this->xpath_parser_)
      {
        this->xpath_parser_->pre ();

        this->xpath_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->xpath_parser_->_characters (s);

        if (!ctx.error_type ())
          this->xpath_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->xpath_parser_->post_string ();

          this->xpath (tmp);
        }
      }

      return true;
    }

    if (n == "grouping_number" && ns.empty ())
    {
      if (this->grouping_number_parser_)
      {
        this->grouping_number_parser_->pre ();

        this->grouping_number_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->grouping_number_parser_->_characters (s);

        if (!ctx.error_type ())
          this->grouping_number_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned short tmp = this->grouping_number_parser_->post_unsigned_short ();

          this->grouping_number (tmp);
        }
      }

      return true;
    }

    typedef ::common::unsigned_int_list_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace mesh
{
}

// Begin epilogue.
//
//
// End epilogue.

