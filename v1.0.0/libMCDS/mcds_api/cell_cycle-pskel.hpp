// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_CYCLE_PSKEL_HPP
#define CELL_CYCLE_PSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
namespace cell_cycle
{
  class death_type_pskel;
  class death_rate_type_pskel;
  class cell_cycle_arrest_pskel;
  class transition_pskel;
  class cell_cycle_phase_pskel;
  class summary_elements_pskel;
  class cell_cycle_pskel;
  class cell_death_pskel;
  class arrest_type_pskel;
  class arrest_condition_pskel;
  class cycles_and_deaths_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/parser/map.hxx>
#include <xsde/cxx/parser/substitution-map-callback.hxx>
#include <xsde/cxx/parser/substitution-map-load.hxx>
#include <xsde/cxx/parser/validating/inheritance-map-load.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "cell_cycle.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser map interface and default implementation.
  //
  using ::xsde::cxx::parser::parser_map;
  using ::xsde::cxx::parser::parser_map_impl;

  // Parser substitution map callack.
  //
  using ::xsde::cxx::parser::parser_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::parser::parser_smap_buckets;
  using ::xsde::cxx::parser::parser_smap_elements;
  using ::xsde::cxx::parser::validating::parser_imap_buckets;
  using ::xsde::cxx::parser::validating::parser_imap_elements;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "common-pskel.hpp"

#include "variables-pskel.hpp"

#include "phenotype_base-pskel.hpp"

namespace cell_cycle
{
  class death_type_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::cell_cycle::death_type
    post_death_type () = 0;

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    death_type_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    death_type_pskel* death_type_impl_;
    death_type_pskel (death_type_pskel*, void*);

    protected:
    static const char* const _xsde_death_type_pskel_enums_[3UL];
  };

  class death_rate_type_pskel: public ::common::units_decimal_nonnegative_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::cell_cycle::death_type&);

    virtual ::cell_cycle::death_rate_type*
    post_death_rate_type () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */,
             ::cell_cycle::death_type_pskel& /* type */);

    // Individual attribute parsers.
    //
    void
    type_parser (::cell_cycle::death_type_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    death_rate_type_pskel (::common::units_decimal_nonnegative_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_decimal_nonnegative*
    post_units_decimal_nonnegative ();

    protected:
    death_rate_type_pskel* death_rate_type_impl_;
    death_rate_type_pskel (death_rate_type_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    virtual bool
    _attribute_impl_phase_two (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);

    protected:
    ::cell_cycle::death_type_pskel* type_parser_;

    protected:
    struct v_state_attr_
    {
      bool type;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class cell_cycle_arrest_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    condition (::cell_cycle::arrest_condition*);

    virtual ::cell_cycle::cell_cycle_arrest*
    post_cell_cycle_arrest () = 0;

    // Parser construction API.
    //
    void
    parsers (::cell_cycle::arrest_condition_pskel& /* condition */);

    void
    parser_maps (::xml_schema::parser_map& /* condition */);

    // Individual element parsers.
    //
    void
    condition_parser (::cell_cycle::arrest_condition_pskel&);

    void
    condition_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_cycle_arrest_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    cell_cycle_arrest_pskel* cell_cycle_arrest_impl_;
    cell_cycle_arrest_pskel (cell_cycle_arrest_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::cell_cycle::arrest_condition_pskel* condition_parser_;
    ::xml_schema::parser_map* condition_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::cell_cycle::cell_cycle_arrest_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class transition_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    checkpoint_failure_probability (::common::units_decimal*);

    virtual void
    subsequent_phase (unsigned long long);

    virtual void
    threshold (::variables::transition_threshold*);

    virtual void
    transition_rate (::common::units_decimal*);

    virtual ::cell_cycle::transition*
    post_transition () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_pskel& /* checkpoint_failure_probability */,
             ::xml_schema::unsigned_long_pskel& /* subsequent_phase */,
             ::variables::transition_threshold_pskel& /* threshold */,
             ::common::units_decimal_pskel& /* transition_rate */);

    void
    parser_maps (::xml_schema::parser_map& /* checkpoint_failure_probability */,
                 ::xml_schema::parser_map& /* subsequent_phase */,
                 ::xml_schema::parser_map& /* threshold */,
                 ::xml_schema::parser_map& /* transition_rate */);

    // Individual element parsers.
    //
    void
    checkpoint_failure_probability_parser (::common::units_decimal_pskel&);

    void
    checkpoint_failure_probability_parser (::xml_schema::parser_map&);

    void
    subsequent_phase_parser (::xml_schema::unsigned_long_pskel&);

    void
    subsequent_phase_parser (::xml_schema::parser_map&);

    void
    threshold_parser (::variables::transition_threshold_pskel&);

    void
    threshold_parser (::xml_schema::parser_map&);

    void
    transition_rate_parser (::common::units_decimal_pskel&);

    void
    transition_rate_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    transition_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    transition_pskel* transition_impl_;
    transition_pskel (transition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_pskel* checkpoint_failure_probability_parser_;
    ::xml_schema::parser_map* checkpoint_failure_probability_parser_map_;

    ::xml_schema::unsigned_long_pskel* subsequent_phase_parser_;
    ::xml_schema::parser_map* subsequent_phase_parser_map_;

    ::variables::transition_threshold_pskel* threshold_parser_;
    ::xml_schema::parser_map* threshold_parser_map_;

    ::common::units_decimal_pskel* transition_rate_parser_;
    ::xml_schema::parser_map* transition_rate_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::cell_cycle::transition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class cell_cycle_phase_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    name (const ::std::string&);

    virtual void
    ID (unsigned long long);

    // Elements.
    //
    virtual void
    birth_rate (::common::units_decimal_nonnegative*);

    virtual void
    duration (::common::units_decimal_nonnegative*);

    virtual void
    death_rate (::cell_cycle::death_rate_type*);

    virtual void
    net_birth_rate (::common::units_decimal*);

    virtual void
    population_doubling_time (::common::units_decimal_nonnegative*);

    virtual void
    cell_cycle_arrest (::cell_cycle::cell_cycle_arrest*);

    virtual void
    transition (::cell_cycle::transition*);

    virtual void
    cell_part (::phenotype_base::cell_parts*);

    virtual void
    custom (::common::custom*);

    virtual ::cell_cycle::cell_cycle_phase*
    post_cell_cycle_phase () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::unsigned_long_pskel& /* ID */,
             ::common::units_decimal_nonnegative_pskel& /* birth_rate */,
             ::common::units_decimal_nonnegative_pskel& /* duration */,
             ::cell_cycle::death_rate_type_pskel& /* death_rate */,
             ::common::units_decimal_pskel& /* net_birth_rate */,
             ::common::units_decimal_nonnegative_pskel& /* population_doubling_time */,
             ::cell_cycle::cell_cycle_arrest_pskel& /* cell_cycle_arrest */,
             ::cell_cycle::transition_pskel& /* transition */,
             ::phenotype_base::cell_parts_pskel& /* cell_part */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* birth_rate */,
                 ::xml_schema::parser_map& /* duration */,
                 ::xml_schema::parser_map& /* death_rate */,
                 ::xml_schema::parser_map& /* net_birth_rate */,
                 ::xml_schema::parser_map& /* population_doubling_time */,
                 ::xml_schema::parser_map& /* cell_cycle_arrest */,
                 ::xml_schema::parser_map& /* transition */,
                 ::xml_schema::parser_map& /* cell_part */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    ID_parser (::xml_schema::unsigned_long_pskel&);

    // Individual element parsers.
    //
    void
    birth_rate_parser (::common::units_decimal_nonnegative_pskel&);

    void
    birth_rate_parser (::xml_schema::parser_map&);

    void
    duration_parser (::common::units_decimal_nonnegative_pskel&);

    void
    duration_parser (::xml_schema::parser_map&);

    void
    death_rate_parser (::cell_cycle::death_rate_type_pskel&);

    void
    death_rate_parser (::xml_schema::parser_map&);

    void
    net_birth_rate_parser (::common::units_decimal_pskel&);

    void
    net_birth_rate_parser (::xml_schema::parser_map&);

    void
    population_doubling_time_parser (::common::units_decimal_nonnegative_pskel&);

    void
    population_doubling_time_parser (::xml_schema::parser_map&);

    void
    cell_cycle_arrest_parser (::cell_cycle::cell_cycle_arrest_pskel&);

    void
    cell_cycle_arrest_parser (::xml_schema::parser_map&);

    void
    transition_parser (::cell_cycle::transition_pskel&);

    void
    transition_parser (::xml_schema::parser_map&);

    void
    cell_part_parser (::phenotype_base::cell_parts_pskel&);

    void
    cell_part_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_cycle_phase_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    cell_cycle_phase_pskel* cell_cycle_phase_impl_;
    cell_cycle_phase_pskel (cell_cycle_phase_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    virtual bool
    _attribute_impl_phase_two (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::unsigned_long_pskel* ID_parser_;
    ::common::units_decimal_nonnegative_pskel* birth_rate_parser_;
    ::xml_schema::parser_map* birth_rate_parser_map_;

    ::common::units_decimal_nonnegative_pskel* duration_parser_;
    ::xml_schema::parser_map* duration_parser_map_;

    ::cell_cycle::death_rate_type_pskel* death_rate_parser_;
    ::xml_schema::parser_map* death_rate_parser_map_;

    ::common::units_decimal_pskel* net_birth_rate_parser_;
    ::xml_schema::parser_map* net_birth_rate_parser_map_;

    ::common::units_decimal_nonnegative_pskel* population_doubling_time_parser_;
    ::xml_schema::parser_map* population_doubling_time_parser_map_;

    ::cell_cycle::cell_cycle_arrest_pskel* cell_cycle_arrest_parser_;
    ::xml_schema::parser_map* cell_cycle_arrest_parser_map_;

    ::cell_cycle::transition_pskel* transition_parser_;
    ::xml_schema::parser_map* transition_parser_map_;

    ::phenotype_base::cell_parts_pskel* cell_part_parser_;
    ::xml_schema::parser_map* cell_part_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::cell_cycle::cell_cycle_phase_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class summary_elements_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    birth_rate (::common::units_decimal_nonnegative*);

    virtual void
    duration (::common::units_decimal_nonnegative*);

    virtual void
    death_rate (::cell_cycle::death_rate_type*);

    virtual void
    net_birth_rate (::common::units_decimal*);

    virtual void
    population_doubling_time (::common::units_decimal_nonnegative*);

    virtual ::cell_cycle::summary_elements*
    post_summary_elements () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_nonnegative_pskel& /* birth_rate */,
             ::common::units_decimal_nonnegative_pskel& /* duration */,
             ::cell_cycle::death_rate_type_pskel& /* death_rate */,
             ::common::units_decimal_pskel& /* net_birth_rate */,
             ::common::units_decimal_nonnegative_pskel& /* population_doubling_time */);

    void
    parser_maps (::xml_schema::parser_map& /* birth_rate */,
                 ::xml_schema::parser_map& /* duration */,
                 ::xml_schema::parser_map& /* death_rate */,
                 ::xml_schema::parser_map& /* net_birth_rate */,
                 ::xml_schema::parser_map& /* population_doubling_time */);

    // Individual element parsers.
    //
    void
    birth_rate_parser (::common::units_decimal_nonnegative_pskel&);

    void
    birth_rate_parser (::xml_schema::parser_map&);

    void
    duration_parser (::common::units_decimal_nonnegative_pskel&);

    void
    duration_parser (::xml_schema::parser_map&);

    void
    death_rate_parser (::cell_cycle::death_rate_type_pskel&);

    void
    death_rate_parser (::xml_schema::parser_map&);

    void
    net_birth_rate_parser (::common::units_decimal_pskel&);

    void
    net_birth_rate_parser (::xml_schema::parser_map&);

    void
    population_doubling_time_parser (::common::units_decimal_nonnegative_pskel&);

    void
    population_doubling_time_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    summary_elements_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    summary_elements_pskel* summary_elements_impl_;
    summary_elements_pskel (summary_elements_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_nonnegative_pskel* birth_rate_parser_;
    ::xml_schema::parser_map* birth_rate_parser_map_;

    ::common::units_decimal_nonnegative_pskel* duration_parser_;
    ::xml_schema::parser_map* duration_parser_map_;

    ::cell_cycle::death_rate_type_pskel* death_rate_parser_;
    ::xml_schema::parser_map* death_rate_parser_map_;

    ::common::units_decimal_pskel* net_birth_rate_parser_;
    ::xml_schema::parser_map* net_birth_rate_parser_map_;

    ::common::units_decimal_nonnegative_pskel* population_doubling_time_parser_;
    ::xml_schema::parser_map* population_doubling_time_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::cell_cycle::summary_elements_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class cell_cycle_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    model (const ::std::string&);

    virtual void
    ID (unsigned long long);

    // Elements.
    //
    virtual void
    cell_cycle_phase (::cell_cycle::cell_cycle_phase*);

    virtual void
    cell_death (::cell_cycle::cell_death*);

    virtual void
    summary_elements (::cell_cycle::summary_elements*);

    virtual void
    custom (::common::custom*);

    virtual ::cell_cycle::cell_cycle*
    post_cell_cycle () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* model */,
             ::xml_schema::unsigned_long_pskel& /* ID */,
             ::cell_cycle::cell_cycle_phase_pskel& /* cell_cycle_phase */,
             ::cell_cycle::cell_death_pskel& /* cell_death */,
             ::cell_cycle::summary_elements_pskel& /* summary_elements */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* cell_cycle_phase */,
                 ::xml_schema::parser_map& /* cell_death */,
                 ::xml_schema::parser_map& /* summary_elements */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    model_parser (::xml_schema::string_pskel&);

    void
    ID_parser (::xml_schema::unsigned_long_pskel&);

    // Individual element parsers.
    //
    void
    cell_cycle_phase_parser (::cell_cycle::cell_cycle_phase_pskel&);

    void
    cell_cycle_phase_parser (::xml_schema::parser_map&);

    void
    cell_death_parser (::cell_cycle::cell_death_pskel&);

    void
    cell_death_parser (::xml_schema::parser_map&);

    void
    summary_elements_parser (::cell_cycle::summary_elements_pskel&);

    void
    summary_elements_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_cycle_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    cell_cycle_pskel* cell_cycle_impl_;
    cell_cycle_pskel (cell_cycle_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    virtual bool
    _attribute_impl_phase_two (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* model_parser_;
    ::xml_schema::unsigned_long_pskel* ID_parser_;
    ::cell_cycle::cell_cycle_phase_pskel* cell_cycle_phase_parser_;
    ::xml_schema::parser_map* cell_cycle_phase_parser_map_;

    ::cell_cycle::cell_death_pskel* cell_death_parser_;
    ::xml_schema::parser_map* cell_death_parser_map_;

    ::cell_cycle::summary_elements_pskel* summary_elements_parser_;
    ::xml_schema::parser_map* summary_elements_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::cell_cycle::cell_cycle_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);

    protected:
    struct v_state_attr_
    {
      bool model;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class cell_death_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::cell_cycle::death_type&);

    virtual void
    ID (unsigned long long);

    // Elements.
    //
    virtual void
    duration (::common::units_decimal*);

    virtual void
    cell_part (::phenotype_base::cell_parts*);

    virtual void
    custom (::common::custom*);

    virtual ::cell_cycle::cell_death*
    post_cell_death () = 0;

    // Parser construction API.
    //
    void
    parsers (::cell_cycle::death_type_pskel& /* type */,
             ::xml_schema::unsigned_long_pskel& /* ID */,
             ::common::units_decimal_pskel& /* duration */,
             ::phenotype_base::cell_parts_pskel& /* cell_part */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* duration */,
                 ::xml_schema::parser_map& /* cell_part */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    type_parser (::cell_cycle::death_type_pskel&);

    void
    ID_parser (::xml_schema::unsigned_long_pskel&);

    // Individual element parsers.
    //
    void
    duration_parser (::common::units_decimal_pskel&);

    void
    duration_parser (::xml_schema::parser_map&);

    void
    cell_part_parser (::phenotype_base::cell_parts_pskel&);

    void
    cell_part_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_death_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    cell_death_pskel* cell_death_impl_;
    cell_death_pskel (cell_death_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    virtual bool
    _attribute_impl_phase_two (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);

    protected:
    ::cell_cycle::death_type_pskel* type_parser_;
    ::xml_schema::unsigned_long_pskel* ID_parser_;
    ::common::units_decimal_pskel* duration_parser_;
    ::xml_schema::parser_map* duration_parser_map_;

    ::phenotype_base::cell_parts_pskel* cell_part_parser_;
    ::xml_schema::parser_map* cell_part_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::cell_cycle::cell_death_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);

    protected:
    struct v_state_attr_
    {
      bool type;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class arrest_type_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::cell_cycle::arrest_type
    post_arrest_type () = 0;

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    arrest_type_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    arrest_type_pskel* arrest_type_impl_;
    arrest_type_pskel (arrest_type_pskel*, void*);

    protected:
    static const char* const _xsde_arrest_type_pskel_enums_[6UL];
  };

  class arrest_condition_pskel: public ::common::units_decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::cell_cycle::arrest_type&);

    virtual ::cell_cycle::arrest_condition*
    post_arrest_condition () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */,
             ::cell_cycle::arrest_type_pskel& /* type */);

    // Individual attribute parsers.
    //
    void
    type_parser (::cell_cycle::arrest_type_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    arrest_condition_pskel (::common::units_decimal_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_decimal*
    post_units_decimal ();

    protected:
    arrest_condition_pskel* arrest_condition_impl_;
    arrest_condition_pskel (arrest_condition_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::cell_cycle::arrest_type_pskel* type_parser_;
  };

  class cycles_and_deaths_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    cell_cycle (::cell_cycle::cell_cycle*);

    virtual void
    cell_death (::cell_cycle::cell_death*);

    virtual ::cell_cycle::cycles_and_deaths*
    post_cycles_and_deaths () = 0;

    // Parser construction API.
    //
    void
    parsers (::cell_cycle::cell_cycle_pskel& /* cell_cycle */,
             ::cell_cycle::cell_death_pskel& /* cell_death */);

    void
    parser_maps (::xml_schema::parser_map& /* cell_cycle */,
                 ::xml_schema::parser_map& /* cell_death */);

    // Individual element parsers.
    //
    void
    cell_cycle_parser (::cell_cycle::cell_cycle_pskel&);

    void
    cell_cycle_parser (::xml_schema::parser_map&);

    void
    cell_death_parser (::cell_cycle::cell_death_pskel&);

    void
    cell_death_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cycles_and_deaths_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    cycles_and_deaths_pskel* cycles_and_deaths_impl_;
    cycles_and_deaths_pskel (cycles_and_deaths_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::cell_cycle::cell_cycle_pskel* cell_cycle_parser_;
    ::xml_schema::parser_map* cell_cycle_parser_map_;

    ::cell_cycle::cell_death_pskel* cell_death_parser_;
    ::xml_schema::parser_map* cell_death_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::cell_cycle::cycles_and_deaths_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };
}

#include "cell_cycle-pskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // CELL_CYCLE_PSKEL_HPP
