// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "cell_line.hpp"

#include <stdlib.h>
#include <new>

#include <xsde/cxx/guard.hxx>

namespace cell_line
{
  // cell_line
  //

  cell_line::
  cell_line ()
  {
    this->ID_present_ = false;
    this->label_present_ = false;
    this->curated_present_ = false;
    this->metadata_ = 0;
    this->custom_ = 0;
  }

  cell_line::
  ~cell_line ()
  {
    delete this->metadata_;
    delete this->custom_;
  }

  void cell_line::
  _copy (cell_line& c) const
  {
    XSDE_UNUSED (c);

    if (this->ID_present ())
      c.ID (this->ID ());

    if (this->label_present ())
      c.label (this->label ());

    if (this->curated_present ())
      c.curated (this->curated ());

    if (this->metadata_present ())
    {
      ::metadata::metadata* m = this->metadata ()._clone ();
      c.metadata (m);
    }

    this->phenotype_dataset ().copy (c.phenotype_dataset ());

    if (this->custom_present ())
    {
      ::common::custom* m = this->custom ()._clone ();
      c.custom (m);
    }
  }

  cell_line* cell_line::
  _clone () const
  {
    cell_line* c = new cell_line;
    ::xsde::cxx::guard< cell_line > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }

  // DCLs
  //

  DCLs::
  DCLs ()
  {
  }

  DCLs::
  ~DCLs ()
  {
  }

  void DCLs::
  _copy (DCLs& c) const
  {
    XSDE_UNUSED (c);

    this->cell_line ().copy (c.cell_line ());
  }

  DCLs* DCLs::
  _clone () const
  {
    DCLs* c = new DCLs;
    ::xsde::cxx::guard< DCLs > g (c);
    this->_copy (*c);
    g.release ();
    return c;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

