// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_COMMON_SSKEL_HPP
#define PHENOTYPE_COMMON_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_SERIALIZER_VALIDATION
#error the XSD/e runtime uses validation while the generated code does not (reconfigure the runtime or remove --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace phenotype_common
{
  class adhesion_sskel;
  class rolling_observation_sskel;
  class friction_sskel;
  class mechanics_sskel;
  class indentation_observation_sskel;
  class motility_sskel;
  class motility_types_sskel;
  class timescale_sskel;
  class transport_processes_sskel;
  class transport_variable_sskel;
  class geometrical_parameters_sskel;
  class lengths_sskel;
  class areas_3D_sskel;
  class areas_2D_sskel;
  class volumes_sskel;
  class geometrical_properties_sskel;
  class cross_section_sskel;
  class mass_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>

#include <xsde/cxx/serializer/non-validating/serializer.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "phenotype_common.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::non_validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::non_validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::non_validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::non_validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::non_validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::non_validating::byte_sskel;
  using ::xsde::cxx::serializer::non_validating::byte_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::non_validating::short_sskel;
  using ::xsde::cxx::serializer::non_validating::short_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::non_validating::int_sskel;
  using ::xsde::cxx::serializer::non_validating::int_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::non_validating::long_sskel;
  using ::xsde::cxx::serializer::non_validating::long_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::non_validating::integer_sskel;
  using ::xsde::cxx::serializer::non_validating::integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::boolean_sskel;
  using ::xsde::cxx::serializer::non_validating::boolean_simpl;

  using ::xsde::cxx::serializer::non_validating::float_sskel;
  using ::xsde::cxx::serializer::non_validating::float_simpl;

  using ::xsde::cxx::serializer::non_validating::double_sskel;
  using ::xsde::cxx::serializer::non_validating::double_simpl;

  using ::xsde::cxx::serializer::non_validating::decimal_sskel;
  using ::xsde::cxx::serializer::non_validating::decimal_simpl;

  using ::xsde::cxx::serializer::non_validating::string_sskel;
  using ::xsde::cxx::serializer::non_validating::string_simpl;

  using ::xsde::cxx::serializer::non_validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::non_validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::non_validating::token_sskel;
  using ::xsde::cxx::serializer::non_validating::token_simpl;

  using ::xsde::cxx::serializer::non_validating::name_sskel;
  using ::xsde::cxx::serializer::non_validating::name_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::non_validating::ncname_sskel;
  using ::xsde::cxx::serializer::non_validating::ncname_simpl;

  using ::xsde::cxx::serializer::non_validating::language_sskel;
  using ::xsde::cxx::serializer::non_validating::language_simpl;

  using ::xsde::cxx::serializer::non_validating::id_sskel;
  using ::xsde::cxx::serializer::non_validating::id_simpl;

  using ::xsde::cxx::serializer::non_validating::idref_sskel;
  using ::xsde::cxx::serializer::non_validating::idref_simpl;

  using ::xsde::cxx::serializer::non_validating::idrefs_sskel;
  using ::xsde::cxx::serializer::non_validating::idrefs_simpl;

  using ::xsde::cxx::serializer::non_validating::uri_sskel;
  using ::xsde::cxx::serializer::non_validating::uri_simpl;

  using ::xsde::cxx::serializer::non_validating::qname_sskel;
  using ::xsde::cxx::serializer::non_validating::qname_simpl;

  using ::xsde::cxx::serializer::non_validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::date_sskel;
  using ::xsde::cxx::serializer::non_validating::date_simpl;

  using ::xsde::cxx::serializer::non_validating::date_time_sskel;
  using ::xsde::cxx::serializer::non_validating::date_time_simpl;

  using ::xsde::cxx::serializer::non_validating::duration_sskel;
  using ::xsde::cxx::serializer::non_validating::duration_simpl;

  using ::xsde::cxx::serializer::non_validating::gday_sskel;
  using ::xsde::cxx::serializer::non_validating::gday_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::non_validating::time_sskel;
  using ::xsde::cxx::serializer::non_validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "common-sskel.hpp"

#include "variables-sskel.hpp"

namespace phenotype_common
{
  class adhesion_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::adhesion&) = 0;

    // Elements.
    //
    virtual bool
    adhesion_bond_breaking_rate_present ();

    virtual const ::common::units_decimal&
    adhesion_bond_breaking_rate () = 0;

    virtual bool
    adhesion_bond_formation_rate_present ();

    virtual const ::common::units_decimal&
    adhesion_bond_formation_rate () = 0;

    virtual bool
    adhesion_spring_constant_present ();

    virtual const ::common::units_decimal_nonnegative&
    adhesion_spring_constant () = 0;

    virtual bool
    adhesion_receptor_density_present ();

    virtual const ::common::units_decimal_nonnegative&
    adhesion_receptor_density () = 0;

    virtual bool
    surface_binding_energy_present ();

    virtual const ::common::units_decimal&
    surface_binding_energy () = 0;

    virtual bool
    number_of_adhered_cells_present ();

    virtual const ::common::units_decimal_nonnegative&
    number_of_adhered_cells () = 0;

    virtual bool
    maximum_number_of_adhered_cells_present ();

    virtual const ::common::units_unsignedShort&
    maximum_number_of_adhered_cells () = 0;

    virtual bool
    adhered_surface_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    adhered_surface_area () = 0;

    virtual bool
    maximum_adhered_surface_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    maximum_adhered_surface_area () = 0;

    virtual bool
    adhesion_force_per_surface_area_present ();

    virtual const ::common::units_decimal&
    adhesion_force_per_surface_area () = 0;

    virtual bool
    adhesion_probability_present ();

    virtual const ::common::units_fraction&
    adhesion_probability () = 0;

    virtual bool
    detachment_proability_present ();

    virtual const ::common::units_fraction&
    detachment_proability () = 0;

    virtual bool
    rolling_observation_next ();

    virtual const ::phenotype_common::rolling_observation&
    rolling_observation () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_sskel& /* adhesion_bond_breaking_rate */,
                 ::common::units_decimal_sskel& /* adhesion_bond_formation_rate */,
                 ::common::units_decimal_nonnegative_sskel& /* adhesion_spring_constant */,
                 ::common::units_decimal_nonnegative_sskel& /* adhesion_receptor_density */,
                 ::common::units_decimal_sskel& /* surface_binding_energy */,
                 ::common::units_decimal_nonnegative_sskel& /* number_of_adhered_cells */,
                 ::common::units_unsignedShort_sskel& /* maximum_number_of_adhered_cells */,
                 ::common::units_decimal_nonnegative_sskel& /* adhered_surface_area */,
                 ::common::units_decimal_nonnegative_sskel& /* maximum_adhered_surface_area */,
                 ::common::units_decimal_sskel& /* adhesion_force_per_surface_area */,
                 ::common::units_fraction_sskel& /* adhesion_probability */,
                 ::common::units_fraction_sskel& /* detachment_proability */,
                 ::phenotype_common::rolling_observation_sskel& /* rolling_observation */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* adhesion_bond_breaking_rate */,
                     ::xml_schema::serializer_map& /* adhesion_bond_formation_rate */,
                     ::xml_schema::serializer_map& /* adhesion_spring_constant */,
                     ::xml_schema::serializer_map& /* adhesion_receptor_density */,
                     ::xml_schema::serializer_map& /* surface_binding_energy */,
                     ::xml_schema::serializer_map& /* number_of_adhered_cells */,
                     ::xml_schema::serializer_map& /* maximum_number_of_adhered_cells */,
                     ::xml_schema::serializer_map& /* adhered_surface_area */,
                     ::xml_schema::serializer_map& /* maximum_adhered_surface_area */,
                     ::xml_schema::serializer_map& /* adhesion_force_per_surface_area */,
                     ::xml_schema::serializer_map& /* adhesion_probability */,
                     ::xml_schema::serializer_map& /* detachment_proability */,
                     ::xml_schema::serializer_map& /* rolling_observation */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    adhesion_bond_breaking_rate_serializer (::common::units_decimal_sskel&);

    void
    adhesion_bond_breaking_rate_serializer (::xml_schema::serializer_map&);

    void
    adhesion_bond_formation_rate_serializer (::common::units_decimal_sskel&);

    void
    adhesion_bond_formation_rate_serializer (::xml_schema::serializer_map&);

    void
    adhesion_spring_constant_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    adhesion_spring_constant_serializer (::xml_schema::serializer_map&);

    void
    adhesion_receptor_density_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    adhesion_receptor_density_serializer (::xml_schema::serializer_map&);

    void
    surface_binding_energy_serializer (::common::units_decimal_sskel&);

    void
    surface_binding_energy_serializer (::xml_schema::serializer_map&);

    void
    number_of_adhered_cells_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    number_of_adhered_cells_serializer (::xml_schema::serializer_map&);

    void
    maximum_number_of_adhered_cells_serializer (::common::units_unsignedShort_sskel&);

    void
    maximum_number_of_adhered_cells_serializer (::xml_schema::serializer_map&);

    void
    adhered_surface_area_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    adhered_surface_area_serializer (::xml_schema::serializer_map&);

    void
    maximum_adhered_surface_area_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    maximum_adhered_surface_area_serializer (::xml_schema::serializer_map&);

    void
    adhesion_force_per_surface_area_serializer (::common::units_decimal_sskel&);

    void
    adhesion_force_per_surface_area_serializer (::xml_schema::serializer_map&);

    void
    adhesion_probability_serializer (::common::units_fraction_sskel&);

    void
    adhesion_probability_serializer (::xml_schema::serializer_map&);

    void
    detachment_proability_serializer (::common::units_fraction_sskel&);

    void
    detachment_proability_serializer (::xml_schema::serializer_map&);

    void
    rolling_observation_serializer (::phenotype_common::rolling_observation_sskel&);

    void
    rolling_observation_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    adhesion_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    adhesion_sskel* adhesion_impl_;
    adhesion_sskel (adhesion_sskel*, void*);

    protected:
    ::common::units_decimal_sskel* adhesion_bond_breaking_rate_serializer_;
    ::xml_schema::serializer_map* adhesion_bond_breaking_rate_serializer_map_;

    ::common::units_decimal_sskel* adhesion_bond_formation_rate_serializer_;
    ::xml_schema::serializer_map* adhesion_bond_formation_rate_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* adhesion_spring_constant_serializer_;
    ::xml_schema::serializer_map* adhesion_spring_constant_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* adhesion_receptor_density_serializer_;
    ::xml_schema::serializer_map* adhesion_receptor_density_serializer_map_;

    ::common::units_decimal_sskel* surface_binding_energy_serializer_;
    ::xml_schema::serializer_map* surface_binding_energy_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* number_of_adhered_cells_serializer_;
    ::xml_schema::serializer_map* number_of_adhered_cells_serializer_map_;

    ::common::units_unsignedShort_sskel* maximum_number_of_adhered_cells_serializer_;
    ::xml_schema::serializer_map* maximum_number_of_adhered_cells_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* adhered_surface_area_serializer_;
    ::xml_schema::serializer_map* adhered_surface_area_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* maximum_adhered_surface_area_serializer_;
    ::xml_schema::serializer_map* maximum_adhered_surface_area_serializer_map_;

    ::common::units_decimal_sskel* adhesion_force_per_surface_area_serializer_;
    ::xml_schema::serializer_map* adhesion_force_per_surface_area_serializer_map_;

    ::common::units_fraction_sskel* adhesion_probability_serializer_;
    ::xml_schema::serializer_map* adhesion_probability_serializer_map_;

    ::common::units_fraction_sskel* detachment_proability_serializer_;
    ::xml_schema::serializer_map* detachment_proability_serializer_map_;

    ::phenotype_common::rolling_observation_sskel* rolling_observation_serializer_;
    ::xml_schema::serializer_map* rolling_observation_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class rolling_observation_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::rolling_observation&) = 0;

    // Elements.
    //
    virtual const ::common::units_decimal&
    rolling_velocity () = 0;

    virtual const ::common::units_decimal&
    shear_stress () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_sskel& /* rolling_velocity */,
                 ::common::units_decimal_sskel& /* shear_stress */);

    void
    serializer_maps (::xml_schema::serializer_map& /* rolling_velocity */,
                     ::xml_schema::serializer_map& /* shear_stress */);

    // Individual element serializers.
    //
    void
    rolling_velocity_serializer (::common::units_decimal_sskel&);

    void
    rolling_velocity_serializer (::xml_schema::serializer_map&);

    void
    shear_stress_serializer (::common::units_decimal_sskel&);

    void
    shear_stress_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    rolling_observation_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    rolling_observation_sskel* rolling_observation_impl_;
    rolling_observation_sskel (rolling_observation_sskel*, void*);

    protected:
    ::common::units_decimal_sskel* rolling_velocity_serializer_;
    ::xml_schema::serializer_map* rolling_velocity_serializer_map_;

    ::common::units_decimal_sskel* shear_stress_serializer_;
    ::xml_schema::serializer_map* shear_stress_serializer_map_;
  };

  class friction_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::friction&) = 0;

    // Elements.
    //
    virtual bool
    compression_present ();

    virtual const ::common::units_decimal_nonnegative&
    compression () = 0;

    virtual bool
    ECM_present ();

    virtual const ::common::units_decimal_nonnegative&
    ECM () = 0;

    virtual bool
    shear_present ();

    virtual const ::common::units_decimal_nonnegative&
    shear () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_nonnegative_sskel& /* compression */,
                 ::common::units_decimal_nonnegative_sskel& /* ECM */,
                 ::common::units_decimal_nonnegative_sskel& /* shear */);

    void
    serializer_maps (::xml_schema::serializer_map& /* compression */,
                     ::xml_schema::serializer_map& /* ECM */,
                     ::xml_schema::serializer_map& /* shear */);

    // Individual element serializers.
    //
    void
    compression_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    compression_serializer (::xml_schema::serializer_map&);

    void
    ECM_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    ECM_serializer (::xml_schema::serializer_map&);

    void
    shear_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    shear_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    friction_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    friction_sskel* friction_impl_;
    friction_sskel (friction_sskel*, void*);

    protected:
    ::common::units_decimal_nonnegative_sskel* compression_serializer_;
    ::xml_schema::serializer_map* compression_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* ECM_serializer_;
    ::xml_schema::serializer_map* ECM_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* shear_serializer_;
    ::xml_schema::serializer_map* shear_serializer_map_;
  };

  class mechanics_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::mechanics&) = 0;

    // Elements.
    //
    virtual bool
    friction_present ();

    virtual const ::phenotype_common::friction&
    friction () = 0;

    virtual bool
    maximum_cell_deformation_present ();

    virtual const ::common::units_decimal&
    maximum_cell_deformation () = 0;

    virtual bool
    mechanical_pressure_present ();

    virtual const ::common::units_decimal&
    mechanical_pressure () = 0;

    virtual bool
    indentation_observation_next ();

    virtual const ::phenotype_common::indentation_observation&
    indentation_observation () = 0;

    virtual bool
    poisson_ratio_present ();

    virtual const ::common::units_decimal&
    poisson_ratio () = 0;

    virtual bool
    youngs_modulus_present ();

    virtual const ::common::units_decimal&
    youngs_modulus () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::phenotype_common::friction_sskel& /* friction */,
                 ::common::units_decimal_sskel& /* maximum_cell_deformation */,
                 ::common::units_decimal_sskel& /* mechanical_pressure */,
                 ::phenotype_common::indentation_observation_sskel& /* indentation_observation */,
                 ::common::units_decimal_sskel& /* poisson_ratio */,
                 ::common::units_decimal_sskel& /* youngs_modulus */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* friction */,
                     ::xml_schema::serializer_map& /* maximum_cell_deformation */,
                     ::xml_schema::serializer_map& /* mechanical_pressure */,
                     ::xml_schema::serializer_map& /* indentation_observation */,
                     ::xml_schema::serializer_map& /* poisson_ratio */,
                     ::xml_schema::serializer_map& /* youngs_modulus */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    friction_serializer (::phenotype_common::friction_sskel&);

    void
    friction_serializer (::xml_schema::serializer_map&);

    void
    maximum_cell_deformation_serializer (::common::units_decimal_sskel&);

    void
    maximum_cell_deformation_serializer (::xml_schema::serializer_map&);

    void
    mechanical_pressure_serializer (::common::units_decimal_sskel&);

    void
    mechanical_pressure_serializer (::xml_schema::serializer_map&);

    void
    indentation_observation_serializer (::phenotype_common::indentation_observation_sskel&);

    void
    indentation_observation_serializer (::xml_schema::serializer_map&);

    void
    poisson_ratio_serializer (::common::units_decimal_sskel&);

    void
    poisson_ratio_serializer (::xml_schema::serializer_map&);

    void
    youngs_modulus_serializer (::common::units_decimal_sskel&);

    void
    youngs_modulus_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    mechanics_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    mechanics_sskel* mechanics_impl_;
    mechanics_sskel (mechanics_sskel*, void*);

    protected:
    ::phenotype_common::friction_sskel* friction_serializer_;
    ::xml_schema::serializer_map* friction_serializer_map_;

    ::common::units_decimal_sskel* maximum_cell_deformation_serializer_;
    ::xml_schema::serializer_map* maximum_cell_deformation_serializer_map_;

    ::common::units_decimal_sskel* mechanical_pressure_serializer_;
    ::xml_schema::serializer_map* mechanical_pressure_serializer_map_;

    ::phenotype_common::indentation_observation_sskel* indentation_observation_serializer_;
    ::xml_schema::serializer_map* indentation_observation_serializer_map_;

    ::common::units_decimal_sskel* poisson_ratio_serializer_;
    ::xml_schema::serializer_map* poisson_ratio_serializer_map_;

    ::common::units_decimal_sskel* youngs_modulus_serializer_;
    ::xml_schema::serializer_map* youngs_modulus_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class indentation_observation_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::indentation_observation&) = 0;

    // Elements.
    //
    virtual const ::common::units_decimal&
    depth () = 0;

    virtual bool
    poisson_ratio_present ();

    virtual const ::common::units_decimal&
    poisson_ratio () = 0;

    virtual bool
    youngs_modulus_present ();

    virtual const ::common::units_decimal&
    youngs_modulus () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_sskel& /* depth */,
                 ::common::units_decimal_sskel& /* poisson_ratio */,
                 ::common::units_decimal_sskel& /* youngs_modulus */);

    void
    serializer_maps (::xml_schema::serializer_map& /* depth */,
                     ::xml_schema::serializer_map& /* poisson_ratio */,
                     ::xml_schema::serializer_map& /* youngs_modulus */);

    // Individual element serializers.
    //
    void
    depth_serializer (::common::units_decimal_sskel&);

    void
    depth_serializer (::xml_schema::serializer_map&);

    void
    poisson_ratio_serializer (::common::units_decimal_sskel&);

    void
    poisson_ratio_serializer (::xml_schema::serializer_map&);

    void
    youngs_modulus_serializer (::common::units_decimal_sskel&);

    void
    youngs_modulus_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    indentation_observation_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    indentation_observation_sskel* indentation_observation_impl_;
    indentation_observation_sskel (indentation_observation_sskel*, void*);

    protected:
    ::common::units_decimal_sskel* depth_serializer_;
    ::xml_schema::serializer_map* depth_serializer_map_;

    ::common::units_decimal_sskel* poisson_ratio_serializer_;
    ::xml_schema::serializer_map* poisson_ratio_serializer_map_;

    ::common::units_decimal_sskel* youngs_modulus_serializer_;
    ::xml_schema::serializer_map* youngs_modulus_serializer_map_;
  };

  class motility_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::motility&) = 0;

    // Elements.
    //
    virtual bool
    unrestricted_next ();

    virtual const ::phenotype_common::motility_types&
    unrestricted () = 0;

    virtual bool
    restricted_next ();

    virtual const ::phenotype_common::motility_types&
    restricted () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::phenotype_common::motility_types_sskel& /* unrestricted */,
                 ::phenotype_common::motility_types_sskel& /* restricted */);

    void
    serializer_maps (::xml_schema::serializer_map& /* unrestricted */,
                     ::xml_schema::serializer_map& /* restricted */);

    // Individual element serializers.
    //
    void
    unrestricted_serializer (::phenotype_common::motility_types_sskel&);

    void
    unrestricted_serializer (::xml_schema::serializer_map&);

    void
    restricted_serializer (::phenotype_common::motility_types_sskel&);

    void
    restricted_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    motility_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    motility_sskel* motility_impl_;
    motility_sskel (motility_sskel*, void*);

    protected:
    ::phenotype_common::motility_types_sskel* unrestricted_serializer_;
    ::xml_schema::serializer_map* unrestricted_serializer_map_;

    ::phenotype_common::motility_types_sskel* restricted_serializer_;
    ::xml_schema::serializer_map* restricted_serializer_map_;
  };

  class motility_types_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::motility_types&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    // Elements.
    //
    virtual bool
    timescale_present ();

    virtual const ::phenotype_common::timescale&
    timescale () = 0;

    virtual bool
    restriction_present ();

    virtual const ::variables::experimental_conditions&
    restriction () = 0;

    virtual bool
    net_displacement_present ();

    virtual const ::common::units_decimal&
    net_displacement () = 0;

    virtual bool
    total_displacement_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_displacement () = 0;

    virtual bool
    mean_square_displacement_present ();

    virtual const ::common::units_decimal_nonnegative&
    mean_square_displacement () = 0;

    virtual bool
    mean_speed_present ();

    virtual const ::common::units_decimal&
    mean_speed () = 0;

    virtual bool
    net_speed_present ();

    virtual const ::common::units_decimal&
    net_speed () = 0;

    virtual bool
    persistence_present ();

    virtual const ::common::units_decimal&
    persistence () = 0;

    virtual bool
    mean_path_length_present ();

    virtual const ::common::units_decimal&
    mean_path_length () = 0;

    virtual bool
    diffusion_coefficient_present ();

    virtual const ::common::units_decimal&
    diffusion_coefficient () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::phenotype_common::timescale_sskel& /* timescale */,
                 ::variables::experimental_conditions_sskel& /* restriction */,
                 ::common::units_decimal_sskel& /* net_displacement */,
                 ::common::units_decimal_nonnegative_sskel& /* total_displacement */,
                 ::common::units_decimal_nonnegative_sskel& /* mean_square_displacement */,
                 ::common::units_decimal_sskel& /* mean_speed */,
                 ::common::units_decimal_sskel& /* net_speed */,
                 ::common::units_decimal_sskel& /* persistence */,
                 ::common::units_decimal_sskel& /* mean_path_length */,
                 ::common::units_decimal_sskel& /* diffusion_coefficient */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* timescale */,
                     ::xml_schema::serializer_map& /* restriction */,
                     ::xml_schema::serializer_map& /* net_displacement */,
                     ::xml_schema::serializer_map& /* total_displacement */,
                     ::xml_schema::serializer_map& /* mean_square_displacement */,
                     ::xml_schema::serializer_map& /* mean_speed */,
                     ::xml_schema::serializer_map& /* net_speed */,
                     ::xml_schema::serializer_map& /* persistence */,
                     ::xml_schema::serializer_map& /* mean_path_length */,
                     ::xml_schema::serializer_map& /* diffusion_coefficient */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    timescale_serializer (::phenotype_common::timescale_sskel&);

    void
    timescale_serializer (::xml_schema::serializer_map&);

    void
    restriction_serializer (::variables::experimental_conditions_sskel&);

    void
    restriction_serializer (::xml_schema::serializer_map&);

    void
    net_displacement_serializer (::common::units_decimal_sskel&);

    void
    net_displacement_serializer (::xml_schema::serializer_map&);

    void
    total_displacement_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    total_displacement_serializer (::xml_schema::serializer_map&);

    void
    mean_square_displacement_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    mean_square_displacement_serializer (::xml_schema::serializer_map&);

    void
    mean_speed_serializer (::common::units_decimal_sskel&);

    void
    mean_speed_serializer (::xml_schema::serializer_map&);

    void
    net_speed_serializer (::common::units_decimal_sskel&);

    void
    net_speed_serializer (::xml_schema::serializer_map&);

    void
    persistence_serializer (::common::units_decimal_sskel&);

    void
    persistence_serializer (::xml_schema::serializer_map&);

    void
    mean_path_length_serializer (::common::units_decimal_sskel&);

    void
    mean_path_length_serializer (::xml_schema::serializer_map&);

    void
    diffusion_coefficient_serializer (::common::units_decimal_sskel&);

    void
    diffusion_coefficient_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    motility_types_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    motility_types_sskel* motility_types_impl_;
    motility_types_sskel (motility_types_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::phenotype_common::timescale_sskel* timescale_serializer_;
    ::xml_schema::serializer_map* timescale_serializer_map_;

    ::variables::experimental_conditions_sskel* restriction_serializer_;
    ::xml_schema::serializer_map* restriction_serializer_map_;

    ::common::units_decimal_sskel* net_displacement_serializer_;
    ::xml_schema::serializer_map* net_displacement_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* total_displacement_serializer_;
    ::xml_schema::serializer_map* total_displacement_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* mean_square_displacement_serializer_;
    ::xml_schema::serializer_map* mean_square_displacement_serializer_map_;

    ::common::units_decimal_sskel* mean_speed_serializer_;
    ::xml_schema::serializer_map* mean_speed_serializer_map_;

    ::common::units_decimal_sskel* net_speed_serializer_;
    ::xml_schema::serializer_map* net_speed_serializer_map_;

    ::common::units_decimal_sskel* persistence_serializer_;
    ::xml_schema::serializer_map* persistence_serializer_map_;

    ::common::units_decimal_sskel* mean_path_length_serializer_;
    ::xml_schema::serializer_map* mean_path_length_serializer_map_;

    ::common::units_decimal_sskel* diffusion_coefficient_serializer_;
    ::xml_schema::serializer_map* diffusion_coefficient_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class timescale_sskel: public ::common::units_decimal_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::timescale&) = 0;

    // Attributes.
    //
    virtual bool
    mitotic_present ();

    virtual bool
    mitotic () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::xml_schema::boolean_sskel& /* mitotic */);

    // Individual attribute serializers.
    //
    void
    mitotic_serializer (::xml_schema::boolean_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    timescale_sskel (::common::units_decimal_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_decimal&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    timescale_sskel* timescale_impl_;
    timescale_sskel (timescale_sskel*, void*);

    protected:
    ::xml_schema::boolean_sskel* mitotic_serializer_;
  };

  class transport_processes_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::transport_processes&) = 0;

    // Elements.
    //
    virtual bool
    variable_next () = 0;

    virtual const ::phenotype_common::transport_variable&
    variable () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::phenotype_common::transport_variable_sskel& /* variable */);

    void
    serializer_maps (::xml_schema::serializer_map& /* variable */);

    // Individual element serializers.
    //
    void
    variable_serializer (::phenotype_common::transport_variable_sskel&);

    void
    variable_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    transport_processes_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    transport_processes_sskel* transport_processes_impl_;
    transport_processes_sskel (transport_processes_sskel*, void*);

    protected:
    ::phenotype_common::transport_variable_sskel* variable_serializer_;
    ::xml_schema::serializer_map* variable_serializer_map_;
  };

  class transport_variable_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::transport_variable&) = 0;

    // Attributes.
    //
    virtual ::std::string
    name () = 0;

    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID () = 0;

    virtual bool
    type_present ();

    virtual const ::variables::amount_type&
    type () = 0;

    virtual bool
    ChEBI_ID_present ();

    virtual ::std::string
    ChEBI_ID () = 0;

    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID () = 0;

    virtual bool
    DrugBank_ID_present ();

    virtual ::std::string
    DrugBank_ID () = 0;

    virtual bool
    GMO_ID_present ();

    virtual ::std::string
    GMO_ID () = 0;

    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID () = 0;

    virtual bool
    UniProt_ID_present ();

    virtual ::std::string
    UniProt_ID () = 0;

    virtual bool
    PR_ID_present ();

    virtual ::std::string
    PR_ID () = 0;

    // Elements.
    //
    virtual bool
    all_present ();

    virtual bool
    export_rate_present ();

    virtual const ::common::units_decimal&
    export_rate () = 0;

    virtual bool
    export_rate_per_unit_surface_area_present ();

    virtual const ::common::units_decimal&
    export_rate_per_unit_surface_area () = 0;

    virtual bool
    import_rate_present ();

    virtual const ::common::units_decimal&
    import_rate () = 0;

    virtual bool
    import_rate_per_unit_surface_area_present ();

    virtual const ::common::units_decimal&
    import_rate_per_unit_surface_area () = 0;

    virtual bool
    saturation_density_present ();

    virtual const ::common::units_decimal&
    saturation_density () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* name */,
                 ::xml_schema::string_sskel& /* units */,
                 ::xml_schema::unsigned_long_sskel& /* ID */,
                 ::variables::amount_type_sskel& /* type */,
                 ::xml_schema::string_sskel& /* ChEBI_ID */,
                 ::xml_schema::string_sskel& /* MeSH_ID */,
                 ::xml_schema::string_sskel& /* DrugBank_ID */,
                 ::xml_schema::string_sskel& /* GMO_ID */,
                 ::xml_schema::string_sskel& /* GO_ID */,
                 ::xml_schema::string_sskel& /* UniProt_ID */,
                 ::xml_schema::string_sskel& /* PR_ID */,
                 ::common::units_decimal_sskel& /* export_rate */,
                 ::common::units_decimal_sskel& /* export_rate_per_unit_surface_area */,
                 ::common::units_decimal_sskel& /* import_rate */,
                 ::common::units_decimal_sskel& /* import_rate_per_unit_surface_area */,
                 ::common::units_decimal_sskel& /* saturation_density */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* export_rate */,
                     ::xml_schema::serializer_map& /* export_rate_per_unit_surface_area */,
                     ::xml_schema::serializer_map& /* import_rate */,
                     ::xml_schema::serializer_map& /* import_rate_per_unit_surface_area */,
                     ::xml_schema::serializer_map& /* saturation_density */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    name_serializer (::xml_schema::string_sskel&);

    void
    units_serializer (::xml_schema::string_sskel&);

    void
    ID_serializer (::xml_schema::unsigned_long_sskel&);

    void
    type_serializer (::variables::amount_type_sskel&);

    void
    ChEBI_ID_serializer (::xml_schema::string_sskel&);

    void
    MeSH_ID_serializer (::xml_schema::string_sskel&);

    void
    DrugBank_ID_serializer (::xml_schema::string_sskel&);

    void
    GMO_ID_serializer (::xml_schema::string_sskel&);

    void
    GO_ID_serializer (::xml_schema::string_sskel&);

    void
    UniProt_ID_serializer (::xml_schema::string_sskel&);

    void
    PR_ID_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    export_rate_serializer (::common::units_decimal_sskel&);

    void
    export_rate_serializer (::xml_schema::serializer_map&);

    void
    export_rate_per_unit_surface_area_serializer (::common::units_decimal_sskel&);

    void
    export_rate_per_unit_surface_area_serializer (::xml_schema::serializer_map&);

    void
    import_rate_serializer (::common::units_decimal_sskel&);

    void
    import_rate_serializer (::xml_schema::serializer_map&);

    void
    import_rate_per_unit_surface_area_serializer (::common::units_decimal_sskel&);

    void
    import_rate_per_unit_surface_area_serializer (::xml_schema::serializer_map&);

    void
    saturation_density_serializer (::common::units_decimal_sskel&);

    void
    saturation_density_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    transport_variable_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    transport_variable_sskel* transport_variable_impl_;
    transport_variable_sskel (transport_variable_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::string_sskel* units_serializer_;
    ::xml_schema::unsigned_long_sskel* ID_serializer_;
    ::variables::amount_type_sskel* type_serializer_;
    ::xml_schema::string_sskel* ChEBI_ID_serializer_;
    ::xml_schema::string_sskel* MeSH_ID_serializer_;
    ::xml_schema::string_sskel* DrugBank_ID_serializer_;
    ::xml_schema::string_sskel* GMO_ID_serializer_;
    ::xml_schema::string_sskel* GO_ID_serializer_;
    ::xml_schema::string_sskel* UniProt_ID_serializer_;
    ::xml_schema::string_sskel* PR_ID_serializer_;
    ::common::units_decimal_sskel* export_rate_serializer_;
    ::xml_schema::serializer_map* export_rate_serializer_map_;

    ::common::units_decimal_sskel* export_rate_per_unit_surface_area_serializer_;
    ::xml_schema::serializer_map* export_rate_per_unit_surface_area_serializer_map_;

    ::common::units_decimal_sskel* import_rate_serializer_;
    ::xml_schema::serializer_map* import_rate_serializer_map_;

    ::common::units_decimal_sskel* import_rate_per_unit_surface_area_serializer_;
    ::xml_schema::serializer_map* import_rate_per_unit_surface_area_serializer_map_;

    ::common::units_decimal_sskel* saturation_density_serializer_;
    ::xml_schema::serializer_map* saturation_density_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class geometrical_parameters_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::geometrical_parameters&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // Elements.
    //
    virtual bool
    aspect_ratio_present ();

    virtual const ::common::units_decimal_nonnegative&
    aspect_ratio () = 0;

    virtual bool
    circularity_present ();

    virtual const ::common::units_decimal_nonnegative&
    circularity () = 0;

    virtual bool
    eccentricity_present ();

    virtual const ::common::units_decimal_nonnegative&
    eccentricity () = 0;

    virtual bool
    sphericity_present ();

    virtual const ::common::units_decimal_nonnegative&
    sphericity () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::common::units_decimal_nonnegative_sskel& /* aspect_ratio */,
                 ::common::units_decimal_nonnegative_sskel& /* circularity */,
                 ::common::units_decimal_nonnegative_sskel& /* eccentricity */,
                 ::common::units_decimal_nonnegative_sskel& /* sphericity */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* aspect_ratio */,
                     ::xml_schema::serializer_map& /* circularity */,
                     ::xml_schema::serializer_map& /* eccentricity */,
                     ::xml_schema::serializer_map& /* sphericity */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    aspect_ratio_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    aspect_ratio_serializer (::xml_schema::serializer_map&);

    void
    circularity_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    circularity_serializer (::xml_schema::serializer_map&);

    void
    eccentricity_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    eccentricity_serializer (::xml_schema::serializer_map&);

    void
    sphericity_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    sphericity_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    geometrical_parameters_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    geometrical_parameters_sskel* geometrical_parameters_impl_;
    geometrical_parameters_sskel (geometrical_parameters_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
    ::common::units_decimal_nonnegative_sskel* aspect_ratio_serializer_;
    ::xml_schema::serializer_map* aspect_ratio_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* circularity_serializer_;
    ::xml_schema::serializer_map* circularity_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* eccentricity_serializer_;
    ::xml_schema::serializer_map* eccentricity_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* sphericity_serializer_;
    ::xml_schema::serializer_map* sphericity_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class lengths_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::lengths&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // Elements.
    //
    virtual bool
    diameter_present ();

    virtual const ::common::units_decimal_nonnegative&
    diameter () = 0;

    virtual bool
    major_axis_present ();

    virtual const ::common::units_decimal_nonnegative&
    major_axis () = 0;

    virtual bool
    minor_axis_present ();

    virtual const ::common::units_decimal_nonnegative&
    minor_axis () = 0;

    virtual bool
    perimeter_present ();

    virtual const ::common::units_decimal_nonnegative&
    perimeter () = 0;

    virtual bool
    radius_present ();

    virtual const ::common::units_decimal_nonnegative&
    radius () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::common::units_decimal_nonnegative_sskel& /* diameter */,
                 ::common::units_decimal_nonnegative_sskel& /* major_axis */,
                 ::common::units_decimal_nonnegative_sskel& /* minor_axis */,
                 ::common::units_decimal_nonnegative_sskel& /* perimeter */,
                 ::common::units_decimal_nonnegative_sskel& /* radius */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* diameter */,
                     ::xml_schema::serializer_map& /* major_axis */,
                     ::xml_schema::serializer_map& /* minor_axis */,
                     ::xml_schema::serializer_map& /* perimeter */,
                     ::xml_schema::serializer_map& /* radius */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    diameter_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    diameter_serializer (::xml_schema::serializer_map&);

    void
    major_axis_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    major_axis_serializer (::xml_schema::serializer_map&);

    void
    minor_axis_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    minor_axis_serializer (::xml_schema::serializer_map&);

    void
    perimeter_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    perimeter_serializer (::xml_schema::serializer_map&);

    void
    radius_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    radius_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    lengths_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    lengths_sskel* lengths_impl_;
    lengths_sskel (lengths_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
    ::common::units_decimal_nonnegative_sskel* diameter_serializer_;
    ::xml_schema::serializer_map* diameter_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* major_axis_serializer_;
    ::xml_schema::serializer_map* major_axis_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* minor_axis_serializer_;
    ::xml_schema::serializer_map* minor_axis_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* perimeter_serializer_;
    ::xml_schema::serializer_map* perimeter_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* radius_serializer_;
    ::xml_schema::serializer_map* radius_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class areas_3D_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::areas_3D&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // Elements.
    //
    virtual bool
    free_surface_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    free_surface_area () = 0;

    virtual bool
    total_surface_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_surface_area () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::common::units_decimal_nonnegative_sskel& /* free_surface_area */,
                 ::common::units_decimal_nonnegative_sskel& /* total_surface_area */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* free_surface_area */,
                     ::xml_schema::serializer_map& /* total_surface_area */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    free_surface_area_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    free_surface_area_serializer (::xml_schema::serializer_map&);

    void
    total_surface_area_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    total_surface_area_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    areas_3D_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    areas_3D_sskel* areas_3D_impl_;
    areas_3D_sskel (areas_3D_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
    ::common::units_decimal_nonnegative_sskel* free_surface_area_serializer_;
    ::xml_schema::serializer_map* free_surface_area_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* total_surface_area_serializer_;
    ::xml_schema::serializer_map* total_surface_area_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class areas_2D_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::areas_2D&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // Elements.
    //
    virtual bool
    total_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_area () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::common::units_decimal_nonnegative_sskel& /* total_area */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* total_area */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    total_area_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    total_area_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    areas_2D_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    areas_2D_sskel* areas_2D_impl_;
    areas_2D_sskel (areas_2D_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
    ::common::units_decimal_nonnegative_sskel* total_area_serializer_;
    ::xml_schema::serializer_map* total_area_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class volumes_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::volumes&) = 0;

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // Elements.
    //
    virtual bool
    fluid_volume_present ();

    virtual const ::common::units_decimal_nonnegative&
    fluid_volume () = 0;

    virtual bool
    fluid_volume_fraction_present ();

    virtual const ::common::units_fraction&
    fluid_volume_fraction () = 0;

    virtual bool
    solid_calcified_volume_present ();

    virtual const ::common::units_decimal_nonnegative&
    solid_calcified_volume () = 0;

    virtual bool
    solid_volume_present ();

    virtual const ::common::units_decimal_nonnegative&
    solid_volume () = 0;

    virtual bool
    solid_volume_fraction_present ();

    virtual const ::common::units_fraction&
    solid_volume_fraction () = 0;

    virtual bool
    total_volume_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_volume () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::common::units_decimal_nonnegative_sskel& /* fluid_volume */,
                 ::common::units_fraction_sskel& /* fluid_volume_fraction */,
                 ::common::units_decimal_nonnegative_sskel& /* solid_calcified_volume */,
                 ::common::units_decimal_nonnegative_sskel& /* solid_volume */,
                 ::common::units_fraction_sskel& /* solid_volume_fraction */,
                 ::common::units_decimal_nonnegative_sskel& /* total_volume */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* fluid_volume */,
                     ::xml_schema::serializer_map& /* fluid_volume_fraction */,
                     ::xml_schema::serializer_map& /* solid_calcified_volume */,
                     ::xml_schema::serializer_map& /* solid_volume */,
                     ::xml_schema::serializer_map& /* solid_volume_fraction */,
                     ::xml_schema::serializer_map& /* total_volume */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    units_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    fluid_volume_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    fluid_volume_serializer (::xml_schema::serializer_map&);

    void
    fluid_volume_fraction_serializer (::common::units_fraction_sskel&);

    void
    fluid_volume_fraction_serializer (::xml_schema::serializer_map&);

    void
    solid_calcified_volume_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    solid_calcified_volume_serializer (::xml_schema::serializer_map&);

    void
    solid_volume_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    solid_volume_serializer (::xml_schema::serializer_map&);

    void
    solid_volume_fraction_serializer (::common::units_fraction_sskel&);

    void
    solid_volume_fraction_serializer (::xml_schema::serializer_map&);

    void
    total_volume_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    total_volume_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    volumes_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    volumes_sskel* volumes_impl_;
    volumes_sskel (volumes_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* units_serializer_;
    ::common::units_decimal_nonnegative_sskel* fluid_volume_serializer_;
    ::xml_schema::serializer_map* fluid_volume_serializer_map_;

    ::common::units_fraction_sskel* fluid_volume_fraction_serializer_;
    ::xml_schema::serializer_map* fluid_volume_fraction_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* solid_calcified_volume_serializer_;
    ::xml_schema::serializer_map* solid_calcified_volume_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* solid_volume_serializer_;
    ::xml_schema::serializer_map* solid_volume_serializer_map_;

    ::common::units_fraction_sskel* solid_volume_fraction_serializer_;
    ::xml_schema::serializer_map* solid_volume_fraction_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* total_volume_serializer_;
    ::xml_schema::serializer_map* total_volume_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class geometrical_properties_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::geometrical_properties&) = 0;

    // Elements.
    //
    virtual bool
    parameters_present ();

    virtual const ::phenotype_common::geometrical_parameters&
    parameters () = 0;

    virtual bool
    lengths_present ();

    virtual const ::phenotype_common::lengths&
    lengths () = 0;

    virtual bool
    areas_present ();

    virtual const ::phenotype_common::areas_3D&
    areas () = 0;

    virtual bool
    volumes_present ();

    virtual const ::phenotype_common::volumes&
    volumes () = 0;

    virtual bool
    cross_section_next ();

    virtual const ::phenotype_common::cross_section&
    cross_section () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::phenotype_common::geometrical_parameters_sskel& /* parameters */,
                 ::phenotype_common::lengths_sskel& /* lengths */,
                 ::phenotype_common::areas_3D_sskel& /* areas */,
                 ::phenotype_common::volumes_sskel& /* volumes */,
                 ::phenotype_common::cross_section_sskel& /* cross_section */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* parameters */,
                     ::xml_schema::serializer_map& /* lengths */,
                     ::xml_schema::serializer_map& /* areas */,
                     ::xml_schema::serializer_map& /* volumes */,
                     ::xml_schema::serializer_map& /* cross_section */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    parameters_serializer (::phenotype_common::geometrical_parameters_sskel&);

    void
    parameters_serializer (::xml_schema::serializer_map&);

    void
    lengths_serializer (::phenotype_common::lengths_sskel&);

    void
    lengths_serializer (::xml_schema::serializer_map&);

    void
    areas_serializer (::phenotype_common::areas_3D_sskel&);

    void
    areas_serializer (::xml_schema::serializer_map&);

    void
    volumes_serializer (::phenotype_common::volumes_sskel&);

    void
    volumes_serializer (::xml_schema::serializer_map&);

    void
    cross_section_serializer (::phenotype_common::cross_section_sskel&);

    void
    cross_section_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    geometrical_properties_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    geometrical_properties_sskel* geometrical_properties_impl_;
    geometrical_properties_sskel (geometrical_properties_sskel*, void*);

    protected:
    ::phenotype_common::geometrical_parameters_sskel* parameters_serializer_;
    ::xml_schema::serializer_map* parameters_serializer_map_;

    ::phenotype_common::lengths_sskel* lengths_serializer_;
    ::xml_schema::serializer_map* lengths_serializer_map_;

    ::phenotype_common::areas_3D_sskel* areas_serializer_;
    ::xml_schema::serializer_map* areas_serializer_map_;

    ::phenotype_common::volumes_sskel* volumes_serializer_;
    ::xml_schema::serializer_map* volumes_serializer_map_;

    ::phenotype_common::cross_section_sskel* cross_section_serializer_;
    ::xml_schema::serializer_map* cross_section_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class cross_section_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::cross_section&) = 0;

    // Elements.
    //
    virtual bool
    parameters_present ();

    virtual const ::phenotype_common::geometrical_parameters&
    parameters () = 0;

    virtual bool
    lengths_present ();

    virtual const ::phenotype_common::lengths&
    lengths () = 0;

    virtual bool
    areas_present ();

    virtual const ::phenotype_common::areas_2D&
    areas () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::phenotype_common::geometrical_parameters_sskel& /* parameters */,
                 ::phenotype_common::lengths_sskel& /* lengths */,
                 ::phenotype_common::areas_2D_sskel& /* areas */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* parameters */,
                     ::xml_schema::serializer_map& /* lengths */,
                     ::xml_schema::serializer_map& /* areas */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    parameters_serializer (::phenotype_common::geometrical_parameters_sskel&);

    void
    parameters_serializer (::xml_schema::serializer_map&);

    void
    lengths_serializer (::phenotype_common::lengths_sskel&);

    void
    lengths_serializer (::xml_schema::serializer_map&);

    void
    areas_serializer (::phenotype_common::areas_2D_sskel&);

    void
    areas_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cross_section_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    cross_section_sskel* cross_section_impl_;
    cross_section_sskel (cross_section_sskel*, void*);

    protected:
    ::phenotype_common::geometrical_parameters_sskel* parameters_serializer_;
    ::xml_schema::serializer_map* parameters_serializer_map_;

    ::phenotype_common::lengths_sskel* lengths_serializer_;
    ::xml_schema::serializer_map* lengths_serializer_map_;

    ::phenotype_common::areas_2D_sskel* areas_serializer_;
    ::xml_schema::serializer_map* areas_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class mass_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::phenotype_common::mass&) = 0;

    // Elements.
    //
    virtual bool
    biomass_present ();

    virtual const ::common::units_decimal_nonnegative&
    biomass () = 0;

    virtual bool
    fluid_mass_present ();

    virtual const ::common::units_decimal_nonnegative&
    fluid_mass () = 0;

    virtual bool
    total_mass_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_mass () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_nonnegative_sskel& /* biomass */,
                 ::common::units_decimal_nonnegative_sskel& /* fluid_mass */,
                 ::common::units_decimal_nonnegative_sskel& /* total_mass */);

    void
    serializer_maps (::xml_schema::serializer_map& /* biomass */,
                     ::xml_schema::serializer_map& /* fluid_mass */,
                     ::xml_schema::serializer_map& /* total_mass */);

    // Individual element serializers.
    //
    void
    biomass_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    biomass_serializer (::xml_schema::serializer_map&);

    void
    fluid_mass_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    fluid_mass_serializer (::xml_schema::serializer_map&);

    void
    total_mass_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    total_mass_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    mass_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    mass_sskel* mass_impl_;
    mass_sskel (mass_sskel*, void*);

    protected:
    ::common::units_decimal_nonnegative_sskel* biomass_serializer_;
    ::xml_schema::serializer_map* biomass_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* fluid_mass_serializer_;
    ::xml_schema::serializer_map* fluid_mass_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* total_mass_serializer_;
    ::xml_schema::serializer_map* total_mass_serializer_map_;
  };
}

#include "phenotype_common-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PHENOTYPE_COMMON_SSKEL_HPP
