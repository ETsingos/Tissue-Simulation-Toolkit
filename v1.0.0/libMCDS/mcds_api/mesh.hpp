// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MESH_HPP
#define MESH_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "mesh-fwd.hpp"

#ifndef XSDE_DONT_INCLUDE_INLINE
#define XSDE_DONT_INCLUDE_INLINE

#include "common.hpp"

#undef XSDE_DONT_INCLUDE_INLINE
#else

#include "common.hpp"

#endif // XSDE_DONT_INCLUDE_INLINE

namespace mesh
{
  // bounding_box (variable-length)
  //
  class bounding_box: public ::common::units_double_list
  {
    private:
    bounding_box (const bounding_box&);
    bounding_box& operator= (const bounding_box&);

    public:
    bounding_box ();

    bounding_box*
    _clone () const;

    ~bounding_box ();

    // type
    //
    bool
    type_present () const;

    void
    type_present (bool);

    const ::std::string&
    type () const;

    ::std::string&
    type ();

    void
    type (const ::std::string&);

    void
    _copy (bounding_box&) const;

    private:
    ::std::string type_;
    unsigned char type_present_;
  };

  // mesh (variable-length)
  //
  class mesh
  {
    private:
    mesh (const mesh&);
    mesh& operator= (const mesh&);

    public:
    mesh ();

    mesh*
    _clone () const;

    ~mesh ();

    // type
    //
    bool
    type_present () const;

    void
    type_present (bool);

    const ::std::string&
    type () const;

    ::std::string&
    type ();

    void
    type (const ::std::string&);

    // uniform
    //
    bool
    uniform_present () const;

    void
    uniform_present (bool);

    bool
    uniform () const;

    bool&
    uniform ();

    void
    uniform (bool);

    // regular
    //
    bool
    regular_present () const;

    void
    regular_present (bool);

    bool
    regular () const;

    bool&
    regular ();

    void
    regular (bool);

    // units
    //
    bool
    units_present () const;

    void
    units_present (bool);

    const ::std::string&
    units () const;

    ::std::string&
    units ();

    void
    units (const ::std::string&);

    // bounding_box
    //
    bool
    bounding_box_present () const;

    const ::mesh::bounding_box&
    bounding_box () const;

    ::mesh::bounding_box&
    bounding_box ();

    void
    bounding_box (::mesh::bounding_box*);

    ::mesh::bounding_box*
    bounding_box_detach ();

    // x_coordinates
    //
    bool
    x_coordinates_present () const;

    const ::common::units_double_list&
    x_coordinates () const;

    ::common::units_double_list&
    x_coordinates ();

    void
    x_coordinates (::common::units_double_list*);

    ::common::units_double_list*
    x_coordinates_detach ();

    // y_coordinates
    //
    bool
    y_coordinates_present () const;

    const ::common::units_double_list&
    y_coordinates () const;

    ::common::units_double_list&
    y_coordinates ();

    void
    y_coordinates (::common::units_double_list*);

    ::common::units_double_list*
    y_coordinates_detach ();

    // z_coordinates
    //
    bool
    z_coordinates_present () const;

    const ::common::units_double_list&
    z_coordinates () const;

    ::common::units_double_list&
    z_coordinates ();

    void
    z_coordinates (::common::units_double_list*);

    ::common::units_double_list*
    z_coordinates_detach ();

    // voxels
    //
    bool
    voxels_present () const;

    const ::mesh::list_of_voxels&
    voxels () const;

    ::mesh::list_of_voxels&
    voxels ();

    void
    voxels (::mesh::list_of_voxels*);

    ::mesh::list_of_voxels*
    voxels_detach ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (mesh&) const;

    private:
    ::std::string type_;
    unsigned char type_present_;
    bool uniform_;
    unsigned char uniform_present_;
    bool regular_;
    unsigned char regular_present_;
    ::std::string units_;
    unsigned char units_present_;
    ::mesh::bounding_box* bounding_box_;
    ::common::units_double_list* x_coordinates_;
    ::common::units_double_list* y_coordinates_;
    ::common::units_double_list* z_coordinates_;
    ::mesh::list_of_voxels* voxels_;
    ::common::custom* custom_;
  };

  // list_of_voxels (variable-length)
  //
  class list_of_voxels
  {
    private:
    list_of_voxels (const list_of_voxels&);
    list_of_voxels& operator= (const list_of_voxels&);

    public:
    list_of_voxels ();

    list_of_voxels*
    _clone () const;

    ~list_of_voxels ();

    // type
    //
    bool
    type_present () const;

    void
    type_present (bool);

    const ::common::data_storage_formats&
    type () const;

    ::common::data_storage_formats&
    type ();

    void
    type (const ::common::data_storage_formats&);

    // filename
    //
    bool
    filename_present () const;

    void
    filename_present (bool);

    const ::std::string&
    filename () const;

    ::std::string&
    filename ();

    void
    filename (const ::std::string&);

    // voxel
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::mesh::voxel > voxel_sequence;
    typedef voxel_sequence::iterator voxel_iterator;
    typedef voxel_sequence::const_iterator voxel_const_iterator;

    const voxel_sequence&
    voxel () const;

    voxel_sequence&
    voxel ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (list_of_voxels&) const;

    private:
    ::common::data_storage_formats type_;
    unsigned char type_present_;
    ::std::string filename_;
    unsigned char filename_present_;
    voxel_sequence voxel_;
    ::common::custom* custom_;
  };

  // voxel (variable-length)
  //
  class voxel
  {
    private:
    voxel (const voxel&);
    voxel& operator= (const voxel&);

    public:
    voxel ();

    voxel*
    _clone () const;

    ~voxel ();

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    unsigned int
    ID () const;

    unsigned int&
    ID ();

    void
    ID (unsigned int);

    // type
    //
    bool
    type_present () const;

    void
    type_present (bool);

    const ::std::string&
    type () const;

    ::std::string&
    type ();

    void
    type (const ::std::string&);

    // center
    //
    const ::common::units_double_list&
    center () const;

    ::common::units_double_list&
    center ();

    void
    center (::common::units_double_list*);

    ::common::units_double_list*
    center_detach ();

    // volume
    //
    const ::common::units_decimal_nonnegative&
    volume () const;

    ::common::units_decimal_nonnegative&
    volume ();

    void
    volume (::common::units_decimal_nonnegative*);

    ::common::units_decimal_nonnegative*
    volume_detach ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (voxel&) const;

    private:
    unsigned int ID_;
    unsigned char ID_present_;
    ::std::string type_;
    unsigned char type_present_;
    ::common::units_double_list* center_;
    ::common::units_decimal_nonnegative* volume_;
    ::common::custom* custom_;
  };

  // node (variable-length)
  //
  class node
  {
    private:
    node (const node&);
    node& operator= (const node&);

    public:
    node ();

    virtual node*
    _clone () const;

    virtual
    ~node ();

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    unsigned int
    ID () const;

    unsigned int&
    ID ();

    void
    ID (unsigned int);

    // position
    //
    const ::common::units_double_list&
    position () const;

    ::common::units_double_list&
    position ();

    void
    position (::common::units_double_list*);

    ::common::units_double_list*
    position_detach ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    // Type information.
    //
    static const ::std::string&
    _static_type ();

    virtual const ::std::string&
    _dynamic_type () const;

    void
    _copy (node&) const;

    private:
    unsigned int ID_;
    unsigned char ID_present_;
    ::common::units_double_list* position_;
    ::common::custom* custom_;
  };

  // edge (variable-length)
  //
  class edge
  {
    private:
    edge (const edge&);
    edge& operator= (const edge&);

    public:
    edge ();

    edge*
    _clone () const;

    ~edge ();

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    unsigned int
    ID () const;

    unsigned int&
    ID ();

    void
    ID (unsigned int);

    // node_ID
    //
    typedef ::xsde::cxx::hybrid::pod_sequence< unsigned int > node_ID_sequence;
    typedef node_ID_sequence::iterator node_ID_iterator;
    typedef node_ID_sequence::const_iterator node_ID_const_iterator;

    const node_ID_sequence&
    node_ID () const;

    node_ID_sequence&
    node_ID ();

    void
    _copy (edge&) const;

    private:
    unsigned int ID_;
    unsigned char ID_present_;
    node_ID_sequence node_ID_;
  };

  // face (variable-length)
  //
  class face
  {
    private:
    face (const face&);
    face& operator= (const face&);

    public:
    face ();

    face*
    _clone () const;

    ~face ();

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    unsigned int
    ID () const;

    unsigned int&
    ID ();

    void
    ID (unsigned int);

    // edge_ID
    //
    typedef ::xsde::cxx::hybrid::pod_sequence< unsigned int > edge_ID_sequence;
    typedef edge_ID_sequence::iterator edge_ID_iterator;
    typedef edge_ID_sequence::const_iterator edge_ID_const_iterator;

    const edge_ID_sequence&
    edge_ID () const;

    edge_ID_sequence&
    edge_ID ();

    void
    _copy (face&) const;

    private:
    unsigned int ID_;
    unsigned char ID_present_;
    edge_ID_sequence edge_ID_;
  };

  // int_list_xpath (variable-length)
  //
  class int_list_xpath: public ::common::unsigned_int_list
  {
    private:
    int_list_xpath (const int_list_xpath&);
    int_list_xpath& operator= (const int_list_xpath&);

    public:
    int_list_xpath ();

    int_list_xpath*
    _clone () const;

    ~int_list_xpath ();

    // xpath
    //
    bool
    xpath_present () const;

    void
    xpath_present (bool);

    const ::std::string&
    xpath () const;

    ::std::string&
    xpath ();

    void
    xpath (const ::std::string&);

    // grouping_number
    //
    bool
    grouping_number_present () const;

    void
    grouping_number_present (bool);

    unsigned short
    grouping_number () const;

    unsigned short&
    grouping_number ();

    void
    grouping_number (unsigned short);

    void
    _copy (int_list_xpath&) const;

    private:
    ::std::string xpath_;
    unsigned char xpath_present_;
    unsigned short grouping_number_;
    unsigned char grouping_number_present_;
  };
}

#ifndef XSDE_DONT_INCLUDE_INLINE

#include "common.ipp"

#endif // XSDE_DONT_INCLUDE_INLINE

#ifndef XSDE_DONT_INCLUDE_INLINE
#include "mesh.ipp"
#endif // XSDE_DONT_INCLUDE_INLINE

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // MESH_HPP
