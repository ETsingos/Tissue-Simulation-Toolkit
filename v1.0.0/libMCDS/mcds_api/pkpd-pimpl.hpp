// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PKPD_PIMPL_HPP
#define PKPD_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define PKPD_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "pkpd-pskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-pimpl.hpp"

#include "variables-pimpl.hpp"

namespace pkpd
{
  class pharmacokinetics_pimpl: public pharmacokinetics_pskel
  {
    public:
    pharmacokinetics_pimpl (bool = false);

    ~pharmacokinetics_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    inactivation_rate (::common::units_decimal*);

    virtual void
    half_life (::common::units_decimal*);

    virtual ::pkpd::pharmacokinetics*
    post_pharmacokinetics ();

    public:
    void
    pre_impl (::pkpd::pharmacokinetics*);

    public:
    struct pharmacokinetics_pimpl_state
    {
      ::pkpd::pharmacokinetics* pharmacokinetics_;
    };

    pharmacokinetics_pimpl_state pharmacokinetics_pimpl_state_;
    bool pharmacokinetics_pimpl_base_;
  };

  class drug_pimpl: public drug_pskel
  {
    public:
    drug_pimpl (bool = false);

    ~drug_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    choice_arm (choice_arm_tag);

    virtual void
    dose (::pkpd::dose*);

    virtual void
    pharmacokinetics (::pkpd::pharmacokinetics*);

    virtual ::pkpd::drug*
    post_drug ();

    public:
    void
    pre_impl (::pkpd::drug*);

    public:
    struct drug_pimpl_state
    {
      ::pkpd::drug* drug_;
    };

    drug_pimpl_state drug_pimpl_state_;
    bool drug_pimpl_base_;
  };

  class drug_dose_pimpl: public drug_dose_pskel
  {
    public:
    drug_dose_pimpl (bool = false);

    ~drug_dose_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned short);

    virtual void
    ChEBI_ID (const ::std::string&);

    virtual void
    MeSH_ID (const ::std::string&);

    virtual void
    DrugBank_ID (const ::std::string&);

    virtual void
    GMO_ID (const ::std::string&);

    virtual void
    GO_ID (const ::std::string&);

    virtual void
    UniProt_ID (const ::std::string&);

    virtual void
    PR_ID (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    dose (::pkpd::dose*);

    virtual ::pkpd::drug_dose*
    post_drug_dose ();

    public:
    void
    pre_impl (::pkpd::drug_dose*);

    public:
    struct drug_dose_pimpl_state
    {
      ::pkpd::drug_dose* drug_dose_;
    };

    drug_dose_pimpl_state drug_dose_pimpl_state_;
    bool drug_dose_pimpl_base_;
  };

  class drug_pk_pimpl: public drug_pk_pskel
  {
    public:
    drug_pk_pimpl (bool = false);

    ~drug_pk_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned short);

    virtual void
    ChEBI_ID (const ::std::string&);

    virtual void
    MeSH_ID (const ::std::string&);

    virtual void
    DrugBank_ID (const ::std::string&);

    virtual void
    GMO_ID (const ::std::string&);

    virtual void
    GO_ID (const ::std::string&);

    virtual void
    UniProt_ID (const ::std::string&);

    virtual void
    PR_ID (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    pharmacokinetics (::pkpd::pharmacokinetics*);

    virtual ::pkpd::drug_pk*
    post_drug_pk ();

    public:
    void
    pre_impl (::pkpd::drug_pk*);

    public:
    struct drug_pk_pimpl_state
    {
      ::pkpd::drug_pk* drug_pk_;
    };

    drug_pk_pimpl_state drug_pk_pimpl_state_;
    bool drug_pk_pimpl_base_;
  };

  class dose_pimpl: public dose_pskel
  {
    public:
    dose_pimpl (bool = false);

    ~dose_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    type (const ::std::string&);

    virtual ::pkpd::dose*
    post_dose ();

    public:
    void
    pre_impl (::pkpd::dose*);

    public:
    ::common::units_decimal_pimpl base_impl_;

    public:
    struct dose_pimpl_state
    {
      ::pkpd::dose* dose_;
    };

    dose_pimpl_state dose_pimpl_state_;
    bool dose_pimpl_base_;
  };

  class therapy_pimpl: public therapy_pskel
  {
    public:
    therapy_pimpl (bool = false);

    ~therapy_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    drug (::pkpd::drug_dose*);

    virtual ::pkpd::therapy*
    post_therapy ();

    public:
    void
    pre_impl (::pkpd::therapy*);

    public:
    struct therapy_pimpl_state
    {
      ::pkpd::therapy* therapy_;
    };

    therapy_pimpl_state therapy_pimpl_state_;
    bool therapy_pimpl_base_;
  };

  class response_pimpl: public response_pskel
  {
    public:
    response_pimpl (bool = false);

    ~response_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    maximum_birth_inhibition (::common::units_decimal*);

    virtual void
    maximum_birth_inhibition_time (::common::units_decimal*);

    virtual void
    birth_inhibition_recovery_rate (::common::units_decimal*);

    virtual void
    maximum_death_rate (::common::units_decimal*);

    virtual void
    maximum_death_time (::common::units_decimal*);

    virtual void
    death_recovery_rate (::common::units_decimal*);

    virtual void
    response_observation (::pkpd::response_observation*);

    virtual void
    custom (::common::custom*);

    virtual ::pkpd::response*
    post_response ();

    public:
    void
    pre_impl (::pkpd::response*);

    public:
    struct response_pimpl_state
    {
      ::pkpd::response* response_;
    };

    response_pimpl_state response_pimpl_state_;
    bool response_pimpl_base_;
  };

  class response_observation_pimpl: public response_observation_pskel
  {
    public:
    response_observation_pimpl (bool = false);

    ~response_observation_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    time (::common::units_decimal*);

    virtual void
    birth_rate (::common::units_decimal_nonnegative*);

    virtual void
    death_rate (::common::units_decimal_nonnegative*);

    virtual void
    net_birth_rate (::common::units_decimal*);

    virtual void
    net_death_rate (::common::units_decimal*);

    virtual void
    apoptotic_duration (::common::units_decimal*);

    virtual void
    percent_cell_viability (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::pkpd::response_observation*
    post_response_observation ();

    public:
    void
    pre_impl (::pkpd::response_observation*);

    public:
    struct response_observation_pimpl_state
    {
      ::pkpd::response_observation* response_observation_;
    };

    response_observation_pimpl_state response_observation_pimpl_state_;
    bool response_observation_pimpl_base_;
  };

  class pharmacodynamics_pimpl: public pharmacodynamics_pskel
  {
    public:
    pharmacodynamics_pimpl (bool = false);

    ~pharmacodynamics_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    therapy_measurement_set (::pkpd::therapy_measurement_set*);

    virtual ::pkpd::pharmacodynamics*
    post_pharmacodynamics ();

    public:
    void
    pre_impl (::pkpd::pharmacodynamics*);

    public:
    struct pharmacodynamics_pimpl_state
    {
      ::pkpd::pharmacodynamics* pharmacodynamics_;
    };

    pharmacodynamics_pimpl_state pharmacodynamics_pimpl_state_;
    bool pharmacodynamics_pimpl_base_;
  };

  class therapy_measurement_set_pimpl: public therapy_measurement_set_pskel
  {
    public:
    therapy_measurement_set_pimpl (bool = false);

    ~therapy_measurement_set_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned short);

    // Elements.
    //
    virtual void
    therapy (::pkpd::therapy*);

    virtual void
    response (::pkpd::response*);

    virtual ::pkpd::therapy_measurement_set*
    post_therapy_measurement_set ();

    public:
    void
    pre_impl (::pkpd::therapy_measurement_set*);

    public:
    struct therapy_measurement_set_pimpl_state
    {
      ::pkpd::therapy_measurement_set* therapy_measurement_set_;
    };

    therapy_measurement_set_pimpl_state therapy_measurement_set_pimpl_state_;
    bool therapy_measurement_set_pimpl_base_;
  };

  class PKPD_pimpl: public PKPD_pskel
  {
    public:
    PKPD_pimpl (bool = false);

    ~PKPD_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    drug (::pkpd::drug_pk*);

    virtual void
    pharmacodynamics (::pkpd::pharmacodynamics*);

    virtual ::pkpd::PKPD*
    post_PKPD ();

    public:
    void
    pre_impl (::pkpd::PKPD*);

    public:
    struct PKPD_pimpl_state
    {
      ::pkpd::PKPD* PKPD_;
    };

    PKPD_pimpl_state PKPD_pimpl_state_;
    bool PKPD_pimpl_base_;
  };
}

#ifdef PKPD_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PKPD_PIMPL_HPP
