// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace cell
{
  // population_definition_pskel
  //

  void population_definition_pskel::
  ID (unsigned int x)
  {
    if (this->population_definition_impl_)
      this->population_definition_impl_->ID (x);
  }

  void population_definition_pskel::
  name (const ::std::string& x)
  {
    if (this->population_definition_impl_)
      this->population_definition_impl_->name (x);
  }

  void population_definition_pskel::
  units (const ::std::string& x)
  {
    if (this->population_definition_impl_)
      this->population_definition_impl_->units (x);
  }

  void population_definition_pskel::
  phenotype_dataset (::phenotype_dataset::phenotype_dataset* x)
  {
    if (this->population_definition_impl_)
      this->population_definition_impl_->phenotype_dataset (x);
  }

  void population_definition_pskel::
  custom (::common::custom* x)
  {
    if (this->population_definition_impl_)
      this->population_definition_impl_->custom (x);
  }

  void population_definition_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    this->resetting_ = true;

    if (this->phenotype_dataset_parser_)
      this->phenotype_dataset_parser_->_reset ();

    if (this->phenotype_dataset_parser_map_)
      this->phenotype_dataset_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* population_definition_pskel::
  _static_type ()
  {
    return "population_definition cell";
  }

  const char* population_definition_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // population_definitions_pskel
  //

  void population_definitions_pskel::
  population_definition (::cell::population_definition* x)
  {
    if (this->population_definitions_impl_)
      this->population_definitions_impl_->population_definition (x);
  }

  void population_definitions_pskel::
  custom (::common::custom* x)
  {
    if (this->population_definitions_impl_)
      this->population_definitions_impl_->custom (x);
  }

  void population_definitions_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->population_definition_parser_)
      this->population_definition_parser_->_reset ();

    if (this->population_definition_parser_map_)
      this->population_definition_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* population_definitions_pskel::
  _static_type ()
  {
    return "population_definitions cell";
  }

  const char* population_definitions_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // cell_pskel
  //

  void cell_pskel::
  ID (unsigned int x)
  {
    if (this->cell_impl_)
      this->cell_impl_->ID (x);
  }

  void cell_pskel::
  phenotype_dataset (::phenotype_dataset::phenotype_dataset* x)
  {
    if (this->cell_impl_)
      this->cell_impl_->phenotype_dataset (x);
  }

  void cell_pskel::
  state (::state::state* x)
  {
    if (this->cell_impl_)
      this->cell_impl_->state (x);
  }

  void cell_pskel::
  custom (::common::custom* x)
  {
    if (this->cell_impl_)
      this->cell_impl_->custom (x);
  }

  void cell_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->phenotype_dataset_parser_)
      this->phenotype_dataset_parser_->_reset ();

    if (this->phenotype_dataset_parser_map_)
      this->phenotype_dataset_parser_map_->reset ();

    if (this->state_parser_)
      this->state_parser_->_reset ();

    if (this->state_parser_map_)
      this->state_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_pskel::
  _static_type ()
  {
    return "cell cell";
  }

  const char* cell_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // cell_population_individual_pskel
  //

  void cell_population_individual_pskel::
  type (const ::std::string& x)
  {
    if (this->cell_population_individual_impl_)
      this->cell_population_individual_impl_->type (x);
  }

  void cell_population_individual_pskel::
  population_ID (unsigned int x)
  {
    if (this->cell_population_individual_impl_)
      this->cell_population_individual_impl_->population_ID (x);
  }

  void cell_population_individual_pskel::
  cell (::cell::cell* x)
  {
    if (this->cell_population_individual_impl_)
      this->cell_population_individual_impl_->cell (x);
  }

  void cell_population_individual_pskel::
  custom (::common::custom* x)
  {
    if (this->cell_population_individual_impl_)
      this->cell_population_individual_impl_->custom (x);
  }

  void cell_population_individual_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->population_ID_parser_)
      this->population_ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->cell_parser_)
      this->cell_parser_->_reset ();

    if (this->cell_parser_map_)
      this->cell_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_population_individual_pskel::
  _static_type ()
  {
    return "cell_population_individual cell";
  }

  const char* cell_population_individual_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // cell_population_aggregate_pskel
  //

  void cell_population_aggregate_pskel::
  type (const ::std::string& x)
  {
    if (this->cell_population_aggregate_impl_)
      this->cell_population_aggregate_impl_->type (x);
  }

  void cell_population_aggregate_pskel::
  population_ID (unsigned int x)
  {
    if (this->cell_population_aggregate_impl_)
      this->cell_population_aggregate_impl_->population_ID (x);
  }

  void cell_population_aggregate_pskel::
  value (::common::units_decimal* x)
  {
    if (this->cell_population_aggregate_impl_)
      this->cell_population_aggregate_impl_->value (x);
  }

  void cell_population_aggregate_pskel::
  sequence_present ()
  {
    if (this->cell_population_aggregate_impl_)
      this->cell_population_aggregate_impl_->sequence_present ();
  }

  void cell_population_aggregate_pskel::
  phenotype_dataset (::phenotype_dataset::phenotype_dataset* x)
  {
    if (this->cell_population_aggregate_impl_)
      this->cell_population_aggregate_impl_->phenotype_dataset (x);
  }

  void cell_population_aggregate_pskel::
  state (::state::state* x)
  {
    if (this->cell_population_aggregate_impl_)
      this->cell_population_aggregate_impl_->state (x);
  }

  void cell_population_aggregate_pskel::
  custom (::common::custom* x)
  {
    if (this->cell_population_aggregate_impl_)
      this->cell_population_aggregate_impl_->custom (x);
  }

  void cell_population_aggregate_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->population_ID_parser_)
      this->population_ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->value_parser_map_)
      this->value_parser_map_->reset ();

    if (this->phenotype_dataset_parser_)
      this->phenotype_dataset_parser_->_reset ();

    if (this->phenotype_dataset_parser_map_)
      this->phenotype_dataset_parser_map_->reset ();

    if (this->state_parser_)
      this->state_parser_->_reset ();

    if (this->state_parser_map_)
      this->state_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_population_aggregate_pskel::
  _static_type ()
  {
    return "cell_population_aggregate cell";
  }

  const char* cell_population_aggregate_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // population_vector_pskel
  //

  void population_vector_pskel::
  voxel_ID (::common::unsigned_int_list* x)
  {
    if (this->population_vector_impl_)
      this->population_vector_impl_->voxel_ID (x);
  }

  void population_vector_pskel::
  value (::common::units_double_list* x)
  {
    if (this->population_vector_impl_)
      this->population_vector_impl_->value (x);
  }

  void population_vector_pskel::
  cell_population (::cell::cell_population_aggregate* x)
  {
    if (this->population_vector_impl_)
      this->population_vector_impl_->cell_population (x);
  }

  void population_vector_pskel::
  custom (::common::custom* x)
  {
    if (this->population_vector_impl_)
      this->population_vector_impl_->custom (x);
  }

  void population_vector_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->voxel_ID_parser_)
      this->voxel_ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->value_parser_)
      this->value_parser_->_reset ();

    if (this->value_parser_map_)
      this->value_parser_map_->reset ();

    if (this->cell_population_parser_)
      this->cell_population_parser_->_reset ();

    if (this->cell_population_parser_map_)
      this->cell_population_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* population_vector_pskel::
  _static_type ()
  {
    return "population_vector cell";
  }

  const char* population_vector_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // cell_populations_pskel
  //

  void cell_populations_pskel::
  population_vector (::cell::population_vector* x)
  {
    if (this->cell_populations_impl_)
      this->cell_populations_impl_->population_vector (x);
  }

  void cell_populations_pskel::
  cell_population (::cell::cell_population_individual* x)
  {
    if (this->cell_populations_impl_)
      this->cell_populations_impl_->cell_population (x);
  }

  void cell_populations_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->population_vector_parser_)
      this->population_vector_parser_->_reset ();

    if (this->population_vector_parser_map_)
      this->population_vector_parser_map_->reset ();

    if (this->cell_population_parser_)
      this->cell_population_parser_->_reset ();

    if (this->cell_population_parser_map_)
      this->cell_population_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_populations_pskel::
  _static_type ()
  {
    return "cell_populations cell";
  }

  const char* cell_populations_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // cellular_information_pskel
  //

  void cellular_information_pskel::
  DCLs (::cell_line::DCLs* x)
  {
    if (this->cellular_information_impl_)
      this->cellular_information_impl_->DCLs (x);
  }

  void cellular_information_pskel::
  population_definitions (::cell::population_definitions* x)
  {
    if (this->cellular_information_impl_)
      this->cellular_information_impl_->population_definitions (x);
  }

  void cellular_information_pskel::
  mesh (::mesh::mesh* x)
  {
    if (this->cellular_information_impl_)
      this->cellular_information_impl_->mesh (x);
  }

  void cellular_information_pskel::
  cell_populations (::cell::cell_populations* x)
  {
    if (this->cellular_information_impl_)
      this->cellular_information_impl_->cell_populations (x);
  }

  void cellular_information_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->DCLs_parser_)
      this->DCLs_parser_->_reset ();

    if (this->DCLs_parser_map_)
      this->DCLs_parser_map_->reset ();

    if (this->population_definitions_parser_)
      this->population_definitions_parser_->_reset ();

    if (this->population_definitions_parser_map_)
      this->population_definitions_parser_map_->reset ();

    if (this->mesh_parser_)
      this->mesh_parser_->_reset ();

    if (this->mesh_parser_map_)
      this->mesh_parser_map_->reset ();

    if (this->cell_populations_parser_)
      this->cell_populations_parser_->_reset ();

    if (this->cell_populations_parser_map_)
      this->cell_populations_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cellular_information_pskel::
  _static_type ()
  {
    return "cellular_information cell";
  }

  const char* cellular_information_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace cell
{
  // Element validation and dispatch functions for population_definition_pskel.
  //
  bool population_definition_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "phenotype_dataset" && ns.empty ())
          s = 0UL;
        else if (n == "custom" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &population_definition_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool population_definition_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void population_definition_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void population_definition_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void population_definition_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "phenotype_dataset" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_dataset::phenotype_dataset_pskel* p = 0;

            if (t == 0 && this->phenotype_dataset_parser_ != 0)
              p = this->phenotype_dataset_parser_;
            else
            {
              const char* ts = ::phenotype_dataset::phenotype_dataset_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->phenotype_dataset_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->phenotype_dataset_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->phenotype_dataset_parser_map_ != 0)
                  p = static_cast< ::phenotype_dataset::phenotype_dataset_pskel* > (
                    this->phenotype_dataset_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_dataset::phenotype_dataset_pskel* p =
            static_cast< ::phenotype_dataset::phenotype_dataset_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_dataset::phenotype_dataset* tmp = p->post_phenotype_dataset ();
              this->phenotype_dataset (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for population_definitions_pskel.
  //
  bool population_definitions_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "population_definition" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &population_definitions_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool population_definitions_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void population_definitions_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void population_definitions_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void population_definitions_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "population_definition" && ns.empty ())
        {
          if (start)
          {
            ::cell::population_definition_pskel* p = 0;

            if (t == 0 && this->population_definition_parser_ != 0)
              p = this->population_definition_parser_;
            else
            {
              const char* ts = ::cell::population_definition_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->population_definition_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->population_definition_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->population_definition_parser_map_ != 0)
                  p = static_cast< ::cell::population_definition_pskel* > (
                    this->population_definition_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell::population_definition_pskel* p =
            static_cast< ::cell::population_definition_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell::population_definition* tmp = p->post_population_definition ();
              this->population_definition (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cell_pskel.
  //
  bool cell_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if ((n == "phenotype_dataset" && ns.empty ()) ||
            (n == "state" && ns.empty ()) ||
            (n == "custom" && ns.empty ()))
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_pskel::sequence_1;
          vd->state = s;
          vd->count = 0;

          this->sequence_1 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cell_pskel::
  sequence_1 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        unsigned long s = ~0UL;

        if (n == "phenotype_dataset" && ns.empty ())
          s = 0UL;
        else if (n == "state" && ns.empty ())
          s = 1UL;
        else if (n == "custom" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = ~0UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &cell_pskel::sequence_0;
          vd.state = s;
          vd.count = 0;

          this->sequence_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void cell_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "phenotype_dataset" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_dataset::phenotype_dataset_pskel* p = 0;

            if (t == 0 && this->phenotype_dataset_parser_ != 0)
              p = this->phenotype_dataset_parser_;
            else
            {
              const char* ts = ::phenotype_dataset::phenotype_dataset_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->phenotype_dataset_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->phenotype_dataset_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->phenotype_dataset_parser_map_ != 0)
                  p = static_cast< ::phenotype_dataset::phenotype_dataset_pskel* > (
                    this->phenotype_dataset_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_dataset::phenotype_dataset_pskel* p =
            static_cast< ::phenotype_dataset::phenotype_dataset_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_dataset::phenotype_dataset* tmp = p->post_phenotype_dataset ();
              this->phenotype_dataset (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "state" && ns.empty ())
        {
          if (start)
          {
            ::state::state_pskel* p = 0;

            if (t == 0 && this->state_parser_ != 0)
              p = this->state_parser_;
            else
            {
              const char* ts = ::state::state_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->state_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->state_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->state_parser_map_ != 0)
                  p = static_cast< ::state::state_pskel* > (
                    this->state_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::state::state_pskel* p =
            static_cast< ::state::state_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::state::state* tmp = p->post_state ();
              this->state (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cell_population_individual_pskel.
  //
  bool cell_population_individual_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "cell" && ns.empty ())
          s = 0UL;
        else if (n == "custom" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_population_individual_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_population_individual_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_population_individual_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_population_individual_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cell_population_individual_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "cell" && ns.empty ())
        {
          if (start)
          {
            ::cell::cell_pskel* p = 0;

            if (t == 0 && this->cell_parser_ != 0)
              p = this->cell_parser_;
            else
            {
              const char* ts = ::cell::cell_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_parser_map_ != 0)
                  p = static_cast< ::cell::cell_pskel* > (
                    this->cell_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell::cell_pskel* p =
            static_cast< ::cell::cell_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell::cell* tmp = p->post_cell ();
              this->cell (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cell_population_aggregate_pskel.
  //
  bool cell_population_aggregate_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "value" && ns.empty ())
          s = 0UL;
        else if ((n == "phenotype_dataset" && ns.empty ()) ||
                 (n == "state" && ns.empty ()) ||
                 (n == "custom" && ns.empty ()))
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_population_aggregate_pskel::sequence_1;
          vd->state = s;
          vd->count = 0;

          this->sequence_1 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_population_aggregate_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_population_aggregate_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_population_aggregate_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cell_population_aggregate_pskel::
  sequence_1 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "value" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->value_parser_ != 0)
              p = this->value_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->value_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->value_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->value_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->value_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->value (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        unsigned long s = ~0UL;

        if (n == "phenotype_dataset" && ns.empty ())
          s = 0UL;
        else if (n == "state" && ns.empty ())
          s = 1UL;
        else if (n == "custom" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = ~0UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &cell_population_aggregate_pskel::sequence_0;
          vd.state = s;
          vd.count = 0;

          this->sequence_present ();
          this->sequence_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void cell_population_aggregate_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "phenotype_dataset" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_dataset::phenotype_dataset_pskel* p = 0;

            if (t == 0 && this->phenotype_dataset_parser_ != 0)
              p = this->phenotype_dataset_parser_;
            else
            {
              const char* ts = ::phenotype_dataset::phenotype_dataset_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->phenotype_dataset_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->phenotype_dataset_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->phenotype_dataset_parser_map_ != 0)
                  p = static_cast< ::phenotype_dataset::phenotype_dataset_pskel* > (
                    this->phenotype_dataset_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_dataset::phenotype_dataset_pskel* p =
            static_cast< ::phenotype_dataset::phenotype_dataset_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_dataset::phenotype_dataset* tmp = p->post_phenotype_dataset ();
              this->phenotype_dataset (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "state" && ns.empty ())
        {
          if (start)
          {
            ::state::state_pskel* p = 0;

            if (t == 0 && this->state_parser_ != 0)
              p = this->state_parser_;
            else
            {
              const char* ts = ::state::state_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->state_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->state_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->state_parser_map_ != 0)
                  p = static_cast< ::state::state_pskel* > (
                    this->state_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::state::state_pskel* p =
            static_cast< ::state::state_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::state::state* tmp = p->post_state ();
              this->state (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for population_vector_pskel.
  //
  bool population_vector_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "value" && ns.empty ())
          s = 0UL;
        else if (n == "cell_population" && ns.empty ())
          s = 1UL;
        else if (n == "custom" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &population_vector_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool population_vector_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void population_vector_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void population_vector_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void population_vector_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "value" && ns.empty ())
        {
          if (start)
          {
            ::common::units_double_list_pskel* p = 0;

            if (t == 0 && this->value_parser_ != 0)
              p = this->value_parser_;
            else
            {
              const char* ts = ::common::units_double_list_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->value_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->value_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->value_parser_map_ != 0)
                  p = static_cast< ::common::units_double_list_pskel* > (
                    this->value_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_double_list_pskel* p =
            static_cast< ::common::units_double_list_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_double_list* tmp = p->post_units_double_list ();
              this->value (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "cell_population" && ns.empty ())
        {
          if (start)
          {
            ::cell::cell_population_aggregate_pskel* p = 0;

            if (t == 0 && this->cell_population_parser_ != 0)
              p = this->cell_population_parser_;
            else
            {
              const char* ts = ::cell::cell_population_aggregate_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_population_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_population_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_population_parser_map_ != 0)
                  p = static_cast< ::cell::cell_population_aggregate_pskel* > (
                    this->cell_population_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell::cell_population_aggregate_pskel* p =
            static_cast< ::cell::cell_population_aggregate_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell::cell_population_aggregate* tmp = p->post_cell_population_aggregate ();
              this->cell_population (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cell_populations_pskel.
  //
  bool cell_populations_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "population_vector" && ns.empty ())
          s = 0UL;
        else if (n == "cell_population" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cell_populations_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cell_populations_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cell_populations_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cell_populations_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cell_populations_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "population_vector" && ns.empty ())
        {
          if (start)
          {
            ::cell::population_vector_pskel* p = 0;

            if (t == 0 && this->population_vector_parser_ != 0)
              p = this->population_vector_parser_;
            else
            {
              const char* ts = ::cell::population_vector_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->population_vector_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->population_vector_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->population_vector_parser_map_ != 0)
                  p = static_cast< ::cell::population_vector_pskel* > (
                    this->population_vector_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell::population_vector_pskel* p =
            static_cast< ::cell::population_vector_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell::population_vector* tmp = p->post_population_vector ();
              this->population_vector (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "cell_population" && ns.empty ())
        {
          if (start)
          {
            ::cell::cell_population_individual_pskel* p = 0;

            if (t == 0 && this->cell_population_parser_ != 0)
              p = this->cell_population_parser_;
            else
            {
              const char* ts = ::cell::cell_population_individual_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cell_population_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cell_population_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cell_population_parser_map_ != 0)
                  p = static_cast< ::cell::cell_population_individual_pskel* > (
                    this->cell_population_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::cell::cell_population_individual_pskel* p =
            static_cast< ::cell::cell_population_individual_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::cell::cell_population_individual* tmp = p->post_cell_population_individual ();
              this->cell_population (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cellular_information_pskel.
  //
  bool cellular_information_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool cellular_information_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void cellular_information_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cellular_information_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void cellular_information_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "DCLs" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::cell_line::DCLs_pskel* p = 0;

          if (t == 0 && this->DCLs_parser_ != 0)
            p = this->DCLs_parser_;
          else
          {
            const char* ts = ::cell_line::DCLs_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->DCLs_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->DCLs_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->DCLs_parser_map_ != 0)
                p = static_cast< ::cell_line::DCLs_pskel* > (
                  this->DCLs_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::cell_line::DCLs_pskel* p =
          static_cast< ::cell_line::DCLs_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::cell_line::DCLs* tmp = p->post_DCLs ();
            this->DCLs (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "population_definitions" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::cell::population_definitions_pskel* p = 0;

          if (t == 0 && this->population_definitions_parser_ != 0)
            p = this->population_definitions_parser_;
          else
          {
            const char* ts = ::cell::population_definitions_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->population_definitions_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->population_definitions_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->population_definitions_parser_map_ != 0)
                p = static_cast< ::cell::population_definitions_pskel* > (
                  this->population_definitions_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::cell::population_definitions_pskel* p =
          static_cast< ::cell::population_definitions_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::cell::population_definitions* tmp = p->post_population_definitions ();
            this->population_definitions (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "mesh" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::mesh::mesh_pskel* p = 0;

          if (t == 0 && this->mesh_parser_ != 0)
            p = this->mesh_parser_;
          else
          {
            const char* ts = ::mesh::mesh_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->mesh_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->mesh_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->mesh_parser_map_ != 0)
                p = static_cast< ::mesh::mesh_pskel* > (
                  this->mesh_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::mesh::mesh_pskel* p =
          static_cast< ::mesh::mesh_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::mesh::mesh* tmp = p->post_mesh ();
            this->mesh (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "cell_populations" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::cell::cell_populations_pskel* p = 0;

          if (t == 0 && this->cell_populations_parser_ != 0)
            p = this->cell_populations_parser_;
          else
          {
            const char* ts = ::cell::cell_populations_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->cell_populations_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->cell_populations_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->cell_populations_parser_map_ != 0)
                p = static_cast< ::cell::cell_populations_pskel* > (
                  this->cell_populations_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::cell::cell_populations_pskel* p =
          static_cast< ::cell::cell_populations_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::cell::cell_populations* tmp = p->post_cell_populations ();
            this->cell_populations (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }
}

namespace cell
{
  // Attribute validation and dispatch functions for population_definition_pskel.
  //
  bool population_definition_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      return true;
    }

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for cell_pskel.
  //
  bool cell_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for cell_population_individual_pskel.
  //
  bool cell_population_individual_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->type_parser_->post_string ();

          this->type (tmp);
        }
      }

      return true;
    }

    if (n == "population_ID" && ns.empty ())
    {
      if (this->population_ID_parser_)
      {
        this->population_ID_parser_->pre ();

        this->population_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->population_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->population_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->population_ID_parser_->post_unsigned_int ();

          this->population_ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for cell_population_aggregate_pskel.
  //
  bool cell_population_aggregate_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->type_parser_->post_string ();

          this->type (tmp);
        }
      }

      return true;
    }

    if (n == "population_ID" && ns.empty ())
    {
      if (this->population_ID_parser_)
      {
        this->population_ID_parser_->pre ();

        this->population_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->population_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->population_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->population_ID_parser_->post_unsigned_int ();

          this->population_ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for population_vector_pskel.
  //
  bool population_vector_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "voxel_ID" && ns.empty ())
    {
      if (this->voxel_ID_parser_)
      {
        this->voxel_ID_parser_->pre ();

        this->voxel_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->voxel_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->voxel_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::unsigned_int_list* tmp = this->voxel_ID_parser_->post_unsigned_int_list ();

          this->voxel_ID (tmp);
        }
      }

      return true;
    }

    return false;
  }
}

namespace cell
{
}

// Begin epilogue.
//
//
// End epilogue.

