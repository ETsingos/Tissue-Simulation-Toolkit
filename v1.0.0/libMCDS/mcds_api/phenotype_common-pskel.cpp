// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "phenotype_common-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace phenotype_common
{
  // adhesion_pskel
  //

  void adhesion_pskel::
  adhesion_bond_breaking_rate (::common::units_decimal* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->adhesion_bond_breaking_rate (x);
  }

  void adhesion_pskel::
  adhesion_bond_formation_rate (::common::units_decimal* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->adhesion_bond_formation_rate (x);
  }

  void adhesion_pskel::
  adhesion_spring_constant (::common::units_decimal_nonnegative* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->adhesion_spring_constant (x);
  }

  void adhesion_pskel::
  adhesion_receptor_density (::common::units_decimal_nonnegative* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->adhesion_receptor_density (x);
  }

  void adhesion_pskel::
  surface_binding_energy (::common::units_decimal* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->surface_binding_energy (x);
  }

  void adhesion_pskel::
  number_of_adhered_cells (::common::units_decimal_nonnegative* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->number_of_adhered_cells (x);
  }

  void adhesion_pskel::
  maximum_number_of_adhered_cells (const ::common::units_unsignedShort& x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->maximum_number_of_adhered_cells (x);
  }

  void adhesion_pskel::
  adhered_surface_area (::common::units_decimal_nonnegative* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->adhered_surface_area (x);
  }

  void adhesion_pskel::
  maximum_adhered_surface_area (::common::units_decimal_nonnegative* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->maximum_adhered_surface_area (x);
  }

  void adhesion_pskel::
  adhesion_force_per_surface_area (::common::units_decimal* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->adhesion_force_per_surface_area (x);
  }

  void adhesion_pskel::
  adhesion_probability (::common::units_fraction* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->adhesion_probability (x);
  }

  void adhesion_pskel::
  detachment_proability (::common::units_fraction* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->detachment_proability (x);
  }

  void adhesion_pskel::
  rolling_observation (::phenotype_common::rolling_observation* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->rolling_observation (x);
  }

  void adhesion_pskel::
  custom (::common::custom* x)
  {
    if (this->adhesion_impl_)
      this->adhesion_impl_->custom (x);
  }

  void adhesion_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->adhesion_bond_breaking_rate_parser_)
      this->adhesion_bond_breaking_rate_parser_->_reset ();

    if (this->adhesion_bond_breaking_rate_parser_map_)
      this->adhesion_bond_breaking_rate_parser_map_->reset ();

    if (this->adhesion_bond_formation_rate_parser_)
      this->adhesion_bond_formation_rate_parser_->_reset ();

    if (this->adhesion_bond_formation_rate_parser_map_)
      this->adhesion_bond_formation_rate_parser_map_->reset ();

    if (this->adhesion_spring_constant_parser_)
      this->adhesion_spring_constant_parser_->_reset ();

    if (this->adhesion_spring_constant_parser_map_)
      this->adhesion_spring_constant_parser_map_->reset ();

    if (this->adhesion_receptor_density_parser_)
      this->adhesion_receptor_density_parser_->_reset ();

    if (this->adhesion_receptor_density_parser_map_)
      this->adhesion_receptor_density_parser_map_->reset ();

    if (this->surface_binding_energy_parser_)
      this->surface_binding_energy_parser_->_reset ();

    if (this->surface_binding_energy_parser_map_)
      this->surface_binding_energy_parser_map_->reset ();

    if (this->number_of_adhered_cells_parser_)
      this->number_of_adhered_cells_parser_->_reset ();

    if (this->number_of_adhered_cells_parser_map_)
      this->number_of_adhered_cells_parser_map_->reset ();

    if (this->maximum_number_of_adhered_cells_parser_)
      this->maximum_number_of_adhered_cells_parser_->_reset ();

    if (this->maximum_number_of_adhered_cells_parser_map_)
      this->maximum_number_of_adhered_cells_parser_map_->reset ();

    if (this->adhered_surface_area_parser_)
      this->adhered_surface_area_parser_->_reset ();

    if (this->adhered_surface_area_parser_map_)
      this->adhered_surface_area_parser_map_->reset ();

    if (this->maximum_adhered_surface_area_parser_)
      this->maximum_adhered_surface_area_parser_->_reset ();

    if (this->maximum_adhered_surface_area_parser_map_)
      this->maximum_adhered_surface_area_parser_map_->reset ();

    if (this->adhesion_force_per_surface_area_parser_)
      this->adhesion_force_per_surface_area_parser_->_reset ();

    if (this->adhesion_force_per_surface_area_parser_map_)
      this->adhesion_force_per_surface_area_parser_map_->reset ();

    if (this->adhesion_probability_parser_)
      this->adhesion_probability_parser_->_reset ();

    if (this->adhesion_probability_parser_map_)
      this->adhesion_probability_parser_map_->reset ();

    if (this->detachment_proability_parser_)
      this->detachment_proability_parser_->_reset ();

    if (this->detachment_proability_parser_map_)
      this->detachment_proability_parser_map_->reset ();

    if (this->rolling_observation_parser_)
      this->rolling_observation_parser_->_reset ();

    if (this->rolling_observation_parser_map_)
      this->rolling_observation_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* adhesion_pskel::
  _static_type ()
  {
    return "adhesion phenotype_common";
  }

  const char* adhesion_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // rolling_observation_pskel
  //

  void rolling_observation_pskel::
  rolling_velocity (::common::units_decimal* x)
  {
    if (this->rolling_observation_impl_)
      this->rolling_observation_impl_->rolling_velocity (x);
  }

  void rolling_observation_pskel::
  shear_stress (::common::units_decimal* x)
  {
    if (this->rolling_observation_impl_)
      this->rolling_observation_impl_->shear_stress (x);
  }

  void rolling_observation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->rolling_velocity_parser_)
      this->rolling_velocity_parser_->_reset ();

    if (this->rolling_velocity_parser_map_)
      this->rolling_velocity_parser_map_->reset ();

    if (this->shear_stress_parser_)
      this->shear_stress_parser_->_reset ();

    if (this->shear_stress_parser_map_)
      this->shear_stress_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* rolling_observation_pskel::
  _static_type ()
  {
    return "rolling_observation phenotype_common";
  }

  const char* rolling_observation_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // friction_pskel
  //

  void friction_pskel::
  compression (::common::units_decimal_nonnegative* x)
  {
    if (this->friction_impl_)
      this->friction_impl_->compression (x);
  }

  void friction_pskel::
  ECM (::common::units_decimal_nonnegative* x)
  {
    if (this->friction_impl_)
      this->friction_impl_->ECM (x);
  }

  void friction_pskel::
  shear (::common::units_decimal_nonnegative* x)
  {
    if (this->friction_impl_)
      this->friction_impl_->shear (x);
  }

  void friction_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->compression_parser_)
      this->compression_parser_->_reset ();

    if (this->compression_parser_map_)
      this->compression_parser_map_->reset ();

    if (this->ECM_parser_)
      this->ECM_parser_->_reset ();

    if (this->ECM_parser_map_)
      this->ECM_parser_map_->reset ();

    if (this->shear_parser_)
      this->shear_parser_->_reset ();

    if (this->shear_parser_map_)
      this->shear_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* friction_pskel::
  _static_type ()
  {
    return "friction phenotype_common";
  }

  const char* friction_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // mechanics_pskel
  //

  void mechanics_pskel::
  friction (::phenotype_common::friction* x)
  {
    if (this->mechanics_impl_)
      this->mechanics_impl_->friction (x);
  }

  void mechanics_pskel::
  maximum_cell_deformation (::common::units_decimal* x)
  {
    if (this->mechanics_impl_)
      this->mechanics_impl_->maximum_cell_deformation (x);
  }

  void mechanics_pskel::
  mechanical_pressure (::common::units_decimal* x)
  {
    if (this->mechanics_impl_)
      this->mechanics_impl_->mechanical_pressure (x);
  }

  void mechanics_pskel::
  indentation_observation (::phenotype_common::indentation_observation* x)
  {
    if (this->mechanics_impl_)
      this->mechanics_impl_->indentation_observation (x);
  }

  void mechanics_pskel::
  poisson_ratio (::common::units_decimal* x)
  {
    if (this->mechanics_impl_)
      this->mechanics_impl_->poisson_ratio (x);
  }

  void mechanics_pskel::
  youngs_modulus (::common::units_decimal* x)
  {
    if (this->mechanics_impl_)
      this->mechanics_impl_->youngs_modulus (x);
  }

  void mechanics_pskel::
  custom (::common::custom* x)
  {
    if (this->mechanics_impl_)
      this->mechanics_impl_->custom (x);
  }

  void mechanics_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->friction_parser_)
      this->friction_parser_->_reset ();

    if (this->friction_parser_map_)
      this->friction_parser_map_->reset ();

    if (this->maximum_cell_deformation_parser_)
      this->maximum_cell_deformation_parser_->_reset ();

    if (this->maximum_cell_deformation_parser_map_)
      this->maximum_cell_deformation_parser_map_->reset ();

    if (this->mechanical_pressure_parser_)
      this->mechanical_pressure_parser_->_reset ();

    if (this->mechanical_pressure_parser_map_)
      this->mechanical_pressure_parser_map_->reset ();

    if (this->indentation_observation_parser_)
      this->indentation_observation_parser_->_reset ();

    if (this->indentation_observation_parser_map_)
      this->indentation_observation_parser_map_->reset ();

    if (this->poisson_ratio_parser_)
      this->poisson_ratio_parser_->_reset ();

    if (this->poisson_ratio_parser_map_)
      this->poisson_ratio_parser_map_->reset ();

    if (this->youngs_modulus_parser_)
      this->youngs_modulus_parser_->_reset ();

    if (this->youngs_modulus_parser_map_)
      this->youngs_modulus_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* mechanics_pskel::
  _static_type ()
  {
    return "mechanics phenotype_common";
  }

  const char* mechanics_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // indentation_observation_pskel
  //

  void indentation_observation_pskel::
  depth (::common::units_decimal* x)
  {
    if (this->indentation_observation_impl_)
      this->indentation_observation_impl_->depth (x);
  }

  void indentation_observation_pskel::
  poisson_ratio (::common::units_decimal* x)
  {
    if (this->indentation_observation_impl_)
      this->indentation_observation_impl_->poisson_ratio (x);
  }

  void indentation_observation_pskel::
  youngs_modulus (::common::units_decimal* x)
  {
    if (this->indentation_observation_impl_)
      this->indentation_observation_impl_->youngs_modulus (x);
  }

  void indentation_observation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->depth_parser_)
      this->depth_parser_->_reset ();

    if (this->depth_parser_map_)
      this->depth_parser_map_->reset ();

    if (this->poisson_ratio_parser_)
      this->poisson_ratio_parser_->_reset ();

    if (this->poisson_ratio_parser_map_)
      this->poisson_ratio_parser_map_->reset ();

    if (this->youngs_modulus_parser_)
      this->youngs_modulus_parser_->_reset ();

    if (this->youngs_modulus_parser_map_)
      this->youngs_modulus_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* indentation_observation_pskel::
  _static_type ()
  {
    return "indentation_observation phenotype_common";
  }

  const char* indentation_observation_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // motility_pskel
  //

  void motility_pskel::
  unrestricted (::phenotype_common::motility_types* x)
  {
    if (this->motility_impl_)
      this->motility_impl_->unrestricted (x);
  }

  void motility_pskel::
  restricted (::phenotype_common::motility_types* x)
  {
    if (this->motility_impl_)
      this->motility_impl_->restricted (x);
  }

  void motility_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->unrestricted_parser_)
      this->unrestricted_parser_->_reset ();

    if (this->unrestricted_parser_map_)
      this->unrestricted_parser_map_->reset ();

    if (this->restricted_parser_)
      this->restricted_parser_->_reset ();

    if (this->restricted_parser_map_)
      this->restricted_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* motility_pskel::
  _static_type ()
  {
    return "motility phenotype_common";
  }

  const char* motility_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // motility_types_pskel
  //

  void motility_types_pskel::
  ID (unsigned int x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->ID (x);
  }

  void motility_types_pskel::
  timescale (::phenotype_common::timescale* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->timescale (x);
  }

  void motility_types_pskel::
  restriction (::variables::experimental_conditions* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->restriction (x);
  }

  void motility_types_pskel::
  net_displacement (::common::units_decimal* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->net_displacement (x);
  }

  void motility_types_pskel::
  total_displacement (::common::units_decimal_nonnegative* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->total_displacement (x);
  }

  void motility_types_pskel::
  mean_square_displacement (::common::units_decimal_nonnegative* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->mean_square_displacement (x);
  }

  void motility_types_pskel::
  mean_speed (::common::units_decimal* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->mean_speed (x);
  }

  void motility_types_pskel::
  net_speed (::common::units_decimal* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->net_speed (x);
  }

  void motility_types_pskel::
  persistence (::common::units_decimal* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->persistence (x);
  }

  void motility_types_pskel::
  mean_path_length (::common::units_decimal* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->mean_path_length (x);
  }

  void motility_types_pskel::
  diffusion_coefficient (::common::units_decimal* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->diffusion_coefficient (x);
  }

  void motility_types_pskel::
  custom (::common::custom* x)
  {
    if (this->motility_types_impl_)
      this->motility_types_impl_->custom (x);
  }

  void motility_types_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->timescale_parser_)
      this->timescale_parser_->_reset ();

    if (this->timescale_parser_map_)
      this->timescale_parser_map_->reset ();

    if (this->restriction_parser_)
      this->restriction_parser_->_reset ();

    if (this->restriction_parser_map_)
      this->restriction_parser_map_->reset ();

    if (this->net_displacement_parser_)
      this->net_displacement_parser_->_reset ();

    if (this->net_displacement_parser_map_)
      this->net_displacement_parser_map_->reset ();

    if (this->total_displacement_parser_)
      this->total_displacement_parser_->_reset ();

    if (this->total_displacement_parser_map_)
      this->total_displacement_parser_map_->reset ();

    if (this->mean_square_displacement_parser_)
      this->mean_square_displacement_parser_->_reset ();

    if (this->mean_square_displacement_parser_map_)
      this->mean_square_displacement_parser_map_->reset ();

    if (this->mean_speed_parser_)
      this->mean_speed_parser_->_reset ();

    if (this->mean_speed_parser_map_)
      this->mean_speed_parser_map_->reset ();

    if (this->net_speed_parser_)
      this->net_speed_parser_->_reset ();

    if (this->net_speed_parser_map_)
      this->net_speed_parser_map_->reset ();

    if (this->persistence_parser_)
      this->persistence_parser_->_reset ();

    if (this->persistence_parser_map_)
      this->persistence_parser_map_->reset ();

    if (this->mean_path_length_parser_)
      this->mean_path_length_parser_->_reset ();

    if (this->mean_path_length_parser_map_)
      this->mean_path_length_parser_map_->reset ();

    if (this->diffusion_coefficient_parser_)
      this->diffusion_coefficient_parser_->_reset ();

    if (this->diffusion_coefficient_parser_map_)
      this->diffusion_coefficient_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* motility_types_pskel::
  _static_type ()
  {
    return "motility_types phenotype_common";
  }

  const char* motility_types_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // timescale_pskel
  //

  void timescale_pskel::
  mitotic (bool x)
  {
    if (this->timescale_impl_)
      this->timescale_impl_->mitotic (x);
  }

  void timescale_pskel::
  _reset ()
  {
    typedef ::common::units_decimal_pskel base;
    base::_reset ();

    if (this->mitotic_parser_)
      this->mitotic_parser_->_reset ();
  }

  const char* timescale_pskel::
  _static_type ()
  {
    return "timescale phenotype_common";
  }

  const char* timescale_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_timescale_pskel_inheritance_map_entry_ (
    timescale_pskel::_static_type (),
    ::common::units_decimal_pskel::_static_type ());

  ::common::units_decimal* timescale_pskel::
  post_units_decimal ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->post_units_decimal ();
  }

  // transport_processes_pskel
  //

  void transport_processes_pskel::
  variable (::phenotype_common::transport_variable* x)
  {
    if (this->transport_processes_impl_)
      this->transport_processes_impl_->variable (x);
  }

  void transport_processes_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->variable_parser_)
      this->variable_parser_->_reset ();

    if (this->variable_parser_map_)
      this->variable_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* transport_processes_pskel::
  _static_type ()
  {
    return "transport_processes phenotype_common";
  }

  const char* transport_processes_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // transport_variable_pskel
  //

  void transport_variable_pskel::
  name (const ::std::string& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->name (x);
  }

  void transport_variable_pskel::
  units (const ::std::string& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->units (x);
  }

  void transport_variable_pskel::
  ID (unsigned long long x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->ID (x);
  }

  void transport_variable_pskel::
  type (const ::variables::amount_type& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->type (x);
  }

  void transport_variable_pskel::
  ChEBI_ID (const ::std::string& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->ChEBI_ID (x);
  }

  void transport_variable_pskel::
  MeSH_ID (const ::std::string& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->MeSH_ID (x);
  }

  void transport_variable_pskel::
  DrugBank_ID (const ::std::string& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->DrugBank_ID (x);
  }

  void transport_variable_pskel::
  GMO_ID (const ::std::string& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->GMO_ID (x);
  }

  void transport_variable_pskel::
  GO_ID (const ::std::string& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->GO_ID (x);
  }

  void transport_variable_pskel::
  UniProt_ID (const ::std::string& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->UniProt_ID (x);
  }

  void transport_variable_pskel::
  PR_ID (const ::std::string& x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->PR_ID (x);
  }

  void transport_variable_pskel::
  all_present ()
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->all_present ();
  }

  void transport_variable_pskel::
  export_rate (::common::units_decimal* x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->export_rate (x);
  }

  void transport_variable_pskel::
  export_rate_per_unit_surface_area (::common::units_decimal* x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->export_rate_per_unit_surface_area (x);
  }

  void transport_variable_pskel::
  import_rate (::common::units_decimal* x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->import_rate (x);
  }

  void transport_variable_pskel::
  import_rate_per_unit_surface_area (::common::units_decimal* x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->import_rate_per_unit_surface_area (x);
  }

  void transport_variable_pskel::
  saturation_density (::common::units_decimal* x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->saturation_density (x);
  }

  void transport_variable_pskel::
  custom (::common::custom* x)
  {
    if (this->transport_variable_impl_)
      this->transport_variable_impl_->custom (x);
  }

  void transport_variable_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->ChEBI_ID_parser_)
      this->ChEBI_ID_parser_->_reset ();

    if (this->MeSH_ID_parser_)
      this->MeSH_ID_parser_->_reset ();

    if (this->DrugBank_ID_parser_)
      this->DrugBank_ID_parser_->_reset ();

    if (this->GMO_ID_parser_)
      this->GMO_ID_parser_->_reset ();

    if (this->GO_ID_parser_)
      this->GO_ID_parser_->_reset ();

    if (this->UniProt_ID_parser_)
      this->UniProt_ID_parser_->_reset ();

    if (this->PR_ID_parser_)
      this->PR_ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->export_rate_parser_)
      this->export_rate_parser_->_reset ();

    if (this->export_rate_parser_map_)
      this->export_rate_parser_map_->reset ();

    if (this->export_rate_per_unit_surface_area_parser_)
      this->export_rate_per_unit_surface_area_parser_->_reset ();

    if (this->export_rate_per_unit_surface_area_parser_map_)
      this->export_rate_per_unit_surface_area_parser_map_->reset ();

    if (this->import_rate_parser_)
      this->import_rate_parser_->_reset ();

    if (this->import_rate_parser_map_)
      this->import_rate_parser_map_->reset ();

    if (this->import_rate_per_unit_surface_area_parser_)
      this->import_rate_per_unit_surface_area_parser_->_reset ();

    if (this->import_rate_per_unit_surface_area_parser_map_)
      this->import_rate_per_unit_surface_area_parser_map_->reset ();

    if (this->saturation_density_parser_)
      this->saturation_density_parser_->_reset ();

    if (this->saturation_density_parser_map_)
      this->saturation_density_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* transport_variable_pskel::
  _static_type ()
  {
    return "transport_variable phenotype_common";
  }

  const char* transport_variable_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // geometrical_parameters_pskel
  //

  void geometrical_parameters_pskel::
  units (const ::std::string& x)
  {
    if (this->geometrical_parameters_impl_)
      this->geometrical_parameters_impl_->units (x);
  }

  void geometrical_parameters_pskel::
  aspect_ratio (::common::units_decimal_nonnegative* x)
  {
    if (this->geometrical_parameters_impl_)
      this->geometrical_parameters_impl_->aspect_ratio (x);
  }

  void geometrical_parameters_pskel::
  circularity (::common::units_decimal_nonnegative* x)
  {
    if (this->geometrical_parameters_impl_)
      this->geometrical_parameters_impl_->circularity (x);
  }

  void geometrical_parameters_pskel::
  eccentricity (::common::units_decimal_nonnegative* x)
  {
    if (this->geometrical_parameters_impl_)
      this->geometrical_parameters_impl_->eccentricity (x);
  }

  void geometrical_parameters_pskel::
  sphericity (::common::units_decimal_nonnegative* x)
  {
    if (this->geometrical_parameters_impl_)
      this->geometrical_parameters_impl_->sphericity (x);
  }

  void geometrical_parameters_pskel::
  custom (::common::custom* x)
  {
    if (this->geometrical_parameters_impl_)
      this->geometrical_parameters_impl_->custom (x);
  }

  void geometrical_parameters_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    this->resetting_ = true;

    if (this->aspect_ratio_parser_)
      this->aspect_ratio_parser_->_reset ();

    if (this->aspect_ratio_parser_map_)
      this->aspect_ratio_parser_map_->reset ();

    if (this->circularity_parser_)
      this->circularity_parser_->_reset ();

    if (this->circularity_parser_map_)
      this->circularity_parser_map_->reset ();

    if (this->eccentricity_parser_)
      this->eccentricity_parser_->_reset ();

    if (this->eccentricity_parser_map_)
      this->eccentricity_parser_map_->reset ();

    if (this->sphericity_parser_)
      this->sphericity_parser_->_reset ();

    if (this->sphericity_parser_map_)
      this->sphericity_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* geometrical_parameters_pskel::
  _static_type ()
  {
    return "geometrical_parameters phenotype_common";
  }

  const char* geometrical_parameters_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // lengths_pskel
  //

  void lengths_pskel::
  units (const ::std::string& x)
  {
    if (this->lengths_impl_)
      this->lengths_impl_->units (x);
  }

  void lengths_pskel::
  diameter (::common::units_decimal_nonnegative* x)
  {
    if (this->lengths_impl_)
      this->lengths_impl_->diameter (x);
  }

  void lengths_pskel::
  major_axis (::common::units_decimal_nonnegative* x)
  {
    if (this->lengths_impl_)
      this->lengths_impl_->major_axis (x);
  }

  void lengths_pskel::
  minor_axis (::common::units_decimal_nonnegative* x)
  {
    if (this->lengths_impl_)
      this->lengths_impl_->minor_axis (x);
  }

  void lengths_pskel::
  perimeter (::common::units_decimal_nonnegative* x)
  {
    if (this->lengths_impl_)
      this->lengths_impl_->perimeter (x);
  }

  void lengths_pskel::
  radius (::common::units_decimal_nonnegative* x)
  {
    if (this->lengths_impl_)
      this->lengths_impl_->radius (x);
  }

  void lengths_pskel::
  custom (::common::custom* x)
  {
    if (this->lengths_impl_)
      this->lengths_impl_->custom (x);
  }

  void lengths_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    this->resetting_ = true;

    if (this->diameter_parser_)
      this->diameter_parser_->_reset ();

    if (this->diameter_parser_map_)
      this->diameter_parser_map_->reset ();

    if (this->major_axis_parser_)
      this->major_axis_parser_->_reset ();

    if (this->major_axis_parser_map_)
      this->major_axis_parser_map_->reset ();

    if (this->minor_axis_parser_)
      this->minor_axis_parser_->_reset ();

    if (this->minor_axis_parser_map_)
      this->minor_axis_parser_map_->reset ();

    if (this->perimeter_parser_)
      this->perimeter_parser_->_reset ();

    if (this->perimeter_parser_map_)
      this->perimeter_parser_map_->reset ();

    if (this->radius_parser_)
      this->radius_parser_->_reset ();

    if (this->radius_parser_map_)
      this->radius_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* lengths_pskel::
  _static_type ()
  {
    return "lengths phenotype_common";
  }

  const char* lengths_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // areas_3D_pskel
  //

  void areas_3D_pskel::
  units (const ::std::string& x)
  {
    if (this->areas_3D_impl_)
      this->areas_3D_impl_->units (x);
  }

  void areas_3D_pskel::
  free_surface_area (::common::units_decimal_nonnegative* x)
  {
    if (this->areas_3D_impl_)
      this->areas_3D_impl_->free_surface_area (x);
  }

  void areas_3D_pskel::
  total_surface_area (::common::units_decimal_nonnegative* x)
  {
    if (this->areas_3D_impl_)
      this->areas_3D_impl_->total_surface_area (x);
  }

  void areas_3D_pskel::
  custom (::common::custom* x)
  {
    if (this->areas_3D_impl_)
      this->areas_3D_impl_->custom (x);
  }

  void areas_3D_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    this->resetting_ = true;

    if (this->free_surface_area_parser_)
      this->free_surface_area_parser_->_reset ();

    if (this->free_surface_area_parser_map_)
      this->free_surface_area_parser_map_->reset ();

    if (this->total_surface_area_parser_)
      this->total_surface_area_parser_->_reset ();

    if (this->total_surface_area_parser_map_)
      this->total_surface_area_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* areas_3D_pskel::
  _static_type ()
  {
    return "areas_3D phenotype_common";
  }

  const char* areas_3D_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // areas_2D_pskel
  //

  void areas_2D_pskel::
  units (const ::std::string& x)
  {
    if (this->areas_2D_impl_)
      this->areas_2D_impl_->units (x);
  }

  void areas_2D_pskel::
  total_area (::common::units_decimal_nonnegative* x)
  {
    if (this->areas_2D_impl_)
      this->areas_2D_impl_->total_area (x);
  }

  void areas_2D_pskel::
  custom (::common::custom* x)
  {
    if (this->areas_2D_impl_)
      this->areas_2D_impl_->custom (x);
  }

  void areas_2D_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    this->resetting_ = true;

    if (this->total_area_parser_)
      this->total_area_parser_->_reset ();

    if (this->total_area_parser_map_)
      this->total_area_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* areas_2D_pskel::
  _static_type ()
  {
    return "areas_2D phenotype_common";
  }

  const char* areas_2D_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // volumes_pskel
  //

  void volumes_pskel::
  units (const ::std::string& x)
  {
    if (this->volumes_impl_)
      this->volumes_impl_->units (x);
  }

  void volumes_pskel::
  fluid_volume (::common::units_decimal_nonnegative* x)
  {
    if (this->volumes_impl_)
      this->volumes_impl_->fluid_volume (x);
  }

  void volumes_pskel::
  fluid_volume_fraction (::common::units_fraction* x)
  {
    if (this->volumes_impl_)
      this->volumes_impl_->fluid_volume_fraction (x);
  }

  void volumes_pskel::
  solid_calcified_volume (::common::units_decimal_nonnegative* x)
  {
    if (this->volumes_impl_)
      this->volumes_impl_->solid_calcified_volume (x);
  }

  void volumes_pskel::
  solid_volume (::common::units_decimal_nonnegative* x)
  {
    if (this->volumes_impl_)
      this->volumes_impl_->solid_volume (x);
  }

  void volumes_pskel::
  solid_volume_fraction (::common::units_fraction* x)
  {
    if (this->volumes_impl_)
      this->volumes_impl_->solid_volume_fraction (x);
  }

  void volumes_pskel::
  total_volume (::common::units_decimal_nonnegative* x)
  {
    if (this->volumes_impl_)
      this->volumes_impl_->total_volume (x);
  }

  void volumes_pskel::
  custom (::common::custom* x)
  {
    if (this->volumes_impl_)
      this->volumes_impl_->custom (x);
  }

  void volumes_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    this->resetting_ = true;

    if (this->fluid_volume_parser_)
      this->fluid_volume_parser_->_reset ();

    if (this->fluid_volume_parser_map_)
      this->fluid_volume_parser_map_->reset ();

    if (this->fluid_volume_fraction_parser_)
      this->fluid_volume_fraction_parser_->_reset ();

    if (this->fluid_volume_fraction_parser_map_)
      this->fluid_volume_fraction_parser_map_->reset ();

    if (this->solid_calcified_volume_parser_)
      this->solid_calcified_volume_parser_->_reset ();

    if (this->solid_calcified_volume_parser_map_)
      this->solid_calcified_volume_parser_map_->reset ();

    if (this->solid_volume_parser_)
      this->solid_volume_parser_->_reset ();

    if (this->solid_volume_parser_map_)
      this->solid_volume_parser_map_->reset ();

    if (this->solid_volume_fraction_parser_)
      this->solid_volume_fraction_parser_->_reset ();

    if (this->solid_volume_fraction_parser_map_)
      this->solid_volume_fraction_parser_map_->reset ();

    if (this->total_volume_parser_)
      this->total_volume_parser_->_reset ();

    if (this->total_volume_parser_map_)
      this->total_volume_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* volumes_pskel::
  _static_type ()
  {
    return "volumes phenotype_common";
  }

  const char* volumes_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // geometrical_properties_pskel
  //

  void geometrical_properties_pskel::
  parameters (::phenotype_common::geometrical_parameters* x)
  {
    if (this->geometrical_properties_impl_)
      this->geometrical_properties_impl_->parameters (x);
  }

  void geometrical_properties_pskel::
  lengths (::phenotype_common::lengths* x)
  {
    if (this->geometrical_properties_impl_)
      this->geometrical_properties_impl_->lengths (x);
  }

  void geometrical_properties_pskel::
  areas (::phenotype_common::areas_3D* x)
  {
    if (this->geometrical_properties_impl_)
      this->geometrical_properties_impl_->areas (x);
  }

  void geometrical_properties_pskel::
  volumes (::phenotype_common::volumes* x)
  {
    if (this->geometrical_properties_impl_)
      this->geometrical_properties_impl_->volumes (x);
  }

  void geometrical_properties_pskel::
  cross_section (::phenotype_common::cross_section* x)
  {
    if (this->geometrical_properties_impl_)
      this->geometrical_properties_impl_->cross_section (x);
  }

  void geometrical_properties_pskel::
  custom (::common::custom* x)
  {
    if (this->geometrical_properties_impl_)
      this->geometrical_properties_impl_->custom (x);
  }

  void geometrical_properties_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->parameters_parser_)
      this->parameters_parser_->_reset ();

    if (this->parameters_parser_map_)
      this->parameters_parser_map_->reset ();

    if (this->lengths_parser_)
      this->lengths_parser_->_reset ();

    if (this->lengths_parser_map_)
      this->lengths_parser_map_->reset ();

    if (this->areas_parser_)
      this->areas_parser_->_reset ();

    if (this->areas_parser_map_)
      this->areas_parser_map_->reset ();

    if (this->volumes_parser_)
      this->volumes_parser_->_reset ();

    if (this->volumes_parser_map_)
      this->volumes_parser_map_->reset ();

    if (this->cross_section_parser_)
      this->cross_section_parser_->_reset ();

    if (this->cross_section_parser_map_)
      this->cross_section_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* geometrical_properties_pskel::
  _static_type ()
  {
    return "geometrical_properties phenotype_common";
  }

  const char* geometrical_properties_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // cross_section_pskel
  //

  void cross_section_pskel::
  parameters (::phenotype_common::geometrical_parameters* x)
  {
    if (this->cross_section_impl_)
      this->cross_section_impl_->parameters (x);
  }

  void cross_section_pskel::
  lengths (::phenotype_common::lengths* x)
  {
    if (this->cross_section_impl_)
      this->cross_section_impl_->lengths (x);
  }

  void cross_section_pskel::
  areas (::phenotype_common::areas_2D* x)
  {
    if (this->cross_section_impl_)
      this->cross_section_impl_->areas (x);
  }

  void cross_section_pskel::
  custom (::common::custom* x)
  {
    if (this->cross_section_impl_)
      this->cross_section_impl_->custom (x);
  }

  void cross_section_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->parameters_parser_)
      this->parameters_parser_->_reset ();

    if (this->parameters_parser_map_)
      this->parameters_parser_map_->reset ();

    if (this->lengths_parser_)
      this->lengths_parser_->_reset ();

    if (this->lengths_parser_map_)
      this->lengths_parser_map_->reset ();

    if (this->areas_parser_)
      this->areas_parser_->_reset ();

    if (this->areas_parser_map_)
      this->areas_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* cross_section_pskel::
  _static_type ()
  {
    return "cross_section phenotype_common";
  }

  const char* cross_section_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // mass_pskel
  //

  void mass_pskel::
  biomass (::common::units_decimal_nonnegative* x)
  {
    if (this->mass_impl_)
      this->mass_impl_->biomass (x);
  }

  void mass_pskel::
  fluid_mass (::common::units_decimal_nonnegative* x)
  {
    if (this->mass_impl_)
      this->mass_impl_->fluid_mass (x);
  }

  void mass_pskel::
  total_mass (::common::units_decimal_nonnegative* x)
  {
    if (this->mass_impl_)
      this->mass_impl_->total_mass (x);
  }

  void mass_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->biomass_parser_)
      this->biomass_parser_->_reset ();

    if (this->biomass_parser_map_)
      this->biomass_parser_map_->reset ();

    if (this->fluid_mass_parser_)
      this->fluid_mass_parser_->_reset ();

    if (this->fluid_mass_parser_map_)
      this->fluid_mass_parser_map_->reset ();

    if (this->total_mass_parser_)
      this->total_mass_parser_->_reset ();

    if (this->total_mass_parser_map_)
      this->total_mass_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* mass_pskel::
  _static_type ()
  {
    return "mass phenotype_common";
  }

  const char* mass_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace phenotype_common
{
  // Element validation and dispatch functions for adhesion_pskel.
  //
  bool adhesion_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "adhesion_bond_breaking_rate" && ns.empty ())
          s = 0UL;
        else if (n == "adhesion_bond_formation_rate" && ns.empty ())
          s = 1UL;
        else if (n == "adhesion_spring_constant" && ns.empty ())
          s = 2UL;
        else if (n == "adhesion_receptor_density" && ns.empty ())
          s = 3UL;
        else if (n == "surface_binding_energy" && ns.empty ())
          s = 4UL;
        else if (n == "number_of_adhered_cells" && ns.empty ())
          s = 5UL;
        else if (n == "maximum_number_of_adhered_cells" && ns.empty ())
          s = 6UL;
        else if (n == "adhered_surface_area" && ns.empty ())
          s = 7UL;
        else if (n == "maximum_adhered_surface_area" && ns.empty ())
          s = 8UL;
        else if (n == "adhesion_force_per_surface_area" && ns.empty ())
          s = 9UL;
        else if (n == "adhesion_probability" && ns.empty ())
          s = 10UL;
        else if (n == "detachment_proability" && ns.empty ())
          s = 11UL;
        else if (n == "rolling_observation" && ns.empty ())
          s = 12UL;
        else if (n == "custom" && ns.empty ())
          s = 13UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &adhesion_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool adhesion_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void adhesion_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void adhesion_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void adhesion_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "adhesion_bond_breaking_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->adhesion_bond_breaking_rate_parser_ != 0)
              p = this->adhesion_bond_breaking_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->adhesion_bond_breaking_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->adhesion_bond_breaking_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->adhesion_bond_breaking_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->adhesion_bond_breaking_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->adhesion_bond_breaking_rate (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "adhesion_bond_formation_rate" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->adhesion_bond_formation_rate_parser_ != 0)
              p = this->adhesion_bond_formation_rate_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->adhesion_bond_formation_rate_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->adhesion_bond_formation_rate_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->adhesion_bond_formation_rate_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->adhesion_bond_formation_rate_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->adhesion_bond_formation_rate (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "adhesion_spring_constant" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->adhesion_spring_constant_parser_ != 0)
              p = this->adhesion_spring_constant_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->adhesion_spring_constant_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->adhesion_spring_constant_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->adhesion_spring_constant_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->adhesion_spring_constant_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->adhesion_spring_constant (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "adhesion_receptor_density" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->adhesion_receptor_density_parser_ != 0)
              p = this->adhesion_receptor_density_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->adhesion_receptor_density_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->adhesion_receptor_density_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->adhesion_receptor_density_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->adhesion_receptor_density_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->adhesion_receptor_density (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "surface_binding_energy" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->surface_binding_energy_parser_ != 0)
              p = this->surface_binding_energy_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->surface_binding_energy_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->surface_binding_energy_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->surface_binding_energy_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->surface_binding_energy_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->surface_binding_energy (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "number_of_adhered_cells" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->number_of_adhered_cells_parser_ != 0)
              p = this->number_of_adhered_cells_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->number_of_adhered_cells_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->number_of_adhered_cells_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->number_of_adhered_cells_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->number_of_adhered_cells_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->number_of_adhered_cells (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "maximum_number_of_adhered_cells" && ns.empty ())
        {
          if (start)
          {
            ::common::units_unsignedShort_pskel* p = 0;

            if (t == 0 && this->maximum_number_of_adhered_cells_parser_ != 0)
              p = this->maximum_number_of_adhered_cells_parser_;
            else
            {
              const char* ts = ::common::units_unsignedShort_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->maximum_number_of_adhered_cells_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->maximum_number_of_adhered_cells_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->maximum_number_of_adhered_cells_parser_map_ != 0)
                  p = static_cast< ::common::units_unsignedShort_pskel* > (
                    this->maximum_number_of_adhered_cells_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_unsignedShort_pskel* p =
            static_cast< ::common::units_unsignedShort_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::common::units_unsignedShort& tmp = p->post_units_unsignedShort ();
              this->maximum_number_of_adhered_cells (tmp);
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "adhered_surface_area" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->adhered_surface_area_parser_ != 0)
              p = this->adhered_surface_area_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->adhered_surface_area_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->adhered_surface_area_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->adhered_surface_area_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->adhered_surface_area_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->adhered_surface_area (tmp);
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "maximum_adhered_surface_area" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->maximum_adhered_surface_area_parser_ != 0)
              p = this->maximum_adhered_surface_area_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->maximum_adhered_surface_area_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->maximum_adhered_surface_area_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->maximum_adhered_surface_area_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->maximum_adhered_surface_area_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->maximum_adhered_surface_area (tmp);
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "adhesion_force_per_surface_area" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->adhesion_force_per_surface_area_parser_ != 0)
              p = this->adhesion_force_per_surface_area_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->adhesion_force_per_surface_area_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->adhesion_force_per_surface_area_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->adhesion_force_per_surface_area_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->adhesion_force_per_surface_area_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->adhesion_force_per_surface_area (tmp);
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "adhesion_probability" && ns.empty ())
        {
          if (start)
          {
            ::common::units_fraction_pskel* p = 0;

            if (t == 0 && this->adhesion_probability_parser_ != 0)
              p = this->adhesion_probability_parser_;
            else
            {
              const char* ts = ::common::units_fraction_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->adhesion_probability_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->adhesion_probability_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->adhesion_probability_parser_map_ != 0)
                  p = static_cast< ::common::units_fraction_pskel* > (
                    this->adhesion_probability_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_fraction_pskel* p =
            static_cast< ::common::units_fraction_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_fraction* tmp = p->post_units_fraction ();
              this->adhesion_probability (tmp);
            }

            count = 0;
            state = 11UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "detachment_proability" && ns.empty ())
        {
          if (start)
          {
            ::common::units_fraction_pskel* p = 0;

            if (t == 0 && this->detachment_proability_parser_ != 0)
              p = this->detachment_proability_parser_;
            else
            {
              const char* ts = ::common::units_fraction_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->detachment_proability_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->detachment_proability_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->detachment_proability_parser_map_ != 0)
                  p = static_cast< ::common::units_fraction_pskel* > (
                    this->detachment_proability_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_fraction_pskel* p =
            static_cast< ::common::units_fraction_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_fraction* tmp = p->post_units_fraction ();
              this->detachment_proability (tmp);
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "rolling_observation" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::rolling_observation_pskel* p = 0;

            if (t == 0 && this->rolling_observation_parser_ != 0)
              p = this->rolling_observation_parser_;
            else
            {
              const char* ts = ::phenotype_common::rolling_observation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->rolling_observation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->rolling_observation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->rolling_observation_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::rolling_observation_pskel* > (
                    this->rolling_observation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::rolling_observation_pskel* p =
            static_cast< ::phenotype_common::rolling_observation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::rolling_observation* tmp = p->post_rolling_observation ();
              this->rolling_observation (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 13UL;
          // Fall through.
        }
      }
      case 13UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for rolling_observation_pskel.
  //
  bool rolling_observation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "rolling_velocity" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &rolling_observation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool rolling_observation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void rolling_observation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void rolling_observation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void rolling_observation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "rolling_velocity" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->rolling_velocity_parser_ != 0)
              p = this->rolling_velocity_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->rolling_velocity_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->rolling_velocity_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->rolling_velocity_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->rolling_velocity_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->rolling_velocity (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "shear_stress" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->shear_stress_parser_ != 0)
              p = this->shear_stress_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->shear_stress_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->shear_stress_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->shear_stress_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->shear_stress_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->shear_stress (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for friction_pskel.
  //
  bool friction_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "compression" && ns.empty ())
          s = 0UL;
        else if (n == "ECM" && ns.empty ())
          s = 1UL;
        else if (n == "shear" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &friction_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool friction_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void friction_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void friction_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void friction_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "compression" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->compression_parser_ != 0)
              p = this->compression_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->compression_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->compression_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->compression_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->compression_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->compression (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "ECM" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->ECM_parser_ != 0)
              p = this->ECM_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->ECM_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->ECM_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->ECM_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->ECM_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->ECM (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "shear" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->shear_parser_ != 0)
              p = this->shear_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->shear_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->shear_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->shear_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->shear_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->shear (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for mechanics_pskel.
  //
  bool mechanics_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "friction" && ns.empty ())
          s = 0UL;
        else if (n == "maximum_cell_deformation" && ns.empty ())
          s = 1UL;
        else if (n == "mechanical_pressure" && ns.empty ())
          s = 2UL;
        else if (n == "indentation_observation" && ns.empty ())
          s = 3UL;
        else if ((n == "poisson_ratio" && ns.empty ()) ||
                 (n == "youngs_modulus" && ns.empty ()))
          s = 4UL;
        else if (n == "custom" && ns.empty ())
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &mechanics_pskel::sequence_1;
          vd->state = s;
          vd->count = 0;

          this->sequence_1 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool mechanics_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void mechanics_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void mechanics_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void mechanics_pskel::
  sequence_1 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "friction" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::friction_pskel* p = 0;

            if (t == 0 && this->friction_parser_ != 0)
              p = this->friction_parser_;
            else
            {
              const char* ts = ::phenotype_common::friction_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->friction_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->friction_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->friction_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::friction_pskel* > (
                    this->friction_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::friction_pskel* p =
            static_cast< ::phenotype_common::friction_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::friction* tmp = p->post_friction ();
              this->friction (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "maximum_cell_deformation" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->maximum_cell_deformation_parser_ != 0)
              p = this->maximum_cell_deformation_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->maximum_cell_deformation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->maximum_cell_deformation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->maximum_cell_deformation_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->maximum_cell_deformation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->maximum_cell_deformation (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "mechanical_pressure" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->mechanical_pressure_parser_ != 0)
              p = this->mechanical_pressure_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->mechanical_pressure_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->mechanical_pressure_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->mechanical_pressure_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->mechanical_pressure_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->mechanical_pressure (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "indentation_observation" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::indentation_observation_pskel* p = 0;

            if (t == 0 && this->indentation_observation_parser_ != 0)
              p = this->indentation_observation_parser_;
            else
            {
              const char* ts = ::phenotype_common::indentation_observation_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->indentation_observation_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->indentation_observation_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->indentation_observation_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::indentation_observation_pskel* > (
                    this->indentation_observation_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::indentation_observation_pskel* p =
            static_cast< ::phenotype_common::indentation_observation_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::indentation_observation* tmp = p->post_indentation_observation ();
              this->indentation_observation (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        unsigned long s = ~0UL;

        if (n == "poisson_ratio" && ns.empty ())
          s = 0UL;
        else if (n == "youngs_modulus" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = 5UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &mechanics_pskel::sequence_0;
          vd.state = s;
          vd.count = 0;

          this->sequence_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void mechanics_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "poisson_ratio" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->poisson_ratio_parser_ != 0)
              p = this->poisson_ratio_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->poisson_ratio_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->poisson_ratio_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->poisson_ratio_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->poisson_ratio_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->poisson_ratio (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "youngs_modulus" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->youngs_modulus_parser_ != 0)
              p = this->youngs_modulus_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->youngs_modulus_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->youngs_modulus_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->youngs_modulus_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->youngs_modulus_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->youngs_modulus (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for indentation_observation_pskel.
  //
  bool indentation_observation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "depth" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &indentation_observation_pskel::sequence_1;
          vd->state = s;
          vd->count = 0;

          this->sequence_1 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool indentation_observation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void indentation_observation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void indentation_observation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void indentation_observation_pskel::
  sequence_1 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "depth" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->depth_parser_ != 0)
              p = this->depth_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->depth_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->depth_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->depth_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->depth_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->depth (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        unsigned long s = ~0UL;

        if (n == "poisson_ratio" && ns.empty ())
          s = 0UL;
        else if (n == "youngs_modulus" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = ~0UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &indentation_observation_pskel::sequence_0;
          vd.state = s;
          vd.count = 0;

          this->sequence_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void indentation_observation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "poisson_ratio" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->poisson_ratio_parser_ != 0)
              p = this->poisson_ratio_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->poisson_ratio_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->poisson_ratio_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->poisson_ratio_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->poisson_ratio_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->poisson_ratio (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "youngs_modulus" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->youngs_modulus_parser_ != 0)
              p = this->youngs_modulus_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->youngs_modulus_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->youngs_modulus_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->youngs_modulus_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->youngs_modulus_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->youngs_modulus (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for motility_pskel.
  //
  bool motility_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "unrestricted" && ns.empty ())
          s = 0UL;
        else if (n == "restricted" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &motility_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool motility_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void motility_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void motility_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void motility_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "unrestricted" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::motility_types_pskel* p = 0;

            if (t == 0 && this->unrestricted_parser_ != 0)
              p = this->unrestricted_parser_;
            else
            {
              const char* ts = ::phenotype_common::motility_types_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->unrestricted_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->unrestricted_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->unrestricted_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::motility_types_pskel* > (
                    this->unrestricted_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::motility_types_pskel* p =
            static_cast< ::phenotype_common::motility_types_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::motility_types* tmp = p->post_motility_types ();
              this->unrestricted (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "restricted" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::motility_types_pskel* p = 0;

            if (t == 0 && this->restricted_parser_ != 0)
              p = this->restricted_parser_;
            else
            {
              const char* ts = ::phenotype_common::motility_types_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->restricted_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->restricted_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->restricted_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::motility_types_pskel* > (
                    this->restricted_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::motility_types_pskel* p =
            static_cast< ::phenotype_common::motility_types_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::motility_types* tmp = p->post_motility_types ();
              this->restricted (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for motility_types_pskel.
  //
  bool motility_types_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "timescale" && ns.empty ())
          s = 0UL;
        else if (n == "restriction" && ns.empty ())
          s = 1UL;
        else if (n == "net_displacement" && ns.empty ())
          s = 2UL;
        else if (n == "total_displacement" && ns.empty ())
          s = 3UL;
        else if (n == "mean_square_displacement" && ns.empty ())
          s = 4UL;
        else if (n == "mean_speed" && ns.empty ())
          s = 5UL;
        else if (n == "net_speed" && ns.empty ())
          s = 6UL;
        else if (n == "persistence" && ns.empty ())
          s = 7UL;
        else if (n == "mean_path_length" && ns.empty ())
          s = 8UL;
        else if (n == "diffusion_coefficient" && ns.empty ())
          s = 9UL;
        else if (n == "custom" && ns.empty ())
          s = 10UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &motility_types_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool motility_types_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void motility_types_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void motility_types_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void motility_types_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "timescale" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::timescale_pskel* p = 0;

            if (t == 0 && this->timescale_parser_ != 0)
              p = this->timescale_parser_;
            else
            {
              const char* ts = ::phenotype_common::timescale_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->timescale_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->timescale_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->timescale_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::timescale_pskel* > (
                    this->timescale_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::timescale_pskel* p =
            static_cast< ::phenotype_common::timescale_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::timescale* tmp = p->post_timescale ();
              this->timescale (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "restriction" && ns.empty ())
        {
          if (start)
          {
            ::variables::experimental_conditions_pskel* p = 0;

            if (t == 0 && this->restriction_parser_ != 0)
              p = this->restriction_parser_;
            else
            {
              const char* ts = ::variables::experimental_conditions_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->restriction_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->restriction_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->restriction_parser_map_ != 0)
                  p = static_cast< ::variables::experimental_conditions_pskel* > (
                    this->restriction_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::experimental_conditions_pskel* p =
            static_cast< ::variables::experimental_conditions_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::variables::experimental_conditions* tmp = p->post_experimental_conditions ();
              this->restriction (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "net_displacement" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->net_displacement_parser_ != 0)
              p = this->net_displacement_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->net_displacement_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->net_displacement_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->net_displacement_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->net_displacement_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->net_displacement (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "total_displacement" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->total_displacement_parser_ != 0)
              p = this->total_displacement_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->total_displacement_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->total_displacement_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->total_displacement_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->total_displacement_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->total_displacement (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "mean_square_displacement" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_nonnegative_pskel* p = 0;

            if (t == 0 && this->mean_square_displacement_parser_ != 0)
              p = this->mean_square_displacement_parser_;
            else
            {
              const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->mean_square_displacement_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->mean_square_displacement_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->mean_square_displacement_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                    this->mean_square_displacement_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_nonnegative_pskel* p =
            static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
              this->mean_square_displacement (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "mean_speed" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->mean_speed_parser_ != 0)
              p = this->mean_speed_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->mean_speed_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->mean_speed_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->mean_speed_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->mean_speed_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->mean_speed (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "net_speed" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->net_speed_parser_ != 0)
              p = this->net_speed_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->net_speed_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->net_speed_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->net_speed_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->net_speed_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->net_speed (tmp);
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "persistence" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->persistence_parser_ != 0)
              p = this->persistence_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->persistence_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->persistence_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->persistence_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->persistence_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->persistence (tmp);
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "mean_path_length" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->mean_path_length_parser_ != 0)
              p = this->mean_path_length_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->mean_path_length_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->mean_path_length_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->mean_path_length_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->mean_path_length_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->mean_path_length (tmp);
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "diffusion_coefficient" && ns.empty ())
        {
          if (start)
          {
            ::common::units_decimal_pskel* p = 0;

            if (t == 0 && this->diffusion_coefficient_parser_ != 0)
              p = this->diffusion_coefficient_parser_;
            else
            {
              const char* ts = ::common::units_decimal_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->diffusion_coefficient_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->diffusion_coefficient_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->diffusion_coefficient_parser_map_ != 0)
                  p = static_cast< ::common::units_decimal_pskel* > (
                    this->diffusion_coefficient_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::units_decimal_pskel* p =
            static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::units_decimal* tmp = p->post_units_decimal ();
              this->diffusion_coefficient (tmp);
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for transport_processes_pskel.
  //
  bool transport_processes_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "variable" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &transport_processes_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool transport_processes_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void transport_processes_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void transport_processes_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void transport_processes_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "variable" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::transport_variable_pskel* p = 0;

            if (t == 0 && this->variable_parser_ != 0)
              p = this->variable_parser_;
            else
            {
              const char* ts = ::phenotype_common::transport_variable_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->variable_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->variable_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->variable_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::transport_variable_pskel* > (
                    this->variable_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::transport_variable_pskel* p =
            static_cast< ::phenotype_common::transport_variable_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::transport_variable* tmp = p->post_transport_variable ();
              this->variable (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for transport_variable_pskel.
  //
  bool transport_variable_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool transport_variable_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void transport_variable_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void transport_variable_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void transport_variable_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "export_rate" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          if (count[1UL] == 0 &&
              count[2UL] == 0 &&
              count[3UL] == 0 &&
              count[4UL] == 0 &&
              count[5UL] == 0)
            this->all_present ();

          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->export_rate_parser_ != 0)
            p = this->export_rate_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->export_rate_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->export_rate_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->export_rate_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->export_rate_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->export_rate (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "export_rate_per_unit_surface_area" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          if (count[0UL] == 0 &&
              count[2UL] == 0 &&
              count[3UL] == 0 &&
              count[4UL] == 0 &&
              count[5UL] == 0)
            this->all_present ();

          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->export_rate_per_unit_surface_area_parser_ != 0)
            p = this->export_rate_per_unit_surface_area_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->export_rate_per_unit_surface_area_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->export_rate_per_unit_surface_area_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->export_rate_per_unit_surface_area_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->export_rate_per_unit_surface_area_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->export_rate_per_unit_surface_area (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "import_rate" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          if (count[0UL] == 0 &&
              count[1UL] == 0 &&
              count[3UL] == 0 &&
              count[4UL] == 0 &&
              count[5UL] == 0)
            this->all_present ();

          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->import_rate_parser_ != 0)
            p = this->import_rate_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->import_rate_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->import_rate_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->import_rate_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->import_rate_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->import_rate (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "import_rate_per_unit_surface_area" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          if (count[0UL] == 0 &&
              count[1UL] == 0 &&
              count[2UL] == 0 &&
              count[4UL] == 0 &&
              count[5UL] == 0)
            this->all_present ();

          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->import_rate_per_unit_surface_area_parser_ != 0)
            p = this->import_rate_per_unit_surface_area_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->import_rate_per_unit_surface_area_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->import_rate_per_unit_surface_area_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->import_rate_per_unit_surface_area_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->import_rate_per_unit_surface_area_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->import_rate_per_unit_surface_area (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "saturation_density" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          if (count[0UL] == 0 &&
              count[1UL] == 0 &&
              count[2UL] == 0 &&
              count[3UL] == 0 &&
              count[5UL] == 0)
            this->all_present ();

          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->saturation_density_parser_ != 0)
            p = this->saturation_density_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->saturation_density_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->saturation_density_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->saturation_density_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->saturation_density_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->saturation_density (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[5UL] == 0)
      {
        if (start)
        {
          if (count[0UL] == 0 &&
              count[1UL] == 0 &&
              count[2UL] == 0 &&
              count[3UL] == 0 &&
              count[4UL] == 0)
            this->all_present ();

          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[5UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for geometrical_parameters_pskel.
  //
  bool geometrical_parameters_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool geometrical_parameters_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void geometrical_parameters_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void geometrical_parameters_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void geometrical_parameters_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "aspect_ratio" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->aspect_ratio_parser_ != 0)
            p = this->aspect_ratio_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->aspect_ratio_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->aspect_ratio_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->aspect_ratio_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->aspect_ratio_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->aspect_ratio (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "circularity" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->circularity_parser_ != 0)
            p = this->circularity_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->circularity_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->circularity_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->circularity_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->circularity_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->circularity (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "eccentricity" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->eccentricity_parser_ != 0)
            p = this->eccentricity_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->eccentricity_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->eccentricity_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->eccentricity_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->eccentricity_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->eccentricity (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "sphericity" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->sphericity_parser_ != 0)
            p = this->sphericity_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->sphericity_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->sphericity_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->sphericity_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->sphericity_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->sphericity (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for lengths_pskel.
  //
  bool lengths_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool lengths_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void lengths_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void lengths_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void lengths_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "diameter" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->diameter_parser_ != 0)
            p = this->diameter_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->diameter_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->diameter_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->diameter_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->diameter_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->diameter (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "major_axis" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->major_axis_parser_ != 0)
            p = this->major_axis_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->major_axis_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->major_axis_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->major_axis_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->major_axis_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->major_axis (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "minor_axis" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->minor_axis_parser_ != 0)
            p = this->minor_axis_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->minor_axis_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->minor_axis_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->minor_axis_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->minor_axis_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->minor_axis (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "perimeter" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->perimeter_parser_ != 0)
            p = this->perimeter_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->perimeter_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->perimeter_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->perimeter_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->perimeter_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->perimeter (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "radius" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->radius_parser_ != 0)
            p = this->radius_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->radius_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->radius_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->radius_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->radius_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->radius (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[5UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[5UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for areas_3D_pskel.
  //
  bool areas_3D_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool areas_3D_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void areas_3D_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void areas_3D_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void areas_3D_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "free_surface_area" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->free_surface_area_parser_ != 0)
            p = this->free_surface_area_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->free_surface_area_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->free_surface_area_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->free_surface_area_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->free_surface_area_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->free_surface_area (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "total_surface_area" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->total_surface_area_parser_ != 0)
            p = this->total_surface_area_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->total_surface_area_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->total_surface_area_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->total_surface_area_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->total_surface_area_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->total_surface_area (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for areas_2D_pskel.
  //
  bool areas_2D_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool areas_2D_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void areas_2D_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void areas_2D_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void areas_2D_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "total_area" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->total_area_parser_ != 0)
            p = this->total_area_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->total_area_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->total_area_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->total_area_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->total_area_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->total_area (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for volumes_pskel.
  //
  bool volumes_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool volumes_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void volumes_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void volumes_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void volumes_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "fluid_volume" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->fluid_volume_parser_ != 0)
            p = this->fluid_volume_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->fluid_volume_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->fluid_volume_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->fluid_volume_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->fluid_volume_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->fluid_volume (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "fluid_volume_fraction" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_fraction_pskel* p = 0;

          if (t == 0 && this->fluid_volume_fraction_parser_ != 0)
            p = this->fluid_volume_fraction_parser_;
          else
          {
            const char* ts = ::common::units_fraction_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->fluid_volume_fraction_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->fluid_volume_fraction_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->fluid_volume_fraction_parser_map_ != 0)
                p = static_cast< ::common::units_fraction_pskel* > (
                  this->fluid_volume_fraction_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_fraction_pskel* p =
          static_cast< ::common::units_fraction_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_fraction* tmp = p->post_units_fraction ();
            this->fluid_volume_fraction (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "solid_calcified_volume" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->solid_calcified_volume_parser_ != 0)
            p = this->solid_calcified_volume_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->solid_calcified_volume_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->solid_calcified_volume_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->solid_calcified_volume_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->solid_calcified_volume_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->solid_calcified_volume (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "solid_volume" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->solid_volume_parser_ != 0)
            p = this->solid_volume_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->solid_volume_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->solid_volume_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->solid_volume_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->solid_volume_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->solid_volume (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "solid_volume_fraction" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::common::units_fraction_pskel* p = 0;

          if (t == 0 && this->solid_volume_fraction_parser_ != 0)
            p = this->solid_volume_fraction_parser_;
          else
          {
            const char* ts = ::common::units_fraction_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->solid_volume_fraction_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->solid_volume_fraction_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->solid_volume_fraction_parser_map_ != 0)
                p = static_cast< ::common::units_fraction_pskel* > (
                  this->solid_volume_fraction_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_fraction_pskel* p =
          static_cast< ::common::units_fraction_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_fraction* tmp = p->post_units_fraction ();
            this->solid_volume_fraction (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "total_volume" && ns.empty ())
    {
      if (count[5UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->total_volume_parser_ != 0)
            p = this->total_volume_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->total_volume_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->total_volume_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->total_volume_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->total_volume_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->total_volume (tmp);
          }

          count[5UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[6UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[6UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for geometrical_properties_pskel.
  //
  bool geometrical_properties_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "parameters" && ns.empty ())
          s = 0UL;
        else if (n == "lengths" && ns.empty ())
          s = 1UL;
        else if (n == "areas" && ns.empty ())
          s = 2UL;
        else if (n == "volumes" && ns.empty ())
          s = 3UL;
        else if (n == "cross_section" && ns.empty ())
          s = 4UL;
        else if (n == "custom" && ns.empty ())
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &geometrical_properties_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool geometrical_properties_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void geometrical_properties_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void geometrical_properties_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void geometrical_properties_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "parameters" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::geometrical_parameters_pskel* p = 0;

            if (t == 0 && this->parameters_parser_ != 0)
              p = this->parameters_parser_;
            else
            {
              const char* ts = ::phenotype_common::geometrical_parameters_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->parameters_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->parameters_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->parameters_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::geometrical_parameters_pskel* > (
                    this->parameters_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::geometrical_parameters_pskel* p =
            static_cast< ::phenotype_common::geometrical_parameters_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::geometrical_parameters* tmp = p->post_geometrical_parameters ();
              this->parameters (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "lengths" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::lengths_pskel* p = 0;

            if (t == 0 && this->lengths_parser_ != 0)
              p = this->lengths_parser_;
            else
            {
              const char* ts = ::phenotype_common::lengths_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->lengths_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->lengths_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->lengths_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::lengths_pskel* > (
                    this->lengths_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::lengths_pskel* p =
            static_cast< ::phenotype_common::lengths_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::lengths* tmp = p->post_lengths ();
              this->lengths (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "areas" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::areas_3D_pskel* p = 0;

            if (t == 0 && this->areas_parser_ != 0)
              p = this->areas_parser_;
            else
            {
              const char* ts = ::phenotype_common::areas_3D_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->areas_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->areas_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->areas_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::areas_3D_pskel* > (
                    this->areas_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::areas_3D_pskel* p =
            static_cast< ::phenotype_common::areas_3D_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::areas_3D* tmp = p->post_areas_3D ();
              this->areas (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "volumes" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::volumes_pskel* p = 0;

            if (t == 0 && this->volumes_parser_ != 0)
              p = this->volumes_parser_;
            else
            {
              const char* ts = ::phenotype_common::volumes_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->volumes_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->volumes_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->volumes_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::volumes_pskel* > (
                    this->volumes_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::volumes_pskel* p =
            static_cast< ::phenotype_common::volumes_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::volumes* tmp = p->post_volumes ();
              this->volumes (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "cross_section" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::cross_section_pskel* p = 0;

            if (t == 0 && this->cross_section_parser_ != 0)
              p = this->cross_section_parser_;
            else
            {
              const char* ts = ::phenotype_common::cross_section_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->cross_section_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->cross_section_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->cross_section_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::cross_section_pskel* > (
                    this->cross_section_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::cross_section_pskel* p =
            static_cast< ::phenotype_common::cross_section_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::cross_section* tmp = p->post_cross_section ();
              this->cross_section (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for cross_section_pskel.
  //
  bool cross_section_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "parameters" && ns.empty ())
          s = 0UL;
        else if (n == "lengths" && ns.empty ())
          s = 1UL;
        else if (n == "areas" && ns.empty ())
          s = 2UL;
        else if (n == "custom" && ns.empty ())
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &cross_section_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool cross_section_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void cross_section_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void cross_section_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void cross_section_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "parameters" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::geometrical_parameters_pskel* p = 0;

            if (t == 0 && this->parameters_parser_ != 0)
              p = this->parameters_parser_;
            else
            {
              const char* ts = ::phenotype_common::geometrical_parameters_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->parameters_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->parameters_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->parameters_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::geometrical_parameters_pskel* > (
                    this->parameters_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::geometrical_parameters_pskel* p =
            static_cast< ::phenotype_common::geometrical_parameters_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::geometrical_parameters* tmp = p->post_geometrical_parameters ();
              this->parameters (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "lengths" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::lengths_pskel* p = 0;

            if (t == 0 && this->lengths_parser_ != 0)
              p = this->lengths_parser_;
            else
            {
              const char* ts = ::phenotype_common::lengths_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->lengths_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->lengths_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->lengths_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::lengths_pskel* > (
                    this->lengths_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::lengths_pskel* p =
            static_cast< ::phenotype_common::lengths_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::lengths* tmp = p->post_lengths ();
              this->lengths (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "areas" && ns.empty ())
        {
          if (start)
          {
            ::phenotype_common::areas_2D_pskel* p = 0;

            if (t == 0 && this->areas_parser_ != 0)
              p = this->areas_parser_;
            else
            {
              const char* ts = ::phenotype_common::areas_2D_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->areas_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->areas_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->areas_parser_map_ != 0)
                  p = static_cast< ::phenotype_common::areas_2D_pskel* > (
                    this->areas_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::phenotype_common::areas_2D_pskel* p =
            static_cast< ::phenotype_common::areas_2D_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::phenotype_common::areas_2D* tmp = p->post_areas_2D ();
              this->areas (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for mass_pskel.
  //
  bool mass_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool mass_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void mass_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void mass_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void mass_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "biomass" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->biomass_parser_ != 0)
            p = this->biomass_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->biomass_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->biomass_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->biomass_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->biomass_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->biomass (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "fluid_mass" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->fluid_mass_parser_ != 0)
            p = this->fluid_mass_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->fluid_mass_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->fluid_mass_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->fluid_mass_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->fluid_mass_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->fluid_mass (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "total_mass" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_nonnegative_pskel* p = 0;

          if (t == 0 && this->total_mass_parser_ != 0)
            p = this->total_mass_parser_;
          else
          {
            const char* ts = ::common::units_decimal_nonnegative_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->total_mass_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->total_mass_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->total_mass_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_nonnegative_pskel* > (
                  this->total_mass_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_nonnegative_pskel* p =
          static_cast< ::common::units_decimal_nonnegative_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal_nonnegative* tmp = p->post_units_decimal_nonnegative ();
            this->total_mass (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }
}

namespace phenotype_common
{
  // Attribute validation and dispatch functions for motility_types_pskel.
  //
  bool motility_types_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned int tmp = this->ID_parser_->post_unsigned_int ();

          this->ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for timescale_pskel.
  //
  bool timescale_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "mitotic" && ns.empty ())
    {
      if (this->mitotic_parser_)
      {
        this->mitotic_parser_->pre ();

        this->mitotic_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->mitotic_parser_->_characters (s);

        if (!ctx.error_type ())
          this->mitotic_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          bool tmp = this->mitotic_parser_->post_boolean ();

          this->mitotic (tmp);
        }
      }

      return true;
    }

    typedef ::common::units_decimal_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for transport_variable_pskel.
  //
  bool transport_variable_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned long long tmp = this->ID_parser_->post_unsigned_long ();

          this->ID (tmp);
        }
      }

      return true;
    }

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::variables::amount_type& tmp = this->type_parser_->post_amount_type ();

          this->type (tmp);
        }
      }

      return true;
    }

    if (n == "ChEBI_ID" && ns.empty ())
    {
      if (this->ChEBI_ID_parser_)
      {
        this->ChEBI_ID_parser_->pre ();

        this->ChEBI_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->ChEBI_ID_parser_->post_string ();

          this->ChEBI_ID (tmp);
        }
      }

      return true;
    }

    if (n == "MeSH_ID" && ns.empty ())
    {
      if (this->MeSH_ID_parser_)
      {
        this->MeSH_ID_parser_->pre ();

        this->MeSH_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->MeSH_ID_parser_->post_string ();

          this->MeSH_ID (tmp);
        }
      }

      return true;
    }

    if (n == "DrugBank_ID" && ns.empty ())
    {
      if (this->DrugBank_ID_parser_)
      {
        this->DrugBank_ID_parser_->pre ();

        this->DrugBank_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->DrugBank_ID_parser_->post_string ();

          this->DrugBank_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GMO_ID" && ns.empty ())
    {
      if (this->GMO_ID_parser_)
      {
        this->GMO_ID_parser_->pre ();

        this->GMO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GMO_ID_parser_->post_string ();

          this->GMO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GO_ID" && ns.empty ())
    {
      if (this->GO_ID_parser_)
      {
        this->GO_ID_parser_->pre ();

        this->GO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GO_ID_parser_->post_string ();

          this->GO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "UniProt_ID" && ns.empty ())
    {
      if (this->UniProt_ID_parser_)
      {
        this->UniProt_ID_parser_->pre ();

        this->UniProt_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->UniProt_ID_parser_->post_string ();

          this->UniProt_ID (tmp);
        }
      }

      return true;
    }

    if (n == "PR_ID" && ns.empty ())
    {
      if (this->PR_ID_parser_)
      {
        this->PR_ID_parser_->pre ();

        this->PR_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->PR_ID_parser_->post_string ();

          this->PR_ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  void transport_variable_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void transport_variable_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for geometrical_parameters_pskel.
  //
  bool geometrical_parameters_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for lengths_pskel.
  //
  bool lengths_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for areas_3D_pskel.
  //
  bool areas_3D_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for areas_2D_pskel.
  //
  bool areas_2D_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for volumes_pskel.
  //
  bool volumes_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    return false;
  }
}

namespace phenotype_common
{
}

// Begin epilogue.
//
//
// End epilogue.

