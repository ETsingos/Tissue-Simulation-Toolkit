// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_LINE_PIMPL_HPP
#define CELL_LINE_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define CELL_LINE_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "cell_line-pskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "metadata-pimpl.hpp"

#include "phenotype_dataset-pimpl.hpp"

#include "common-pimpl.hpp"

namespace cell_line
{
  class cell_line_pimpl: public cell_line_pskel
  {
    public:
    cell_line_pimpl (bool = false);

    ~cell_line_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    ID (const ::std::string&);

    virtual void
    label (const ::std::string&);

    virtual void
    curated (bool);

    // Elements.
    //
    virtual void
    metadata (::metadata::metadata*);

    virtual void
    phenotype_dataset (::phenotype_dataset::phenotype_dataset*);

    virtual void
    custom (::common::custom*);

    virtual ::cell_line::cell_line*
    post_cell_line ();

    public:
    void
    pre_impl (::cell_line::cell_line*);

    public:
    struct cell_line_pimpl_state
    {
      ::cell_line::cell_line* cell_line_;
    };

    cell_line_pimpl_state cell_line_pimpl_state_;
    bool cell_line_pimpl_base_;
  };

  class DCLs_pimpl: public DCLs_pskel
  {
    public:
    DCLs_pimpl (bool = false);

    ~DCLs_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    cell_line (::cell_line::cell_line*);

    virtual ::cell_line::DCLs*
    post_DCLs ();

    public:
    void
    pre_impl (::cell_line::DCLs*);

    public:
    struct DCLs_pimpl_state
    {
      ::cell_line::DCLs* DCLs_;
    };

    DCLs_pimpl_state DCLs_pimpl_state_;
    bool DCLs_pimpl_base_;
  };
}

#ifdef CELL_LINE_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // CELL_LINE_PIMPL_HPP
