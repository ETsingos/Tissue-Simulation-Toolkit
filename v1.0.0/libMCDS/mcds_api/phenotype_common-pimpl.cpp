// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "phenotype_common-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace phenotype_common
{
  // adhesion_pimpl
  //

  adhesion_pimpl::
  adhesion_pimpl (bool b)
  {
    this->adhesion_pimpl_base_ = b;
    this->adhesion_pimpl_state_.adhesion_ = 0;
  }

  adhesion_pimpl::
  ~adhesion_pimpl ()
  {
    if (!this->adhesion_pimpl_base_ && this->adhesion_pimpl_state_.adhesion_)
      delete this->adhesion_pimpl_state_.adhesion_;
  }

  void adhesion_pimpl::
  _reset ()
  {
    adhesion_pskel::_reset ();

    if (!this->adhesion_pimpl_base_ && this->adhesion_pimpl_state_.adhesion_)
    {
      delete this->adhesion_pimpl_state_.adhesion_;
      this->adhesion_pimpl_state_.adhesion_ = 0;
    }
  }

  void adhesion_pimpl::
  pre_impl (::phenotype_common::adhesion* x)
  {
    this->adhesion_pimpl_state_.adhesion_ = x;
  }

  void adhesion_pimpl::
  pre ()
  {
    ::phenotype_common::adhesion* x = new ::phenotype_common::adhesion;
    this->pre_impl (x);
  }

  void adhesion_pimpl::
  adhesion_bond_breaking_rate (::common::units_decimal* x)
  {
    this->adhesion_pimpl_state_.adhesion_->adhesion_bond_breaking_rate (x);
  }

  void adhesion_pimpl::
  adhesion_bond_formation_rate (::common::units_decimal* x)
  {
    this->adhesion_pimpl_state_.adhesion_->adhesion_bond_formation_rate (x);
  }

  void adhesion_pimpl::
  adhesion_spring_constant (::common::units_decimal_nonnegative* x)
  {
    this->adhesion_pimpl_state_.adhesion_->adhesion_spring_constant (x);
  }

  void adhesion_pimpl::
  adhesion_receptor_density (::common::units_decimal_nonnegative* x)
  {
    this->adhesion_pimpl_state_.adhesion_->adhesion_receptor_density (x);
  }

  void adhesion_pimpl::
  surface_binding_energy (::common::units_decimal* x)
  {
    this->adhesion_pimpl_state_.adhesion_->surface_binding_energy (x);
  }

  void adhesion_pimpl::
  number_of_adhered_cells (::common::units_decimal_nonnegative* x)
  {
    this->adhesion_pimpl_state_.adhesion_->number_of_adhered_cells (x);
  }

  void adhesion_pimpl::
  maximum_number_of_adhered_cells (const ::common::units_unsignedShort& x)
  {
    this->adhesion_pimpl_state_.adhesion_->maximum_number_of_adhered_cells (x);
  }

  void adhesion_pimpl::
  adhered_surface_area (::common::units_decimal_nonnegative* x)
  {
    this->adhesion_pimpl_state_.adhesion_->adhered_surface_area (x);
  }

  void adhesion_pimpl::
  maximum_adhered_surface_area (::common::units_decimal_nonnegative* x)
  {
    this->adhesion_pimpl_state_.adhesion_->maximum_adhered_surface_area (x);
  }

  void adhesion_pimpl::
  adhesion_force_per_surface_area (::common::units_decimal* x)
  {
    this->adhesion_pimpl_state_.adhesion_->adhesion_force_per_surface_area (x);
  }

  void adhesion_pimpl::
  adhesion_probability (::common::units_fraction* x)
  {
    this->adhesion_pimpl_state_.adhesion_->adhesion_probability (x);
  }

  void adhesion_pimpl::
  detachment_proability (::common::units_fraction* x)
  {
    this->adhesion_pimpl_state_.adhesion_->detachment_proability (x);
  }

  void adhesion_pimpl::
  rolling_observation (::phenotype_common::rolling_observation* x)
  {
    this->adhesion_pimpl_state_.adhesion_->rolling_observation ().push_back (x);
  }

  void adhesion_pimpl::
  custom (::common::custom* x)
  {
    this->adhesion_pimpl_state_.adhesion_->custom (x);
  }

  ::phenotype_common::adhesion* adhesion_pimpl::
  post_adhesion ()
  {
    ::phenotype_common::adhesion* r = this->adhesion_pimpl_state_.adhesion_;
    this->adhesion_pimpl_state_.adhesion_ = 0;
    return r;
  }

  // rolling_observation_pimpl
  //

  rolling_observation_pimpl::
  rolling_observation_pimpl (bool b)
  {
    this->rolling_observation_pimpl_base_ = b;
    this->rolling_observation_pimpl_state_.rolling_observation_ = 0;
  }

  rolling_observation_pimpl::
  ~rolling_observation_pimpl ()
  {
    if (!this->rolling_observation_pimpl_base_ && this->rolling_observation_pimpl_state_.rolling_observation_)
      delete this->rolling_observation_pimpl_state_.rolling_observation_;
  }

  void rolling_observation_pimpl::
  _reset ()
  {
    rolling_observation_pskel::_reset ();

    if (!this->rolling_observation_pimpl_base_ && this->rolling_observation_pimpl_state_.rolling_observation_)
    {
      delete this->rolling_observation_pimpl_state_.rolling_observation_;
      this->rolling_observation_pimpl_state_.rolling_observation_ = 0;
    }
  }

  void rolling_observation_pimpl::
  pre_impl (::phenotype_common::rolling_observation* x)
  {
    this->rolling_observation_pimpl_state_.rolling_observation_ = x;
  }

  void rolling_observation_pimpl::
  pre ()
  {
    ::phenotype_common::rolling_observation* x = new ::phenotype_common::rolling_observation;
    this->pre_impl (x);
  }

  void rolling_observation_pimpl::
  rolling_velocity (::common::units_decimal* x)
  {
    this->rolling_observation_pimpl_state_.rolling_observation_->rolling_velocity (x);
  }

  void rolling_observation_pimpl::
  shear_stress (::common::units_decimal* x)
  {
    this->rolling_observation_pimpl_state_.rolling_observation_->shear_stress (x);
  }

  ::phenotype_common::rolling_observation* rolling_observation_pimpl::
  post_rolling_observation ()
  {
    ::phenotype_common::rolling_observation* r = this->rolling_observation_pimpl_state_.rolling_observation_;
    this->rolling_observation_pimpl_state_.rolling_observation_ = 0;
    return r;
  }

  // friction_pimpl
  //

  friction_pimpl::
  friction_pimpl (bool b)
  {
    this->friction_pimpl_base_ = b;
    this->friction_pimpl_state_.friction_ = 0;
  }

  friction_pimpl::
  ~friction_pimpl ()
  {
    if (!this->friction_pimpl_base_ && this->friction_pimpl_state_.friction_)
      delete this->friction_pimpl_state_.friction_;
  }

  void friction_pimpl::
  _reset ()
  {
    friction_pskel::_reset ();

    if (!this->friction_pimpl_base_ && this->friction_pimpl_state_.friction_)
    {
      delete this->friction_pimpl_state_.friction_;
      this->friction_pimpl_state_.friction_ = 0;
    }
  }

  void friction_pimpl::
  pre_impl (::phenotype_common::friction* x)
  {
    this->friction_pimpl_state_.friction_ = x;
  }

  void friction_pimpl::
  pre ()
  {
    ::phenotype_common::friction* x = new ::phenotype_common::friction;
    this->pre_impl (x);
  }

  void friction_pimpl::
  compression (::common::units_decimal_nonnegative* x)
  {
    this->friction_pimpl_state_.friction_->compression (x);
  }

  void friction_pimpl::
  ECM (::common::units_decimal_nonnegative* x)
  {
    this->friction_pimpl_state_.friction_->ECM (x);
  }

  void friction_pimpl::
  shear (::common::units_decimal_nonnegative* x)
  {
    this->friction_pimpl_state_.friction_->shear (x);
  }

  ::phenotype_common::friction* friction_pimpl::
  post_friction ()
  {
    ::phenotype_common::friction* r = this->friction_pimpl_state_.friction_;
    this->friction_pimpl_state_.friction_ = 0;
    return r;
  }

  // mechanics_pimpl
  //

  mechanics_pimpl::
  mechanics_pimpl (bool b)
  {
    this->mechanics_pimpl_base_ = b;
    this->mechanics_pimpl_state_.mechanics_ = 0;
  }

  mechanics_pimpl::
  ~mechanics_pimpl ()
  {
    if (!this->mechanics_pimpl_base_ && this->mechanics_pimpl_state_.mechanics_)
      delete this->mechanics_pimpl_state_.mechanics_;
  }

  void mechanics_pimpl::
  _reset ()
  {
    mechanics_pskel::_reset ();

    if (!this->mechanics_pimpl_base_ && this->mechanics_pimpl_state_.mechanics_)
    {
      delete this->mechanics_pimpl_state_.mechanics_;
      this->mechanics_pimpl_state_.mechanics_ = 0;
    }
  }

  void mechanics_pimpl::
  pre_impl (::phenotype_common::mechanics* x)
  {
    this->mechanics_pimpl_state_.mechanics_ = x;
  }

  void mechanics_pimpl::
  pre ()
  {
    ::phenotype_common::mechanics* x = new ::phenotype_common::mechanics;
    this->pre_impl (x);
  }

  void mechanics_pimpl::
  friction (::phenotype_common::friction* x)
  {
    this->mechanics_pimpl_state_.mechanics_->friction (x);
  }

  void mechanics_pimpl::
  maximum_cell_deformation (::common::units_decimal* x)
  {
    this->mechanics_pimpl_state_.mechanics_->maximum_cell_deformation (x);
  }

  void mechanics_pimpl::
  mechanical_pressure (::common::units_decimal* x)
  {
    this->mechanics_pimpl_state_.mechanics_->mechanical_pressure (x);
  }

  void mechanics_pimpl::
  indentation_observation (::phenotype_common::indentation_observation* x)
  {
    this->mechanics_pimpl_state_.mechanics_->indentation_observation ().push_back (x);
  }

  void mechanics_pimpl::
  poisson_ratio (::common::units_decimal* x)
  {
    this->mechanics_pimpl_state_.mechanics_->poisson_ratio (x);
  }

  void mechanics_pimpl::
  youngs_modulus (::common::units_decimal* x)
  {
    this->mechanics_pimpl_state_.mechanics_->youngs_modulus (x);
  }

  void mechanics_pimpl::
  custom (::common::custom* x)
  {
    this->mechanics_pimpl_state_.mechanics_->custom (x);
  }

  ::phenotype_common::mechanics* mechanics_pimpl::
  post_mechanics ()
  {
    ::phenotype_common::mechanics* r = this->mechanics_pimpl_state_.mechanics_;
    this->mechanics_pimpl_state_.mechanics_ = 0;
    return r;
  }

  // indentation_observation_pimpl
  //

  indentation_observation_pimpl::
  indentation_observation_pimpl (bool b)
  {
    this->indentation_observation_pimpl_base_ = b;
    this->indentation_observation_pimpl_state_.indentation_observation_ = 0;
  }

  indentation_observation_pimpl::
  ~indentation_observation_pimpl ()
  {
    if (!this->indentation_observation_pimpl_base_ && this->indentation_observation_pimpl_state_.indentation_observation_)
      delete this->indentation_observation_pimpl_state_.indentation_observation_;
  }

  void indentation_observation_pimpl::
  _reset ()
  {
    indentation_observation_pskel::_reset ();

    if (!this->indentation_observation_pimpl_base_ && this->indentation_observation_pimpl_state_.indentation_observation_)
    {
      delete this->indentation_observation_pimpl_state_.indentation_observation_;
      this->indentation_observation_pimpl_state_.indentation_observation_ = 0;
    }
  }

  void indentation_observation_pimpl::
  pre_impl (::phenotype_common::indentation_observation* x)
  {
    this->indentation_observation_pimpl_state_.indentation_observation_ = x;
  }

  void indentation_observation_pimpl::
  pre ()
  {
    ::phenotype_common::indentation_observation* x = new ::phenotype_common::indentation_observation;
    this->pre_impl (x);
  }

  void indentation_observation_pimpl::
  depth (::common::units_decimal* x)
  {
    this->indentation_observation_pimpl_state_.indentation_observation_->depth (x);
  }

  void indentation_observation_pimpl::
  poisson_ratio (::common::units_decimal* x)
  {
    this->indentation_observation_pimpl_state_.indentation_observation_->poisson_ratio (x);
  }

  void indentation_observation_pimpl::
  youngs_modulus (::common::units_decimal* x)
  {
    this->indentation_observation_pimpl_state_.indentation_observation_->youngs_modulus (x);
  }

  ::phenotype_common::indentation_observation* indentation_observation_pimpl::
  post_indentation_observation ()
  {
    ::phenotype_common::indentation_observation* r = this->indentation_observation_pimpl_state_.indentation_observation_;
    this->indentation_observation_pimpl_state_.indentation_observation_ = 0;
    return r;
  }

  // motility_pimpl
  //

  motility_pimpl::
  motility_pimpl (bool b)
  {
    this->motility_pimpl_base_ = b;
    this->motility_pimpl_state_.motility_ = 0;
  }

  motility_pimpl::
  ~motility_pimpl ()
  {
    if (!this->motility_pimpl_base_ && this->motility_pimpl_state_.motility_)
      delete this->motility_pimpl_state_.motility_;
  }

  void motility_pimpl::
  _reset ()
  {
    motility_pskel::_reset ();

    if (!this->motility_pimpl_base_ && this->motility_pimpl_state_.motility_)
    {
      delete this->motility_pimpl_state_.motility_;
      this->motility_pimpl_state_.motility_ = 0;
    }
  }

  void motility_pimpl::
  pre_impl (::phenotype_common::motility* x)
  {
    this->motility_pimpl_state_.motility_ = x;
  }

  void motility_pimpl::
  pre ()
  {
    ::phenotype_common::motility* x = new ::phenotype_common::motility;
    this->pre_impl (x);
  }

  void motility_pimpl::
  unrestricted (::phenotype_common::motility_types* x)
  {
    this->motility_pimpl_state_.motility_->unrestricted ().push_back (x);
  }

  void motility_pimpl::
  restricted (::phenotype_common::motility_types* x)
  {
    this->motility_pimpl_state_.motility_->restricted ().push_back (x);
  }

  ::phenotype_common::motility* motility_pimpl::
  post_motility ()
  {
    ::phenotype_common::motility* r = this->motility_pimpl_state_.motility_;
    this->motility_pimpl_state_.motility_ = 0;
    return r;
  }

  // motility_types_pimpl
  //

  motility_types_pimpl::
  motility_types_pimpl (bool b)
  {
    this->motility_types_pimpl_base_ = b;
    this->motility_types_pimpl_state_.motility_types_ = 0;
  }

  motility_types_pimpl::
  ~motility_types_pimpl ()
  {
    if (!this->motility_types_pimpl_base_ && this->motility_types_pimpl_state_.motility_types_)
      delete this->motility_types_pimpl_state_.motility_types_;
  }

  void motility_types_pimpl::
  _reset ()
  {
    motility_types_pskel::_reset ();

    if (!this->motility_types_pimpl_base_ && this->motility_types_pimpl_state_.motility_types_)
    {
      delete this->motility_types_pimpl_state_.motility_types_;
      this->motility_types_pimpl_state_.motility_types_ = 0;
    }
  }

  void motility_types_pimpl::
  pre_impl (::phenotype_common::motility_types* x)
  {
    this->motility_types_pimpl_state_.motility_types_ = x;
  }

  void motility_types_pimpl::
  pre ()
  {
    ::phenotype_common::motility_types* x = new ::phenotype_common::motility_types;
    this->pre_impl (x);
  }

  void motility_types_pimpl::
  ID (unsigned int x)
  {
    this->motility_types_pimpl_state_.motility_types_->ID (x);
  }

  void motility_types_pimpl::
  timescale (::phenotype_common::timescale* x)
  {
    this->motility_types_pimpl_state_.motility_types_->timescale (x);
  }

  void motility_types_pimpl::
  restriction (::variables::experimental_conditions* x)
  {
    this->motility_types_pimpl_state_.motility_types_->restriction (x);
  }

  void motility_types_pimpl::
  net_displacement (::common::units_decimal* x)
  {
    this->motility_types_pimpl_state_.motility_types_->net_displacement (x);
  }

  void motility_types_pimpl::
  total_displacement (::common::units_decimal_nonnegative* x)
  {
    this->motility_types_pimpl_state_.motility_types_->total_displacement (x);
  }

  void motility_types_pimpl::
  mean_square_displacement (::common::units_decimal_nonnegative* x)
  {
    this->motility_types_pimpl_state_.motility_types_->mean_square_displacement (x);
  }

  void motility_types_pimpl::
  mean_speed (::common::units_decimal* x)
  {
    this->motility_types_pimpl_state_.motility_types_->mean_speed (x);
  }

  void motility_types_pimpl::
  net_speed (::common::units_decimal* x)
  {
    this->motility_types_pimpl_state_.motility_types_->net_speed (x);
  }

  void motility_types_pimpl::
  persistence (::common::units_decimal* x)
  {
    this->motility_types_pimpl_state_.motility_types_->persistence (x);
  }

  void motility_types_pimpl::
  mean_path_length (::common::units_decimal* x)
  {
    this->motility_types_pimpl_state_.motility_types_->mean_path_length (x);
  }

  void motility_types_pimpl::
  diffusion_coefficient (::common::units_decimal* x)
  {
    this->motility_types_pimpl_state_.motility_types_->diffusion_coefficient (x);
  }

  void motility_types_pimpl::
  custom (::common::custom* x)
  {
    this->motility_types_pimpl_state_.motility_types_->custom (x);
  }

  ::phenotype_common::motility_types* motility_types_pimpl::
  post_motility_types ()
  {
    ::phenotype_common::motility_types* r = this->motility_types_pimpl_state_.motility_types_;
    this->motility_types_pimpl_state_.motility_types_ = 0;
    return r;
  }

  // timescale_pimpl
  //

  timescale_pimpl::
  timescale_pimpl (bool b)
  : timescale_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->timescale_pimpl_base_ = b;
    this->timescale_pimpl_state_.timescale_ = 0;
  }

  timescale_pimpl::
  ~timescale_pimpl ()
  {
    if (!this->timescale_pimpl_base_ && this->timescale_pimpl_state_.timescale_)
      delete this->timescale_pimpl_state_.timescale_;
  }

  void timescale_pimpl::
  _reset ()
  {
    timescale_pskel::_reset ();

    if (!this->timescale_pimpl_base_ && this->timescale_pimpl_state_.timescale_)
    {
      delete this->timescale_pimpl_state_.timescale_;
      this->timescale_pimpl_state_.timescale_ = 0;
    }
  }

  void timescale_pimpl::
  pre_impl (::phenotype_common::timescale* x)
  {
    this->timescale_pimpl_state_.timescale_ = x;
    this->base_impl_.pre_impl (x);
  }

  void timescale_pimpl::
  pre ()
  {
    ::phenotype_common::timescale* x = new ::phenotype_common::timescale;
    this->pre_impl (x);
  }

  void timescale_pimpl::
  mitotic (bool x)
  {
    this->timescale_pimpl_state_.timescale_->mitotic (x);
  }

  ::phenotype_common::timescale* timescale_pimpl::
  post_timescale ()
  {
    this->base_impl_.post_units_decimal ();
    ::phenotype_common::timescale* r = this->timescale_pimpl_state_.timescale_;
    this->timescale_pimpl_state_.timescale_ = 0;
    return r;
  }

  // transport_processes_pimpl
  //

  transport_processes_pimpl::
  transport_processes_pimpl (bool b)
  {
    this->transport_processes_pimpl_base_ = b;
    this->transport_processes_pimpl_state_.transport_processes_ = 0;
  }

  transport_processes_pimpl::
  ~transport_processes_pimpl ()
  {
    if (!this->transport_processes_pimpl_base_ && this->transport_processes_pimpl_state_.transport_processes_)
      delete this->transport_processes_pimpl_state_.transport_processes_;
  }

  void transport_processes_pimpl::
  _reset ()
  {
    transport_processes_pskel::_reset ();

    if (!this->transport_processes_pimpl_base_ && this->transport_processes_pimpl_state_.transport_processes_)
    {
      delete this->transport_processes_pimpl_state_.transport_processes_;
      this->transport_processes_pimpl_state_.transport_processes_ = 0;
    }
  }

  void transport_processes_pimpl::
  pre_impl (::phenotype_common::transport_processes* x)
  {
    this->transport_processes_pimpl_state_.transport_processes_ = x;
  }

  void transport_processes_pimpl::
  pre ()
  {
    ::phenotype_common::transport_processes* x = new ::phenotype_common::transport_processes;
    this->pre_impl (x);
  }

  void transport_processes_pimpl::
  variable (::phenotype_common::transport_variable* x)
  {
    this->transport_processes_pimpl_state_.transport_processes_->variable ().push_back (x);
  }

  ::phenotype_common::transport_processes* transport_processes_pimpl::
  post_transport_processes ()
  {
    ::phenotype_common::transport_processes* r = this->transport_processes_pimpl_state_.transport_processes_;
    this->transport_processes_pimpl_state_.transport_processes_ = 0;
    return r;
  }

  // transport_variable_pimpl
  //

  transport_variable_pimpl::
  transport_variable_pimpl (bool b)
  {
    this->transport_variable_pimpl_base_ = b;
    this->transport_variable_pimpl_state_.transport_variable_ = 0;
  }

  transport_variable_pimpl::
  ~transport_variable_pimpl ()
  {
    if (!this->transport_variable_pimpl_base_ && this->transport_variable_pimpl_state_.transport_variable_)
      delete this->transport_variable_pimpl_state_.transport_variable_;
  }

  void transport_variable_pimpl::
  _reset ()
  {
    transport_variable_pskel::_reset ();

    if (!this->transport_variable_pimpl_base_ && this->transport_variable_pimpl_state_.transport_variable_)
    {
      delete this->transport_variable_pimpl_state_.transport_variable_;
      this->transport_variable_pimpl_state_.transport_variable_ = 0;
    }
  }

  void transport_variable_pimpl::
  pre_impl (::phenotype_common::transport_variable* x)
  {
    this->transport_variable_pimpl_state_.transport_variable_ = x;
  }

  void transport_variable_pimpl::
  pre ()
  {
    ::phenotype_common::transport_variable* x = new ::phenotype_common::transport_variable;
    this->pre_impl (x);
  }

  void transport_variable_pimpl::
  name (const ::std::string& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->name (x);
  }

  void transport_variable_pimpl::
  units (const ::std::string& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->units (x);
  }

  void transport_variable_pimpl::
  ID (unsigned long long x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->ID (x);
  }

  void transport_variable_pimpl::
  type (const ::variables::amount_type& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->type (x);
  }

  void transport_variable_pimpl::
  ChEBI_ID (const ::std::string& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->ChEBI_ID (x);
  }

  void transport_variable_pimpl::
  MeSH_ID (const ::std::string& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->MeSH_ID (x);
  }

  void transport_variable_pimpl::
  DrugBank_ID (const ::std::string& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->DrugBank_ID (x);
  }

  void transport_variable_pimpl::
  GMO_ID (const ::std::string& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->GMO_ID (x);
  }

  void transport_variable_pimpl::
  GO_ID (const ::std::string& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->GO_ID (x);
  }

  void transport_variable_pimpl::
  UniProt_ID (const ::std::string& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->UniProt_ID (x);
  }

  void transport_variable_pimpl::
  PR_ID (const ::std::string& x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->PR_ID (x);
  }

  void transport_variable_pimpl::
  all_present ()
  {
    ::phenotype_common::transport_variable::all_type* x = new ::phenotype_common::transport_variable::all_type;
    this->transport_variable_pimpl_state_.transport_variable_->all (x);
  }

  void transport_variable_pimpl::
  export_rate (::common::units_decimal* x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->all ().export_rate (x);
  }

  void transport_variable_pimpl::
  export_rate_per_unit_surface_area (::common::units_decimal* x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->all ().export_rate_per_unit_surface_area (x);
  }

  void transport_variable_pimpl::
  import_rate (::common::units_decimal* x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->all ().import_rate (x);
  }

  void transport_variable_pimpl::
  import_rate_per_unit_surface_area (::common::units_decimal* x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->all ().import_rate_per_unit_surface_area (x);
  }

  void transport_variable_pimpl::
  saturation_density (::common::units_decimal* x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->all ().saturation_density (x);
  }

  void transport_variable_pimpl::
  custom (::common::custom* x)
  {
    this->transport_variable_pimpl_state_.transport_variable_->all ().custom (x);
  }

  ::phenotype_common::transport_variable* transport_variable_pimpl::
  post_transport_variable ()
  {
    ::phenotype_common::transport_variable* r = this->transport_variable_pimpl_state_.transport_variable_;
    this->transport_variable_pimpl_state_.transport_variable_ = 0;
    return r;
  }

  // geometrical_parameters_pimpl
  //

  geometrical_parameters_pimpl::
  geometrical_parameters_pimpl (bool b)
  {
    this->geometrical_parameters_pimpl_base_ = b;
    this->geometrical_parameters_pimpl_state_.geometrical_parameters_ = 0;
  }

  geometrical_parameters_pimpl::
  ~geometrical_parameters_pimpl ()
  {
    if (!this->geometrical_parameters_pimpl_base_ && this->geometrical_parameters_pimpl_state_.geometrical_parameters_)
      delete this->geometrical_parameters_pimpl_state_.geometrical_parameters_;
  }

  void geometrical_parameters_pimpl::
  _reset ()
  {
    geometrical_parameters_pskel::_reset ();

    if (!this->geometrical_parameters_pimpl_base_ && this->geometrical_parameters_pimpl_state_.geometrical_parameters_)
    {
      delete this->geometrical_parameters_pimpl_state_.geometrical_parameters_;
      this->geometrical_parameters_pimpl_state_.geometrical_parameters_ = 0;
    }
  }

  void geometrical_parameters_pimpl::
  pre_impl (::phenotype_common::geometrical_parameters* x)
  {
    this->geometrical_parameters_pimpl_state_.geometrical_parameters_ = x;
  }

  void geometrical_parameters_pimpl::
  pre ()
  {
    ::phenotype_common::geometrical_parameters* x = new ::phenotype_common::geometrical_parameters;
    this->pre_impl (x);
  }

  void geometrical_parameters_pimpl::
  units (const ::std::string& x)
  {
    this->geometrical_parameters_pimpl_state_.geometrical_parameters_->units (x);
  }

  void geometrical_parameters_pimpl::
  aspect_ratio (::common::units_decimal_nonnegative* x)
  {
    this->geometrical_parameters_pimpl_state_.geometrical_parameters_->aspect_ratio (x);
  }

  void geometrical_parameters_pimpl::
  circularity (::common::units_decimal_nonnegative* x)
  {
    this->geometrical_parameters_pimpl_state_.geometrical_parameters_->circularity (x);
  }

  void geometrical_parameters_pimpl::
  eccentricity (::common::units_decimal_nonnegative* x)
  {
    this->geometrical_parameters_pimpl_state_.geometrical_parameters_->eccentricity (x);
  }

  void geometrical_parameters_pimpl::
  sphericity (::common::units_decimal_nonnegative* x)
  {
    this->geometrical_parameters_pimpl_state_.geometrical_parameters_->sphericity (x);
  }

  void geometrical_parameters_pimpl::
  custom (::common::custom* x)
  {
    this->geometrical_parameters_pimpl_state_.geometrical_parameters_->custom (x);
  }

  ::phenotype_common::geometrical_parameters* geometrical_parameters_pimpl::
  post_geometrical_parameters ()
  {
    ::phenotype_common::geometrical_parameters* r = this->geometrical_parameters_pimpl_state_.geometrical_parameters_;
    this->geometrical_parameters_pimpl_state_.geometrical_parameters_ = 0;
    return r;
  }

  // lengths_pimpl
  //

  lengths_pimpl::
  lengths_pimpl (bool b)
  {
    this->lengths_pimpl_base_ = b;
    this->lengths_pimpl_state_.lengths_ = 0;
  }

  lengths_pimpl::
  ~lengths_pimpl ()
  {
    if (!this->lengths_pimpl_base_ && this->lengths_pimpl_state_.lengths_)
      delete this->lengths_pimpl_state_.lengths_;
  }

  void lengths_pimpl::
  _reset ()
  {
    lengths_pskel::_reset ();

    if (!this->lengths_pimpl_base_ && this->lengths_pimpl_state_.lengths_)
    {
      delete this->lengths_pimpl_state_.lengths_;
      this->lengths_pimpl_state_.lengths_ = 0;
    }
  }

  void lengths_pimpl::
  pre_impl (::phenotype_common::lengths* x)
  {
    this->lengths_pimpl_state_.lengths_ = x;
  }

  void lengths_pimpl::
  pre ()
  {
    ::phenotype_common::lengths* x = new ::phenotype_common::lengths;
    this->pre_impl (x);
  }

  void lengths_pimpl::
  units (const ::std::string& x)
  {
    this->lengths_pimpl_state_.lengths_->units (x);
  }

  void lengths_pimpl::
  diameter (::common::units_decimal_nonnegative* x)
  {
    this->lengths_pimpl_state_.lengths_->diameter (x);
  }

  void lengths_pimpl::
  major_axis (::common::units_decimal_nonnegative* x)
  {
    this->lengths_pimpl_state_.lengths_->major_axis (x);
  }

  void lengths_pimpl::
  minor_axis (::common::units_decimal_nonnegative* x)
  {
    this->lengths_pimpl_state_.lengths_->minor_axis (x);
  }

  void lengths_pimpl::
  perimeter (::common::units_decimal_nonnegative* x)
  {
    this->lengths_pimpl_state_.lengths_->perimeter (x);
  }

  void lengths_pimpl::
  radius (::common::units_decimal_nonnegative* x)
  {
    this->lengths_pimpl_state_.lengths_->radius (x);
  }

  void lengths_pimpl::
  custom (::common::custom* x)
  {
    this->lengths_pimpl_state_.lengths_->custom (x);
  }

  ::phenotype_common::lengths* lengths_pimpl::
  post_lengths ()
  {
    ::phenotype_common::lengths* r = this->lengths_pimpl_state_.lengths_;
    this->lengths_pimpl_state_.lengths_ = 0;
    return r;
  }

  // areas_3D_pimpl
  //

  areas_3D_pimpl::
  areas_3D_pimpl (bool b)
  {
    this->areas_3D_pimpl_base_ = b;
    this->areas_3D_pimpl_state_.areas_3D_ = 0;
  }

  areas_3D_pimpl::
  ~areas_3D_pimpl ()
  {
    if (!this->areas_3D_pimpl_base_ && this->areas_3D_pimpl_state_.areas_3D_)
      delete this->areas_3D_pimpl_state_.areas_3D_;
  }

  void areas_3D_pimpl::
  _reset ()
  {
    areas_3D_pskel::_reset ();

    if (!this->areas_3D_pimpl_base_ && this->areas_3D_pimpl_state_.areas_3D_)
    {
      delete this->areas_3D_pimpl_state_.areas_3D_;
      this->areas_3D_pimpl_state_.areas_3D_ = 0;
    }
  }

  void areas_3D_pimpl::
  pre_impl (::phenotype_common::areas_3D* x)
  {
    this->areas_3D_pimpl_state_.areas_3D_ = x;
  }

  void areas_3D_pimpl::
  pre ()
  {
    ::phenotype_common::areas_3D* x = new ::phenotype_common::areas_3D;
    this->pre_impl (x);
  }

  void areas_3D_pimpl::
  units (const ::std::string& x)
  {
    this->areas_3D_pimpl_state_.areas_3D_->units (x);
  }

  void areas_3D_pimpl::
  free_surface_area (::common::units_decimal_nonnegative* x)
  {
    this->areas_3D_pimpl_state_.areas_3D_->free_surface_area (x);
  }

  void areas_3D_pimpl::
  total_surface_area (::common::units_decimal_nonnegative* x)
  {
    this->areas_3D_pimpl_state_.areas_3D_->total_surface_area (x);
  }

  void areas_3D_pimpl::
  custom (::common::custom* x)
  {
    this->areas_3D_pimpl_state_.areas_3D_->custom (x);
  }

  ::phenotype_common::areas_3D* areas_3D_pimpl::
  post_areas_3D ()
  {
    ::phenotype_common::areas_3D* r = this->areas_3D_pimpl_state_.areas_3D_;
    this->areas_3D_pimpl_state_.areas_3D_ = 0;
    return r;
  }

  // areas_2D_pimpl
  //

  areas_2D_pimpl::
  areas_2D_pimpl (bool b)
  {
    this->areas_2D_pimpl_base_ = b;
    this->areas_2D_pimpl_state_.areas_2D_ = 0;
  }

  areas_2D_pimpl::
  ~areas_2D_pimpl ()
  {
    if (!this->areas_2D_pimpl_base_ && this->areas_2D_pimpl_state_.areas_2D_)
      delete this->areas_2D_pimpl_state_.areas_2D_;
  }

  void areas_2D_pimpl::
  _reset ()
  {
    areas_2D_pskel::_reset ();

    if (!this->areas_2D_pimpl_base_ && this->areas_2D_pimpl_state_.areas_2D_)
    {
      delete this->areas_2D_pimpl_state_.areas_2D_;
      this->areas_2D_pimpl_state_.areas_2D_ = 0;
    }
  }

  void areas_2D_pimpl::
  pre_impl (::phenotype_common::areas_2D* x)
  {
    this->areas_2D_pimpl_state_.areas_2D_ = x;
  }

  void areas_2D_pimpl::
  pre ()
  {
    ::phenotype_common::areas_2D* x = new ::phenotype_common::areas_2D;
    this->pre_impl (x);
  }

  void areas_2D_pimpl::
  units (const ::std::string& x)
  {
    this->areas_2D_pimpl_state_.areas_2D_->units (x);
  }

  void areas_2D_pimpl::
  total_area (::common::units_decimal_nonnegative* x)
  {
    this->areas_2D_pimpl_state_.areas_2D_->total_area (x);
  }

  void areas_2D_pimpl::
  custom (::common::custom* x)
  {
    this->areas_2D_pimpl_state_.areas_2D_->custom (x);
  }

  ::phenotype_common::areas_2D* areas_2D_pimpl::
  post_areas_2D ()
  {
    ::phenotype_common::areas_2D* r = this->areas_2D_pimpl_state_.areas_2D_;
    this->areas_2D_pimpl_state_.areas_2D_ = 0;
    return r;
  }

  // volumes_pimpl
  //

  volumes_pimpl::
  volumes_pimpl (bool b)
  {
    this->volumes_pimpl_base_ = b;
    this->volumes_pimpl_state_.volumes_ = 0;
  }

  volumes_pimpl::
  ~volumes_pimpl ()
  {
    if (!this->volumes_pimpl_base_ && this->volumes_pimpl_state_.volumes_)
      delete this->volumes_pimpl_state_.volumes_;
  }

  void volumes_pimpl::
  _reset ()
  {
    volumes_pskel::_reset ();

    if (!this->volumes_pimpl_base_ && this->volumes_pimpl_state_.volumes_)
    {
      delete this->volumes_pimpl_state_.volumes_;
      this->volumes_pimpl_state_.volumes_ = 0;
    }
  }

  void volumes_pimpl::
  pre_impl (::phenotype_common::volumes* x)
  {
    this->volumes_pimpl_state_.volumes_ = x;
  }

  void volumes_pimpl::
  pre ()
  {
    ::phenotype_common::volumes* x = new ::phenotype_common::volumes;
    this->pre_impl (x);
  }

  void volumes_pimpl::
  units (const ::std::string& x)
  {
    this->volumes_pimpl_state_.volumes_->units (x);
  }

  void volumes_pimpl::
  fluid_volume (::common::units_decimal_nonnegative* x)
  {
    this->volumes_pimpl_state_.volumes_->fluid_volume (x);
  }

  void volumes_pimpl::
  fluid_volume_fraction (::common::units_fraction* x)
  {
    this->volumes_pimpl_state_.volumes_->fluid_volume_fraction (x);
  }

  void volumes_pimpl::
  solid_calcified_volume (::common::units_decimal_nonnegative* x)
  {
    this->volumes_pimpl_state_.volumes_->solid_calcified_volume (x);
  }

  void volumes_pimpl::
  solid_volume (::common::units_decimal_nonnegative* x)
  {
    this->volumes_pimpl_state_.volumes_->solid_volume (x);
  }

  void volumes_pimpl::
  solid_volume_fraction (::common::units_fraction* x)
  {
    this->volumes_pimpl_state_.volumes_->solid_volume_fraction (x);
  }

  void volumes_pimpl::
  total_volume (::common::units_decimal_nonnegative* x)
  {
    this->volumes_pimpl_state_.volumes_->total_volume (x);
  }

  void volumes_pimpl::
  custom (::common::custom* x)
  {
    this->volumes_pimpl_state_.volumes_->custom (x);
  }

  ::phenotype_common::volumes* volumes_pimpl::
  post_volumes ()
  {
    ::phenotype_common::volumes* r = this->volumes_pimpl_state_.volumes_;
    this->volumes_pimpl_state_.volumes_ = 0;
    return r;
  }

  // geometrical_properties_pimpl
  //

  geometrical_properties_pimpl::
  geometrical_properties_pimpl (bool b)
  {
    this->geometrical_properties_pimpl_base_ = b;
    this->geometrical_properties_pimpl_state_.geometrical_properties_ = 0;
  }

  geometrical_properties_pimpl::
  ~geometrical_properties_pimpl ()
  {
    if (!this->geometrical_properties_pimpl_base_ && this->geometrical_properties_pimpl_state_.geometrical_properties_)
      delete this->geometrical_properties_pimpl_state_.geometrical_properties_;
  }

  void geometrical_properties_pimpl::
  _reset ()
  {
    geometrical_properties_pskel::_reset ();

    if (!this->geometrical_properties_pimpl_base_ && this->geometrical_properties_pimpl_state_.geometrical_properties_)
    {
      delete this->geometrical_properties_pimpl_state_.geometrical_properties_;
      this->geometrical_properties_pimpl_state_.geometrical_properties_ = 0;
    }
  }

  void geometrical_properties_pimpl::
  pre_impl (::phenotype_common::geometrical_properties* x)
  {
    this->geometrical_properties_pimpl_state_.geometrical_properties_ = x;
  }

  void geometrical_properties_pimpl::
  pre ()
  {
    ::phenotype_common::geometrical_properties* x = new ::phenotype_common::geometrical_properties;
    this->pre_impl (x);
  }

  void geometrical_properties_pimpl::
  parameters (::phenotype_common::geometrical_parameters* x)
  {
    this->geometrical_properties_pimpl_state_.geometrical_properties_->parameters (x);
  }

  void geometrical_properties_pimpl::
  lengths (::phenotype_common::lengths* x)
  {
    this->geometrical_properties_pimpl_state_.geometrical_properties_->lengths (x);
  }

  void geometrical_properties_pimpl::
  areas (::phenotype_common::areas_3D* x)
  {
    this->geometrical_properties_pimpl_state_.geometrical_properties_->areas (x);
  }

  void geometrical_properties_pimpl::
  volumes (::phenotype_common::volumes* x)
  {
    this->geometrical_properties_pimpl_state_.geometrical_properties_->volumes (x);
  }

  void geometrical_properties_pimpl::
  cross_section (::phenotype_common::cross_section* x)
  {
    this->geometrical_properties_pimpl_state_.geometrical_properties_->cross_section ().push_back (x);
  }

  void geometrical_properties_pimpl::
  custom (::common::custom* x)
  {
    this->geometrical_properties_pimpl_state_.geometrical_properties_->custom (x);
  }

  ::phenotype_common::geometrical_properties* geometrical_properties_pimpl::
  post_geometrical_properties ()
  {
    ::phenotype_common::geometrical_properties* r = this->geometrical_properties_pimpl_state_.geometrical_properties_;
    this->geometrical_properties_pimpl_state_.geometrical_properties_ = 0;
    return r;
  }

  // cross_section_pimpl
  //

  cross_section_pimpl::
  cross_section_pimpl (bool b)
  {
    this->cross_section_pimpl_base_ = b;
    this->cross_section_pimpl_state_.cross_section_ = 0;
  }

  cross_section_pimpl::
  ~cross_section_pimpl ()
  {
    if (!this->cross_section_pimpl_base_ && this->cross_section_pimpl_state_.cross_section_)
      delete this->cross_section_pimpl_state_.cross_section_;
  }

  void cross_section_pimpl::
  _reset ()
  {
    cross_section_pskel::_reset ();

    if (!this->cross_section_pimpl_base_ && this->cross_section_pimpl_state_.cross_section_)
    {
      delete this->cross_section_pimpl_state_.cross_section_;
      this->cross_section_pimpl_state_.cross_section_ = 0;
    }
  }

  void cross_section_pimpl::
  pre_impl (::phenotype_common::cross_section* x)
  {
    this->cross_section_pimpl_state_.cross_section_ = x;
  }

  void cross_section_pimpl::
  pre ()
  {
    ::phenotype_common::cross_section* x = new ::phenotype_common::cross_section;
    this->pre_impl (x);
  }

  void cross_section_pimpl::
  parameters (::phenotype_common::geometrical_parameters* x)
  {
    this->cross_section_pimpl_state_.cross_section_->parameters (x);
  }

  void cross_section_pimpl::
  lengths (::phenotype_common::lengths* x)
  {
    this->cross_section_pimpl_state_.cross_section_->lengths (x);
  }

  void cross_section_pimpl::
  areas (::phenotype_common::areas_2D* x)
  {
    this->cross_section_pimpl_state_.cross_section_->areas (x);
  }

  void cross_section_pimpl::
  custom (::common::custom* x)
  {
    this->cross_section_pimpl_state_.cross_section_->custom (x);
  }

  ::phenotype_common::cross_section* cross_section_pimpl::
  post_cross_section ()
  {
    ::phenotype_common::cross_section* r = this->cross_section_pimpl_state_.cross_section_;
    this->cross_section_pimpl_state_.cross_section_ = 0;
    return r;
  }

  // mass_pimpl
  //

  mass_pimpl::
  mass_pimpl (bool b)
  {
    this->mass_pimpl_base_ = b;
    this->mass_pimpl_state_.mass_ = 0;
  }

  mass_pimpl::
  ~mass_pimpl ()
  {
    if (!this->mass_pimpl_base_ && this->mass_pimpl_state_.mass_)
      delete this->mass_pimpl_state_.mass_;
  }

  void mass_pimpl::
  _reset ()
  {
    mass_pskel::_reset ();

    if (!this->mass_pimpl_base_ && this->mass_pimpl_state_.mass_)
    {
      delete this->mass_pimpl_state_.mass_;
      this->mass_pimpl_state_.mass_ = 0;
    }
  }

  void mass_pimpl::
  pre_impl (::phenotype_common::mass* x)
  {
    this->mass_pimpl_state_.mass_ = x;
  }

  void mass_pimpl::
  pre ()
  {
    ::phenotype_common::mass* x = new ::phenotype_common::mass;
    this->pre_impl (x);
  }

  void mass_pimpl::
  biomass (::common::units_decimal_nonnegative* x)
  {
    this->mass_pimpl_state_.mass_->biomass (x);
  }

  void mass_pimpl::
  fluid_mass (::common::units_decimal_nonnegative* x)
  {
    this->mass_pimpl_state_.mass_->fluid_mass (x);
  }

  void mass_pimpl::
  total_mass (::common::units_decimal_nonnegative* x)
  {
    this->mass_pimpl_state_.mass_->total_mass (x);
  }

  ::phenotype_common::mass* mass_pimpl::
  post_mass ()
  {
    ::phenotype_common::mass* r = this->mass_pimpl_state_.mass_;
    this->mass_pimpl_state_.mass_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

