// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_LINE_IPP
#define CELL_LINE_IPP

// Begin prologue.
//
//
// End prologue.

#include "metadata.ipp"

#include "phenotype_dataset.ipp"

#include "common.ipp"

namespace cell_line
{
  // cell_line
  //

  inline
  bool cell_line::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void cell_line::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  const ::std::string& cell_line::
  ID () const
  {
    return this->ID_;
  }

  inline
  ::std::string& cell_line::
  ID ()
  {
    return this->ID_;
  }

  inline
  void cell_line::
  ID (const ::std::string& x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  bool cell_line::
  label_present () const
  {
    return this->label_present_;
  }

  inline
  void cell_line::
  label_present (bool x)
  {
    this->label_present_ = x;
  }

  inline
  const ::std::string& cell_line::
  label () const
  {
    return this->label_;
  }

  inline
  ::std::string& cell_line::
  label ()
  {
    return this->label_;
  }

  inline
  void cell_line::
  label (const ::std::string& x)
  {
    this->label_ = x;
    this->label_present_ = true;
  }

  inline
  bool cell_line::
  curated_present () const
  {
    return this->curated_present_;
  }

  inline
  void cell_line::
  curated_present (bool x)
  {
    this->curated_present_ = x;
  }

  inline
  bool cell_line::
  curated () const
  {
    return this->curated_;
  }

  inline
  bool& cell_line::
  curated ()
  {
    return this->curated_;
  }

  inline
  void cell_line::
  curated (bool x)
  {
    this->curated_ = x;
    this->curated_present_ = true;
  }

  inline
  bool cell_line::
  metadata_present () const
  {
    return this->metadata_ != 0;
  }

  inline
  const ::metadata::metadata& cell_line::
  metadata () const
  {
    return *this->metadata_;
  }

  inline
  ::metadata::metadata& cell_line::
  metadata ()
  {
    return *this->metadata_;
  }

  inline
  void cell_line::
  metadata (::metadata::metadata* x)
  {
    delete this->metadata_;
    this->metadata_ = x;
  }

  inline
  ::metadata::metadata* cell_line::
  metadata_detach ()
  {
    ::metadata::metadata* r = this->metadata_;
    this->metadata_ = 0;
    return r;
  }

  inline
  const cell_line::phenotype_dataset_sequence& cell_line::
  phenotype_dataset () const
  {
    return this->phenotype_dataset_;
  }

  inline
  cell_line::phenotype_dataset_sequence& cell_line::
  phenotype_dataset ()
  {
    return this->phenotype_dataset_;
  }

  inline
  bool cell_line::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& cell_line::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& cell_line::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void cell_line::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* cell_line::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // DCLs
  //

  inline
  const DCLs::cell_line_sequence& DCLs::
  cell_line () const
  {
    return this->cell_line_;
  }

  inline
  DCLs::cell_line_sequence& DCLs::
  cell_line ()
  {
    return this->cell_line_;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // CELL_LINE_IPP
