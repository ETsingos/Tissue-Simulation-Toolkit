// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

namespace cell
{
  // population_definition_sskel
  //

  bool population_definition_sskel::
  ID_present ()
  {
    return this->population_definition_impl_ ? this->population_definition_impl_->ID_present () : false;
  }

  bool population_definition_sskel::
  name_present ()
  {
    return this->population_definition_impl_ ? this->population_definition_impl_->name_present () : false;
  }

  bool population_definition_sskel::
  units_present ()
  {
    return this->population_definition_impl_ ? this->population_definition_impl_->units_present () : false;
  }

  bool population_definition_sskel::
  phenotype_dataset_present ()
  {
    return this->population_definition_impl_ ? this->population_definition_impl_->phenotype_dataset_present () : false;
  }

  bool population_definition_sskel::
  custom_present ()
  {
    return this->population_definition_impl_ ? this->population_definition_impl_->custom_present () : false;
  }

  void population_definition_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();

    this->resetting_ = true;

    if (this->phenotype_dataset_serializer_)
      this->phenotype_dataset_serializer_->_reset ();

    if (this->phenotype_dataset_serializer_map_)
      this->phenotype_dataset_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* population_definition_sskel::
  _static_type ()
  {
    return "population_definition cell";
  }

  const char* population_definition_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void population_definition_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    // name
    //
    if (this->name_present ())
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);
        this->name_serializer_->_serialize_content ();
        this->name_serializer_->_post_impl ();
        this->_end_attribute ();
        this->name_serializer_->post ();
      }
    }

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);
        this->units_serializer_->_serialize_content ();
        this->units_serializer_->_post_impl ();
        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }
  }

  void population_definition_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // phenotype_dataset
    //
    if (this->phenotype_dataset_present ())
    {
      ctx.type_id (0);
      const ::phenotype_dataset::phenotype_dataset& r = this->phenotype_dataset ();

      const void* t = ctx.type_id ();
      ::phenotype_dataset::phenotype_dataset_sskel* s = 0;

      if (t == 0 && this->phenotype_dataset_serializer_ != 0)
        s = this->phenotype_dataset_serializer_;
      else if (this->phenotype_dataset_serializer_map_ != 0)
        s = static_cast< ::phenotype_dataset::phenotype_dataset_sskel* > (
          this->phenotype_dataset_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_dataset::phenotype_dataset_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("phenotype_dataset");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // population_definitions_sskel
  //

  bool population_definitions_sskel::
  custom_present ()
  {
    return this->population_definitions_impl_ ? this->population_definitions_impl_->custom_present () : false;
  }

  void population_definitions_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->population_definition_serializer_)
      this->population_definition_serializer_->_reset ();

    if (this->population_definition_serializer_map_)
      this->population_definition_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* population_definitions_sskel::
  _static_type ()
  {
    return "population_definitions cell";
  }

  const char* population_definitions_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void population_definitions_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // population_definition
    //
    while (this->population_definition_next ())
    {
      ctx.type_id (0);
      const ::cell::population_definition& r = this->population_definition ();

      const void* t = ctx.type_id ();
      ::cell::population_definition_sskel* s = 0;

      if (t == 0 && this->population_definition_serializer_ != 0)
        s = this->population_definition_serializer_;
      else if (this->population_definition_serializer_map_ != 0)
        s = static_cast< ::cell::population_definition_sskel* > (
          this->population_definition_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell::population_definition_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("population_definition");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // cell_sskel
  //

  bool cell_sskel::
  ID_present ()
  {
    return this->cell_impl_ ? this->cell_impl_->ID_present () : false;
  }

  bool cell_sskel::
  phenotype_dataset_present ()
  {
    return this->cell_impl_ ? this->cell_impl_->phenotype_dataset_present () : false;
  }

  bool cell_sskel::
  state_present ()
  {
    return this->cell_impl_ ? this->cell_impl_->state_present () : false;
  }

  bool cell_sskel::
  custom_present ()
  {
    return this->cell_impl_ ? this->cell_impl_->custom_present () : false;
  }

  void cell_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->phenotype_dataset_serializer_)
      this->phenotype_dataset_serializer_->_reset ();

    if (this->phenotype_dataset_serializer_map_)
      this->phenotype_dataset_serializer_map_->reset ();

    if (this->state_serializer_)
      this->state_serializer_->_reset ();

    if (this->state_serializer_map_)
      this->state_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_sskel::
  _static_type ()
  {
    return "cell cell";
  }

  const char* cell_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cell_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }
  }

  void cell_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // phenotype_dataset
    //
    if (this->phenotype_dataset_present ())
    {
      ctx.type_id (0);
      const ::phenotype_dataset::phenotype_dataset& r = this->phenotype_dataset ();

      const void* t = ctx.type_id ();
      ::phenotype_dataset::phenotype_dataset_sskel* s = 0;

      if (t == 0 && this->phenotype_dataset_serializer_ != 0)
        s = this->phenotype_dataset_serializer_;
      else if (this->phenotype_dataset_serializer_map_ != 0)
        s = static_cast< ::phenotype_dataset::phenotype_dataset_sskel* > (
          this->phenotype_dataset_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::phenotype_dataset::phenotype_dataset_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("phenotype_dataset");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // state
    //
    if (this->state_present ())
    {
      ctx.type_id (0);
      const ::state::state& r = this->state ();

      const void* t = ctx.type_id ();
      ::state::state_sskel* s = 0;

      if (t == 0 && this->state_serializer_ != 0)
        s = this->state_serializer_;
      else if (this->state_serializer_map_ != 0)
        s = static_cast< ::state::state_sskel* > (
          this->state_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::state::state_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("state");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // cell_population_individual_sskel
  //

  bool cell_population_individual_sskel::
  type_present ()
  {
    return this->cell_population_individual_impl_ ? this->cell_population_individual_impl_->type_present () : false;
  }

  bool cell_population_individual_sskel::
  population_ID_present ()
  {
    return this->cell_population_individual_impl_ ? this->cell_population_individual_impl_->population_ID_present () : false;
  }

  bool cell_population_individual_sskel::
  cell_next ()
  {
    return this->cell_population_individual_impl_ ? this->cell_population_individual_impl_->cell_next () : false;
  }

  bool cell_population_individual_sskel::
  custom_present ()
  {
    return this->cell_population_individual_impl_ ? this->cell_population_individual_impl_->custom_present () : false;
  }

  void cell_population_individual_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    if (this->population_ID_serializer_)
      this->population_ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->cell_serializer_)
      this->cell_serializer_->_reset ();

    if (this->cell_serializer_map_)
      this->cell_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_population_individual_sskel::
  _static_type ()
  {
    return "cell_population_individual cell";
  }

  const char* cell_population_individual_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cell_population_individual_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // type
    //
    if (this->type_present ())
    {
      const ::std::string& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);
        this->type_serializer_->_serialize_content ();
        this->type_serializer_->_post_impl ();
        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }

    // population_ID
    //
    if (this->population_ID_present ())
    {
      unsigned int r = this->population_ID ();

      if (this->population_ID_serializer_)
      {
        this->population_ID_serializer_->pre (r);
        this->_start_attribute ("population_ID");
        this->population_ID_serializer_->_pre_impl (ctx);
        this->population_ID_serializer_->_serialize_content ();
        this->population_ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->population_ID_serializer_->post ();
      }
    }
  }

  void cell_population_individual_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // cell
    //
    while (this->cell_next ())
    {
      ctx.type_id (0);
      const ::cell::cell& r = this->cell ();

      const void* t = ctx.type_id ();
      ::cell::cell_sskel* s = 0;

      if (t == 0 && this->cell_serializer_ != 0)
        s = this->cell_serializer_;
      else if (this->cell_serializer_map_ != 0)
        s = static_cast< ::cell::cell_sskel* > (
          this->cell_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell::cell_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // cell_population_aggregate_sskel
  //

  bool cell_population_aggregate_sskel::
  type_present ()
  {
    return this->cell_population_aggregate_impl_ ? this->cell_population_aggregate_impl_->type_present () : false;
  }

  bool cell_population_aggregate_sskel::
  population_ID_present ()
  {
    return this->cell_population_aggregate_impl_ ? this->cell_population_aggregate_impl_->population_ID_present () : false;
  }

  bool cell_population_aggregate_sskel::
  value_present ()
  {
    return this->cell_population_aggregate_impl_ ? this->cell_population_aggregate_impl_->value_present () : false;
  }

  bool cell_population_aggregate_sskel::
  sequence_present ()
  {
    return this->cell_population_aggregate_impl_ ? this->cell_population_aggregate_impl_->sequence_present () : false;
  }

  bool cell_population_aggregate_sskel::
  phenotype_dataset_present ()
  {
    return this->cell_population_aggregate_impl_ ? this->cell_population_aggregate_impl_->phenotype_dataset_present () : false;
  }

  bool cell_population_aggregate_sskel::
  state_present ()
  {
    return this->cell_population_aggregate_impl_ ? this->cell_population_aggregate_impl_->state_present () : false;
  }

  bool cell_population_aggregate_sskel::
  custom_present ()
  {
    return this->cell_population_aggregate_impl_ ? this->cell_population_aggregate_impl_->custom_present () : false;
  }

  void cell_population_aggregate_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();

    if (this->population_ID_serializer_)
      this->population_ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->value_serializer_)
      this->value_serializer_->_reset ();

    if (this->value_serializer_map_)
      this->value_serializer_map_->reset ();

    if (this->phenotype_dataset_serializer_)
      this->phenotype_dataset_serializer_->_reset ();

    if (this->phenotype_dataset_serializer_map_)
      this->phenotype_dataset_serializer_map_->reset ();

    if (this->state_serializer_)
      this->state_serializer_->_reset ();

    if (this->state_serializer_map_)
      this->state_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_population_aggregate_sskel::
  _static_type ()
  {
    return "cell_population_aggregate cell";
  }

  const char* cell_population_aggregate_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cell_population_aggregate_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // type
    //
    if (this->type_present ())
    {
      const ::std::string& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);
        this->type_serializer_->_serialize_content ();
        this->type_serializer_->_post_impl ();
        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }

    // population_ID
    //
    if (this->population_ID_present ())
    {
      unsigned int r = this->population_ID ();

      if (this->population_ID_serializer_)
      {
        this->population_ID_serializer_->pre (r);
        this->_start_attribute ("population_ID");
        this->population_ID_serializer_->_pre_impl (ctx);
        this->population_ID_serializer_->_serialize_content ();
        this->population_ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->population_ID_serializer_->post ();
      }
    }
  }

  void cell_population_aggregate_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // value
    //
    if (this->value_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->value ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->value_serializer_ != 0)
        s = this->value_serializer_;
      else if (this->value_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_sskel* > (
          this->value_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("value");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    if (this->sequence_present ())
    {
      // phenotype_dataset
      //
      if (this->phenotype_dataset_present ())
      {
        ctx.type_id (0);
        const ::phenotype_dataset::phenotype_dataset& r = this->phenotype_dataset ();

        const void* t = ctx.type_id ();
        ::phenotype_dataset::phenotype_dataset_sskel* s = 0;

        if (t == 0 && this->phenotype_dataset_serializer_ != 0)
          s = this->phenotype_dataset_serializer_;
        else if (this->phenotype_dataset_serializer_map_ != 0)
          s = static_cast< ::phenotype_dataset::phenotype_dataset_sskel* > (
            this->phenotype_dataset_serializer_map_->find (t));

        if (s)
        {
          s->pre (r);

          const char* dt = 0;
          if (t != 0)
          {
            dt = s->_dynamic_type ();
            if (strcmp (dt, ::phenotype_dataset::phenotype_dataset_sskel::_static_type ()) == 0)
              dt = 0;
          }

          this->_start_element ("phenotype_dataset");

          if (dt != 0)
            this->_set_type (dt);

          s->_pre_impl (ctx);
          s->_serialize_attributes ();
          s->_serialize_content ();
          s->_post_impl ();
          this->_end_element ();
          s->post ();
        }
      }

      // state
      //
      if (this->state_present ())
      {
        ctx.type_id (0);
        const ::state::state& r = this->state ();

        const void* t = ctx.type_id ();
        ::state::state_sskel* s = 0;

        if (t == 0 && this->state_serializer_ != 0)
          s = this->state_serializer_;
        else if (this->state_serializer_map_ != 0)
          s = static_cast< ::state::state_sskel* > (
            this->state_serializer_map_->find (t));

        if (s)
        {
          s->pre (r);

          const char* dt = 0;
          if (t != 0)
          {
            dt = s->_dynamic_type ();
            if (strcmp (dt, ::state::state_sskel::_static_type ()) == 0)
              dt = 0;
          }

          this->_start_element ("state");

          if (dt != 0)
            this->_set_type (dt);

          s->_pre_impl (ctx);
          s->_serialize_attributes ();
          s->_serialize_content ();
          s->_post_impl ();
          this->_end_element ();
          s->post ();
        }
      }

      // custom
      //
      if (this->custom_present ())
      {
        ctx.type_id (0);
        const ::common::custom& r = this->custom ();

        const void* t = ctx.type_id ();
        ::common::custom_sskel* s = 0;

        if (t == 0 && this->custom_serializer_ != 0)
          s = this->custom_serializer_;
        else if (this->custom_serializer_map_ != 0)
          s = static_cast< ::common::custom_sskel* > (
            this->custom_serializer_map_->find (t));

        if (s)
        {
          s->pre (r);

          const char* dt = 0;
          if (t != 0)
          {
            dt = s->_dynamic_type ();
            if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
              dt = 0;
          }

          this->_start_element ("custom");

          if (dt != 0)
            this->_set_type (dt);

          s->_pre_impl (ctx);
          s->_serialize_attributes ();
          s->_serialize_content ();
          s->_post_impl ();
          this->_end_element ();
          s->post ();
        }
      }
    }
  }

  // population_vector_sskel
  //

  bool population_vector_sskel::
  voxel_ID_present ()
  {
    return this->population_vector_impl_ ? this->population_vector_impl_->voxel_ID_present () : false;
  }

  bool population_vector_sskel::
  value_present ()
  {
    return this->population_vector_impl_ ? this->population_vector_impl_->value_present () : false;
  }

  bool population_vector_sskel::
  cell_population_next ()
  {
    return this->population_vector_impl_ ? this->population_vector_impl_->cell_population_next () : false;
  }

  bool population_vector_sskel::
  custom_present ()
  {
    return this->population_vector_impl_ ? this->population_vector_impl_->custom_present () : false;
  }

  void population_vector_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->voxel_ID_serializer_)
      this->voxel_ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->value_serializer_)
      this->value_serializer_->_reset ();

    if (this->value_serializer_map_)
      this->value_serializer_map_->reset ();

    if (this->cell_population_serializer_)
      this->cell_population_serializer_->_reset ();

    if (this->cell_population_serializer_map_)
      this->cell_population_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* population_vector_sskel::
  _static_type ()
  {
    return "population_vector cell";
  }

  const char* population_vector_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void population_vector_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // voxel_ID
    //
    if (this->voxel_ID_present ())
    {
      const ::common::unsigned_int_list& r = this->voxel_ID ();

      if (this->voxel_ID_serializer_)
      {
        this->voxel_ID_serializer_->pre (r);
        this->_start_attribute ("voxel_ID");
        this->voxel_ID_serializer_->_pre_impl (ctx);
        this->voxel_ID_serializer_->_serialize_content ();
        this->voxel_ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->voxel_ID_serializer_->post ();
      }
    }
  }

  void population_vector_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // value
    //
    if (this->value_present ())
    {
      ctx.type_id (0);
      const ::common::units_double_list& r = this->value ();

      const void* t = ctx.type_id ();
      ::common::units_double_list_sskel* s = 0;

      if (t == 0 && this->value_serializer_ != 0)
        s = this->value_serializer_;
      else if (this->value_serializer_map_ != 0)
        s = static_cast< ::common::units_double_list_sskel* > (
          this->value_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_double_list_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("value");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // cell_population
    //
    while (this->cell_population_next ())
    {
      ctx.type_id (0);
      const ::cell::cell_population_aggregate& r = this->cell_population ();

      const void* t = ctx.type_id ();
      ::cell::cell_population_aggregate_sskel* s = 0;

      if (t == 0 && this->cell_population_serializer_ != 0)
        s = this->cell_population_serializer_;
      else if (this->cell_population_serializer_map_ != 0)
        s = static_cast< ::cell::cell_population_aggregate_sskel* > (
          this->cell_population_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell::cell_population_aggregate_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_population");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // cell_populations_sskel
  //

  bool cell_populations_sskel::
  population_vector_next ()
  {
    return this->cell_populations_impl_ ? this->cell_populations_impl_->population_vector_next () : false;
  }

  bool cell_populations_sskel::
  cell_population_present ()
  {
    return this->cell_populations_impl_ ? this->cell_populations_impl_->cell_population_present () : false;
  }

  void cell_populations_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->population_vector_serializer_)
      this->population_vector_serializer_->_reset ();

    if (this->population_vector_serializer_map_)
      this->population_vector_serializer_map_->reset ();

    if (this->cell_population_serializer_)
      this->cell_population_serializer_->_reset ();

    if (this->cell_population_serializer_map_)
      this->cell_population_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cell_populations_sskel::
  _static_type ()
  {
    return "cell_populations cell";
  }

  const char* cell_populations_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cell_populations_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // population_vector
    //
    while (this->population_vector_next ())
    {
      ctx.type_id (0);
      const ::cell::population_vector& r = this->population_vector ();

      const void* t = ctx.type_id ();
      ::cell::population_vector_sskel* s = 0;

      if (t == 0 && this->population_vector_serializer_ != 0)
        s = this->population_vector_serializer_;
      else if (this->population_vector_serializer_map_ != 0)
        s = static_cast< ::cell::population_vector_sskel* > (
          this->population_vector_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell::population_vector_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("population_vector");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // cell_population
    //
    if (this->cell_population_present ())
    {
      ctx.type_id (0);
      const ::cell::cell_population_individual& r = this->cell_population ();

      const void* t = ctx.type_id ();
      ::cell::cell_population_individual_sskel* s = 0;

      if (t == 0 && this->cell_population_serializer_ != 0)
        s = this->cell_population_serializer_;
      else if (this->cell_population_serializer_map_ != 0)
        s = static_cast< ::cell::cell_population_individual_sskel* > (
          this->cell_population_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell::cell_population_individual_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_population");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // cellular_information_sskel
  //

  bool cellular_information_sskel::
  DCLs_present ()
  {
    return this->cellular_information_impl_ ? this->cellular_information_impl_->DCLs_present () : false;
  }

  bool cellular_information_sskel::
  population_definitions_present ()
  {
    return this->cellular_information_impl_ ? this->cellular_information_impl_->population_definitions_present () : false;
  }

  bool cellular_information_sskel::
  mesh_present ()
  {
    return this->cellular_information_impl_ ? this->cellular_information_impl_->mesh_present () : false;
  }

  bool cellular_information_sskel::
  cell_populations_present ()
  {
    return this->cellular_information_impl_ ? this->cellular_information_impl_->cell_populations_present () : false;
  }

  void cellular_information_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->DCLs_serializer_)
      this->DCLs_serializer_->_reset ();

    if (this->DCLs_serializer_map_)
      this->DCLs_serializer_map_->reset ();

    if (this->population_definitions_serializer_)
      this->population_definitions_serializer_->_reset ();

    if (this->population_definitions_serializer_map_)
      this->population_definitions_serializer_map_->reset ();

    if (this->mesh_serializer_)
      this->mesh_serializer_->_reset ();

    if (this->mesh_serializer_map_)
      this->mesh_serializer_map_->reset ();

    if (this->cell_populations_serializer_)
      this->cell_populations_serializer_->_reset ();

    if (this->cell_populations_serializer_map_)
      this->cell_populations_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* cellular_information_sskel::
  _static_type ()
  {
    return "cellular_information cell";
  }

  const char* cellular_information_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void cellular_information_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // DCLs
    //
    if (this->DCLs_present ())
    {
      ctx.type_id (0);
      const ::cell_line::DCLs& r = this->DCLs ();

      const void* t = ctx.type_id ();
      ::cell_line::DCLs_sskel* s = 0;

      if (t == 0 && this->DCLs_serializer_ != 0)
        s = this->DCLs_serializer_;
      else if (this->DCLs_serializer_map_ != 0)
        s = static_cast< ::cell_line::DCLs_sskel* > (
          this->DCLs_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell_line::DCLs_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("DCLs");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // population_definitions
    //
    if (this->population_definitions_present ())
    {
      ctx.type_id (0);
      const ::cell::population_definitions& r = this->population_definitions ();

      const void* t = ctx.type_id ();
      ::cell::population_definitions_sskel* s = 0;

      if (t == 0 && this->population_definitions_serializer_ != 0)
        s = this->population_definitions_serializer_;
      else if (this->population_definitions_serializer_map_ != 0)
        s = static_cast< ::cell::population_definitions_sskel* > (
          this->population_definitions_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell::population_definitions_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("population_definitions");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // mesh
    //
    if (this->mesh_present ())
    {
      ctx.type_id (0);
      const ::mesh::mesh& r = this->mesh ();

      const void* t = ctx.type_id ();
      ::mesh::mesh_sskel* s = 0;

      if (t == 0 && this->mesh_serializer_ != 0)
        s = this->mesh_serializer_;
      else if (this->mesh_serializer_map_ != 0)
        s = static_cast< ::mesh::mesh_sskel* > (
          this->mesh_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::mesh::mesh_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("mesh");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // cell_populations
    //
    if (this->cell_populations_present ())
    {
      ctx.type_id (0);
      const ::cell::cell_populations& r = this->cell_populations ();

      const void* t = ctx.type_id ();
      ::cell::cell_populations_sskel* s = 0;

      if (t == 0 && this->cell_populations_serializer_ != 0)
        s = this->cell_populations_serializer_;
      else if (this->cell_populations_serializer_map_ != 0)
        s = static_cast< ::cell::cell_populations_sskel* > (
          this->cell_populations_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::cell::cell_populations_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("cell_populations");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

