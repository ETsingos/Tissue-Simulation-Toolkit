// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "phenotype_dataset-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace phenotype_dataset
{
  // phenotype_dataset_pimpl
  //

  phenotype_dataset_pimpl::
  phenotype_dataset_pimpl (bool b)
  {
    this->phenotype_dataset_pimpl_base_ = b;
    this->phenotype_dataset_pimpl_state_.phenotype_dataset_ = 0;
  }

  phenotype_dataset_pimpl::
  ~phenotype_dataset_pimpl ()
  {
    if (!this->phenotype_dataset_pimpl_base_ && this->phenotype_dataset_pimpl_state_.phenotype_dataset_)
      delete this->phenotype_dataset_pimpl_state_.phenotype_dataset_;
  }

  void phenotype_dataset_pimpl::
  _reset ()
  {
    phenotype_dataset_pskel::_reset ();

    if (!this->phenotype_dataset_pimpl_base_ && this->phenotype_dataset_pimpl_state_.phenotype_dataset_)
    {
      delete this->phenotype_dataset_pimpl_state_.phenotype_dataset_;
      this->phenotype_dataset_pimpl_state_.phenotype_dataset_ = 0;
    }
  }

  void phenotype_dataset_pimpl::
  pre_impl (::phenotype_dataset::phenotype_dataset* x)
  {
    this->phenotype_dataset_pimpl_state_.phenotype_dataset_ = x;
  }

  void phenotype_dataset_pimpl::
  pre ()
  {
    ::phenotype_dataset::phenotype_dataset* x = new ::phenotype_dataset::phenotype_dataset;
    this->pre_impl (x);
  }

  void phenotype_dataset_pimpl::
  keywords (const ::std::string& x)
  {
    this->phenotype_dataset_pimpl_state_.phenotype_dataset_->keywords (x);
  }

  void phenotype_dataset_pimpl::
  ID (unsigned long long x)
  {
    this->phenotype_dataset_pimpl_state_.phenotype_dataset_->ID (x);
  }

  void phenotype_dataset_pimpl::
  microenvironment (::microenvironment::microenvironment* x)
  {
    this->phenotype_dataset_pimpl_state_.phenotype_dataset_->microenvironment (x);
  }

  void phenotype_dataset_pimpl::
  phenotype (::phenotype::phenotype* x)
  {
    this->phenotype_dataset_pimpl_state_.phenotype_dataset_->phenotype ().push_back (x);
  }

  void phenotype_dataset_pimpl::
  cell_part (::phenotype_base::cell_parts* x)
  {
    this->phenotype_dataset_pimpl_state_.phenotype_dataset_->cell_part ().push_back (x);
  }

  void phenotype_dataset_pimpl::
  custom (::common::custom* x)
  {
    this->phenotype_dataset_pimpl_state_.phenotype_dataset_->custom (x);
  }

  ::phenotype_dataset::phenotype_dataset* phenotype_dataset_pimpl::
  post_phenotype_dataset ()
  {
    ::phenotype_dataset::phenotype_dataset* r = this->phenotype_dataset_pimpl_state_.phenotype_dataset_;
    this->phenotype_dataset_pimpl_state_.phenotype_dataset_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

