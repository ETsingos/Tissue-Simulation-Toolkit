// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_CYCLE_PIMPL_HPP
#define CELL_CYCLE_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define CELL_CYCLE_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "cell_cycle-pskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-pimpl.hpp"

#include "variables-pimpl.hpp"

#include "phenotype_base-pimpl.hpp"

namespace cell_cycle
{
  class death_type_pimpl: public death_type_pskel
  {
    public:
    death_type_pimpl ();

    virtual void
    pre ();

    virtual void
    _characters (const ::xsde::cxx::ro_string&);

    virtual void
    _post ();

    virtual ::cell_cycle::death_type
    post_death_type ();

    public:
    struct death_type_pimpl_state
    {
      ::std::string str_;
    };

    death_type_pimpl_state death_type_pimpl_state_;
  };

  class death_rate_type_pimpl: public death_rate_type_pskel
  {
    public:
    death_rate_type_pimpl (bool = false);

    ~death_rate_type_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    type (const ::cell_cycle::death_type&);

    virtual ::cell_cycle::death_rate_type*
    post_death_rate_type ();

    public:
    void
    pre_impl (::cell_cycle::death_rate_type*);

    public:
    ::common::units_decimal_nonnegative_pimpl base_impl_;

    public:
    struct death_rate_type_pimpl_state
    {
      ::cell_cycle::death_rate_type* death_rate_type_;
    };

    death_rate_type_pimpl_state death_rate_type_pimpl_state_;
    bool death_rate_type_pimpl_base_;
  };

  class cell_cycle_arrest_pimpl: public cell_cycle_arrest_pskel
  {
    public:
    cell_cycle_arrest_pimpl (bool = false);

    ~cell_cycle_arrest_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    condition (::cell_cycle::arrest_condition*);

    virtual ::cell_cycle::cell_cycle_arrest*
    post_cell_cycle_arrest ();

    public:
    void
    pre_impl (::cell_cycle::cell_cycle_arrest*);

    public:
    struct cell_cycle_arrest_pimpl_state
    {
      ::cell_cycle::cell_cycle_arrest* cell_cycle_arrest_;
    };

    cell_cycle_arrest_pimpl_state cell_cycle_arrest_pimpl_state_;
    bool cell_cycle_arrest_pimpl_base_;
  };

  class transition_pimpl: public transition_pskel
  {
    public:
    transition_pimpl (bool = false);

    ~transition_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    checkpoint_failure_probability (::common::units_decimal*);

    virtual void
    subsequent_phase (unsigned long long);

    virtual void
    threshold (::variables::transition_threshold*);

    virtual void
    transition_rate (::common::units_decimal*);

    virtual ::cell_cycle::transition*
    post_transition ();

    public:
    void
    pre_impl (::cell_cycle::transition*);

    public:
    struct transition_pimpl_state
    {
      ::cell_cycle::transition* transition_;
    };

    transition_pimpl_state transition_pimpl_state_;
    bool transition_pimpl_base_;
  };

  class cell_cycle_phase_pimpl: public cell_cycle_phase_pskel
  {
    public:
    cell_cycle_phase_pimpl (bool = false);

    ~cell_cycle_phase_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    name (const ::std::string&);

    virtual void
    ID (unsigned long long);

    // Elements.
    //
    virtual void
    birth_rate (::common::units_decimal_nonnegative*);

    virtual void
    duration (::common::units_decimal_nonnegative*);

    virtual void
    death_rate (::cell_cycle::death_rate_type*);

    virtual void
    net_birth_rate (::common::units_decimal*);

    virtual void
    population_doubling_time (::common::units_decimal_nonnegative*);

    virtual void
    cell_cycle_arrest (::cell_cycle::cell_cycle_arrest*);

    virtual void
    transition (::cell_cycle::transition*);

    virtual void
    cell_part (::phenotype_base::cell_parts*);

    virtual void
    custom (::common::custom*);

    virtual ::cell_cycle::cell_cycle_phase*
    post_cell_cycle_phase ();

    public:
    void
    pre_impl (::cell_cycle::cell_cycle_phase*);

    public:
    struct cell_cycle_phase_pimpl_state
    {
      ::cell_cycle::cell_cycle_phase* cell_cycle_phase_;
    };

    cell_cycle_phase_pimpl_state cell_cycle_phase_pimpl_state_;
    bool cell_cycle_phase_pimpl_base_;
  };

  class summary_elements_pimpl: public summary_elements_pskel
  {
    public:
    summary_elements_pimpl (bool = false);

    ~summary_elements_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    birth_rate (::common::units_decimal_nonnegative*);

    virtual void
    duration (::common::units_decimal_nonnegative*);

    virtual void
    death_rate (::cell_cycle::death_rate_type*);

    virtual void
    net_birth_rate (::common::units_decimal*);

    virtual void
    population_doubling_time (::common::units_decimal_nonnegative*);

    virtual ::cell_cycle::summary_elements*
    post_summary_elements ();

    public:
    void
    pre_impl (::cell_cycle::summary_elements*);

    public:
    struct summary_elements_pimpl_state
    {
      ::cell_cycle::summary_elements* summary_elements_;
    };

    summary_elements_pimpl_state summary_elements_pimpl_state_;
    bool summary_elements_pimpl_base_;
  };

  class cell_cycle_pimpl: public cell_cycle_pskel
  {
    public:
    cell_cycle_pimpl (bool = false);

    ~cell_cycle_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    model (const ::std::string&);

    virtual void
    ID (unsigned long long);

    // Elements.
    //
    virtual void
    cell_cycle_phase (::cell_cycle::cell_cycle_phase*);

    virtual void
    cell_death (::cell_cycle::cell_death*);

    virtual void
    summary_elements (::cell_cycle::summary_elements*);

    virtual void
    custom (::common::custom*);

    virtual ::cell_cycle::cell_cycle*
    post_cell_cycle ();

    public:
    void
    pre_impl (::cell_cycle::cell_cycle*);

    public:
    struct cell_cycle_pimpl_state
    {
      ::cell_cycle::cell_cycle* cell_cycle_;
    };

    cell_cycle_pimpl_state cell_cycle_pimpl_state_;
    bool cell_cycle_pimpl_base_;
  };

  class cell_death_pimpl: public cell_death_pskel
  {
    public:
    cell_death_pimpl (bool = false);

    ~cell_death_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    type (const ::cell_cycle::death_type&);

    virtual void
    ID (unsigned long long);

    // Elements.
    //
    virtual void
    duration (::common::units_decimal*);

    virtual void
    cell_part (::phenotype_base::cell_parts*);

    virtual void
    custom (::common::custom*);

    virtual ::cell_cycle::cell_death*
    post_cell_death ();

    public:
    void
    pre_impl (::cell_cycle::cell_death*);

    public:
    struct cell_death_pimpl_state
    {
      ::cell_cycle::cell_death* cell_death_;
    };

    cell_death_pimpl_state cell_death_pimpl_state_;
    bool cell_death_pimpl_base_;
  };

  class arrest_type_pimpl: public arrest_type_pskel
  {
    public:
    arrest_type_pimpl ();

    virtual void
    pre ();

    virtual void
    _characters (const ::xsde::cxx::ro_string&);

    virtual void
    _post ();

    virtual ::cell_cycle::arrest_type
    post_arrest_type ();

    public:
    struct arrest_type_pimpl_state
    {
      ::std::string str_;
    };

    arrest_type_pimpl_state arrest_type_pimpl_state_;
  };

  class arrest_condition_pimpl: public arrest_condition_pskel
  {
    public:
    arrest_condition_pimpl (bool = false);

    ~arrest_condition_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    type (const ::cell_cycle::arrest_type&);

    virtual ::cell_cycle::arrest_condition*
    post_arrest_condition ();

    public:
    void
    pre_impl (::cell_cycle::arrest_condition*);

    public:
    ::common::units_decimal_pimpl base_impl_;

    public:
    struct arrest_condition_pimpl_state
    {
      ::cell_cycle::arrest_condition* arrest_condition_;
    };

    arrest_condition_pimpl_state arrest_condition_pimpl_state_;
    bool arrest_condition_pimpl_base_;
  };

  class cycles_and_deaths_pimpl: public cycles_and_deaths_pskel
  {
    public:
    cycles_and_deaths_pimpl (bool = false);

    ~cycles_and_deaths_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    cell_cycle (::cell_cycle::cell_cycle*);

    virtual void
    cell_death (::cell_cycle::cell_death*);

    virtual ::cell_cycle::cycles_and_deaths*
    post_cycles_and_deaths ();

    public:
    void
    pre_impl (::cell_cycle::cycles_and_deaths*);

    public:
    struct cycles_and_deaths_pimpl_state
    {
      ::cell_cycle::cycles_and_deaths* cycles_and_deaths_;
    };

    cycles_and_deaths_pimpl_state cycles_and_deaths_pimpl_state_;
    bool cycles_and_deaths_pimpl_base_;
  };
}

#ifdef CELL_CYCLE_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // CELL_CYCLE_PIMPL_HPP
