// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "variables-simpl.hpp"

namespace variables
{
  // amount_type_simpl
  //

  amount_type_simpl::
  amount_type_simpl ()
  : amount_type_sskel (0)
  {
  }

  void amount_type_simpl::
  pre (const ::variables::amount_type& x)
  {
    this->amount_type_simpl_state_ = &x;
  }

  void amount_type_simpl::
  _serialize_content ()
  {
    this->_characters (this->amount_type_simpl_state_->string ());
  }

  // variable_simpl
  //

  void variable_simpl::
  pre (const ::variables::variable& x)
  {
    this->variable_simpl_state_.variable_ = &x;
  }

  ::std::string variable_simpl::
  name ()
  {
    return this->variable_simpl_state_.variable_->name ();
  }

  bool variable_simpl::
  units_present ()
  {
    return this->variable_simpl_state_.variable_->units_present ();
  }

  ::std::string variable_simpl::
  units ()
  {
    return this->variable_simpl_state_.variable_->units ();
  }

  bool variable_simpl::
  ID_present ()
  {
    return this->variable_simpl_state_.variable_->ID_present ();
  }

  unsigned long long variable_simpl::
  ID ()
  {
    return this->variable_simpl_state_.variable_->ID ();
  }

  bool variable_simpl::
  type_present ()
  {
    return this->variable_simpl_state_.variable_->type_present ();
  }

  const ::variables::amount_type& variable_simpl::
  type ()
  {
    return this->variable_simpl_state_.variable_->type ();
  }

  bool variable_simpl::
  ChEBI_ID_present ()
  {
    return this->variable_simpl_state_.variable_->ChEBI_ID_present ();
  }

  ::std::string variable_simpl::
  ChEBI_ID ()
  {
    return this->variable_simpl_state_.variable_->ChEBI_ID ();
  }

  bool variable_simpl::
  MeSH_ID_present ()
  {
    return this->variable_simpl_state_.variable_->MeSH_ID_present ();
  }

  ::std::string variable_simpl::
  MeSH_ID ()
  {
    return this->variable_simpl_state_.variable_->MeSH_ID ();
  }

  bool variable_simpl::
  DrugBank_ID_present ()
  {
    return this->variable_simpl_state_.variable_->DrugBank_ID_present ();
  }

  ::std::string variable_simpl::
  DrugBank_ID ()
  {
    return this->variable_simpl_state_.variable_->DrugBank_ID ();
  }

  bool variable_simpl::
  GMO_ID_present ()
  {
    return this->variable_simpl_state_.variable_->GMO_ID_present ();
  }

  ::std::string variable_simpl::
  GMO_ID ()
  {
    return this->variable_simpl_state_.variable_->GMO_ID ();
  }

  bool variable_simpl::
  GO_ID_present ()
  {
    return this->variable_simpl_state_.variable_->GO_ID_present ();
  }

  ::std::string variable_simpl::
  GO_ID ()
  {
    return this->variable_simpl_state_.variable_->GO_ID ();
  }

  bool variable_simpl::
  UniProt_ID_present ()
  {
    return this->variable_simpl_state_.variable_->UniProt_ID_present ();
  }

  ::std::string variable_simpl::
  UniProt_ID ()
  {
    return this->variable_simpl_state_.variable_->UniProt_ID ();
  }

  bool variable_simpl::
  PR_ID_present ()
  {
    return this->variable_simpl_state_.variable_->PR_ID_present ();
  }

  ::std::string variable_simpl::
  PR_ID ()
  {
    return this->variable_simpl_state_.variable_->PR_ID ();
  }

  bool variable_simpl::
  material_amount_present ()
  {
    return this->variable_simpl_state_.variable_->material_amount_present ();
  }

  const ::variables::material_amount& variable_simpl::
  material_amount ()
  {
    return this->variable_simpl_state_.variable_->material_amount ();
  }

  bool variable_simpl::
  physical_parameter_set_present ()
  {
    return this->variable_simpl_state_.variable_->physical_parameter_set_present ();
  }

  const ::variables::physical_parameter_set& variable_simpl::
  physical_parameter_set ()
  {
    return this->variable_simpl_state_.variable_->physical_parameter_set ();
  }

  // material_amount_simpl
  //

  material_amount_simpl::
  material_amount_simpl ()
  : material_amount_sskel (&base_impl_)
  {
  }

  void material_amount_simpl::
  pre (const ::variables::material_amount& x)
  {
    this->base_impl_.pre (x);
    this->material_amount_simpl_state_.material_amount_ = &x;
  }

  bool material_amount_simpl::
  type_present ()
  {
    return this->material_amount_simpl_state_.material_amount_->type_present ();
  }

  const ::variables::amount_type& material_amount_simpl::
  type ()
  {
    return this->material_amount_simpl_state_.material_amount_->type ();
  }

  bool material_amount_simpl::
  scale_units_present ()
  {
    return this->material_amount_simpl_state_.material_amount_->scale_units_present ();
  }

  ::std::string material_amount_simpl::
  scale_units ()
  {
    return this->material_amount_simpl_state_.material_amount_->scale_units ();
  }

  // physical_parameter_set_simpl
  //

  void physical_parameter_set_simpl::
  pre (const ::variables::physical_parameter_set& x)
  {
    this->physical_parameter_set_simpl_state_.physical_parameter_set_ = &x;
  }

  bool physical_parameter_set_simpl::
  conditions_present ()
  {
    return this->physical_parameter_set_simpl_state_.physical_parameter_set_->conditions_present ();
  }

  const ::variables::physical_conditions& physical_parameter_set_simpl::
  conditions ()
  {
    return this->physical_parameter_set_simpl_state_.physical_parameter_set_->conditions ();
  }

  bool physical_parameter_set_simpl::
  diffusion_coefficient_present ()
  {
    return this->physical_parameter_set_simpl_state_.physical_parameter_set_->diffusion_coefficient_present ();
  }

  const ::common::units_decimal& physical_parameter_set_simpl::
  diffusion_coefficient ()
  {
    return this->physical_parameter_set_simpl_state_.physical_parameter_set_->diffusion_coefficient ();
  }

  bool physical_parameter_set_simpl::
  decay_rate_present ()
  {
    return this->physical_parameter_set_simpl_state_.physical_parameter_set_->decay_rate_present ();
  }

  const ::common::units_decimal& physical_parameter_set_simpl::
  decay_rate ()
  {
    return this->physical_parameter_set_simpl_state_.physical_parameter_set_->decay_rate ();
  }

  bool physical_parameter_set_simpl::
  custom_present ()
  {
    return this->physical_parameter_set_simpl_state_.physical_parameter_set_->custom_present ();
  }

  const ::common::custom& physical_parameter_set_simpl::
  custom ()
  {
    return this->physical_parameter_set_simpl_state_.physical_parameter_set_->custom ();
  }

  // physical_conditions_simpl
  //

  void physical_conditions_simpl::
  pre (const ::variables::physical_conditions& x)
  {
    this->physical_conditions_simpl_state_.physical_conditions_ = &x;
  }

  bool physical_conditions_simpl::
  temperature_present ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->temperature_present ();
  }

  const ::common::units_decimal& physical_conditions_simpl::
  temperature ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->temperature ();
  }

  bool physical_conditions_simpl::
  mechanical_pressure_present ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->mechanical_pressure_present ();
  }

  const ::common::units_decimal& physical_conditions_simpl::
  mechanical_pressure ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->mechanical_pressure ();
  }

  bool physical_conditions_simpl::
  acidity_present ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->acidity_present ();
  }

  const ::common::units_decimal& physical_conditions_simpl::
  acidity ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->acidity ();
  }

  bool physical_conditions_simpl::
  pH_present ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->pH_present ();
  }

  const ::common::units_decimal& physical_conditions_simpl::
  pH ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->pH ();
  }

  bool physical_conditions_simpl::
  custom_present ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->custom_present ();
  }

  const ::common::custom& physical_conditions_simpl::
  custom ()
  {
    return this->physical_conditions_simpl_state_.physical_conditions_->custom ();
  }

  // system_simpl
  //

  system_simpl::
  system_simpl ()
  : system_sskel (0)
  {
  }

  void system_simpl::
  pre (const ::variables::system& x)
  {
    this->system_simpl_state_ = &x;
  }

  void system_simpl::
  _serialize_content ()
  {
    this->_characters (this->system_simpl_state_->string ());
  }

  // conditions_simpl
  //

  conditions_simpl::
  conditions_simpl ()
  : conditions_sskel (0)
  {
  }

  void conditions_simpl::
  pre (const ::variables::conditions& x)
  {
    this->conditions_simpl_state_ = &x;
  }

  void conditions_simpl::
  _serialize_content ()
  {
    this->_characters (this->conditions_simpl_state_->string ());
  }

  // experimental_conditions_simpl
  //

  void experimental_conditions_simpl::
  pre (const ::variables::experimental_conditions& x)
  {
    this->experimental_conditions_simpl_state_.experimental_conditions_ = &x;
    this->experimental_conditions_simpl_state_.surface_variable_ = 
    this->experimental_conditions_simpl_state_.experimental_conditions_->surface_variable ().begin ();
    this->experimental_conditions_simpl_state_.surface_variable_end_ = 
    this->experimental_conditions_simpl_state_.experimental_conditions_->surface_variable ().end ();
  }

  bool experimental_conditions_simpl::
  type_present ()
  {
    return this->experimental_conditions_simpl_state_.experimental_conditions_->type_present ();
  }

  ::std::string experimental_conditions_simpl::
  type ()
  {
    return this->experimental_conditions_simpl_state_.experimental_conditions_->type ();
  }

  bool experimental_conditions_simpl::
  dimensionality_present ()
  {
    return this->experimental_conditions_simpl_state_.experimental_conditions_->dimensionality_present ();
  }

  unsigned short experimental_conditions_simpl::
  dimensionality ()
  {
    return this->experimental_conditions_simpl_state_.experimental_conditions_->dimensionality ();
  }

  bool experimental_conditions_simpl::
  system_present ()
  {
    return this->experimental_conditions_simpl_state_.experimental_conditions_->system_present ();
  }

  const ::variables::system& experimental_conditions_simpl::
  system ()
  {
    return this->experimental_conditions_simpl_state_.experimental_conditions_->system ();
  }

  bool experimental_conditions_simpl::
  conditions_present ()
  {
    return this->experimental_conditions_simpl_state_.experimental_conditions_->conditions_present ();
  }

  const ::variables::conditions& experimental_conditions_simpl::
  conditions ()
  {
    return this->experimental_conditions_simpl_state_.experimental_conditions_->conditions ();
  }

  bool experimental_conditions_simpl::
  surface_variable_next ()
  {
    return this->experimental_conditions_simpl_state_.surface_variable_ != 
    this->experimental_conditions_simpl_state_.surface_variable_end_;
  }

  const ::variables::variable& experimental_conditions_simpl::
  surface_variable ()
  {
    return *this->experimental_conditions_simpl_state_.surface_variable_++;
  }

  // data_vector_simpl
  //

  data_vector_simpl::
  data_vector_simpl ()
  : data_vector_sskel (&base_impl_)
  {
  }

  void data_vector_simpl::
  pre (const ::variables::data_vector& x)
  {
    this->base_impl_.pre (x);
    this->data_vector_simpl_state_.data_vector_ = &x;
  }

  bool data_vector_simpl::
  voxel_ID_present ()
  {
    return this->data_vector_simpl_state_.data_vector_->voxel_ID_present ();
  }

  const ::common::unsigned_int_list& data_vector_simpl::
  voxel_ID ()
  {
    return this->data_vector_simpl_state_.data_vector_->voxel_ID ();
  }

  // data_simpl
  //

  void data_simpl::
  pre (const ::variables::data& x)
  {
    this->data_simpl_state_.data_ = &x;
    this->data_simpl_state_.data_vector_ = 
    this->data_simpl_state_.data_->data_vector ().begin ();
    this->data_simpl_state_.data_vector_end_ = 
    this->data_simpl_state_.data_->data_vector ().end ();
  }

  bool data_simpl::
  type_present ()
  {
    return this->data_simpl_state_.data_->type_present ();
  }

  const ::common::data_storage_formats& data_simpl::
  type ()
  {
    return this->data_simpl_state_.data_->type ();
  }

  bool data_simpl::
  filename_present ()
  {
    return this->data_simpl_state_.data_->filename_present ();
  }

  ::std::string data_simpl::
  filename ()
  {
    return this->data_simpl_state_.data_->filename ();
  }

  bool data_simpl::
  data_vector_next ()
  {
    return this->data_simpl_state_.data_vector_ != 
    this->data_simpl_state_.data_vector_end_;
  }

  const ::variables::data_vector& data_simpl::
  data_vector ()
  {
    return *this->data_simpl_state_.data_vector_++;
  }

  bool data_simpl::
  custom_present ()
  {
    return this->data_simpl_state_.data_->custom_present ();
  }

  const ::common::custom& data_simpl::
  custom ()
  {
    return this->data_simpl_state_.data_->custom ();
  }

  // list_of_variables_simpl
  //

  void list_of_variables_simpl::
  pre (const ::variables::list_of_variables& x)
  {
    this->list_of_variables_simpl_state_.list_of_variables_ = &x;
    this->list_of_variables_simpl_state_.variable_ = 
    this->list_of_variables_simpl_state_.list_of_variables_->variable ().begin ();
    this->list_of_variables_simpl_state_.variable_end_ = 
    this->list_of_variables_simpl_state_.list_of_variables_->variable ().end ();
  }

  bool list_of_variables_simpl::
  variable_next ()
  {
    return this->list_of_variables_simpl_state_.variable_ != 
    this->list_of_variables_simpl_state_.variable_end_;
  }

  const ::variables::variable& list_of_variables_simpl::
  variable ()
  {
    return *this->list_of_variables_simpl_state_.variable_++;
  }

  bool list_of_variables_simpl::
  physical_parameter_set_present ()
  {
    return this->list_of_variables_simpl_state_.list_of_variables_->physical_parameter_set_present ();
  }

  const ::variables::physical_parameter_set& list_of_variables_simpl::
  physical_parameter_set ()
  {
    return this->list_of_variables_simpl_state_.list_of_variables_->physical_parameter_set ();
  }

  bool list_of_variables_simpl::
  custom_present ()
  {
    return this->list_of_variables_simpl_state_.list_of_variables_->custom_present ();
  }

  const ::common::custom& list_of_variables_simpl::
  custom ()
  {
    return this->list_of_variables_simpl_state_.list_of_variables_->custom ();
  }

  // transition_threshold_simpl
  //

  transition_threshold_simpl::
  transition_threshold_simpl ()
  : transition_threshold_sskel (&base_impl_)
  {
  }

  void transition_threshold_simpl::
  pre (const ::variables::transition_threshold& x)
  {
    this->base_impl_.pre (x);
    this->transition_threshold_simpl_state_.transition_threshold_ = &x;
  }

  bool transition_threshold_simpl::
  ChEBI_ID_present ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->ChEBI_ID_present ();
  }

  ::std::string transition_threshold_simpl::
  ChEBI_ID ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->ChEBI_ID ();
  }

  bool transition_threshold_simpl::
  MeSH_ID_present ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->MeSH_ID_present ();
  }

  ::std::string transition_threshold_simpl::
  MeSH_ID ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->MeSH_ID ();
  }

  bool transition_threshold_simpl::
  DrugBank_ID_present ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->DrugBank_ID_present ();
  }

  ::std::string transition_threshold_simpl::
  DrugBank_ID ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->DrugBank_ID ();
  }

  bool transition_threshold_simpl::
  GMO_ID_present ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->GMO_ID_present ();
  }

  ::std::string transition_threshold_simpl::
  GMO_ID ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->GMO_ID ();
  }

  bool transition_threshold_simpl::
  GO_ID_present ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->GO_ID_present ();
  }

  ::std::string transition_threshold_simpl::
  GO_ID ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->GO_ID ();
  }

  bool transition_threshold_simpl::
  UniProt_ID_present ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->UniProt_ID_present ();
  }

  ::std::string transition_threshold_simpl::
  UniProt_ID ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->UniProt_ID ();
  }

  bool transition_threshold_simpl::
  PR_ID_present ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->PR_ID_present ();
  }

  ::std::string transition_threshold_simpl::
  PR_ID ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->PR_ID ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

