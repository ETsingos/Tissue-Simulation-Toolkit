// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "microenvironment-simpl.hpp"

namespace microenvironment
{
  // domain_simpl
  //

  void domain_simpl::
  pre (const ::microenvironment::domain& x)
  {
    this->domain_simpl_state_.domain_ = &x;
  }

  bool domain_simpl::
  name_present ()
  {
    return this->domain_simpl_state_.domain_->name_present ();
  }

  ::std::string domain_simpl::
  name ()
  {
    return this->domain_simpl_state_.domain_->name ();
  }

  bool domain_simpl::
  variables_present ()
  {
    return this->domain_simpl_state_.domain_->variables_present ();
  }

  const ::variables::list_of_variables& domain_simpl::
  variables ()
  {
    return this->domain_simpl_state_.domain_->variables ();
  }

  bool domain_simpl::
  experimental_condition_present ()
  {
    return this->domain_simpl_state_.domain_->experimental_condition_present ();
  }

  const ::variables::experimental_conditions& domain_simpl::
  experimental_condition ()
  {
    return this->domain_simpl_state_.domain_->experimental_condition ();
  }

  bool domain_simpl::
  mesh_present ()
  {
    return this->domain_simpl_state_.domain_->mesh_present ();
  }

  const ::mesh::mesh& domain_simpl::
  mesh ()
  {
    return this->domain_simpl_state_.domain_->mesh ();
  }

  bool domain_simpl::
  data_present ()
  {
    return this->domain_simpl_state_.domain_->data_present ();
  }

  const ::variables::data& domain_simpl::
  data ()
  {
    return this->domain_simpl_state_.domain_->data ();
  }

  bool domain_simpl::
  custom_present ()
  {
    return this->domain_simpl_state_.domain_->custom_present ();
  }

  const ::common::custom& domain_simpl::
  custom ()
  {
    return this->domain_simpl_state_.domain_->custom ();
  }

  // microenvironment_simpl
  //

  void microenvironment_simpl::
  pre (const ::microenvironment::microenvironment& x)
  {
    this->microenvironment_simpl_state_.microenvironment_ = &x;
    this->microenvironment_simpl_state_.domain_ = 
    this->microenvironment_simpl_state_.microenvironment_->domain ().begin ();
    this->microenvironment_simpl_state_.domain_end_ = 
    this->microenvironment_simpl_state_.microenvironment_->domain ().end ();
    this->microenvironment_simpl_state_.vascular_network_ = 
    this->microenvironment_simpl_state_.microenvironment_->vascular_network ().begin ();
    this->microenvironment_simpl_state_.vascular_network_end_ = 
    this->microenvironment_simpl_state_.microenvironment_->vascular_network ().end ();
    this->microenvironment_simpl_state_.basement_membrane_ = 
    this->microenvironment_simpl_state_.microenvironment_->basement_membrane ().begin ();
    this->microenvironment_simpl_state_.basement_membrane_end_ = 
    this->microenvironment_simpl_state_.microenvironment_->basement_membrane ().end ();
  }

  bool microenvironment_simpl::
  domain_next ()
  {
    return this->microenvironment_simpl_state_.domain_ != 
    this->microenvironment_simpl_state_.domain_end_;
  }

  const ::microenvironment::domain& microenvironment_simpl::
  domain ()
  {
    return *this->microenvironment_simpl_state_.domain_++;
  }

  bool microenvironment_simpl::
  vascular_network_next ()
  {
    return this->microenvironment_simpl_state_.vascular_network_ != 
    this->microenvironment_simpl_state_.vascular_network_end_;
  }

  const ::vascular::vascular_network& microenvironment_simpl::
  vascular_network ()
  {
    return *this->microenvironment_simpl_state_.vascular_network_++;
  }

  bool microenvironment_simpl::
  basement_membrane_next ()
  {
    return this->microenvironment_simpl_state_.basement_membrane_ != 
    this->microenvironment_simpl_state_.basement_membrane_end_;
  }

  const ::basement::basement_membrane& microenvironment_simpl::
  basement_membrane ()
  {
    return *this->microenvironment_simpl_state_.basement_membrane_++;
  }

  bool microenvironment_simpl::
  custom_present ()
  {
    return this->microenvironment_simpl_state_.microenvironment_->custom_present ();
  }

  const ::common::custom& microenvironment_simpl::
  custom ()
  {
    return this->microenvironment_simpl_state_.microenvironment_->custom ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

