// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_CYCLE_IPP
#define CELL_CYCLE_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

#include "variables.ipp"

#include "phenotype_base.ipp"

namespace cell_cycle
{
  // death_type
  //

  inline
  death_type::
  death_type ()
  {
  }

  inline
  death_type::
  death_type (value_type v)
  {
    value_ = v;
  }

  inline
  void death_type::
  value (value_type v)
  {
    value_ = v;
  }

  // death_rate_type
  //

  inline
  const ::cell_cycle::death_type& death_rate_type::
  type () const
  {
    return this->type_;
  }

  inline
  ::cell_cycle::death_type& death_rate_type::
  type ()
  {
    return this->type_;
  }

  inline
  void death_rate_type::
  type (const ::cell_cycle::death_type& x)
  {
    this->type_ = x;
  }

  // cell_cycle_arrest
  //

  inline
  bool cell_cycle_arrest::
  condition_present () const
  {
    return this->condition_ != 0;
  }

  inline
  const ::cell_cycle::arrest_condition& cell_cycle_arrest::
  condition () const
  {
    return *this->condition_;
  }

  inline
  ::cell_cycle::arrest_condition& cell_cycle_arrest::
  condition ()
  {
    return *this->condition_;
  }

  inline
  void cell_cycle_arrest::
  condition (::cell_cycle::arrest_condition* x)
  {
    delete this->condition_;
    this->condition_ = x;
  }

  inline
  ::cell_cycle::arrest_condition* cell_cycle_arrest::
  condition_detach ()
  {
    ::cell_cycle::arrest_condition* r = this->condition_;
    this->condition_ = 0;
    return r;
  }

  // transition
  //

  inline
  bool transition::
  checkpoint_failure_probability_present () const
  {
    return this->checkpoint_failure_probability_ != 0;
  }

  inline
  const ::common::units_decimal& transition::
  checkpoint_failure_probability () const
  {
    return *this->checkpoint_failure_probability_;
  }

  inline
  ::common::units_decimal& transition::
  checkpoint_failure_probability ()
  {
    return *this->checkpoint_failure_probability_;
  }

  inline
  void transition::
  checkpoint_failure_probability (::common::units_decimal* x)
  {
    delete this->checkpoint_failure_probability_;
    this->checkpoint_failure_probability_ = x;
  }

  inline
  ::common::units_decimal* transition::
  checkpoint_failure_probability_detach ()
  {
    ::common::units_decimal* r = this->checkpoint_failure_probability_;
    this->checkpoint_failure_probability_ = 0;
    return r;
  }

  inline
  bool transition::
  subsequent_phase_present () const
  {
    return this->subsequent_phase_present_;
  }

  inline
  void transition::
  subsequent_phase_present (bool x)
  {
    this->subsequent_phase_present_ = x;
  }

  inline
  unsigned long long transition::
  subsequent_phase () const
  {
    return this->subsequent_phase_;
  }

  inline
  unsigned long long& transition::
  subsequent_phase ()
  {
    return this->subsequent_phase_;
  }

  inline
  void transition::
  subsequent_phase (unsigned long long x)
  {
    this->subsequent_phase_ = x;
    this->subsequent_phase_present_ = true;
  }

  inline
  const transition::threshold_sequence& transition::
  threshold () const
  {
    return this->threshold_;
  }

  inline
  transition::threshold_sequence& transition::
  threshold ()
  {
    return this->threshold_;
  }

  inline
  bool transition::
  transition_rate_present () const
  {
    return this->transition_rate_ != 0;
  }

  inline
  const ::common::units_decimal& transition::
  transition_rate () const
  {
    return *this->transition_rate_;
  }

  inline
  ::common::units_decimal& transition::
  transition_rate ()
  {
    return *this->transition_rate_;
  }

  inline
  void transition::
  transition_rate (::common::units_decimal* x)
  {
    delete this->transition_rate_;
    this->transition_rate_ = x;
  }

  inline
  ::common::units_decimal* transition::
  transition_rate_detach ()
  {
    ::common::units_decimal* r = this->transition_rate_;
    this->transition_rate_ = 0;
    return r;
  }

  // cell_cycle_phase
  //

  inline
  const ::std::string& cell_cycle_phase::
  name () const
  {
    return this->name_;
  }

  inline
  ::std::string& cell_cycle_phase::
  name ()
  {
    return this->name_;
  }

  inline
  void cell_cycle_phase::
  name (const ::std::string& x)
  {
    this->name_ = x;
  }

  inline
  bool cell_cycle_phase::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void cell_cycle_phase::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned long long cell_cycle_phase::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned long long& cell_cycle_phase::
  ID ()
  {
    return this->ID_;
  }

  inline
  void cell_cycle_phase::
  ID (unsigned long long x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  bool cell_cycle_phase::
  birth_rate_present () const
  {
    return this->birth_rate_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& cell_cycle_phase::
  birth_rate () const
  {
    return *this->birth_rate_;
  }

  inline
  ::common::units_decimal_nonnegative& cell_cycle_phase::
  birth_rate ()
  {
    return *this->birth_rate_;
  }

  inline
  void cell_cycle_phase::
  birth_rate (::common::units_decimal_nonnegative* x)
  {
    delete this->birth_rate_;
    this->birth_rate_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* cell_cycle_phase::
  birth_rate_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->birth_rate_;
    this->birth_rate_ = 0;
    return r;
  }

  inline
  bool cell_cycle_phase::
  duration_present () const
  {
    return this->duration_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& cell_cycle_phase::
  duration () const
  {
    return *this->duration_;
  }

  inline
  ::common::units_decimal_nonnegative& cell_cycle_phase::
  duration ()
  {
    return *this->duration_;
  }

  inline
  void cell_cycle_phase::
  duration (::common::units_decimal_nonnegative* x)
  {
    delete this->duration_;
    this->duration_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* cell_cycle_phase::
  duration_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->duration_;
    this->duration_ = 0;
    return r;
  }

  inline
  const cell_cycle_phase::death_rate_sequence& cell_cycle_phase::
  death_rate () const
  {
    return this->death_rate_;
  }

  inline
  cell_cycle_phase::death_rate_sequence& cell_cycle_phase::
  death_rate ()
  {
    return this->death_rate_;
  }

  inline
  bool cell_cycle_phase::
  net_birth_rate_present () const
  {
    return this->net_birth_rate_ != 0;
  }

  inline
  const ::common::units_decimal& cell_cycle_phase::
  net_birth_rate () const
  {
    return *this->net_birth_rate_;
  }

  inline
  ::common::units_decimal& cell_cycle_phase::
  net_birth_rate ()
  {
    return *this->net_birth_rate_;
  }

  inline
  void cell_cycle_phase::
  net_birth_rate (::common::units_decimal* x)
  {
    delete this->net_birth_rate_;
    this->net_birth_rate_ = x;
  }

  inline
  ::common::units_decimal* cell_cycle_phase::
  net_birth_rate_detach ()
  {
    ::common::units_decimal* r = this->net_birth_rate_;
    this->net_birth_rate_ = 0;
    return r;
  }

  inline
  bool cell_cycle_phase::
  population_doubling_time_present () const
  {
    return this->population_doubling_time_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& cell_cycle_phase::
  population_doubling_time () const
  {
    return *this->population_doubling_time_;
  }

  inline
  ::common::units_decimal_nonnegative& cell_cycle_phase::
  population_doubling_time ()
  {
    return *this->population_doubling_time_;
  }

  inline
  void cell_cycle_phase::
  population_doubling_time (::common::units_decimal_nonnegative* x)
  {
    delete this->population_doubling_time_;
    this->population_doubling_time_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* cell_cycle_phase::
  population_doubling_time_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->population_doubling_time_;
    this->population_doubling_time_ = 0;
    return r;
  }

  inline
  bool cell_cycle_phase::
  cell_cycle_arrest_present () const
  {
    return this->cell_cycle_arrest_ != 0;
  }

  inline
  const ::cell_cycle::cell_cycle_arrest& cell_cycle_phase::
  cell_cycle_arrest () const
  {
    return *this->cell_cycle_arrest_;
  }

  inline
  ::cell_cycle::cell_cycle_arrest& cell_cycle_phase::
  cell_cycle_arrest ()
  {
    return *this->cell_cycle_arrest_;
  }

  inline
  void cell_cycle_phase::
  cell_cycle_arrest (::cell_cycle::cell_cycle_arrest* x)
  {
    delete this->cell_cycle_arrest_;
    this->cell_cycle_arrest_ = x;
  }

  inline
  ::cell_cycle::cell_cycle_arrest* cell_cycle_phase::
  cell_cycle_arrest_detach ()
  {
    ::cell_cycle::cell_cycle_arrest* r = this->cell_cycle_arrest_;
    this->cell_cycle_arrest_ = 0;
    return r;
  }

  inline
  const cell_cycle_phase::transition_sequence& cell_cycle_phase::
  transition () const
  {
    return this->transition_;
  }

  inline
  cell_cycle_phase::transition_sequence& cell_cycle_phase::
  transition ()
  {
    return this->transition_;
  }

  inline
  const cell_cycle_phase::cell_part_sequence& cell_cycle_phase::
  cell_part () const
  {
    return this->cell_part_;
  }

  inline
  cell_cycle_phase::cell_part_sequence& cell_cycle_phase::
  cell_part ()
  {
    return this->cell_part_;
  }

  inline
  bool cell_cycle_phase::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& cell_cycle_phase::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& cell_cycle_phase::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void cell_cycle_phase::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* cell_cycle_phase::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // summary_elements
  //

  inline
  bool summary_elements::
  birth_rate_present () const
  {
    return this->birth_rate_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& summary_elements::
  birth_rate () const
  {
    return *this->birth_rate_;
  }

  inline
  ::common::units_decimal_nonnegative& summary_elements::
  birth_rate ()
  {
    return *this->birth_rate_;
  }

  inline
  void summary_elements::
  birth_rate (::common::units_decimal_nonnegative* x)
  {
    delete this->birth_rate_;
    this->birth_rate_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* summary_elements::
  birth_rate_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->birth_rate_;
    this->birth_rate_ = 0;
    return r;
  }

  inline
  bool summary_elements::
  duration_present () const
  {
    return this->duration_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& summary_elements::
  duration () const
  {
    return *this->duration_;
  }

  inline
  ::common::units_decimal_nonnegative& summary_elements::
  duration ()
  {
    return *this->duration_;
  }

  inline
  void summary_elements::
  duration (::common::units_decimal_nonnegative* x)
  {
    delete this->duration_;
    this->duration_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* summary_elements::
  duration_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->duration_;
    this->duration_ = 0;
    return r;
  }

  inline
  const summary_elements::death_rate_sequence& summary_elements::
  death_rate () const
  {
    return this->death_rate_;
  }

  inline
  summary_elements::death_rate_sequence& summary_elements::
  death_rate ()
  {
    return this->death_rate_;
  }

  inline
  bool summary_elements::
  net_birth_rate_present () const
  {
    return this->net_birth_rate_ != 0;
  }

  inline
  const ::common::units_decimal& summary_elements::
  net_birth_rate () const
  {
    return *this->net_birth_rate_;
  }

  inline
  ::common::units_decimal& summary_elements::
  net_birth_rate ()
  {
    return *this->net_birth_rate_;
  }

  inline
  void summary_elements::
  net_birth_rate (::common::units_decimal* x)
  {
    delete this->net_birth_rate_;
    this->net_birth_rate_ = x;
  }

  inline
  ::common::units_decimal* summary_elements::
  net_birth_rate_detach ()
  {
    ::common::units_decimal* r = this->net_birth_rate_;
    this->net_birth_rate_ = 0;
    return r;
  }

  inline
  bool summary_elements::
  population_doubling_time_present () const
  {
    return this->population_doubling_time_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& summary_elements::
  population_doubling_time () const
  {
    return *this->population_doubling_time_;
  }

  inline
  ::common::units_decimal_nonnegative& summary_elements::
  population_doubling_time ()
  {
    return *this->population_doubling_time_;
  }

  inline
  void summary_elements::
  population_doubling_time (::common::units_decimal_nonnegative* x)
  {
    delete this->population_doubling_time_;
    this->population_doubling_time_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* summary_elements::
  population_doubling_time_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->population_doubling_time_;
    this->population_doubling_time_ = 0;
    return r;
  }

  // cell_cycle
  //

  inline
  const ::std::string& cell_cycle::
  model () const
  {
    return this->model_;
  }

  inline
  ::std::string& cell_cycle::
  model ()
  {
    return this->model_;
  }

  inline
  void cell_cycle::
  model (const ::std::string& x)
  {
    this->model_ = x;
  }

  inline
  bool cell_cycle::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void cell_cycle::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned long long cell_cycle::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned long long& cell_cycle::
  ID ()
  {
    return this->ID_;
  }

  inline
  void cell_cycle::
  ID (unsigned long long x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  const cell_cycle::cell_cycle_phase_sequence& cell_cycle::
  cell_cycle_phase () const
  {
    return this->cell_cycle_phase_;
  }

  inline
  cell_cycle::cell_cycle_phase_sequence& cell_cycle::
  cell_cycle_phase ()
  {
    return this->cell_cycle_phase_;
  }

  inline
  const cell_cycle::cell_death_sequence& cell_cycle::
  cell_death () const
  {
    return this->cell_death_;
  }

  inline
  cell_cycle::cell_death_sequence& cell_cycle::
  cell_death ()
  {
    return this->cell_death_;
  }

  inline
  bool cell_cycle::
  summary_elements_present () const
  {
    return this->summary_elements_ != 0;
  }

  inline
  const ::cell_cycle::summary_elements& cell_cycle::
  summary_elements () const
  {
    return *this->summary_elements_;
  }

  inline
  ::cell_cycle::summary_elements& cell_cycle::
  summary_elements ()
  {
    return *this->summary_elements_;
  }

  inline
  void cell_cycle::
  summary_elements (::cell_cycle::summary_elements* x)
  {
    delete this->summary_elements_;
    this->summary_elements_ = x;
  }

  inline
  ::cell_cycle::summary_elements* cell_cycle::
  summary_elements_detach ()
  {
    ::cell_cycle::summary_elements* r = this->summary_elements_;
    this->summary_elements_ = 0;
    return r;
  }

  inline
  bool cell_cycle::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& cell_cycle::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& cell_cycle::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void cell_cycle::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* cell_cycle::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // cell_death
  //

  inline
  const ::cell_cycle::death_type& cell_death::
  type () const
  {
    return this->type_;
  }

  inline
  ::cell_cycle::death_type& cell_death::
  type ()
  {
    return this->type_;
  }

  inline
  void cell_death::
  type (const ::cell_cycle::death_type& x)
  {
    this->type_ = x;
  }

  inline
  bool cell_death::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void cell_death::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned long long cell_death::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned long long& cell_death::
  ID ()
  {
    return this->ID_;
  }

  inline
  void cell_death::
  ID (unsigned long long x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  const ::common::units_decimal& cell_death::
  duration () const
  {
    return *this->duration_;
  }

  inline
  ::common::units_decimal& cell_death::
  duration ()
  {
    return *this->duration_;
  }

  inline
  void cell_death::
  duration (::common::units_decimal* x)
  {
    delete this->duration_;
    this->duration_ = x;
  }

  inline
  ::common::units_decimal* cell_death::
  duration_detach ()
  {
    ::common::units_decimal* r = this->duration_;
    this->duration_ = 0;
    return r;
  }

  inline
  const cell_death::cell_part_sequence& cell_death::
  cell_part () const
  {
    return this->cell_part_;
  }

  inline
  cell_death::cell_part_sequence& cell_death::
  cell_part ()
  {
    return this->cell_part_;
  }

  inline
  bool cell_death::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& cell_death::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& cell_death::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void cell_death::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* cell_death::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // arrest_type
  //

  inline
  arrest_type::
  arrest_type ()
  {
  }

  inline
  arrest_type::
  arrest_type (value_type v)
  {
    value_ = v;
  }

  inline
  void arrest_type::
  value (value_type v)
  {
    value_ = v;
  }

  // arrest_condition
  //

  inline
  bool arrest_condition::
  type_present () const
  {
    return this->type_present_;
  }

  inline
  void arrest_condition::
  type_present (bool x)
  {
    this->type_present_ = x;
  }

  inline
  const ::cell_cycle::arrest_type& arrest_condition::
  type () const
  {
    return this->type_;
  }

  inline
  ::cell_cycle::arrest_type& arrest_condition::
  type ()
  {
    return this->type_;
  }

  inline
  void arrest_condition::
  type (const ::cell_cycle::arrest_type& x)
  {
    this->type_ = x;
    this->type_present_ = true;
  }

  // cycles_and_deaths
  //

  inline
  const cycles_and_deaths::cell_cycle_sequence& cycles_and_deaths::
  cell_cycle () const
  {
    return this->cell_cycle_;
  }

  inline
  cycles_and_deaths::cell_cycle_sequence& cycles_and_deaths::
  cell_cycle ()
  {
    return this->cell_cycle_;
  }

  inline
  const cycles_and_deaths::cell_death_sequence& cycles_and_deaths::
  cell_death () const
  {
    return this->cell_death_;
  }

  inline
  cycles_and_deaths::cell_death_sequence& cycles_and_deaths::
  cell_death ()
  {
    return this->cell_death_;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // CELL_CYCLE_IPP
