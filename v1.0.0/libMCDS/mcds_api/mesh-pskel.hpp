// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MESH_PSKEL_HPP
#define MESH_PSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
namespace mesh
{
  class bounding_box_pskel;
  class mesh_pskel;
  class list_of_voxels_pskel;
  class voxel_pskel;
  class node_pskel;
  class edge_pskel;
  class face_pskel;
  class int_list_xpath_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/parser/map.hxx>
#include <xsde/cxx/parser/substitution-map-callback.hxx>
#include <xsde/cxx/parser/substitution-map-load.hxx>
#include <xsde/cxx/parser/validating/inheritance-map-load.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "mesh.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser map interface and default implementation.
  //
  using ::xsde::cxx::parser::parser_map;
  using ::xsde::cxx::parser::parser_map_impl;

  // Parser substitution map callack.
  //
  using ::xsde::cxx::parser::parser_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::parser::parser_smap_buckets;
  using ::xsde::cxx::parser::parser_smap_elements;
  using ::xsde::cxx::parser::validating::parser_imap_buckets;
  using ::xsde::cxx::parser::validating::parser_imap_elements;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "common-pskel.hpp"

namespace mesh
{
  class bounding_box_pskel: public ::common::units_double_list_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::std::string&);

    virtual ::mesh::bounding_box*
    post_bounding_box () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::double_pskel& /* double_list item */,
             ::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */,
             ::xml_schema::string_pskel& /* type */);

    // Individual attribute parsers.
    //
    void
    type_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    bounding_box_pskel (::common::units_double_list_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_double_list*
    post_units_double_list ();

    protected:
    bounding_box_pskel* bounding_box_impl_;
    bounding_box_pskel (bounding_box_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* type_parser_;
  };

  class mesh_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::std::string&);

    virtual void
    uniform (bool);

    virtual void
    regular (bool);

    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    bounding_box (::mesh::bounding_box*);

    virtual void
    x_coordinates (::common::units_double_list*);

    virtual void
    y_coordinates (::common::units_double_list*);

    virtual void
    z_coordinates (::common::units_double_list*);

    virtual void
    voxels (::mesh::list_of_voxels*);

    virtual void
    custom (::common::custom*);

    virtual ::mesh::mesh*
    post_mesh () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* type */,
             ::xml_schema::boolean_pskel& /* uniform */,
             ::xml_schema::boolean_pskel& /* regular */,
             ::xml_schema::string_pskel& /* units */,
             ::mesh::bounding_box_pskel& /* bounding_box */,
             ::common::units_double_list_pskel& /* x_coordinates */,
             ::common::units_double_list_pskel& /* y_coordinates */,
             ::common::units_double_list_pskel& /* z_coordinates */,
             ::mesh::list_of_voxels_pskel& /* voxels */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* bounding_box */,
                 ::xml_schema::parser_map& /* x_coordinates */,
                 ::xml_schema::parser_map& /* y_coordinates */,
                 ::xml_schema::parser_map& /* z_coordinates */,
                 ::xml_schema::parser_map& /* voxels */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    type_parser (::xml_schema::string_pskel&);

    void
    uniform_parser (::xml_schema::boolean_pskel&);

    void
    regular_parser (::xml_schema::boolean_pskel&);

    void
    units_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    bounding_box_parser (::mesh::bounding_box_pskel&);

    void
    bounding_box_parser (::xml_schema::parser_map&);

    void
    x_coordinates_parser (::common::units_double_list_pskel&);

    void
    x_coordinates_parser (::xml_schema::parser_map&);

    void
    y_coordinates_parser (::common::units_double_list_pskel&);

    void
    y_coordinates_parser (::xml_schema::parser_map&);

    void
    z_coordinates_parser (::common::units_double_list_pskel&);

    void
    z_coordinates_parser (::xml_schema::parser_map&);

    void
    voxels_parser (::mesh::list_of_voxels_pskel&);

    void
    voxels_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    mesh_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    mesh_pskel* mesh_impl_;
    mesh_pskel (mesh_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* type_parser_;
    ::xml_schema::boolean_pskel* uniform_parser_;
    ::xml_schema::boolean_pskel* regular_parser_;
    ::xml_schema::string_pskel* units_parser_;
    ::mesh::bounding_box_pskel* bounding_box_parser_;
    ::xml_schema::parser_map* bounding_box_parser_map_;

    ::common::units_double_list_pskel* x_coordinates_parser_;
    ::xml_schema::parser_map* x_coordinates_parser_map_;

    ::common::units_double_list_pskel* y_coordinates_parser_;
    ::xml_schema::parser_map* y_coordinates_parser_map_;

    ::common::units_double_list_pskel* z_coordinates_parser_;
    ::xml_schema::parser_map* z_coordinates_parser_map_;

    ::mesh::list_of_voxels_pskel* voxels_parser_;
    ::xml_schema::parser_map* voxels_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::mesh::mesh_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[6UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class list_of_voxels_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::common::data_storage_formats&);

    // Elements.
    //
    virtual void
    filename (const ::std::string&);

    virtual void
    voxel (::mesh::voxel*);

    virtual void
    custom (::common::custom*);

    virtual ::mesh::list_of_voxels*
    post_list_of_voxels () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::data_storage_formats_pskel& /* type */,
             ::xml_schema::string_pskel& /* filename */,
             ::mesh::voxel_pskel& /* voxel */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* filename */,
                 ::xml_schema::parser_map& /* voxel */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    type_parser (::common::data_storage_formats_pskel&);

    // Individual element parsers.
    //
    void
    filename_parser (::xml_schema::string_pskel&);

    void
    filename_parser (::xml_schema::parser_map&);

    void
    voxel_parser (::mesh::voxel_pskel&);

    void
    voxel_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    list_of_voxels_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    list_of_voxels_pskel* list_of_voxels_impl_;
    list_of_voxels_pskel (list_of_voxels_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::common::data_storage_formats_pskel* type_parser_;
    ::xml_schema::string_pskel* filename_parser_;
    ::xml_schema::parser_map* filename_parser_map_;

    ::mesh::voxel_pskel* voxel_parser_;
    ::xml_schema::parser_map* voxel_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::mesh::list_of_voxels_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class voxel_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    virtual void
    type (const ::std::string&);

    // Elements.
    //
    virtual void
    center (::common::units_double_list*);

    virtual void
    volume (::common::units_decimal_nonnegative*);

    virtual void
    custom (::common::custom*);

    virtual ::mesh::voxel*
    post_voxel () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* ID */,
             ::xml_schema::string_pskel& /* type */,
             ::common::units_double_list_pskel& /* center */,
             ::common::units_decimal_nonnegative_pskel& /* volume */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* center */,
                 ::xml_schema::parser_map& /* volume */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_int_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    center_parser (::common::units_double_list_pskel&);

    void
    center_parser (::xml_schema::parser_map&);

    void
    volume_parser (::common::units_decimal_nonnegative_pskel&);

    void
    volume_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    voxel_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    voxel_pskel* voxel_impl_;
    voxel_pskel (voxel_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* ID_parser_;
    ::xml_schema::string_pskel* type_parser_;
    ::common::units_double_list_pskel* center_parser_;
    ::xml_schema::parser_map* center_parser_map_;

    ::common::units_decimal_nonnegative_pskel* volume_parser_;
    ::xml_schema::parser_map* volume_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::mesh::voxel_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[3UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class node_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    position (::common::units_double_list*);

    virtual void
    custom (::common::custom*);

    virtual ::mesh::node*
    post_node () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* ID */,
             ::common::units_double_list_pskel& /* position */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* position */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_int_pskel&);

    // Individual element parsers.
    //
    void
    position_parser (::common::units_double_list_pskel&);

    void
    position_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    node_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    node_pskel* node_impl_;
    node_pskel (node_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* ID_parser_;
    ::common::units_double_list_pskel* position_parser_;
    ::xml_schema::parser_map* position_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::mesh::node_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class edge_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    node_ID (unsigned int);

    virtual ::mesh::edge*
    post_edge () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* ID */,
             ::xml_schema::unsigned_int_pskel& /* node_ID */);

    void
    parser_maps (::xml_schema::parser_map& /* node_ID */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_int_pskel&);

    // Individual element parsers.
    //
    void
    node_ID_parser (::xml_schema::unsigned_int_pskel&);

    void
    node_ID_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    edge_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    edge_pskel* edge_impl_;
    edge_pskel (edge_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* ID_parser_;
    ::xml_schema::unsigned_int_pskel* node_ID_parser_;
    ::xml_schema::parser_map* node_ID_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::mesh::edge_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class face_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    edge_ID (unsigned int);

    virtual ::mesh::face*
    post_face () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* ID */,
             ::xml_schema::unsigned_int_pskel& /* edge_ID */);

    void
    parser_maps (::xml_schema::parser_map& /* edge_ID */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_int_pskel&);

    // Individual element parsers.
    //
    void
    edge_ID_parser (::xml_schema::unsigned_int_pskel&);

    void
    edge_ID_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    face_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    face_pskel* face_impl_;
    face_pskel (face_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* ID_parser_;
    ::xml_schema::unsigned_int_pskel* edge_ID_parser_;
    ::xml_schema::parser_map* edge_ID_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::mesh::face_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class int_list_xpath_pskel: public ::common::unsigned_int_list_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    xpath (const ::std::string&);

    virtual void
    grouping_number (unsigned short);

    virtual ::mesh::int_list_xpath*
    post_int_list_xpath () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* unsigned_int_list item */,
             ::xml_schema::string_pskel& /* xpath */,
             ::xml_schema::unsigned_short_pskel& /* grouping_number */);

    // Individual attribute parsers.
    //
    void
    xpath_parser (::xml_schema::string_pskel&);

    void
    grouping_number_parser (::xml_schema::unsigned_short_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    int_list_xpath_pskel (::common::unsigned_int_list_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::unsigned_int_list*
    post_unsigned_int_list ();

    protected:
    int_list_xpath_pskel* int_list_xpath_impl_;
    int_list_xpath_pskel (int_list_xpath_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* xpath_parser_;
    ::xml_schema::unsigned_short_pskel* grouping_number_parser_;
  };
}

#include "mesh-pskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // MESH_PSKEL_HPP
