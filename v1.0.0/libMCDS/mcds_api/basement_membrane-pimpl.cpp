// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "basement_membrane-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace basement
{
  // basement_edge_pimpl
  //

  basement_edge_pimpl::
  basement_edge_pimpl (bool b)
  : basement_edge_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->basement_edge_pimpl_base_ = b;
    this->basement_edge_pimpl_state_.basement_edge_ = 0;
  }

  basement_edge_pimpl::
  ~basement_edge_pimpl ()
  {
    if (!this->basement_edge_pimpl_base_ && this->basement_edge_pimpl_state_.basement_edge_)
      delete this->basement_edge_pimpl_state_.basement_edge_;
  }

  void basement_edge_pimpl::
  _reset ()
  {
    basement_edge_pskel::_reset ();

    if (!this->basement_edge_pimpl_base_ && this->basement_edge_pimpl_state_.basement_edge_)
    {
      delete this->basement_edge_pimpl_state_.basement_edge_;
      this->basement_edge_pimpl_state_.basement_edge_ = 0;
    }
  }

  void basement_edge_pimpl::
  pre_impl (::basement::basement_edge* x)
  {
    this->basement_edge_pimpl_state_.basement_edge_ = x;
    this->base_impl_.pre_impl (x);
  }

  void basement_edge_pimpl::
  pre ()
  {
    ::basement::basement_edge* x = new ::basement::basement_edge;
    this->pre_impl (x);
  }

  void basement_edge_pimpl::
  tensile_strength (::common::units_decimal_nonnegative* x)
  {
    this->basement_edge_pimpl_state_.basement_edge_->tensile_strength (x);
  }

  void basement_edge_pimpl::
  custom (::common::custom* x)
  {
    this->basement_edge_pimpl_state_.basement_edge_->custom (x);
  }

  ::basement::basement_edge* basement_edge_pimpl::
  post_basement_edge ()
  {
    this->base_impl_.post_edge ();
    ::basement::basement_edge* r = this->basement_edge_pimpl_state_.basement_edge_;
    this->basement_edge_pimpl_state_.basement_edge_ = 0;
    return r;
  }

  // basement_face_pimpl
  //

  basement_face_pimpl::
  basement_face_pimpl (bool b)
  : basement_face_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->basement_face_pimpl_base_ = b;
    this->basement_face_pimpl_state_.basement_face_ = 0;
  }

  basement_face_pimpl::
  ~basement_face_pimpl ()
  {
    if (!this->basement_face_pimpl_base_ && this->basement_face_pimpl_state_.basement_face_)
      delete this->basement_face_pimpl_state_.basement_face_;
  }

  void basement_face_pimpl::
  _reset ()
  {
    basement_face_pskel::_reset ();

    if (!this->basement_face_pimpl_base_ && this->basement_face_pimpl_state_.basement_face_)
    {
      delete this->basement_face_pimpl_state_.basement_face_;
      this->basement_face_pimpl_state_.basement_face_ = 0;
    }
  }

  void basement_face_pimpl::
  pre_impl (::basement::basement_face* x)
  {
    this->basement_face_pimpl_state_.basement_face_ = x;
    this->base_impl_.pre_impl (x);
  }

  void basement_face_pimpl::
  pre ()
  {
    ::basement::basement_face* x = new ::basement::basement_face;
    this->pre_impl (x);
  }

  void basement_face_pimpl::
  thickness (::common::units_decimal_nonnegative* x)
  {
    this->basement_face_pimpl_state_.basement_face_->thickness (x);
  }

  void basement_face_pimpl::
  custom (::common::custom* x)
  {
    this->basement_face_pimpl_state_.basement_face_->custom (x);
  }

  ::basement::basement_face* basement_face_pimpl::
  post_basement_face ()
  {
    this->base_impl_.post_face ();
    ::basement::basement_face* r = this->basement_face_pimpl_state_.basement_face_;
    this->basement_face_pimpl_state_.basement_face_ = 0;
    return r;
  }

  // nodes_pimpl
  //

  nodes_pimpl::
  nodes_pimpl (bool b)
  : nodes_pimpl_state_ (sizeof (nodes_pimpl_state ), &nodes_pimpl_state_first_)
  {
    this->nodes_pimpl_base_ = b;
  }

  nodes_pimpl::
  ~nodes_pimpl ()
  {
    for (; !this->nodes_pimpl_state_.empty (); this->nodes_pimpl_state_.pop ())
    {
      if (!this->nodes_pimpl_base_ && static_cast< nodes_pimpl_state* > (this->nodes_pimpl_state_.top ())->nodes_)
        delete static_cast< nodes_pimpl_state* > (this->nodes_pimpl_state_.top ())->nodes_;
    }
  }

  void nodes_pimpl::
  _reset ()
  {
    nodes_pskel::_reset ();

    for (; !this->nodes_pimpl_state_.empty (); this->nodes_pimpl_state_.pop ())
    {
      if (!this->nodes_pimpl_base_ && static_cast< nodes_pimpl_state* > (this->nodes_pimpl_state_.top ())->nodes_)
        delete static_cast< nodes_pimpl_state* > (this->nodes_pimpl_state_.top ())->nodes_;
    }
  }

  void nodes_pimpl::
  pre_impl (::basement::nodes* x)
  {
    this->nodes_pimpl_state_.push ();
    static_cast< nodes_pimpl_state* > (this->nodes_pimpl_state_.top ())->nodes_ = x;
  }

  void nodes_pimpl::
  pre ()
  {
    ::basement::nodes* x = new ::basement::nodes;
    this->pre_impl (x);
  }

  void nodes_pimpl::
  node (::mesh::node* x)
  {
    static_cast< nodes_pimpl_state* > (this->nodes_pimpl_state_.top ())->nodes_->node (x);
  }

  void nodes_pimpl::
  custom (::common::custom* x)
  {
    static_cast< nodes_pimpl_state* > (this->nodes_pimpl_state_.top ())->nodes_->custom (x);
  }

  ::basement::nodes* nodes_pimpl::
  post_nodes ()
  {
    ::basement::nodes* r = static_cast< nodes_pimpl_state* > (this->nodes_pimpl_state_.top ())->nodes_;
    this->nodes_pimpl_state_.pop ();
    return r;
  }

  // egdes_pimpl
  //

  egdes_pimpl::
  egdes_pimpl (bool b)
  {
    this->egdes_pimpl_base_ = b;
    this->egdes_pimpl_state_.egdes_ = 0;
  }

  egdes_pimpl::
  ~egdes_pimpl ()
  {
    if (!this->egdes_pimpl_base_ && this->egdes_pimpl_state_.egdes_)
      delete this->egdes_pimpl_state_.egdes_;
  }

  void egdes_pimpl::
  _reset ()
  {
    egdes_pskel::_reset ();

    if (!this->egdes_pimpl_base_ && this->egdes_pimpl_state_.egdes_)
    {
      delete this->egdes_pimpl_state_.egdes_;
      this->egdes_pimpl_state_.egdes_ = 0;
    }
  }

  void egdes_pimpl::
  pre_impl (::basement::egdes* x)
  {
    this->egdes_pimpl_state_.egdes_ = x;
  }

  void egdes_pimpl::
  pre ()
  {
    ::basement::egdes* x = new ::basement::egdes;
    this->pre_impl (x);
  }

  void egdes_pimpl::
  edge (::basement::basement_edge* x)
  {
    this->egdes_pimpl_state_.egdes_->edge (x);
  }

  void egdes_pimpl::
  custom (::common::custom* x)
  {
    this->egdes_pimpl_state_.egdes_->custom (x);
  }

  ::basement::egdes* egdes_pimpl::
  post_egdes ()
  {
    ::basement::egdes* r = this->egdes_pimpl_state_.egdes_;
    this->egdes_pimpl_state_.egdes_ = 0;
    return r;
  }

  // faces_pimpl
  //

  faces_pimpl::
  faces_pimpl (bool b)
  {
    this->faces_pimpl_base_ = b;
    this->faces_pimpl_state_.faces_ = 0;
  }

  faces_pimpl::
  ~faces_pimpl ()
  {
    if (!this->faces_pimpl_base_ && this->faces_pimpl_state_.faces_)
      delete this->faces_pimpl_state_.faces_;
  }

  void faces_pimpl::
  _reset ()
  {
    faces_pskel::_reset ();

    if (!this->faces_pimpl_base_ && this->faces_pimpl_state_.faces_)
    {
      delete this->faces_pimpl_state_.faces_;
      this->faces_pimpl_state_.faces_ = 0;
    }
  }

  void faces_pimpl::
  pre_impl (::basement::faces* x)
  {
    this->faces_pimpl_state_.faces_ = x;
  }

  void faces_pimpl::
  pre ()
  {
    ::basement::faces* x = new ::basement::faces;
    this->pre_impl (x);
  }

  void faces_pimpl::
  face (::basement::basement_face* x)
  {
    this->faces_pimpl_state_.faces_->face (x);
  }

  void faces_pimpl::
  custom (::common::custom* x)
  {
    this->faces_pimpl_state_.faces_->custom (x);
  }

  ::basement::faces* faces_pimpl::
  post_faces ()
  {
    ::basement::faces* r = this->faces_pimpl_state_.faces_;
    this->faces_pimpl_state_.faces_ = 0;
    return r;
  }

  // basement_membrane_pimpl
  //

  basement_membrane_pimpl::
  basement_membrane_pimpl (bool b)
  {
    this->basement_membrane_pimpl_base_ = b;
    this->basement_membrane_pimpl_state_.basement_membrane_ = 0;
  }

  basement_membrane_pimpl::
  ~basement_membrane_pimpl ()
  {
    if (!this->basement_membrane_pimpl_base_ && this->basement_membrane_pimpl_state_.basement_membrane_)
      delete this->basement_membrane_pimpl_state_.basement_membrane_;
  }

  void basement_membrane_pimpl::
  _reset ()
  {
    basement_membrane_pskel::_reset ();

    if (!this->basement_membrane_pimpl_base_ && this->basement_membrane_pimpl_state_.basement_membrane_)
    {
      delete this->basement_membrane_pimpl_state_.basement_membrane_;
      this->basement_membrane_pimpl_state_.basement_membrane_ = 0;
    }
  }

  void basement_membrane_pimpl::
  pre_impl (::basement::basement_membrane* x)
  {
    this->basement_membrane_pimpl_state_.basement_membrane_ = x;
  }

  void basement_membrane_pimpl::
  pre ()
  {
    ::basement::basement_membrane* x = new ::basement::basement_membrane;
    this->pre_impl (x);
  }

  void basement_membrane_pimpl::
  ID (unsigned int x)
  {
    this->basement_membrane_pimpl_state_.basement_membrane_->ID (x);
  }

  void basement_membrane_pimpl::
  nodes (::basement::nodes* x)
  {
    this->basement_membrane_pimpl_state_.basement_membrane_->nodes (x);
  }

  void basement_membrane_pimpl::
  edges (::basement::egdes* x)
  {
    this->basement_membrane_pimpl_state_.basement_membrane_->edges (x);
  }

  void basement_membrane_pimpl::
  faces (::basement::faces* x)
  {
    this->basement_membrane_pimpl_state_.basement_membrane_->faces (x);
  }

  void basement_membrane_pimpl::
  custom (::common::custom* x)
  {
    this->basement_membrane_pimpl_state_.basement_membrane_->custom (x);
  }

  ::basement::basement_membrane* basement_membrane_pimpl::
  post_basement_membrane ()
  {
    ::basement::basement_membrane* r = this->basement_membrane_pimpl_state_.basement_membrane_;
    this->basement_membrane_pimpl_state_.basement_membrane_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

