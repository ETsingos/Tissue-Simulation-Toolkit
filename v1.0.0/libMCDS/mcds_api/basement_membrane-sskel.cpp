// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "basement_membrane-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

namespace basement
{
  // basement_edge_sskel
  //

  void basement_edge_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::mesh::edge_sskel base;
    base::_reset ();

    this->resetting_ = true;

    if (this->tensile_strength_serializer_)
      this->tensile_strength_serializer_->_reset ();

    if (this->tensile_strength_serializer_map_)
      this->tensile_strength_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* basement_edge_sskel::
  _static_type ()
  {
    return "basement_edge basement";
  }

  const char* basement_edge_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void basement_edge_sskel::
  pre (const ::mesh::edge& x)
  {
    assert (this->edge_impl_);
    this->edge_impl_->pre (x);
  }

  unsigned int basement_edge_sskel::
  ID ()
  {
    assert (this->edge_impl_);
    return this->edge_impl_->ID ();
  }

  bool basement_edge_sskel::
  node_ID_next ()
  {
    assert (this->edge_impl_);
    return this->edge_impl_->node_ID_next ();
  }

  unsigned int basement_edge_sskel::
  node_ID ()
  {
    assert (this->edge_impl_);
    return this->edge_impl_->node_ID ();
  }

  void basement_edge_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::mesh::edge_sskel base;
    base::_serialize_content ();

    // tensile_strength
    //
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->tensile_strength ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->tensile_strength_serializer_ != 0)
        s = this->tensile_strength_serializer_;
      else if (this->tensile_strength_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_nonnegative_sskel* > (
          this->tensile_strength_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_nonnegative_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("tensile_strength");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // basement_face_sskel
  //

  void basement_face_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::mesh::face_sskel base;
    base::_reset ();

    this->resetting_ = true;

    if (this->thickness_serializer_)
      this->thickness_serializer_->_reset ();

    if (this->thickness_serializer_map_)
      this->thickness_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* basement_face_sskel::
  _static_type ()
  {
    return "basement_face basement";
  }

  const char* basement_face_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void basement_face_sskel::
  pre (const ::mesh::face& x)
  {
    assert (this->face_impl_);
    this->face_impl_->pre (x);
  }

  unsigned int basement_face_sskel::
  ID ()
  {
    assert (this->face_impl_);
    return this->face_impl_->ID ();
  }

  bool basement_face_sskel::
  edge_ID_next ()
  {
    assert (this->face_impl_);
    return this->face_impl_->edge_ID_next ();
  }

  unsigned int basement_face_sskel::
  edge_ID ()
  {
    assert (this->face_impl_);
    return this->face_impl_->edge_ID ();
  }

  void basement_face_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::mesh::face_sskel base;
    base::_serialize_content ();

    // thickness
    //
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->thickness ();

      const void* t = ctx.type_id ();
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->thickness_serializer_ != 0)
        s = this->thickness_serializer_;
      else if (this->thickness_serializer_map_ != 0)
        s = static_cast< ::common::units_decimal_nonnegative_sskel* > (
          this->thickness_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::units_decimal_nonnegative_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("thickness");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // nodes_sskel
  //

  void nodes_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->node_serializer_)
      this->node_serializer_->_reset ();

    if (this->node_serializer_map_)
      this->node_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* nodes_sskel::
  _static_type ()
  {
    return "nodes basement";
  }

  const char* nodes_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void nodes_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // node
    //
    {
      ctx.type_id (0);
      const ::mesh::node& r = this->node ();

      const void* t = ctx.type_id ();
      ::mesh::node_sskel* s = 0;

      if (t == 0 && this->node_serializer_ != 0)
        s = this->node_serializer_;
      else if (this->node_serializer_map_ != 0)
        s = static_cast< ::mesh::node_sskel* > (
          this->node_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::mesh::node_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("node");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // egdes_sskel
  //

  void egdes_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->edge_serializer_)
      this->edge_serializer_->_reset ();

    if (this->edge_serializer_map_)
      this->edge_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* egdes_sskel::
  _static_type ()
  {
    return "egdes basement";
  }

  const char* egdes_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void egdes_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // edge
    //
    {
      ctx.type_id (0);
      const ::basement::basement_edge& r = this->edge ();

      const void* t = ctx.type_id ();
      ::basement::basement_edge_sskel* s = 0;

      if (t == 0 && this->edge_serializer_ != 0)
        s = this->edge_serializer_;
      else if (this->edge_serializer_map_ != 0)
        s = static_cast< ::basement::basement_edge_sskel* > (
          this->edge_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::basement::basement_edge_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("edge");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // faces_sskel
  //

  void faces_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->face_serializer_)
      this->face_serializer_->_reset ();

    if (this->face_serializer_map_)
      this->face_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* faces_sskel::
  _static_type ()
  {
    return "faces basement";
  }

  const char* faces_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void faces_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // face
    //
    {
      ctx.type_id (0);
      const ::basement::basement_face& r = this->face ();

      const void* t = ctx.type_id ();
      ::basement::basement_face_sskel* s = 0;

      if (t == 0 && this->face_serializer_ != 0)
        s = this->face_serializer_;
      else if (this->face_serializer_map_ != 0)
        s = static_cast< ::basement::basement_face_sskel* > (
          this->face_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::basement::basement_face_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("face");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }

  // basement_membrane_sskel
  //

  bool basement_membrane_sskel::
  ID_present ()
  {
    return this->basement_membrane_impl_ ? this->basement_membrane_impl_->ID_present () : false;
  }

  void basement_membrane_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::non_validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->nodes_serializer_)
      this->nodes_serializer_->_reset ();

    if (this->nodes_serializer_map_)
      this->nodes_serializer_map_->reset ();

    if (this->edges_serializer_)
      this->edges_serializer_->_reset ();

    if (this->edges_serializer_map_)
      this->edges_serializer_map_->reset ();

    if (this->faces_serializer_)
      this->faces_serializer_->_reset ();

    if (this->faces_serializer_map_)
      this->faces_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* basement_membrane_sskel::
  _static_type ()
  {
    return "basement_membrane basement";
  }

  const char* basement_membrane_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void basement_membrane_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned int r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);
        this->ID_serializer_->_serialize_content ();
        this->ID_serializer_->_post_impl ();
        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }
  }

  void basement_membrane_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // nodes
    //
    {
      ctx.type_id (0);
      const ::basement::nodes& r = this->nodes ();

      const void* t = ctx.type_id ();
      ::basement::nodes_sskel* s = 0;

      if (t == 0 && this->nodes_serializer_ != 0)
        s = this->nodes_serializer_;
      else if (this->nodes_serializer_map_ != 0)
        s = static_cast< ::basement::nodes_sskel* > (
          this->nodes_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::basement::nodes_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("nodes");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // edges
    //
    {
      ctx.type_id (0);
      const ::basement::egdes& r = this->edges ();

      const void* t = ctx.type_id ();
      ::basement::egdes_sskel* s = 0;

      if (t == 0 && this->edges_serializer_ != 0)
        s = this->edges_serializer_;
      else if (this->edges_serializer_map_ != 0)
        s = static_cast< ::basement::egdes_sskel* > (
          this->edges_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::basement::egdes_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("edges");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // faces
    //
    {
      ctx.type_id (0);
      const ::basement::faces& r = this->faces ();

      const void* t = ctx.type_id ();
      ::basement::faces_sskel* s = 0;

      if (t == 0 && this->faces_serializer_ != 0)
        s = this->faces_serializer_;
      else if (this->faces_serializer_map_ != 0)
        s = static_cast< ::basement::faces_sskel* > (
          this->faces_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::basement::faces_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("faces");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
        s = static_cast< ::common::custom_sskel* > (
          this->custom_serializer_map_->find (t));

      if (s)
      {
        s->pre (r);

        const char* dt = 0;
        if (t != 0)
        {
          dt = s->_dynamic_type ();
          if (strcmp (dt, ::common::custom_sskel::_static_type ()) == 0)
            dt = 0;
        }

        this->_start_element ("custom");

        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);
        s->_serialize_attributes ();
        s->_serialize_content ();
        s->_post_impl ();
        this->_end_element ();
        s->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

