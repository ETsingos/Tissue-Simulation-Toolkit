// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PKPD_SSKEL_HPP
#define PKPD_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_SERIALIZER_VALIDATION
#error the XSD/e runtime uses validation while the generated code does not (reconfigure the runtime or remove --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace pkpd
{
  class pharmacokinetics_sskel;
  class drug_sskel;
  class drug_dose_sskel;
  class drug_pk_sskel;
  class dose_sskel;
  class therapy_sskel;
  class response_sskel;
  class response_observation_sskel;
  class pharmacodynamics_sskel;
  class therapy_measurement_set_sskel;
  class PKPD_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>

#include <xsde/cxx/serializer/non-validating/serializer.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/non-validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "pkpd.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::non_validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::non_validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::non_validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::non_validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::non_validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::non_validating::byte_sskel;
  using ::xsde::cxx::serializer::non_validating::byte_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::non_validating::short_sskel;
  using ::xsde::cxx::serializer::non_validating::short_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::non_validating::int_sskel;
  using ::xsde::cxx::serializer::non_validating::int_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::non_validating::long_sskel;
  using ::xsde::cxx::serializer::non_validating::long_simpl;

  using ::xsde::cxx::serializer::non_validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::non_validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::non_validating::integer_sskel;
  using ::xsde::cxx::serializer::non_validating::integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::non_validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::non_validating::boolean_sskel;
  using ::xsde::cxx::serializer::non_validating::boolean_simpl;

  using ::xsde::cxx::serializer::non_validating::float_sskel;
  using ::xsde::cxx::serializer::non_validating::float_simpl;

  using ::xsde::cxx::serializer::non_validating::double_sskel;
  using ::xsde::cxx::serializer::non_validating::double_simpl;

  using ::xsde::cxx::serializer::non_validating::decimal_sskel;
  using ::xsde::cxx::serializer::non_validating::decimal_simpl;

  using ::xsde::cxx::serializer::non_validating::string_sskel;
  using ::xsde::cxx::serializer::non_validating::string_simpl;

  using ::xsde::cxx::serializer::non_validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::non_validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::non_validating::token_sskel;
  using ::xsde::cxx::serializer::non_validating::token_simpl;

  using ::xsde::cxx::serializer::non_validating::name_sskel;
  using ::xsde::cxx::serializer::non_validating::name_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::non_validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::non_validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::non_validating::ncname_sskel;
  using ::xsde::cxx::serializer::non_validating::ncname_simpl;

  using ::xsde::cxx::serializer::non_validating::language_sskel;
  using ::xsde::cxx::serializer::non_validating::language_simpl;

  using ::xsde::cxx::serializer::non_validating::id_sskel;
  using ::xsde::cxx::serializer::non_validating::id_simpl;

  using ::xsde::cxx::serializer::non_validating::idref_sskel;
  using ::xsde::cxx::serializer::non_validating::idref_simpl;

  using ::xsde::cxx::serializer::non_validating::idrefs_sskel;
  using ::xsde::cxx::serializer::non_validating::idrefs_simpl;

  using ::xsde::cxx::serializer::non_validating::uri_sskel;
  using ::xsde::cxx::serializer::non_validating::uri_simpl;

  using ::xsde::cxx::serializer::non_validating::qname_sskel;
  using ::xsde::cxx::serializer::non_validating::qname_simpl;

  using ::xsde::cxx::serializer::non_validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::non_validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::non_validating::date_sskel;
  using ::xsde::cxx::serializer::non_validating::date_simpl;

  using ::xsde::cxx::serializer::non_validating::date_time_sskel;
  using ::xsde::cxx::serializer::non_validating::date_time_simpl;

  using ::xsde::cxx::serializer::non_validating::duration_sskel;
  using ::xsde::cxx::serializer::non_validating::duration_simpl;

  using ::xsde::cxx::serializer::non_validating::gday_sskel;
  using ::xsde::cxx::serializer::non_validating::gday_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_simpl;

  using ::xsde::cxx::serializer::non_validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::non_validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_simpl;

  using ::xsde::cxx::serializer::non_validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::non_validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::non_validating::time_sskel;
  using ::xsde::cxx::serializer::non_validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "common-sskel.hpp"

#include "variables-sskel.hpp"

namespace pkpd
{
  class pharmacokinetics_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::pharmacokinetics&) = 0;

    // Elements.
    //
    virtual bool
    inactivation_rate_present ();

    virtual const ::common::units_decimal&
    inactivation_rate () = 0;

    virtual bool
    half_life_present ();

    virtual const ::common::units_decimal&
    half_life () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_sskel& /* inactivation_rate */,
                 ::common::units_decimal_sskel& /* half_life */);

    void
    serializer_maps (::xml_schema::serializer_map& /* inactivation_rate */,
                     ::xml_schema::serializer_map& /* half_life */);

    // Individual element serializers.
    //
    void
    inactivation_rate_serializer (::common::units_decimal_sskel&);

    void
    inactivation_rate_serializer (::xml_schema::serializer_map&);

    void
    half_life_serializer (::common::units_decimal_sskel&);

    void
    half_life_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    pharmacokinetics_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    pharmacokinetics_sskel* pharmacokinetics_impl_;
    pharmacokinetics_sskel (pharmacokinetics_sskel*, void*);

    protected:
    ::common::units_decimal_sskel* inactivation_rate_serializer_;
    ::xml_schema::serializer_map* inactivation_rate_serializer_map_;

    ::common::units_decimal_sskel* half_life_serializer_;
    ::xml_schema::serializer_map* half_life_serializer_map_;
  };

  class drug_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::drug&) = 0;

    // Attributes.
    //
    virtual bool
    any_attribute_next ();

    virtual void
    any_attribute (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any_attribute ();

    // Elements.
    //
    enum choice_arm_tag
    {
      dose_tag,
      pharmacokinetics_tag
    };

    virtual choice_arm_tag
    choice_arm () = 0;

    virtual const ::pkpd::dose&
    dose () = 0;

    virtual const ::pkpd::pharmacokinetics&
    pharmacokinetics () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::pkpd::dose_sskel& /* dose */,
                 ::pkpd::pharmacokinetics_sskel& /* pharmacokinetics */);

    void
    serializer_maps (::xml_schema::serializer_map& /* dose */,
                     ::xml_schema::serializer_map& /* pharmacokinetics */);

    // Individual element serializers.
    //
    void
    dose_serializer (::pkpd::dose_sskel&);

    void
    dose_serializer (::xml_schema::serializer_map&);

    void
    pharmacokinetics_serializer (::pkpd::pharmacokinetics_sskel&);

    void
    pharmacokinetics_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    drug_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    drug_sskel* drug_impl_;
    drug_sskel (drug_sskel*, void*);

    protected:
    ::pkpd::dose_sskel* dose_serializer_;
    ::xml_schema::serializer_map* dose_serializer_map_;

    ::pkpd::pharmacokinetics_sskel* pharmacokinetics_serializer_;
    ::xml_schema::serializer_map* pharmacokinetics_serializer_map_;
  };

  class drug_dose_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::drug_dose&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned short
    ID () = 0;

    virtual bool
    ChEBI_ID_present ();

    virtual ::std::string
    ChEBI_ID () = 0;

    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID () = 0;

    virtual bool
    DrugBank_ID_present ();

    virtual ::std::string
    DrugBank_ID () = 0;

    virtual bool
    GMO_ID_present ();

    virtual ::std::string
    GMO_ID () = 0;

    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID () = 0;

    virtual bool
    UniProt_ID_present ();

    virtual ::std::string
    UniProt_ID () = 0;

    virtual bool
    PR_ID_present ();

    virtual ::std::string
    PR_ID () = 0;

    virtual bool
    name_present ();

    virtual ::std::string
    name () = 0;

    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // Elements.
    //
    virtual const ::pkpd::dose&
    dose () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_short_sskel& /* ID */,
                 ::xml_schema::string_sskel& /* ChEBI_ID */,
                 ::xml_schema::string_sskel& /* MeSH_ID */,
                 ::xml_schema::string_sskel& /* DrugBank_ID */,
                 ::xml_schema::string_sskel& /* GMO_ID */,
                 ::xml_schema::string_sskel& /* GO_ID */,
                 ::xml_schema::string_sskel& /* UniProt_ID */,
                 ::xml_schema::string_sskel& /* PR_ID */,
                 ::xml_schema::string_sskel& /* name */,
                 ::xml_schema::string_sskel& /* units */,
                 ::pkpd::dose_sskel& /* dose */);

    void
    serializer_maps (::xml_schema::serializer_map& /* dose */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_short_sskel&);

    void
    ChEBI_ID_serializer (::xml_schema::string_sskel&);

    void
    MeSH_ID_serializer (::xml_schema::string_sskel&);

    void
    DrugBank_ID_serializer (::xml_schema::string_sskel&);

    void
    GMO_ID_serializer (::xml_schema::string_sskel&);

    void
    GO_ID_serializer (::xml_schema::string_sskel&);

    void
    UniProt_ID_serializer (::xml_schema::string_sskel&);

    void
    PR_ID_serializer (::xml_schema::string_sskel&);

    void
    name_serializer (::xml_schema::string_sskel&);

    void
    units_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    dose_serializer (::pkpd::dose_sskel&);

    void
    dose_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    drug_dose_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    drug_dose_sskel* drug_dose_impl_;
    drug_dose_sskel (drug_dose_sskel*, void*);

    protected:
    ::xml_schema::unsigned_short_sskel* ID_serializer_;
    ::xml_schema::string_sskel* ChEBI_ID_serializer_;
    ::xml_schema::string_sskel* MeSH_ID_serializer_;
    ::xml_schema::string_sskel* DrugBank_ID_serializer_;
    ::xml_schema::string_sskel* GMO_ID_serializer_;
    ::xml_schema::string_sskel* GO_ID_serializer_;
    ::xml_schema::string_sskel* UniProt_ID_serializer_;
    ::xml_schema::string_sskel* PR_ID_serializer_;
    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::string_sskel* units_serializer_;
    ::pkpd::dose_sskel* dose_serializer_;
    ::xml_schema::serializer_map* dose_serializer_map_;
  };

  class drug_pk_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::drug_pk&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned short
    ID () = 0;

    virtual bool
    ChEBI_ID_present ();

    virtual ::std::string
    ChEBI_ID () = 0;

    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID () = 0;

    virtual bool
    DrugBank_ID_present ();

    virtual ::std::string
    DrugBank_ID () = 0;

    virtual bool
    GMO_ID_present ();

    virtual ::std::string
    GMO_ID () = 0;

    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID () = 0;

    virtual bool
    UniProt_ID_present ();

    virtual ::std::string
    UniProt_ID () = 0;

    virtual bool
    PR_ID_present ();

    virtual ::std::string
    PR_ID () = 0;

    virtual bool
    name_present ();

    virtual ::std::string
    name () = 0;

    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // Elements.
    //
    virtual bool
    pharmacokinetics_present ();

    virtual const ::pkpd::pharmacokinetics&
    pharmacokinetics () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_short_sskel& /* ID */,
                 ::xml_schema::string_sskel& /* ChEBI_ID */,
                 ::xml_schema::string_sskel& /* MeSH_ID */,
                 ::xml_schema::string_sskel& /* DrugBank_ID */,
                 ::xml_schema::string_sskel& /* GMO_ID */,
                 ::xml_schema::string_sskel& /* GO_ID */,
                 ::xml_schema::string_sskel& /* UniProt_ID */,
                 ::xml_schema::string_sskel& /* PR_ID */,
                 ::xml_schema::string_sskel& /* name */,
                 ::xml_schema::string_sskel& /* units */,
                 ::pkpd::pharmacokinetics_sskel& /* pharmacokinetics */);

    void
    serializer_maps (::xml_schema::serializer_map& /* pharmacokinetics */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_short_sskel&);

    void
    ChEBI_ID_serializer (::xml_schema::string_sskel&);

    void
    MeSH_ID_serializer (::xml_schema::string_sskel&);

    void
    DrugBank_ID_serializer (::xml_schema::string_sskel&);

    void
    GMO_ID_serializer (::xml_schema::string_sskel&);

    void
    GO_ID_serializer (::xml_schema::string_sskel&);

    void
    UniProt_ID_serializer (::xml_schema::string_sskel&);

    void
    PR_ID_serializer (::xml_schema::string_sskel&);

    void
    name_serializer (::xml_schema::string_sskel&);

    void
    units_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    pharmacokinetics_serializer (::pkpd::pharmacokinetics_sskel&);

    void
    pharmacokinetics_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    drug_pk_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    drug_pk_sskel* drug_pk_impl_;
    drug_pk_sskel (drug_pk_sskel*, void*);

    protected:
    ::xml_schema::unsigned_short_sskel* ID_serializer_;
    ::xml_schema::string_sskel* ChEBI_ID_serializer_;
    ::xml_schema::string_sskel* MeSH_ID_serializer_;
    ::xml_schema::string_sskel* DrugBank_ID_serializer_;
    ::xml_schema::string_sskel* GMO_ID_serializer_;
    ::xml_schema::string_sskel* GO_ID_serializer_;
    ::xml_schema::string_sskel* UniProt_ID_serializer_;
    ::xml_schema::string_sskel* PR_ID_serializer_;
    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::string_sskel* units_serializer_;
    ::pkpd::pharmacokinetics_sskel* pharmacokinetics_serializer_;
    ::xml_schema::serializer_map* pharmacokinetics_serializer_map_;
  };

  class dose_sskel: public ::common::units_decimal_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::dose&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual ::std::string
    type () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::xml_schema::string_sskel& /* type */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    dose_sskel (::common::units_decimal_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_decimal&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    dose_sskel* dose_impl_;
    dose_sskel (dose_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* type_serializer_;
  };

  class therapy_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::therapy&) = 0;

    // Elements.
    //
    virtual bool
    drug_next () = 0;

    virtual const ::pkpd::drug_dose&
    drug () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::pkpd::drug_dose_sskel& /* drug */);

    void
    serializer_maps (::xml_schema::serializer_map& /* drug */);

    // Individual element serializers.
    //
    void
    drug_serializer (::pkpd::drug_dose_sskel&);

    void
    drug_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    therapy_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    therapy_sskel* therapy_impl_;
    therapy_sskel (therapy_sskel*, void*);

    protected:
    ::pkpd::drug_dose_sskel* drug_serializer_;
    ::xml_schema::serializer_map* drug_serializer_map_;
  };

  class response_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::response&) = 0;

    // Elements.
    //
    virtual bool
    maximum_birth_inhibition_present ();

    virtual const ::common::units_decimal&
    maximum_birth_inhibition () = 0;

    virtual bool
    maximum_birth_inhibition_time_present ();

    virtual const ::common::units_decimal&
    maximum_birth_inhibition_time () = 0;

    virtual bool
    birth_inhibition_recovery_rate_present ();

    virtual const ::common::units_decimal&
    birth_inhibition_recovery_rate () = 0;

    virtual bool
    maximum_death_rate_present ();

    virtual const ::common::units_decimal&
    maximum_death_rate () = 0;

    virtual bool
    maximum_death_time_present ();

    virtual const ::common::units_decimal&
    maximum_death_time () = 0;

    virtual bool
    death_recovery_rate_present ();

    virtual const ::common::units_decimal&
    death_recovery_rate () = 0;

    virtual bool
    response_observation_next ();

    virtual const ::pkpd::response_observation&
    response_observation () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_sskel& /* maximum_birth_inhibition */,
                 ::common::units_decimal_sskel& /* maximum_birth_inhibition_time */,
                 ::common::units_decimal_sskel& /* birth_inhibition_recovery_rate */,
                 ::common::units_decimal_sskel& /* maximum_death_rate */,
                 ::common::units_decimal_sskel& /* maximum_death_time */,
                 ::common::units_decimal_sskel& /* death_recovery_rate */,
                 ::pkpd::response_observation_sskel& /* response_observation */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* maximum_birth_inhibition */,
                     ::xml_schema::serializer_map& /* maximum_birth_inhibition_time */,
                     ::xml_schema::serializer_map& /* birth_inhibition_recovery_rate */,
                     ::xml_schema::serializer_map& /* maximum_death_rate */,
                     ::xml_schema::serializer_map& /* maximum_death_time */,
                     ::xml_schema::serializer_map& /* death_recovery_rate */,
                     ::xml_schema::serializer_map& /* response_observation */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    maximum_birth_inhibition_serializer (::common::units_decimal_sskel&);

    void
    maximum_birth_inhibition_serializer (::xml_schema::serializer_map&);

    void
    maximum_birth_inhibition_time_serializer (::common::units_decimal_sskel&);

    void
    maximum_birth_inhibition_time_serializer (::xml_schema::serializer_map&);

    void
    birth_inhibition_recovery_rate_serializer (::common::units_decimal_sskel&);

    void
    birth_inhibition_recovery_rate_serializer (::xml_schema::serializer_map&);

    void
    maximum_death_rate_serializer (::common::units_decimal_sskel&);

    void
    maximum_death_rate_serializer (::xml_schema::serializer_map&);

    void
    maximum_death_time_serializer (::common::units_decimal_sskel&);

    void
    maximum_death_time_serializer (::xml_schema::serializer_map&);

    void
    death_recovery_rate_serializer (::common::units_decimal_sskel&);

    void
    death_recovery_rate_serializer (::xml_schema::serializer_map&);

    void
    response_observation_serializer (::pkpd::response_observation_sskel&);

    void
    response_observation_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    response_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    response_sskel* response_impl_;
    response_sskel (response_sskel*, void*);

    protected:
    ::common::units_decimal_sskel* maximum_birth_inhibition_serializer_;
    ::xml_schema::serializer_map* maximum_birth_inhibition_serializer_map_;

    ::common::units_decimal_sskel* maximum_birth_inhibition_time_serializer_;
    ::xml_schema::serializer_map* maximum_birth_inhibition_time_serializer_map_;

    ::common::units_decimal_sskel* birth_inhibition_recovery_rate_serializer_;
    ::xml_schema::serializer_map* birth_inhibition_recovery_rate_serializer_map_;

    ::common::units_decimal_sskel* maximum_death_rate_serializer_;
    ::xml_schema::serializer_map* maximum_death_rate_serializer_map_;

    ::common::units_decimal_sskel* maximum_death_time_serializer_;
    ::xml_schema::serializer_map* maximum_death_time_serializer_map_;

    ::common::units_decimal_sskel* death_recovery_rate_serializer_;
    ::xml_schema::serializer_map* death_recovery_rate_serializer_map_;

    ::pkpd::response_observation_sskel* response_observation_serializer_;
    ::xml_schema::serializer_map* response_observation_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class response_observation_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::response_observation&) = 0;

    // Elements.
    //
    virtual bool
    time_present ();

    virtual const ::common::units_decimal&
    time () = 0;

    virtual bool
    birth_rate_present ();

    virtual const ::common::units_decimal_nonnegative&
    birth_rate () = 0;

    virtual bool
    death_rate_present ();

    virtual const ::common::units_decimal_nonnegative&
    death_rate () = 0;

    virtual bool
    net_birth_rate_present ();

    virtual const ::common::units_decimal&
    net_birth_rate () = 0;

    virtual bool
    net_death_rate_present ();

    virtual const ::common::units_decimal&
    net_death_rate () = 0;

    virtual bool
    apoptotic_duration_present ();

    virtual const ::common::units_decimal&
    apoptotic_duration () = 0;

    virtual bool
    percent_cell_viability_present ();

    virtual const ::common::units_decimal&
    percent_cell_viability () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_sskel& /* time */,
                 ::common::units_decimal_nonnegative_sskel& /* birth_rate */,
                 ::common::units_decimal_nonnegative_sskel& /* death_rate */,
                 ::common::units_decimal_sskel& /* net_birth_rate */,
                 ::common::units_decimal_sskel& /* net_death_rate */,
                 ::common::units_decimal_sskel& /* apoptotic_duration */,
                 ::common::units_decimal_sskel& /* percent_cell_viability */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* time */,
                     ::xml_schema::serializer_map& /* birth_rate */,
                     ::xml_schema::serializer_map& /* death_rate */,
                     ::xml_schema::serializer_map& /* net_birth_rate */,
                     ::xml_schema::serializer_map& /* net_death_rate */,
                     ::xml_schema::serializer_map& /* apoptotic_duration */,
                     ::xml_schema::serializer_map& /* percent_cell_viability */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    time_serializer (::common::units_decimal_sskel&);

    void
    time_serializer (::xml_schema::serializer_map&);

    void
    birth_rate_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    birth_rate_serializer (::xml_schema::serializer_map&);

    void
    death_rate_serializer (::common::units_decimal_nonnegative_sskel&);

    void
    death_rate_serializer (::xml_schema::serializer_map&);

    void
    net_birth_rate_serializer (::common::units_decimal_sskel&);

    void
    net_birth_rate_serializer (::xml_schema::serializer_map&);

    void
    net_death_rate_serializer (::common::units_decimal_sskel&);

    void
    net_death_rate_serializer (::xml_schema::serializer_map&);

    void
    apoptotic_duration_serializer (::common::units_decimal_sskel&);

    void
    apoptotic_duration_serializer (::xml_schema::serializer_map&);

    void
    percent_cell_viability_serializer (::common::units_decimal_sskel&);

    void
    percent_cell_viability_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    response_observation_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    response_observation_sskel* response_observation_impl_;
    response_observation_sskel (response_observation_sskel*, void*);

    protected:
    ::common::units_decimal_sskel* time_serializer_;
    ::xml_schema::serializer_map* time_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* birth_rate_serializer_;
    ::xml_schema::serializer_map* birth_rate_serializer_map_;

    ::common::units_decimal_nonnegative_sskel* death_rate_serializer_;
    ::xml_schema::serializer_map* death_rate_serializer_map_;

    ::common::units_decimal_sskel* net_birth_rate_serializer_;
    ::xml_schema::serializer_map* net_birth_rate_serializer_map_;

    ::common::units_decimal_sskel* net_death_rate_serializer_;
    ::xml_schema::serializer_map* net_death_rate_serializer_map_;

    ::common::units_decimal_sskel* apoptotic_duration_serializer_;
    ::xml_schema::serializer_map* apoptotic_duration_serializer_map_;

    ::common::units_decimal_sskel* percent_cell_viability_serializer_;
    ::xml_schema::serializer_map* percent_cell_viability_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class pharmacodynamics_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::pharmacodynamics&) = 0;

    // Elements.
    //
    virtual bool
    therapy_measurement_set_next () = 0;

    virtual const ::pkpd::therapy_measurement_set&
    therapy_measurement_set () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::pkpd::therapy_measurement_set_sskel& /* therapy_measurement_set */);

    void
    serializer_maps (::xml_schema::serializer_map& /* therapy_measurement_set */);

    // Individual element serializers.
    //
    void
    therapy_measurement_set_serializer (::pkpd::therapy_measurement_set_sskel&);

    void
    therapy_measurement_set_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    pharmacodynamics_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    pharmacodynamics_sskel* pharmacodynamics_impl_;
    pharmacodynamics_sskel (pharmacodynamics_sskel*, void*);

    protected:
    ::pkpd::therapy_measurement_set_sskel* therapy_measurement_set_serializer_;
    ::xml_schema::serializer_map* therapy_measurement_set_serializer_map_;
  };

  class therapy_measurement_set_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::therapy_measurement_set&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned short
    ID () = 0;

    virtual bool
    any_attribute_next ();

    virtual void
    any_attribute (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any_attribute ();

    // Elements.
    //
    virtual const ::pkpd::therapy&
    therapy () = 0;

    virtual const ::pkpd::response&
    response () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_short_sskel& /* ID */,
                 ::pkpd::therapy_sskel& /* therapy */,
                 ::pkpd::response_sskel& /* response */);

    void
    serializer_maps (::xml_schema::serializer_map& /* therapy */,
                     ::xml_schema::serializer_map& /* response */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_short_sskel&);

    // Individual element serializers.
    //
    void
    therapy_serializer (::pkpd::therapy_sskel&);

    void
    therapy_serializer (::xml_schema::serializer_map&);

    void
    response_serializer (::pkpd::response_sskel&);

    void
    response_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    therapy_measurement_set_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    therapy_measurement_set_sskel* therapy_measurement_set_impl_;
    therapy_measurement_set_sskel (therapy_measurement_set_sskel*, void*);

    protected:
    ::xml_schema::unsigned_short_sskel* ID_serializer_;
    ::pkpd::therapy_sskel* therapy_serializer_;
    ::xml_schema::serializer_map* therapy_serializer_map_;

    ::pkpd::response_sskel* response_serializer_;
    ::xml_schema::serializer_map* response_serializer_map_;
  };

  class PKPD_sskel: public ::xsde::cxx::serializer::non_validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pkpd::PKPD&) = 0;

    // Elements.
    //
    virtual bool
    drug_next ();

    virtual const ::pkpd::drug_pk&
    drug () = 0;

    virtual bool
    pharmacodynamics_present ();

    virtual const ::pkpd::pharmacodynamics&
    pharmacodynamics () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::pkpd::drug_pk_sskel& /* drug */,
                 ::pkpd::pharmacodynamics_sskel& /* pharmacodynamics */);

    void
    serializer_maps (::xml_schema::serializer_map& /* drug */,
                     ::xml_schema::serializer_map& /* pharmacodynamics */);

    // Individual element serializers.
    //
    void
    drug_serializer (::pkpd::drug_pk_sskel&);

    void
    drug_serializer (::xml_schema::serializer_map&);

    void
    pharmacodynamics_serializer (::pkpd::pharmacodynamics_sskel&);

    void
    pharmacodynamics_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    PKPD_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    PKPD_sskel* PKPD_impl_;
    PKPD_sskel (PKPD_sskel*, void*);

    protected:
    ::pkpd::drug_pk_sskel* drug_serializer_;
    ::xml_schema::serializer_map* drug_serializer_map_;

    ::pkpd::pharmacodynamics_sskel* pharmacodynamics_serializer_;
    ::xml_schema::serializer_map* pharmacodynamics_serializer_map_;
  };
}

#include "pkpd-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PKPD_SSKEL_HPP
