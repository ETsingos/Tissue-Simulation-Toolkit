// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MICROENVIRONMENT_SIMPL_HPP
#define MICROENVIRONMENT_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define MICROENVIRONMENT_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "microenvironment-sskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-simpl.hpp"

#include "mesh-simpl.hpp"

#include "basement_membrane-simpl.hpp"

#include "vascular-simpl.hpp"

#include "variables-simpl.hpp"

namespace microenvironment
{
  class domain_simpl: public domain_sskel
  {
    public:
    virtual void
    pre (const ::microenvironment::domain&);

    // Attributes.
    //
    virtual bool
    name_present ();

    virtual ::std::string
    name ();

    // Elements.
    //
    virtual bool
    variables_present ();

    virtual const ::variables::list_of_variables&
    variables ();

    virtual bool
    experimental_condition_present ();

    virtual const ::variables::experimental_conditions&
    experimental_condition ();

    virtual bool
    mesh_present ();

    virtual const ::mesh::mesh&
    mesh ();

    virtual bool
    data_present ();

    virtual const ::variables::data&
    data ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct domain_simpl_state
    {
      const ::microenvironment::domain* domain_;
    };

    domain_simpl_state domain_simpl_state_;
  };

  class microenvironment_simpl: public microenvironment_sskel
  {
    public:
    virtual void
    pre (const ::microenvironment::microenvironment&);

    // Elements.
    //
    virtual bool
    domain_next ();

    virtual const ::microenvironment::domain&
    domain ();

    virtual bool
    vascular_network_next ();

    virtual const ::vascular::vascular_network&
    vascular_network ();

    virtual bool
    basement_membrane_next ();

    virtual const ::basement::basement_membrane&
    basement_membrane ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct microenvironment_simpl_state
    {
      const ::microenvironment::microenvironment* microenvironment_;
      ::microenvironment::microenvironment::domain_const_iterator domain_;
      ::microenvironment::microenvironment::domain_const_iterator domain_end_;
      ::microenvironment::microenvironment::vascular_network_const_iterator vascular_network_;
      ::microenvironment::microenvironment::vascular_network_const_iterator vascular_network_end_;
      ::microenvironment::microenvironment::basement_membrane_const_iterator basement_membrane_;
      ::microenvironment::microenvironment::basement_membrane_const_iterator basement_membrane_end_;
    };

    microenvironment_simpl_state microenvironment_simpl_state_;
  };
}

#ifdef MICROENVIRONMENT_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // MICROENVIRONMENT_SIMPL_HPP
