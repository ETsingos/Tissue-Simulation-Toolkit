// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VARIABLES_HPP
#define VARIABLES_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "variables-fwd.hpp"

#ifndef XSDE_DONT_INCLUDE_INLINE
#define XSDE_DONT_INCLUDE_INLINE

#include "common.hpp"

#undef XSDE_DONT_INCLUDE_INLINE
#else

#include "common.hpp"

#endif // XSDE_DONT_INCLUDE_INLINE

namespace variables
{
  // amount_type (fixed-length)
  //
  class amount_type
  {
    public:
    enum value_type
    {
      concentration,
      density,
      volume_fraction,
      volume_percent,
      volume_percentage,
      surface_density,
      area_fraction,
      area_percent,
      area_percentage,
      count,
      partial_pressure,
      surface
    };

    amount_type ();
    amount_type (value_type);

    void
    value (value_type);

    operator value_type () const
    {
      return value_;
    }

    const char*
    string () const;

    private:
    value_type value_;
  };

  // variable (variable-length)
  //
  class variable
  {
    private:
    variable (const variable&);
    variable& operator= (const variable&);

    public:
    variable ();

    variable*
    _clone () const;

    ~variable ();

    // name
    //
    const ::std::string&
    name () const;

    ::std::string&
    name ();

    void
    name (const ::std::string&);

    // units
    //
    bool
    units_present () const;

    void
    units_present (bool);

    const ::std::string&
    units () const;

    ::std::string&
    units ();

    void
    units (const ::std::string&);

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    unsigned long long
    ID () const;

    unsigned long long&
    ID ();

    void
    ID (unsigned long long);

    // type
    //
    bool
    type_present () const;

    void
    type_present (bool);

    const ::variables::amount_type&
    type () const;

    ::variables::amount_type&
    type ();

    void
    type (const ::variables::amount_type&);

    // ChEBI_ID
    //
    bool
    ChEBI_ID_present () const;

    void
    ChEBI_ID_present (bool);

    const ::std::string&
    ChEBI_ID () const;

    ::std::string&
    ChEBI_ID ();

    void
    ChEBI_ID (const ::std::string&);

    // MeSH_ID
    //
    bool
    MeSH_ID_present () const;

    void
    MeSH_ID_present (bool);

    const ::std::string&
    MeSH_ID () const;

    ::std::string&
    MeSH_ID ();

    void
    MeSH_ID (const ::std::string&);

    // DrugBank_ID
    //
    bool
    DrugBank_ID_present () const;

    void
    DrugBank_ID_present (bool);

    const ::std::string&
    DrugBank_ID () const;

    ::std::string&
    DrugBank_ID ();

    void
    DrugBank_ID (const ::std::string&);

    // GMO_ID
    //
    bool
    GMO_ID_present () const;

    void
    GMO_ID_present (bool);

    const ::std::string&
    GMO_ID () const;

    ::std::string&
    GMO_ID ();

    void
    GMO_ID (const ::std::string&);

    // GO_ID
    //
    bool
    GO_ID_present () const;

    void
    GO_ID_present (bool);

    const ::std::string&
    GO_ID () const;

    ::std::string&
    GO_ID ();

    void
    GO_ID (const ::std::string&);

    // UniProt_ID
    //
    bool
    UniProt_ID_present () const;

    void
    UniProt_ID_present (bool);

    const ::std::string&
    UniProt_ID () const;

    ::std::string&
    UniProt_ID ();

    void
    UniProt_ID (const ::std::string&);

    // PR_ID
    //
    bool
    PR_ID_present () const;

    void
    PR_ID_present (bool);

    const ::std::string&
    PR_ID () const;

    ::std::string&
    PR_ID ();

    void
    PR_ID (const ::std::string&);

    // material_amount
    //
    bool
    material_amount_present () const;

    const ::variables::material_amount&
    material_amount () const;

    ::variables::material_amount&
    material_amount ();

    void
    material_amount (::variables::material_amount*);

    ::variables::material_amount*
    material_amount_detach ();

    // physical_parameter_set
    //
    bool
    physical_parameter_set_present () const;

    const ::variables::physical_parameter_set&
    physical_parameter_set () const;

    ::variables::physical_parameter_set&
    physical_parameter_set ();

    void
    physical_parameter_set (::variables::physical_parameter_set*);

    ::variables::physical_parameter_set*
    physical_parameter_set_detach ();

    void
    _copy (variable&) const;

    private:
    ::std::string name_;
    ::std::string units_;
    unsigned char units_present_;
    unsigned long long ID_;
    unsigned char ID_present_;
    ::variables::amount_type type_;
    unsigned char type_present_;
    ::std::string ChEBI_ID_;
    unsigned char ChEBI_ID_present_;
    ::std::string MeSH_ID_;
    unsigned char MeSH_ID_present_;
    ::std::string DrugBank_ID_;
    unsigned char DrugBank_ID_present_;
    ::std::string GMO_ID_;
    unsigned char GMO_ID_present_;
    ::std::string GO_ID_;
    unsigned char GO_ID_present_;
    ::std::string UniProt_ID_;
    unsigned char UniProt_ID_present_;
    ::std::string PR_ID_;
    unsigned char PR_ID_present_;
    ::variables::material_amount* material_amount_;
    ::variables::physical_parameter_set* physical_parameter_set_;
  };

  // material_amount (variable-length)
  //
  class material_amount: public ::common::units_decimal
  {
    private:
    material_amount (const material_amount&);
    material_amount& operator= (const material_amount&);

    public:
    material_amount ();

    material_amount*
    _clone () const;

    ~material_amount ();

    // type
    //
    bool
    type_present () const;

    void
    type_present (bool);

    const ::variables::amount_type&
    type () const;

    ::variables::amount_type&
    type ();

    void
    type (const ::variables::amount_type&);

    // scale_units
    //
    bool
    scale_units_present () const;

    void
    scale_units_present (bool);

    const ::std::string&
    scale_units () const;

    ::std::string&
    scale_units ();

    void
    scale_units (const ::std::string&);

    void
    _copy (material_amount&) const;

    private:
    ::variables::amount_type type_;
    unsigned char type_present_;
    ::std::string scale_units_;
    unsigned char scale_units_present_;
  };

  // physical_parameter_set (variable-length)
  //
  class physical_parameter_set
  {
    private:
    physical_parameter_set (const physical_parameter_set&);
    physical_parameter_set& operator= (const physical_parameter_set&);

    public:
    physical_parameter_set ();

    physical_parameter_set*
    _clone () const;

    ~physical_parameter_set ();

    // conditions
    //
    bool
    conditions_present () const;

    const ::variables::physical_conditions&
    conditions () const;

    ::variables::physical_conditions&
    conditions ();

    void
    conditions (::variables::physical_conditions*);

    ::variables::physical_conditions*
    conditions_detach ();

    // diffusion_coefficient
    //
    bool
    diffusion_coefficient_present () const;

    const ::common::units_decimal&
    diffusion_coefficient () const;

    ::common::units_decimal&
    diffusion_coefficient ();

    void
    diffusion_coefficient (::common::units_decimal*);

    ::common::units_decimal*
    diffusion_coefficient_detach ();

    // decay_rate
    //
    bool
    decay_rate_present () const;

    const ::common::units_decimal&
    decay_rate () const;

    ::common::units_decimal&
    decay_rate ();

    void
    decay_rate (::common::units_decimal*);

    ::common::units_decimal*
    decay_rate_detach ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (physical_parameter_set&) const;

    private:
    ::variables::physical_conditions* conditions_;
    ::common::units_decimal* diffusion_coefficient_;
    ::common::units_decimal* decay_rate_;
    ::common::custom* custom_;
  };

  // physical_conditions (variable-length)
  //
  class physical_conditions
  {
    private:
    physical_conditions (const physical_conditions&);
    physical_conditions& operator= (const physical_conditions&);

    public:
    physical_conditions ();

    physical_conditions*
    _clone () const;

    ~physical_conditions ();

    // temperature
    //
    bool
    temperature_present () const;

    const ::common::units_decimal&
    temperature () const;

    ::common::units_decimal&
    temperature ();

    void
    temperature (::common::units_decimal*);

    ::common::units_decimal*
    temperature_detach ();

    // mechanical_pressure
    //
    bool
    mechanical_pressure_present () const;

    const ::common::units_decimal&
    mechanical_pressure () const;

    ::common::units_decimal&
    mechanical_pressure ();

    void
    mechanical_pressure (::common::units_decimal*);

    ::common::units_decimal*
    mechanical_pressure_detach ();

    // acidity
    //
    bool
    acidity_present () const;

    const ::common::units_decimal&
    acidity () const;

    ::common::units_decimal&
    acidity ();

    void
    acidity (::common::units_decimal*);

    ::common::units_decimal*
    acidity_detach ();

    // pH
    //
    bool
    pH_present () const;

    const ::common::units_decimal&
    pH () const;

    ::common::units_decimal&
    pH ();

    void
    pH (::common::units_decimal*);

    ::common::units_decimal*
    pH_detach ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (physical_conditions&) const;

    private:
    ::common::units_decimal* temperature_;
    ::common::units_decimal* mechanical_pressure_;
    ::common::units_decimal* acidity_;
    ::common::units_decimal* pH_;
    ::common::custom* custom_;
  };

  // system (fixed-length)
  //
  class system
  {
    public:
    enum value_type
    {
      in_vivo,
      in_vitro,
      ex_vivo,
      in_silico
    };

    system ();
    system (value_type);

    void
    value (value_type);

    operator value_type () const
    {
      return value_;
    }

    const char*
    string () const;

    private:
    value_type value_;
  };

  // conditions (fixed-length)
  //
  class conditions
  {
    public:
    enum value_type
    {
      surface,
      suspension,
      spheroid
    };

    conditions ();
    conditions (value_type);

    void
    value (value_type);

    operator value_type () const
    {
      return value_;
    }

    const char*
    string () const;

    private:
    value_type value_;
  };

  // experimental_conditions (variable-length)
  //
  class experimental_conditions
  {
    private:
    experimental_conditions (const experimental_conditions&);
    experimental_conditions& operator= (const experimental_conditions&);

    public:
    experimental_conditions ();

    experimental_conditions*
    _clone () const;

    ~experimental_conditions ();

    // type
    //
    bool
    type_present () const;

    void
    type_present (bool);

    const ::std::string&
    type () const;

    ::std::string&
    type ();

    void
    type (const ::std::string&);

    // dimensionality
    //
    bool
    dimensionality_present () const;

    void
    dimensionality_present (bool);

    unsigned short
    dimensionality () const;

    unsigned short&
    dimensionality ();

    void
    dimensionality (unsigned short);

    // system
    //
    bool
    system_present () const;

    void
    system_present (bool);

    const ::variables::system&
    system () const;

    ::variables::system&
    system ();

    void
    system (const ::variables::system&);

    // conditions
    //
    bool
    conditions_present () const;

    void
    conditions_present (bool);

    const ::variables::conditions&
    conditions () const;

    ::variables::conditions&
    conditions ();

    void
    conditions (const ::variables::conditions&);

    // surface_variable
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::variables::variable > surface_variable_sequence;
    typedef surface_variable_sequence::iterator surface_variable_iterator;
    typedef surface_variable_sequence::const_iterator surface_variable_const_iterator;

    const surface_variable_sequence&
    surface_variable () const;

    surface_variable_sequence&
    surface_variable ();

    void
    _copy (experimental_conditions&) const;

    private:
    ::std::string type_;
    unsigned char type_present_;
    unsigned short dimensionality_;
    unsigned char dimensionality_present_;
    ::variables::system system_;
    unsigned char system_present_;
    ::variables::conditions conditions_;
    unsigned char conditions_present_;
    surface_variable_sequence surface_variable_;
  };

  // data_vector (variable-length)
  //
  class data_vector: public ::common::units_double_list
  {
    private:
    data_vector (const data_vector&);
    data_vector& operator= (const data_vector&);

    public:
    data_vector ();

    data_vector*
    _clone () const;

    ~data_vector ();

    // voxel_ID
    //
    bool
    voxel_ID_present () const;

    const ::common::unsigned_int_list&
    voxel_ID () const;

    ::common::unsigned_int_list&
    voxel_ID ();

    void
    voxel_ID (::common::unsigned_int_list*);

    ::common::unsigned_int_list*
    voxel_ID_detach ();

    void
    _copy (data_vector&) const;

    private:
    ::common::unsigned_int_list* voxel_ID_;
  };

  // data (variable-length)
  //
  class data
  {
    private:
    data (const data&);
    data& operator= (const data&);

    public:
    data ();

    data*
    _clone () const;

    ~data ();

    // type
    //
    bool
    type_present () const;

    void
    type_present (bool);

    const ::common::data_storage_formats&
    type () const;

    ::common::data_storage_formats&
    type ();

    void
    type (const ::common::data_storage_formats&);

    // filename
    //
    bool
    filename_present () const;

    void
    filename_present (bool);

    const ::std::string&
    filename () const;

    ::std::string&
    filename ();

    void
    filename (const ::std::string&);

    // data_vector
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::variables::data_vector > data_vector_sequence;
    typedef data_vector_sequence::iterator data_vector_iterator;
    typedef data_vector_sequence::const_iterator data_vector_const_iterator;

    const data_vector_sequence&
    data_vector () const;

    data_vector_sequence&
    data_vector ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (data&) const;

    private:
    ::common::data_storage_formats type_;
    unsigned char type_present_;
    ::std::string filename_;
    unsigned char filename_present_;
    data_vector_sequence data_vector_;
    ::common::custom* custom_;
  };

  // list_of_variables (variable-length)
  //
  class list_of_variables
  {
    private:
    list_of_variables (const list_of_variables&);
    list_of_variables& operator= (const list_of_variables&);

    public:
    list_of_variables ();

    list_of_variables*
    _clone () const;

    ~list_of_variables ();

    // variable
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::variables::variable > variable_sequence;
    typedef variable_sequence::iterator variable_iterator;
    typedef variable_sequence::const_iterator variable_const_iterator;

    const variable_sequence&
    variable () const;

    variable_sequence&
    variable ();

    // physical_parameter_set
    //
    bool
    physical_parameter_set_present () const;

    const ::variables::physical_parameter_set&
    physical_parameter_set () const;

    ::variables::physical_parameter_set&
    physical_parameter_set ();

    void
    physical_parameter_set (::variables::physical_parameter_set*);

    ::variables::physical_parameter_set*
    physical_parameter_set_detach ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (list_of_variables&) const;

    private:
    variable_sequence variable_;
    ::variables::physical_parameter_set* physical_parameter_set_;
    ::common::custom* custom_;
  };

  // transition_threshold (variable-length)
  //
  class transition_threshold: public ::common::transition_threshold
  {
    private:
    transition_threshold (const transition_threshold&);
    transition_threshold& operator= (const transition_threshold&);

    public:
    transition_threshold ();

    transition_threshold*
    _clone () const;

    ~transition_threshold ();

    // ChEBI_ID
    //
    bool
    ChEBI_ID_present () const;

    void
    ChEBI_ID_present (bool);

    const ::std::string&
    ChEBI_ID () const;

    ::std::string&
    ChEBI_ID ();

    void
    ChEBI_ID (const ::std::string&);

    // MeSH_ID
    //
    bool
    MeSH_ID_present () const;

    void
    MeSH_ID_present (bool);

    const ::std::string&
    MeSH_ID () const;

    ::std::string&
    MeSH_ID ();

    void
    MeSH_ID (const ::std::string&);

    // DrugBank_ID
    //
    bool
    DrugBank_ID_present () const;

    void
    DrugBank_ID_present (bool);

    const ::std::string&
    DrugBank_ID () const;

    ::std::string&
    DrugBank_ID ();

    void
    DrugBank_ID (const ::std::string&);

    // GMO_ID
    //
    bool
    GMO_ID_present () const;

    void
    GMO_ID_present (bool);

    const ::std::string&
    GMO_ID () const;

    ::std::string&
    GMO_ID ();

    void
    GMO_ID (const ::std::string&);

    // GO_ID
    //
    bool
    GO_ID_present () const;

    void
    GO_ID_present (bool);

    const ::std::string&
    GO_ID () const;

    ::std::string&
    GO_ID ();

    void
    GO_ID (const ::std::string&);

    // UniProt_ID
    //
    bool
    UniProt_ID_present () const;

    void
    UniProt_ID_present (bool);

    const ::std::string&
    UniProt_ID () const;

    ::std::string&
    UniProt_ID ();

    void
    UniProt_ID (const ::std::string&);

    // PR_ID
    //
    bool
    PR_ID_present () const;

    void
    PR_ID_present (bool);

    const ::std::string&
    PR_ID () const;

    ::std::string&
    PR_ID ();

    void
    PR_ID (const ::std::string&);

    void
    _copy (transition_threshold&) const;

    private:
    ::std::string ChEBI_ID_;
    unsigned char ChEBI_ID_present_;
    ::std::string MeSH_ID_;
    unsigned char MeSH_ID_present_;
    ::std::string DrugBank_ID_;
    unsigned char DrugBank_ID_present_;
    ::std::string GMO_ID_;
    unsigned char GMO_ID_present_;
    ::std::string GO_ID_;
    unsigned char GO_ID_present_;
    ::std::string UniProt_ID_;
    unsigned char UniProt_ID_present_;
    ::std::string PR_ID_;
    unsigned char PR_ID_present_;
  };
}

#ifndef XSDE_DONT_INCLUDE_INLINE

#include "common.ipp"

#endif // XSDE_DONT_INCLUDE_INLINE

#ifndef XSDE_DONT_INCLUDE_INLINE
#include "variables.ipp"
#endif // XSDE_DONT_INCLUDE_INLINE

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // VARIABLES_HPP
