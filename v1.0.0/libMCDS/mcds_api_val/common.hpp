// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef COMMON_HPP
#define COMMON_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "common-fwd.hpp"

#ifndef XSDE_DONT_INCLUDE_INLINE
#define XSDE_DONT_INCLUDE_INLINE

#undef XSDE_DONT_INCLUDE_INLINE
#else

#endif // XSDE_DONT_INCLUDE_INLINE

namespace common
{
  // custom (variable-length)
  //
  class custom
  {
    private:
    custom (const custom&);
    custom& operator= (const custom&);

    public:
    custom ();

    custom*
    _clone () const;

    ~custom ();

    // Custom data.
    //
    typedef ::xsde::cxx::hybrid::data_sequence custom_data_sequence;
    typedef custom_data_sequence::iterator custom_data_iterator;
    typedef custom_data_sequence::const_iterator custom_data_const_iterator;

    const custom_data_sequence&
    custom_data () const;

    custom_data_sequence&
    custom_data ();

    void
    _copy (custom&) const;

    private:
    custom_data_sequence custom_data_;
  };

  // double_list (variable-length)
  //
  class double_list: public ::xsde::cxx::hybrid::pod_sequence< double >
  {
    private:
    double_list (const double_list&);
    double_list& operator= (const double_list&);

    public:
    double_list ();

    double_list*
    _clone () const;

    void
    _copy (double_list&) const;
  };

  // unsigned_int_list (variable-length)
  //
  class unsigned_int_list: public ::xsde::cxx::hybrid::pod_sequence< unsigned int >
  {
    private:
    unsigned_int_list (const unsigned_int_list&);
    unsigned_int_list& operator= (const unsigned_int_list&);

    public:
    unsigned_int_list ();

    unsigned_int_list*
    _clone () const;

    void
    _copy (unsigned_int_list&) const;
  };

  // two_doubles (variable-length)
  //
  class two_doubles: public ::common::double_list
  {
    private:
    two_doubles (const two_doubles&);
    two_doubles& operator= (const two_doubles&);

    public:
    two_doubles ();

    two_doubles*
    _clone () const;

    void
    _copy (two_doubles&) const;
  };

  // units_double_list (variable-length)
  //
  class units_double_list: public ::common::double_list
  {
    private:
    units_double_list (const units_double_list&);
    units_double_list& operator= (const units_double_list&);

    public:
    units_double_list ();

    units_double_list*
    _clone () const;

    ~units_double_list ();

    // units
    //
    bool
    units_present () const;

    void
    units_present (bool);

    const ::std::string&
    units () const;

    ::std::string&
    units ();

    void
    units (const ::std::string&);

    // measurement_type
    //
    bool
    measurement_type_present () const;

    void
    measurement_type_present (bool);

    const ::std::string&
    measurement_type () const;

    ::std::string&
    measurement_type ();

    void
    measurement_type (const ::std::string&);

    // uncertainty
    //
    bool
    uncertainty_present () const;

    void
    uncertainty_present (bool);

    double
    uncertainty () const;

    double&
    uncertainty ();

    void
    uncertainty (double);

    // negative_uncertainty
    //
    bool
    negative_uncertainty_present () const;

    void
    negative_uncertainty_present (bool);

    double
    negative_uncertainty () const;

    double&
    negative_uncertainty ();

    void
    negative_uncertainty (double);

    // positive_uncertainty
    //
    bool
    positive_uncertainty_present () const;

    void
    positive_uncertainty_present (bool);

    double
    positive_uncertainty () const;

    double&
    positive_uncertainty ();

    void
    positive_uncertainty (double);

    // uncertainty_percentage
    //
    bool
    uncertainty_percentage_present () const;

    void
    uncertainty_percentage_present (bool);

    double
    uncertainty_percentage () const;

    double&
    uncertainty_percentage ();

    void
    uncertainty_percentage (double);

    // negative_uncertainty_percentage
    //
    bool
    negative_uncertainty_percentage_present () const;

    void
    negative_uncertainty_percentage_present (bool);

    double
    negative_uncertainty_percentage () const;

    double&
    negative_uncertainty_percentage ();

    void
    negative_uncertainty_percentage (double);

    // positive_uncertainty_percentage
    //
    bool
    positive_uncertainty_percentage_present () const;

    void
    positive_uncertainty_percentage_present (bool);

    double
    positive_uncertainty_percentage () const;

    double&
    positive_uncertainty_percentage ();

    void
    positive_uncertainty_percentage (double);

    // median
    //
    bool
    median_present () const;

    void
    median_present (bool);

    double
    median () const;

    double&
    median ();

    void
    median (double);

    // standard_deviation
    //
    bool
    standard_deviation_present () const;

    void
    standard_deviation_present (bool);

    double
    standard_deviation () const;

    double&
    standard_deviation ();

    void
    standard_deviation (double);

    // interquartile_range
    //
    bool
    interquartile_range_present () const;

    const ::common::two_doubles&
    interquartile_range () const;

    ::common::two_doubles&
    interquartile_range ();

    void
    interquartile_range (::common::two_doubles*);

    ::common::two_doubles*
    interquartile_range_detach ();

    // range
    //
    bool
    range_present () const;

    const ::common::two_doubles&
    range () const;

    ::common::two_doubles&
    range ();

    void
    range (::common::two_doubles*);

    ::common::two_doubles*
    range_detach ();

    // min
    //
    bool
    min_present () const;

    void
    min_present (bool);

    double
    min () const;

    double&
    min ();

    void
    min (double);

    // max
    //
    bool
    max_present () const;

    void
    max_present (bool);

    double
    max () const;

    double&
    max ();

    void
    max (double);

    // standard_error
    //
    bool
    standard_error_present () const;

    void
    standard_error_present (bool);

    double
    standard_error () const;

    double&
    standard_error ();

    void
    standard_error (double);

    // standard_error_of_the_mean
    //
    bool
    standard_error_of_the_mean_present () const;

    void
    standard_error_of_the_mean_present (bool);

    double
    standard_error_of_the_mean () const;

    double&
    standard_error_of_the_mean ();

    void
    standard_error_of_the_mean (double);

    // number_obs
    //
    bool
    number_obs_present () const;

    void
    number_obs_present (bool);

    int
    number_obs () const;

    int&
    number_obs ();

    void
    number_obs (int);

    // skewnesss
    //
    bool
    skewnesss_present () const;

    void
    skewnesss_present (bool);

    double
    skewnesss () const;

    double&
    skewnesss ();

    void
    skewnesss (double);

    // kurtosis
    //
    bool
    kurtosis_present () const;

    void
    kurtosis_present (bool);

    double
    kurtosis () const;

    double&
    kurtosis ();

    void
    kurtosis (double);

    void
    _copy (units_double_list&) const;

    private:
    ::std::string units_;
    unsigned char units_present_;
    ::std::string measurement_type_;
    unsigned char measurement_type_present_;
    double uncertainty_;
    unsigned char uncertainty_present_;
    double negative_uncertainty_;
    unsigned char negative_uncertainty_present_;
    double positive_uncertainty_;
    unsigned char positive_uncertainty_present_;
    double uncertainty_percentage_;
    unsigned char uncertainty_percentage_present_;
    double negative_uncertainty_percentage_;
    unsigned char negative_uncertainty_percentage_present_;
    double positive_uncertainty_percentage_;
    unsigned char positive_uncertainty_percentage_present_;
    double median_;
    unsigned char median_present_;
    double standard_deviation_;
    unsigned char standard_deviation_present_;
    ::common::two_doubles* interquartile_range_;
    ::common::two_doubles* range_;
    double min_;
    unsigned char min_present_;
    double max_;
    unsigned char max_present_;
    double standard_error_;
    unsigned char standard_error_present_;
    double standard_error_of_the_mean_;
    unsigned char standard_error_of_the_mean_present_;
    int number_obs_;
    unsigned char number_obs_present_;
    double skewnesss_;
    unsigned char skewnesss_present_;
    double kurtosis_;
    unsigned char kurtosis_present_;
  };

  // delimited_list (fixed-length)
  //
  class delimited_list: public ::std::string
  {
    public:
    delimited_list ();

    delimited_list (const delimited_list&);
    delimited_list& operator= (const delimited_list&);

    ~delimited_list ();

    // delimiter
    //
    bool
    delimiter_present () const;

    void
    delimiter_present (bool);

    const ::std::string&
    delimiter () const;

    ::std::string&
    delimiter ();

    void
    delimiter (const ::std::string&);

    private:
    ::std::string delimiter_;
    unsigned char delimiter_present_;
  };

  // units_delimited_list (variable-length)
  //
  class units_delimited_list: public ::common::delimited_list
  {
    private:
    units_delimited_list (const units_delimited_list&);
    units_delimited_list& operator= (const units_delimited_list&);

    public:
    units_delimited_list ();

    units_delimited_list*
    _clone () const;

    ~units_delimited_list ();

    // units
    //
    bool
    units_present () const;

    void
    units_present (bool);

    const ::std::string&
    units () const;

    ::std::string&
    units ();

    void
    units (const ::std::string&);

    // measurement_type
    //
    bool
    measurement_type_present () const;

    void
    measurement_type_present (bool);

    const ::std::string&
    measurement_type () const;

    ::std::string&
    measurement_type ();

    void
    measurement_type (const ::std::string&);

    // uncertainty
    //
    bool
    uncertainty_present () const;

    void
    uncertainty_present (bool);

    double
    uncertainty () const;

    double&
    uncertainty ();

    void
    uncertainty (double);

    // negative_uncertainty
    //
    bool
    negative_uncertainty_present () const;

    void
    negative_uncertainty_present (bool);

    double
    negative_uncertainty () const;

    double&
    negative_uncertainty ();

    void
    negative_uncertainty (double);

    // positive_uncertainty
    //
    bool
    positive_uncertainty_present () const;

    void
    positive_uncertainty_present (bool);

    double
    positive_uncertainty () const;

    double&
    positive_uncertainty ();

    void
    positive_uncertainty (double);

    // uncertainty_percentage
    //
    bool
    uncertainty_percentage_present () const;

    void
    uncertainty_percentage_present (bool);

    double
    uncertainty_percentage () const;

    double&
    uncertainty_percentage ();

    void
    uncertainty_percentage (double);

    // negative_uncertainty_percentage
    //
    bool
    negative_uncertainty_percentage_present () const;

    void
    negative_uncertainty_percentage_present (bool);

    double
    negative_uncertainty_percentage () const;

    double&
    negative_uncertainty_percentage ();

    void
    negative_uncertainty_percentage (double);

    // positive_uncertainty_percentage
    //
    bool
    positive_uncertainty_percentage_present () const;

    void
    positive_uncertainty_percentage_present (bool);

    double
    positive_uncertainty_percentage () const;

    double&
    positive_uncertainty_percentage ();

    void
    positive_uncertainty_percentage (double);

    // median
    //
    bool
    median_present () const;

    void
    median_present (bool);

    double
    median () const;

    double&
    median ();

    void
    median (double);

    // standard_deviation
    //
    bool
    standard_deviation_present () const;

    void
    standard_deviation_present (bool);

    double
    standard_deviation () const;

    double&
    standard_deviation ();

    void
    standard_deviation (double);

    // interquartile_range
    //
    bool
    interquartile_range_present () const;

    const ::common::two_doubles&
    interquartile_range () const;

    ::common::two_doubles&
    interquartile_range ();

    void
    interquartile_range (::common::two_doubles*);

    ::common::two_doubles*
    interquartile_range_detach ();

    // range
    //
    bool
    range_present () const;

    const ::common::two_doubles&
    range () const;

    ::common::two_doubles&
    range ();

    void
    range (::common::two_doubles*);

    ::common::two_doubles*
    range_detach ();

    // min
    //
    bool
    min_present () const;

    void
    min_present (bool);

    double
    min () const;

    double&
    min ();

    void
    min (double);

    // max
    //
    bool
    max_present () const;

    void
    max_present (bool);

    double
    max () const;

    double&
    max ();

    void
    max (double);

    // standard_error
    //
    bool
    standard_error_present () const;

    void
    standard_error_present (bool);

    double
    standard_error () const;

    double&
    standard_error ();

    void
    standard_error (double);

    // standard_error_of_the_mean
    //
    bool
    standard_error_of_the_mean_present () const;

    void
    standard_error_of_the_mean_present (bool);

    double
    standard_error_of_the_mean () const;

    double&
    standard_error_of_the_mean ();

    void
    standard_error_of_the_mean (double);

    // number_obs
    //
    bool
    number_obs_present () const;

    void
    number_obs_present (bool);

    int
    number_obs () const;

    int&
    number_obs ();

    void
    number_obs (int);

    // skewnesss
    //
    bool
    skewnesss_present () const;

    void
    skewnesss_present (bool);

    double
    skewnesss () const;

    double&
    skewnesss ();

    void
    skewnesss (double);

    // kurtosis
    //
    bool
    kurtosis_present () const;

    void
    kurtosis_present (bool);

    double
    kurtosis () const;

    double&
    kurtosis ();

    void
    kurtosis (double);

    void
    _copy (units_delimited_list&) const;

    private:
    ::std::string units_;
    unsigned char units_present_;
    ::std::string measurement_type_;
    unsigned char measurement_type_present_;
    double uncertainty_;
    unsigned char uncertainty_present_;
    double negative_uncertainty_;
    unsigned char negative_uncertainty_present_;
    double positive_uncertainty_;
    unsigned char positive_uncertainty_present_;
    double uncertainty_percentage_;
    unsigned char uncertainty_percentage_present_;
    double negative_uncertainty_percentage_;
    unsigned char negative_uncertainty_percentage_present_;
    double positive_uncertainty_percentage_;
    unsigned char positive_uncertainty_percentage_present_;
    double median_;
    unsigned char median_present_;
    double standard_deviation_;
    unsigned char standard_deviation_present_;
    ::common::two_doubles* interquartile_range_;
    ::common::two_doubles* range_;
    double min_;
    unsigned char min_present_;
    double max_;
    unsigned char max_present_;
    double standard_error_;
    unsigned char standard_error_present_;
    double standard_error_of_the_mean_;
    unsigned char standard_error_of_the_mean_present_;
    int number_obs_;
    unsigned char number_obs_present_;
    double skewnesss_;
    unsigned char skewnesss_present_;
    double kurtosis_;
    unsigned char kurtosis_present_;
  };

  // units_decimal (variable-length)
  //
  class units_decimal: public ::xml_schema::double_base
  {
    private:
    units_decimal (const units_decimal&);
    units_decimal& operator= (const units_decimal&);

    public:
    units_decimal ();

    units_decimal*
    _clone () const;

    ~units_decimal ();

    // units
    //
    bool
    units_present () const;

    void
    units_present (bool);

    const ::std::string&
    units () const;

    ::std::string&
    units ();

    void
    units (const ::std::string&);

    // measurement_type
    //
    bool
    measurement_type_present () const;

    void
    measurement_type_present (bool);

    const ::std::string&
    measurement_type () const;

    ::std::string&
    measurement_type ();

    void
    measurement_type (const ::std::string&);

    // uncertainty
    //
    bool
    uncertainty_present () const;

    void
    uncertainty_present (bool);

    double
    uncertainty () const;

    double&
    uncertainty ();

    void
    uncertainty (double);

    // negative_uncertainty
    //
    bool
    negative_uncertainty_present () const;

    void
    negative_uncertainty_present (bool);

    double
    negative_uncertainty () const;

    double&
    negative_uncertainty ();

    void
    negative_uncertainty (double);

    // positive_uncertainty
    //
    bool
    positive_uncertainty_present () const;

    void
    positive_uncertainty_present (bool);

    double
    positive_uncertainty () const;

    double&
    positive_uncertainty ();

    void
    positive_uncertainty (double);

    // uncertainty_percentage
    //
    bool
    uncertainty_percentage_present () const;

    void
    uncertainty_percentage_present (bool);

    double
    uncertainty_percentage () const;

    double&
    uncertainty_percentage ();

    void
    uncertainty_percentage (double);

    // negative_uncertainty_percentage
    //
    bool
    negative_uncertainty_percentage_present () const;

    void
    negative_uncertainty_percentage_present (bool);

    double
    negative_uncertainty_percentage () const;

    double&
    negative_uncertainty_percentage ();

    void
    negative_uncertainty_percentage (double);

    // positive_uncertainty_percentage
    //
    bool
    positive_uncertainty_percentage_present () const;

    void
    positive_uncertainty_percentage_present (bool);

    double
    positive_uncertainty_percentage () const;

    double&
    positive_uncertainty_percentage ();

    void
    positive_uncertainty_percentage (double);

    // median
    //
    bool
    median_present () const;

    void
    median_present (bool);

    double
    median () const;

    double&
    median ();

    void
    median (double);

    // standard_deviation
    //
    bool
    standard_deviation_present () const;

    void
    standard_deviation_present (bool);

    double
    standard_deviation () const;

    double&
    standard_deviation ();

    void
    standard_deviation (double);

    // interquartile_range
    //
    bool
    interquartile_range_present () const;

    const ::common::two_doubles&
    interquartile_range () const;

    ::common::two_doubles&
    interquartile_range ();

    void
    interquartile_range (::common::two_doubles*);

    ::common::two_doubles*
    interquartile_range_detach ();

    // range
    //
    bool
    range_present () const;

    const ::common::two_doubles&
    range () const;

    ::common::two_doubles&
    range ();

    void
    range (::common::two_doubles*);

    ::common::two_doubles*
    range_detach ();

    // min
    //
    bool
    min_present () const;

    void
    min_present (bool);

    double
    min () const;

    double&
    min ();

    void
    min (double);

    // max
    //
    bool
    max_present () const;

    void
    max_present (bool);

    double
    max () const;

    double&
    max ();

    void
    max (double);

    // standard_error
    //
    bool
    standard_error_present () const;

    void
    standard_error_present (bool);

    double
    standard_error () const;

    double&
    standard_error ();

    void
    standard_error (double);

    // standard_error_of_the_mean
    //
    bool
    standard_error_of_the_mean_present () const;

    void
    standard_error_of_the_mean_present (bool);

    double
    standard_error_of_the_mean () const;

    double&
    standard_error_of_the_mean ();

    void
    standard_error_of_the_mean (double);

    // number_obs
    //
    bool
    number_obs_present () const;

    void
    number_obs_present (bool);

    int
    number_obs () const;

    int&
    number_obs ();

    void
    number_obs (int);

    // skewnesss
    //
    bool
    skewnesss_present () const;

    void
    skewnesss_present (bool);

    double
    skewnesss () const;

    double&
    skewnesss ();

    void
    skewnesss (double);

    // kurtosis
    //
    bool
    kurtosis_present () const;

    void
    kurtosis_present (bool);

    double
    kurtosis () const;

    double&
    kurtosis ();

    void
    kurtosis (double);

    void
    _copy (units_decimal&) const;

    private:
    ::std::string units_;
    unsigned char units_present_;
    ::std::string measurement_type_;
    unsigned char measurement_type_present_;
    double uncertainty_;
    unsigned char uncertainty_present_;
    double negative_uncertainty_;
    unsigned char negative_uncertainty_present_;
    double positive_uncertainty_;
    unsigned char positive_uncertainty_present_;
    double uncertainty_percentage_;
    unsigned char uncertainty_percentage_present_;
    double negative_uncertainty_percentage_;
    unsigned char negative_uncertainty_percentage_present_;
    double positive_uncertainty_percentage_;
    unsigned char positive_uncertainty_percentage_present_;
    double median_;
    unsigned char median_present_;
    double standard_deviation_;
    unsigned char standard_deviation_present_;
    ::common::two_doubles* interquartile_range_;
    ::common::two_doubles* range_;
    double min_;
    unsigned char min_present_;
    double max_;
    unsigned char max_present_;
    double standard_error_;
    unsigned char standard_error_present_;
    double standard_error_of_the_mean_;
    unsigned char standard_error_of_the_mean_present_;
    int number_obs_;
    unsigned char number_obs_present_;
    double skewnesss_;
    unsigned char skewnesss_present_;
    double kurtosis_;
    unsigned char kurtosis_present_;
  };

  // units_decimal_nonnegative (variable-length)
  //
  class units_decimal_nonnegative: public ::common::units_decimal
  {
    private:
    units_decimal_nonnegative (const units_decimal_nonnegative&);
    units_decimal_nonnegative& operator= (const units_decimal_nonnegative&);

    public:
    units_decimal_nonnegative ();

    units_decimal_nonnegative*
    _clone () const;

    void
    _copy (units_decimal_nonnegative&) const;
  };

  // units_unsignedShort (fixed-length)
  //
  class units_unsignedShort: public ::xml_schema::unsigned_short_base
  {
    public:
    units_unsignedShort ();

    units_unsignedShort (const units_unsignedShort&);
    units_unsignedShort& operator= (const units_unsignedShort&);

    ~units_unsignedShort ();

    // measurement_type
    //
    bool
    measurement_type_present () const;

    void
    measurement_type_present (bool);

    const ::std::string&
    measurement_type () const;

    ::std::string&
    measurement_type ();

    void
    measurement_type (const ::std::string&);

    // units
    //
    bool
    units_present () const;

    void
    units_present (bool);

    const ::std::string&
    units () const;

    ::std::string&
    units ();

    void
    units (const ::std::string&);

    private:
    ::std::string measurement_type_;
    unsigned char measurement_type_present_;
    ::std::string units_;
    unsigned char units_present_;
  };

  // units_boolean (fixed-length)
  //
  class units_boolean: public ::xml_schema::boolean_base
  {
    public:
    units_boolean ();

    units_boolean (const units_boolean&);
    units_boolean& operator= (const units_boolean&);

    ~units_boolean ();

    // units
    //
    bool
    units_present () const;

    void
    units_present (bool);

    const ::std::string&
    units () const;

    ::std::string&
    units ();

    void
    units (const ::std::string&);

    private:
    ::std::string units_;
    unsigned char units_present_;
  };

  // fraction (fixed-length)
  //
  class fraction: public ::xml_schema::double_base
  {
    public:
    fraction ();
  };

  // units_fraction (variable-length)
  //
  class units_fraction: public ::common::units_decimal
  {
    private:
    units_fraction (const units_fraction&);
    units_fraction& operator= (const units_fraction&);

    public:
    units_fraction ();

    units_fraction*
    _clone () const;

    void
    _copy (units_fraction&) const;
  };

  // units_string (variable-length)
  //
  class units_string: public ::std::string
  {
    private:
    units_string (const units_string&);
    units_string& operator= (const units_string&);

    public:
    units_string ();

    units_string*
    _clone () const;

    ~units_string ();

    // units
    //
    bool
    units_present () const;

    void
    units_present (bool);

    const ::std::string&
    units () const;

    ::std::string&
    units ();

    void
    units (const ::std::string&);

    // measurement_type
    //
    bool
    measurement_type_present () const;

    void
    measurement_type_present (bool);

    const ::std::string&
    measurement_type () const;

    ::std::string&
    measurement_type ();

    void
    measurement_type (const ::std::string&);

    // uncertainty
    //
    bool
    uncertainty_present () const;

    void
    uncertainty_present (bool);

    double
    uncertainty () const;

    double&
    uncertainty ();

    void
    uncertainty (double);

    // negative_uncertainty
    //
    bool
    negative_uncertainty_present () const;

    void
    negative_uncertainty_present (bool);

    double
    negative_uncertainty () const;

    double&
    negative_uncertainty ();

    void
    negative_uncertainty (double);

    // positive_uncertainty
    //
    bool
    positive_uncertainty_present () const;

    void
    positive_uncertainty_present (bool);

    double
    positive_uncertainty () const;

    double&
    positive_uncertainty ();

    void
    positive_uncertainty (double);

    // uncertainty_percentage
    //
    bool
    uncertainty_percentage_present () const;

    void
    uncertainty_percentage_present (bool);

    double
    uncertainty_percentage () const;

    double&
    uncertainty_percentage ();

    void
    uncertainty_percentage (double);

    // negative_uncertainty_percentage
    //
    bool
    negative_uncertainty_percentage_present () const;

    void
    negative_uncertainty_percentage_present (bool);

    double
    negative_uncertainty_percentage () const;

    double&
    negative_uncertainty_percentage ();

    void
    negative_uncertainty_percentage (double);

    // positive_uncertainty_percentage
    //
    bool
    positive_uncertainty_percentage_present () const;

    void
    positive_uncertainty_percentage_present (bool);

    double
    positive_uncertainty_percentage () const;

    double&
    positive_uncertainty_percentage ();

    void
    positive_uncertainty_percentage (double);

    // median
    //
    bool
    median_present () const;

    void
    median_present (bool);

    double
    median () const;

    double&
    median ();

    void
    median (double);

    // standard_deviation
    //
    bool
    standard_deviation_present () const;

    void
    standard_deviation_present (bool);

    double
    standard_deviation () const;

    double&
    standard_deviation ();

    void
    standard_deviation (double);

    // interquartile_range
    //
    bool
    interquartile_range_present () const;

    const ::common::two_doubles&
    interquartile_range () const;

    ::common::two_doubles&
    interquartile_range ();

    void
    interquartile_range (::common::two_doubles*);

    ::common::two_doubles*
    interquartile_range_detach ();

    // range
    //
    bool
    range_present () const;

    const ::common::two_doubles&
    range () const;

    ::common::two_doubles&
    range ();

    void
    range (::common::two_doubles*);

    ::common::two_doubles*
    range_detach ();

    // min
    //
    bool
    min_present () const;

    void
    min_present (bool);

    double
    min () const;

    double&
    min ();

    void
    min (double);

    // max
    //
    bool
    max_present () const;

    void
    max_present (bool);

    double
    max () const;

    double&
    max ();

    void
    max (double);

    // standard_error
    //
    bool
    standard_error_present () const;

    void
    standard_error_present (bool);

    double
    standard_error () const;

    double&
    standard_error ();

    void
    standard_error (double);

    // standard_error_of_the_mean
    //
    bool
    standard_error_of_the_mean_present () const;

    void
    standard_error_of_the_mean_present (bool);

    double
    standard_error_of_the_mean () const;

    double&
    standard_error_of_the_mean ();

    void
    standard_error_of_the_mean (double);

    // number_obs
    //
    bool
    number_obs_present () const;

    void
    number_obs_present (bool);

    int
    number_obs () const;

    int&
    number_obs ();

    void
    number_obs (int);

    // skewnesss
    //
    bool
    skewnesss_present () const;

    void
    skewnesss_present (bool);

    double
    skewnesss () const;

    double&
    skewnesss ();

    void
    skewnesss (double);

    // kurtosis
    //
    bool
    kurtosis_present () const;

    void
    kurtosis_present (bool);

    double
    kurtosis () const;

    double&
    kurtosis ();

    void
    kurtosis (double);

    void
    _copy (units_string&) const;

    private:
    ::std::string units_;
    unsigned char units_present_;
    ::std::string measurement_type_;
    unsigned char measurement_type_present_;
    double uncertainty_;
    unsigned char uncertainty_present_;
    double negative_uncertainty_;
    unsigned char negative_uncertainty_present_;
    double positive_uncertainty_;
    unsigned char positive_uncertainty_present_;
    double uncertainty_percentage_;
    unsigned char uncertainty_percentage_present_;
    double negative_uncertainty_percentage_;
    unsigned char negative_uncertainty_percentage_present_;
    double positive_uncertainty_percentage_;
    unsigned char positive_uncertainty_percentage_present_;
    double median_;
    unsigned char median_present_;
    double standard_deviation_;
    unsigned char standard_deviation_present_;
    ::common::two_doubles* interquartile_range_;
    ::common::two_doubles* range_;
    double min_;
    unsigned char min_present_;
    double max_;
    unsigned char max_present_;
    double standard_error_;
    unsigned char standard_error_present_;
    double standard_error_of_the_mean_;
    unsigned char standard_error_of_the_mean_present_;
    int number_obs_;
    unsigned char number_obs_present_;
    double skewnesss_;
    unsigned char skewnesss_present_;
    double kurtosis_;
    unsigned char kurtosis_present_;
  };

  // data_storage_formats (fixed-length)
  //
  class data_storage_formats
  {
    public:
    enum value_type
    {
      xml,
      XML,
      matlab,
      Matlab,
      MATLAB,
      hdf5,
      HDF5
    };

    data_storage_formats ();
    data_storage_formats (value_type);

    void
    value (value_type);

    operator value_type () const
    {
      return value_;
    }

    const char*
    string () const;

    private:
    value_type value_;
  };

  // threshold_type (fixed-length)
  //
  class threshold_type
  {
    public:
    enum value_type
    {
      positive,
      non_positive,
      negative,
      non_negative,
      lower_bound,
      upper_bound
    };

    threshold_type ();
    threshold_type (value_type);

    void
    value (value_type);

    operator value_type () const
    {
      return value_;
    }

    const char*
    string () const;

    private:
    value_type value_;
  };

  // transition_threshold (variable-length)
  //
  class transition_threshold: public ::common::units_decimal
  {
    private:
    transition_threshold (const transition_threshold&);
    transition_threshold& operator= (const transition_threshold&);

    public:
    transition_threshold ();

    transition_threshold*
    _clone () const;

    ~transition_threshold ();

    // quantity
    //
    const ::std::string&
    quantity () const;

    ::std::string&
    quantity ();

    void
    quantity (const ::std::string&);

    // type
    //
    const ::common::threshold_type&
    type () const;

    ::common::threshold_type&
    type ();

    void
    type (const ::common::threshold_type&);

    // variable_ID
    //
    bool
    variable_ID_present () const;

    void
    variable_ID_present (bool);

    unsigned long long
    variable_ID () const;

    unsigned long long&
    variable_ID ();

    void
    variable_ID (unsigned long long);

    void
    _copy (transition_threshold&) const;

    private:
    ::std::string quantity_;
    ::common::threshold_type type_;
    unsigned long long variable_ID_;
    unsigned char variable_ID_present_;
  };
}

#ifndef XSDE_DONT_INCLUDE_INLINE

#endif // XSDE_DONT_INCLUDE_INLINE

#ifndef XSDE_DONT_INCLUDE_INLINE
#include "common.ipp"
#endif // XSDE_DONT_INCLUDE_INLINE

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // COMMON_HPP
