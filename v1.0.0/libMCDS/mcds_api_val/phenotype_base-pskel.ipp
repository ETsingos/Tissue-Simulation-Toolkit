// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace phenotype_base
{
  // phenotype_type_pskel
  //

  inline
  phenotype_type_pskel::
  phenotype_type_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    phenotype_type_impl_ (0)
  {
    this->_enumeration_facet (_xsde_phenotype_type_pskel_enums_, 3UL);
  }

  inline
  phenotype_type_pskel::
  phenotype_type_pskel (phenotype_type_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    phenotype_type_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_phenotype_type_pskel_enums_, 3UL);
  }

  // phenotype_base_pskel
  //

  inline
  void phenotype_base_pskel::
  type_parser (::phenotype_base::phenotype_type_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  adhesion_parser (::phenotype_common::adhesion_pskel& p)
  {
    this->adhesion_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  adhesion_parser (::xml_schema::parser_map& m)
  {
    this->adhesion_parser_map_ = &m;
  }

  inline
  void phenotype_base_pskel::
  geometrical_properties_parser (::phenotype_common::geometrical_properties_pskel& p)
  {
    this->geometrical_properties_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  geometrical_properties_parser (::xml_schema::parser_map& m)
  {
    this->geometrical_properties_parser_map_ = &m;
  }

  inline
  void phenotype_base_pskel::
  mass_parser (::phenotype_common::mass_pskel& p)
  {
    this->mass_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  mass_parser (::xml_schema::parser_map& m)
  {
    this->mass_parser_map_ = &m;
  }

  inline
  void phenotype_base_pskel::
  mechanics_parser (::phenotype_common::mechanics_pskel& p)
  {
    this->mechanics_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  mechanics_parser (::xml_schema::parser_map& m)
  {
    this->mechanics_parser_map_ = &m;
  }

  inline
  void phenotype_base_pskel::
  motility_parser (::phenotype_common::motility_pskel& p)
  {
    this->motility_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  motility_parser (::xml_schema::parser_map& m)
  {
    this->motility_parser_map_ = &m;
  }

  inline
  void phenotype_base_pskel::
  PKPD_parser (::pkpd::PKPD_pskel& p)
  {
    this->PKPD_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  PKPD_parser (::xml_schema::parser_map& m)
  {
    this->PKPD_parser_map_ = &m;
  }

  inline
  void phenotype_base_pskel::
  timescale_parser (::phenotype_base::expected_timescale_pskel& p)
  {
    this->timescale_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  timescale_parser (::xml_schema::parser_map& m)
  {
    this->timescale_parser_map_ = &m;
  }

  inline
  void phenotype_base_pskel::
  transport_processes_parser (::phenotype_common::transport_processes_pskel& p)
  {
    this->transport_processes_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  transport_processes_parser (::xml_schema::parser_map& m)
  {
    this->transport_processes_parser_map_ = &m;
  }

  inline
  void phenotype_base_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void phenotype_base_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void phenotype_base_pskel::
  parsers (::phenotype_base::phenotype_type_pskel& type,
           ::phenotype_common::adhesion_pskel& adhesion,
           ::phenotype_common::geometrical_properties_pskel& geometrical_properties,
           ::phenotype_common::mass_pskel& mass,
           ::phenotype_common::mechanics_pskel& mechanics,
           ::phenotype_common::motility_pskel& motility,
           ::pkpd::PKPD_pskel& PKPD,
           ::phenotype_base::expected_timescale_pskel& timescale,
           ::phenotype_common::transport_processes_pskel& transport_processes,
           ::common::custom_pskel& custom)
  {
    this->type_parser_ = &type;
    this->adhesion_parser_ = &adhesion;
    this->geometrical_properties_parser_ = &geometrical_properties;
    this->mass_parser_ = &mass;
    this->mechanics_parser_ = &mechanics;
    this->motility_parser_ = &motility;
    this->PKPD_parser_ = &PKPD;
    this->timescale_parser_ = &timescale;
    this->transport_processes_parser_ = &transport_processes;
    this->custom_parser_ = &custom;
  }

  inline
  void phenotype_base_pskel::
  parser_maps (::xml_schema::parser_map& adhesion,
               ::xml_schema::parser_map& geometrical_properties,
               ::xml_schema::parser_map& mass,
               ::xml_schema::parser_map& mechanics,
               ::xml_schema::parser_map& motility,
               ::xml_schema::parser_map& PKPD,
               ::xml_schema::parser_map& timescale,
               ::xml_schema::parser_map& transport_processes,
               ::xml_schema::parser_map& custom)
  {
    this->adhesion_parser_map_ = &adhesion;
    this->geometrical_properties_parser_map_ = &geometrical_properties;
    this->mass_parser_map_ = &mass;
    this->mechanics_parser_map_ = &mechanics;
    this->motility_parser_map_ = &motility;
    this->PKPD_parser_map_ = &PKPD;
    this->timescale_parser_map_ = &timescale;
    this->transport_processes_parser_map_ = &transport_processes;
    this->custom_parser_map_ = &custom;
  }

  inline
  phenotype_base_pskel::
  phenotype_base_pskel ()
  : phenotype_base_impl_ (0),
    type_parser_ (0),
    adhesion_parser_ (0),
    adhesion_parser_map_ (0),
    geometrical_properties_parser_ (0),
    geometrical_properties_parser_map_ (0),
    mass_parser_ (0),
    mass_parser_map_ (0),
    mechanics_parser_ (0),
    mechanics_parser_map_ (0),
    motility_parser_ (0),
    motility_parser_map_ (0),
    PKPD_parser_ (0),
    PKPD_parser_map_ (0),
    timescale_parser_ (0),
    timescale_parser_map_ (0),
    transport_processes_parser_ (0),
    transport_processes_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  phenotype_base_pskel::
  phenotype_base_pskel (phenotype_base_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    phenotype_base_impl_ (impl),
    type_parser_ (0),
    adhesion_parser_ (0),
    adhesion_parser_map_ (0),
    geometrical_properties_parser_ (0),
    geometrical_properties_parser_map_ (0),
    mass_parser_ (0),
    mass_parser_map_ (0),
    mechanics_parser_ (0),
    mechanics_parser_map_ (0),
    motility_parser_ (0),
    motility_parser_map_ (0),
    PKPD_parser_ (0),
    PKPD_parser_map_ (0),
    timescale_parser_ (0),
    timescale_parser_map_ (0),
    transport_processes_parser_ (0),
    transport_processes_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // expected_timescale_pskel
  //

  inline
  void expected_timescale_pskel::
  cell_cycle_ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->cell_cycle_ID_parser_ = &p;
  }

  inline
  void expected_timescale_pskel::
  cell_cycle_phase_ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->cell_cycle_phase_ID_parser_ = &p;
  }

  inline
  void expected_timescale_pskel::
  cell_death_ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->cell_death_ID_parser_ = &p;
  }

  inline
  void expected_timescale_pskel::
  parsers (::xml_schema::string_pskel& units,
           ::xml_schema::string_pskel& measurement_type,
           ::xml_schema::double_pskel& uncertainty,
           ::xml_schema::double_pskel& negative_uncertainty,
           ::xml_schema::double_pskel& positive_uncertainty,
           ::xml_schema::double_pskel& uncertainty_percentage,
           ::xml_schema::double_pskel& negative_uncertainty_percentage,
           ::xml_schema::double_pskel& positive_uncertainty_percentage,
           ::xml_schema::double_pskel& median,
           ::xml_schema::double_pskel& standard_deviation,
           ::common::two_doubles_pskel& interquartile_range,
           ::common::two_doubles_pskel& range,
           ::xml_schema::double_pskel& min,
           ::xml_schema::double_pskel& max,
           ::xml_schema::double_pskel& standard_error,
           ::xml_schema::double_pskel& standard_error_of_the_mean,
           ::xml_schema::int_pskel& number_obs,
           ::xml_schema::double_pskel& skewnesss,
           ::xml_schema::double_pskel& kurtosis,
           ::xml_schema::unsigned_int_pskel& cell_cycle_ID,
           ::xml_schema::unsigned_int_pskel& cell_cycle_phase_ID,
           ::xml_schema::unsigned_int_pskel& cell_death_ID)
  {
    this->units_parser_ = &units;
    this->measurement_type_parser_ = &measurement_type;
    this->uncertainty_parser_ = &uncertainty;
    this->negative_uncertainty_parser_ = &negative_uncertainty;
    this->positive_uncertainty_parser_ = &positive_uncertainty;
    this->uncertainty_percentage_parser_ = &uncertainty_percentage;
    this->negative_uncertainty_percentage_parser_ = &negative_uncertainty_percentage;
    this->positive_uncertainty_percentage_parser_ = &positive_uncertainty_percentage;
    this->median_parser_ = &median;
    this->standard_deviation_parser_ = &standard_deviation;
    this->interquartile_range_parser_ = &interquartile_range;
    this->range_parser_ = &range;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->standard_error_parser_ = &standard_error;
    this->standard_error_of_the_mean_parser_ = &standard_error_of_the_mean;
    this->number_obs_parser_ = &number_obs;
    this->skewnesss_parser_ = &skewnesss;
    this->kurtosis_parser_ = &kurtosis;
    this->cell_cycle_ID_parser_ = &cell_cycle_ID;
    this->cell_cycle_phase_ID_parser_ = &cell_cycle_phase_ID;
    this->cell_death_ID_parser_ = &cell_death_ID;
  }

  inline
  expected_timescale_pskel::
  expected_timescale_pskel (::common::units_decimal_nonnegative_pskel* tiein)
  : ::common::units_decimal_nonnegative_pskel (tiein, 0),
    expected_timescale_impl_ (0),
    cell_cycle_ID_parser_ (0),
    cell_cycle_phase_ID_parser_ (0),
    cell_death_ID_parser_ (0)
  {
  }

  inline
  expected_timescale_pskel::
  expected_timescale_pskel (expected_timescale_pskel* impl, void*)
  : ::common::units_decimal_nonnegative_pskel (impl, 0),
    expected_timescale_impl_ (impl),
    cell_cycle_ID_parser_ (0),
    cell_cycle_phase_ID_parser_ (0),
    cell_death_ID_parser_ (0)
  {
  }

  // cell_parts_pskel
  //

  inline
  void cell_parts_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  phenotype_parser (::phenotype_base::phenotype_base_pskel& p)
  {
    this->phenotype_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  phenotype_parser (::xml_schema::parser_map& m)
  {
    this->phenotype_parser_map_ = &m;
  }

  inline
  void cell_parts_pskel::
  cell_part_parser (::phenotype_base::cell_parts_pskel& p)
  {
    this->cell_part_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  cell_part_parser (::xml_schema::parser_map& m)
  {
    this->cell_part_parser_map_ = &m;
  }

  inline
  void cell_parts_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void cell_parts_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void cell_parts_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::unsigned_int_pskel& ID,
           ::phenotype_base::phenotype_base_pskel& phenotype,
           ::phenotype_base::cell_parts_pskel& cell_part,
           ::common::custom_pskel& custom)
  {
    this->name_parser_ = &name;
    this->ID_parser_ = &ID;
    this->phenotype_parser_ = &phenotype;
    this->cell_part_parser_ = &cell_part;
    this->custom_parser_ = &custom;
  }

  inline
  void cell_parts_pskel::
  parser_maps (::xml_schema::parser_map& phenotype,
               ::xml_schema::parser_map& cell_part,
               ::xml_schema::parser_map& custom)
  {
    this->phenotype_parser_map_ = &phenotype;
    this->cell_part_parser_map_ = &cell_part;
    this->custom_parser_map_ = &custom;
  }

  inline
  cell_parts_pskel::
  cell_parts_pskel ()
  : cell_parts_impl_ (0),
    name_parser_ (0),
    ID_parser_ (0),
    phenotype_parser_ (0),
    phenotype_parser_map_ (0),
    cell_part_parser_ (0),
    cell_part_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  inline
  cell_parts_pskel::
  cell_parts_pskel (cell_parts_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    cell_parts_impl_ (impl),
    name_parser_ (0),
    ID_parser_ (0),
    phenotype_parser_ (0),
    phenotype_parser_map_ (0),
    cell_part_parser_ (0),
    cell_part_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

