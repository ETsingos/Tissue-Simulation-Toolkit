// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef METADATA_PSKEL_HPP
#define METADATA_PSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
namespace metadata
{
  class URL_pskel;
  class orcid_identifier_pskel;
  class orcid_person_pskel;
  class classification_pskel;
  class curation_pskel;
  class citation_pskel;
  class data_origin_pskel;
  class data_origins_pskel;
  class data_analysis_pskel;
  class software_pskel;
  class species_pskel;
  class disease_pskel;
  class patient_derived_pskel;
  class cell_origin_pskel;
  class MultiCellDB_pskel;
  class rights_pskel;
  class license_pskel;
  class LicenseDocument_pskel;
  class metadata_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/parser/map.hxx>
#include <xsde/cxx/parser/substitution-map-callback.hxx>
#include <xsde/cxx/parser/substitution-map-load.hxx>
#include <xsde/cxx/parser/validating/inheritance-map-load.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "metadata.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser map interface and default implementation.
  //
  using ::xsde::cxx::parser::parser_map;
  using ::xsde::cxx::parser::parser_map_impl;

  // Parser substitution map callack.
  //
  using ::xsde::cxx::parser::parser_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::parser::parser_smap_buckets;
  using ::xsde::cxx::parser::parser_smap_elements;
  using ::xsde::cxx::parser::validating::parser_imap_buckets;
  using ::xsde::cxx::parser::validating::parser_imap_elements;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "common-pskel.hpp"

namespace metadata
{
  class URL_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::metadata::URL
    post_URL () = 0;

    // Constructor.
    //
    URL_pskel (::xml_schema::string_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    URL_pskel* URL_impl_;
    URL_pskel (URL_pskel*, void*);
  };

  class orcid_identifier_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    path (const ::std::string&);

    virtual void
    given_names (const ::std::string&);

    virtual void
    family_name (const ::std::string&);

    virtual void
    email (const ::std::string&);

    virtual void
    url (const ::metadata::URL&);

    virtual void
    organization_name (const ::std::string&);

    virtual void
    department_name (const ::std::string&);

    virtual ::metadata::orcid_identifier
    post_orcid_identifier () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* path */,
             ::xml_schema::string_pskel& /* given-names */,
             ::xml_schema::string_pskel& /* family-name */,
             ::xml_schema::string_pskel& /* email */,
             ::metadata::URL_pskel& /* url */,
             ::xml_schema::string_pskel& /* organization-name */,
             ::xml_schema::string_pskel& /* department-name */);

    void
    parser_maps (::xml_schema::parser_map& /* path */,
                 ::xml_schema::parser_map& /* given-names */,
                 ::xml_schema::parser_map& /* family-name */,
                 ::xml_schema::parser_map& /* email */,
                 ::xml_schema::parser_map& /* url */,
                 ::xml_schema::parser_map& /* organization-name */,
                 ::xml_schema::parser_map& /* department-name */);

    // Individual element parsers.
    //
    void
    path_parser (::xml_schema::string_pskel&);

    void
    path_parser (::xml_schema::parser_map&);

    void
    given_names_parser (::xml_schema::string_pskel&);

    void
    given_names_parser (::xml_schema::parser_map&);

    void
    family_name_parser (::xml_schema::string_pskel&);

    void
    family_name_parser (::xml_schema::parser_map&);

    void
    email_parser (::xml_schema::string_pskel&);

    void
    email_parser (::xml_schema::parser_map&);

    void
    url_parser (::metadata::URL_pskel&);

    void
    url_parser (::xml_schema::parser_map&);

    void
    organization_name_parser (::xml_schema::string_pskel&);

    void
    organization_name_parser (::xml_schema::parser_map&);

    void
    department_name_parser (::xml_schema::string_pskel&);

    void
    department_name_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    orcid_identifier_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    orcid_identifier_pskel* orcid_identifier_impl_;
    orcid_identifier_pskel (orcid_identifier_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* path_parser_;
    ::xml_schema::parser_map* path_parser_map_;

    ::xml_schema::string_pskel* given_names_parser_;
    ::xml_schema::parser_map* given_names_parser_map_;

    ::xml_schema::string_pskel* family_name_parser_;
    ::xml_schema::parser_map* family_name_parser_map_;

    ::xml_schema::string_pskel* email_parser_;
    ::xml_schema::parser_map* email_parser_map_;

    ::metadata::URL_pskel* url_parser_;
    ::xml_schema::parser_map* url_parser_map_;

    ::xml_schema::string_pskel* organization_name_parser_;
    ::xml_schema::parser_map* organization_name_parser_map_;

    ::xml_schema::string_pskel* department_name_parser_;
    ::xml_schema::parser_map* department_name_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::orcid_identifier_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[7UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class orcid_person_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    orcid_identifier (const ::metadata::orcid_identifier&);

    virtual ::metadata::orcid_person*
    post_orcid_person () = 0;

    // Parser construction API.
    //
    void
    parsers (::metadata::orcid_identifier_pskel& /* orcid-identifier */);

    void
    parser_maps (::xml_schema::parser_map& /* orcid-identifier */);

    // Individual element parsers.
    //
    void
    orcid_identifier_parser (::metadata::orcid_identifier_pskel&);

    void
    orcid_identifier_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    orcid_person_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    orcid_person_pskel* orcid_person_impl_;
    orcid_person_pskel (orcid_person_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::metadata::orcid_identifier_pskel* orcid_identifier_parser_;
    ::xml_schema::parser_map* orcid_identifier_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::orcid_person_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class classification_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    classification_number (const ::std::string&);

    virtual void
    line (unsigned int);

    virtual void
    variant (unsigned int);

    virtual void
    branch (unsigned int);

    virtual void
    version (unsigned int);

    virtual ::metadata::classification
    post_classification () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* classification_number */,
             ::xml_schema::unsigned_int_pskel& /* line */,
             ::xml_schema::unsigned_int_pskel& /* variant */,
             ::xml_schema::unsigned_int_pskel& /* branch */,
             ::xml_schema::unsigned_int_pskel& /* version */);

    void
    parser_maps (::xml_schema::parser_map& /* classification_number */,
                 ::xml_schema::parser_map& /* line */,
                 ::xml_schema::parser_map& /* variant */,
                 ::xml_schema::parser_map& /* branch */,
                 ::xml_schema::parser_map& /* version */);

    // Individual element parsers.
    //
    void
    classification_number_parser (::xml_schema::string_pskel&);

    void
    classification_number_parser (::xml_schema::parser_map&);

    void
    line_parser (::xml_schema::unsigned_int_pskel&);

    void
    line_parser (::xml_schema::parser_map&);

    void
    variant_parser (::xml_schema::unsigned_int_pskel&);

    void
    variant_parser (::xml_schema::parser_map&);

    void
    branch_parser (::xml_schema::unsigned_int_pskel&);

    void
    branch_parser (::xml_schema::parser_map&);

    void
    version_parser (::xml_schema::unsigned_int_pskel&);

    void
    version_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    classification_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    classification_pskel* classification_impl_;
    classification_pskel (classification_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* classification_number_parser_;
    ::xml_schema::parser_map* classification_number_parser_map_;

    ::xml_schema::unsigned_int_pskel* line_parser_;
    ::xml_schema::parser_map* line_parser_map_;

    ::xml_schema::unsigned_int_pskel* variant_parser_;
    ::xml_schema::parser_map* variant_parser_map_;

    ::xml_schema::unsigned_int_pskel* branch_parser_;
    ::xml_schema::parser_map* branch_parser_map_;

    ::xml_schema::unsigned_int_pskel* version_parser_;
    ::xml_schema::parser_map* version_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::classification_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class curation_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    curated (bool);

    // Elements.
    //
    virtual void
    created (const ::xml_schema::date_time&);

    virtual void
    last_modified (const ::xml_schema::date_time&);

    enum choice_arm_tag
    {
      classification_tag,
      version_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    virtual void
    classification (const ::metadata::classification&);

    virtual void
    version (const ::std::string&);

    virtual void
    creator (::metadata::orcid_person*);

    virtual void
    current_contact (::metadata::orcid_person*);

    virtual void
    curator (::metadata::orcid_person*);

    virtual void
    last_modified_by (::metadata::orcid_person*);

    virtual ::metadata::curation*
    post_curation () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::boolean_pskel& /* curated */,
             ::xml_schema::date_time_pskel& /* created */,
             ::xml_schema::date_time_pskel& /* last_modified */,
             ::metadata::classification_pskel& /* classification */,
             ::xml_schema::string_pskel& /* version */,
             ::metadata::orcid_person_pskel& /* creator */,
             ::metadata::orcid_person_pskel& /* current_contact */,
             ::metadata::orcid_person_pskel& /* curator */,
             ::metadata::orcid_person_pskel& /* last_modified_by */);

    void
    parser_maps (::xml_schema::parser_map& /* created */,
                 ::xml_schema::parser_map& /* last_modified */,
                 ::xml_schema::parser_map& /* classification */,
                 ::xml_schema::parser_map& /* version */,
                 ::xml_schema::parser_map& /* creator */,
                 ::xml_schema::parser_map& /* current_contact */,
                 ::xml_schema::parser_map& /* curator */,
                 ::xml_schema::parser_map& /* last_modified_by */);

    // Individual attribute parsers.
    //
    void
    curated_parser (::xml_schema::boolean_pskel&);

    // Individual element parsers.
    //
    void
    created_parser (::xml_schema::date_time_pskel&);

    void
    created_parser (::xml_schema::parser_map&);

    void
    last_modified_parser (::xml_schema::date_time_pskel&);

    void
    last_modified_parser (::xml_schema::parser_map&);

    void
    classification_parser (::metadata::classification_pskel&);

    void
    classification_parser (::xml_schema::parser_map&);

    void
    version_parser (::xml_schema::string_pskel&);

    void
    version_parser (::xml_schema::parser_map&);

    void
    creator_parser (::metadata::orcid_person_pskel&);

    void
    creator_parser (::xml_schema::parser_map&);

    void
    current_contact_parser (::metadata::orcid_person_pskel&);

    void
    current_contact_parser (::xml_schema::parser_map&);

    void
    curator_parser (::metadata::orcid_person_pskel&);

    void
    curator_parser (::xml_schema::parser_map&);

    void
    last_modified_by_parser (::metadata::orcid_person_pskel&);

    void
    last_modified_by_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    curation_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    curation_pskel* curation_impl_;
    curation_pskel (curation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    virtual bool
    _attribute_impl_phase_two (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::boolean_pskel* curated_parser_;
    ::xml_schema::date_time_pskel* created_parser_;
    ::xml_schema::parser_map* created_parser_map_;

    ::xml_schema::date_time_pskel* last_modified_parser_;
    ::xml_schema::parser_map* last_modified_parser_map_;

    ::metadata::classification_pskel* classification_parser_;
    ::xml_schema::parser_map* classification_parser_map_;

    ::xml_schema::string_pskel* version_parser_;
    ::xml_schema::parser_map* version_parser_map_;

    ::metadata::orcid_person_pskel* creator_parser_;
    ::xml_schema::parser_map* creator_parser_map_;

    ::metadata::orcid_person_pskel* current_contact_parser_;
    ::xml_schema::parser_map* current_contact_parser_map_;

    ::metadata::orcid_person_pskel* curator_parser_;
    ::xml_schema::parser_map* curator_parser_map_;

    ::metadata::orcid_person_pskel* last_modified_by_parser_;
    ::xml_schema::parser_map* last_modified_by_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::curation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              const char*,
              bool);
  };

  class citation_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    text (const ::std::string&);

    virtual void
    DOI (const ::std::string&);

    virtual void
    URL (const ::metadata::URL&);

    virtual void
    PMID (const ::std::string&);

    virtual void
    PMCID (const ::std::string&);

    virtual void
    arXiv (const ::std::string&);

    virtual void
    notes (const ::std::string&);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::citation*
    post_citation () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* text */,
             ::xml_schema::string_pskel& /* DOI */,
             ::metadata::URL_pskel& /* URL */,
             ::xml_schema::string_pskel& /* PMID */,
             ::xml_schema::string_pskel& /* PMCID */,
             ::xml_schema::string_pskel& /* arXiv */,
             ::xml_schema::string_pskel& /* notes */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* text */,
                 ::xml_schema::parser_map& /* DOI */,
                 ::xml_schema::parser_map& /* URL */,
                 ::xml_schema::parser_map& /* PMID */,
                 ::xml_schema::parser_map& /* PMCID */,
                 ::xml_schema::parser_map& /* arXiv */,
                 ::xml_schema::parser_map& /* notes */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    text_parser (::xml_schema::string_pskel&);

    void
    text_parser (::xml_schema::parser_map&);

    void
    DOI_parser (::xml_schema::string_pskel&);

    void
    DOI_parser (::xml_schema::parser_map&);

    void
    URL_parser (::metadata::URL_pskel&);

    void
    URL_parser (::xml_schema::parser_map&);

    void
    PMID_parser (::xml_schema::string_pskel&);

    void
    PMID_parser (::xml_schema::parser_map&);

    void
    PMCID_parser (::xml_schema::string_pskel&);

    void
    PMCID_parser (::xml_schema::parser_map&);

    void
    arXiv_parser (::xml_schema::string_pskel&);

    void
    arXiv_parser (::xml_schema::parser_map&);

    void
    notes_parser (::xml_schema::string_pskel&);

    void
    notes_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    citation_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    citation_pskel* citation_impl_;
    citation_pskel (citation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* text_parser_;
    ::xml_schema::parser_map* text_parser_map_;

    ::xml_schema::string_pskel* DOI_parser_;
    ::xml_schema::parser_map* DOI_parser_map_;

    ::metadata::URL_pskel* URL_parser_;
    ::xml_schema::parser_map* URL_parser_map_;

    ::xml_schema::string_pskel* PMID_parser_;
    ::xml_schema::parser_map* PMID_parser_map_;

    ::xml_schema::string_pskel* PMCID_parser_;
    ::xml_schema::parser_map* PMCID_parser_map_;

    ::xml_schema::string_pskel* arXiv_parser_;
    ::xml_schema::parser_map* arXiv_parser_map_;

    ::xml_schema::string_pskel* notes_parser_;
    ::xml_schema::parser_map* notes_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::citation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class data_origin_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned long long);

    // Elements.
    //
    virtual void
    instrumentation_information (const ::std::string&);

    virtual void
    experimental_protocol (const ::std::string&);

    virtual void
    citation (::metadata::citation*);

    virtual void
    xpath (const ::std::string&);

    virtual void
    notes (const ::std::string&);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::data_origin*
    post_data_origin () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_long_pskel& /* ID */,
             ::xml_schema::string_pskel& /* instrumentation_information */,
             ::xml_schema::string_pskel& /* experimental_protocol */,
             ::metadata::citation_pskel& /* citation */,
             ::xml_schema::string_pskel& /* xpath */,
             ::xml_schema::string_pskel& /* notes */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* instrumentation_information */,
                 ::xml_schema::parser_map& /* experimental_protocol */,
                 ::xml_schema::parser_map& /* citation */,
                 ::xml_schema::parser_map& /* xpath */,
                 ::xml_schema::parser_map& /* notes */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_long_pskel&);

    // Individual element parsers.
    //
    void
    instrumentation_information_parser (::xml_schema::string_pskel&);

    void
    instrumentation_information_parser (::xml_schema::parser_map&);

    void
    experimental_protocol_parser (::xml_schema::string_pskel&);

    void
    experimental_protocol_parser (::xml_schema::parser_map&);

    void
    citation_parser (::metadata::citation_pskel&);

    void
    citation_parser (::xml_schema::parser_map&);

    void
    xpath_parser (::xml_schema::string_pskel&);

    void
    xpath_parser (::xml_schema::parser_map&);

    void
    notes_parser (::xml_schema::string_pskel&);

    void
    notes_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_origin_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    data_origin_pskel* data_origin_impl_;
    data_origin_pskel (data_origin_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_long_pskel* ID_parser_;
    ::xml_schema::string_pskel* instrumentation_information_parser_;
    ::xml_schema::parser_map* instrumentation_information_parser_map_;

    ::xml_schema::string_pskel* experimental_protocol_parser_;
    ::xml_schema::parser_map* experimental_protocol_parser_map_;

    ::metadata::citation_pskel* citation_parser_;
    ::xml_schema::parser_map* citation_parser_map_;

    ::xml_schema::string_pskel* xpath_parser_;
    ::xml_schema::parser_map* xpath_parser_map_;

    ::xml_schema::string_pskel* notes_parser_;
    ::xml_schema::parser_map* notes_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::data_origin_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class data_origins_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    data_origin (::metadata::data_origin*);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::data_origins*
    post_data_origins () = 0;

    // Parser construction API.
    //
    void
    parsers (::metadata::data_origin_pskel& /* data_origin */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* data_origin */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    data_origin_parser (::metadata::data_origin_pskel&);

    void
    data_origin_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_origins_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    data_origins_pskel* data_origins_impl_;
    data_origins_pskel (data_origins_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::metadata::data_origin_pskel* data_origin_parser_;
    ::xml_schema::parser_map* data_origin_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::data_origins_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class data_analysis_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    URL (const ::metadata::URL&);

    virtual void
    citation (::metadata::citation*);

    virtual void
    software (::metadata::software*);

    virtual void
    xpath (const ::std::string&);

    virtual void
    notes (const ::std::string&);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::data_analysis*
    post_data_analysis () = 0;

    // Parser construction API.
    //
    void
    parsers (::metadata::URL_pskel& /* URL */,
             ::metadata::citation_pskel& /* citation */,
             ::metadata::software_pskel& /* software */,
             ::xml_schema::string_pskel& /* xpath */,
             ::xml_schema::string_pskel& /* notes */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* URL */,
                 ::xml_schema::parser_map& /* citation */,
                 ::xml_schema::parser_map& /* software */,
                 ::xml_schema::parser_map& /* xpath */,
                 ::xml_schema::parser_map& /* notes */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    URL_parser (::metadata::URL_pskel&);

    void
    URL_parser (::xml_schema::parser_map&);

    void
    citation_parser (::metadata::citation_pskel&);

    void
    citation_parser (::xml_schema::parser_map&);

    void
    software_parser (::metadata::software_pskel&);

    void
    software_parser (::xml_schema::parser_map&);

    void
    xpath_parser (::xml_schema::string_pskel&);

    void
    xpath_parser (::xml_schema::parser_map&);

    void
    notes_parser (::xml_schema::string_pskel&);

    void
    notes_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_analysis_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    data_analysis_pskel* data_analysis_impl_;
    data_analysis_pskel (data_analysis_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::metadata::URL_pskel* URL_parser_;
    ::xml_schema::parser_map* URL_parser_map_;

    ::metadata::citation_pskel* citation_parser_;
    ::xml_schema::parser_map* citation_parser_map_;

    ::metadata::software_pskel* software_parser_;
    ::xml_schema::parser_map* software_parser_map_;

    ::xml_schema::string_pskel* xpath_parser_;
    ::xml_schema::parser_map* xpath_parser_map_;

    ::xml_schema::string_pskel* notes_parser_;
    ::xml_schema::parser_map* notes_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::data_analysis_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class software_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    software_name (const ::std::string&);

    virtual void
    software_version (const ::std::string&);

    virtual void
    software_input_configuration (::common::custom*);

    virtual void
    name (const ::std::string&);

    virtual void
    version (const ::std::string&);

    virtual void
    input_configuration (::common::custom*);

    virtual void
    URL (const ::metadata::URL&);

    virtual void
    creator (::metadata::orcid_person*);

    virtual void
    citation (::metadata::citation*);

    virtual void
    user (::metadata::orcid_person*);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::software*
    post_software () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* software_name */,
             ::xml_schema::string_pskel& /* software_version */,
             ::common::custom_pskel& /* software_input_configuration */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* version */,
             ::common::custom_pskel& /* input_configuration */,
             ::metadata::URL_pskel& /* URL */,
             ::metadata::orcid_person_pskel& /* creator */,
             ::metadata::citation_pskel& /* citation */,
             ::metadata::orcid_person_pskel& /* user */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* software_name */,
                 ::xml_schema::parser_map& /* software_version */,
                 ::xml_schema::parser_map& /* software_input_configuration */,
                 ::xml_schema::parser_map& /* name */,
                 ::xml_schema::parser_map& /* version */,
                 ::xml_schema::parser_map& /* input_configuration */,
                 ::xml_schema::parser_map& /* URL */,
                 ::xml_schema::parser_map& /* creator */,
                 ::xml_schema::parser_map& /* citation */,
                 ::xml_schema::parser_map& /* user */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    software_name_parser (::xml_schema::string_pskel&);

    void
    software_name_parser (::xml_schema::parser_map&);

    void
    software_version_parser (::xml_schema::string_pskel&);

    void
    software_version_parser (::xml_schema::parser_map&);

    void
    software_input_configuration_parser (::common::custom_pskel&);

    void
    software_input_configuration_parser (::xml_schema::parser_map&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::parser_map&);

    void
    version_parser (::xml_schema::string_pskel&);

    void
    version_parser (::xml_schema::parser_map&);

    void
    input_configuration_parser (::common::custom_pskel&);

    void
    input_configuration_parser (::xml_schema::parser_map&);

    void
    URL_parser (::metadata::URL_pskel&);

    void
    URL_parser (::xml_schema::parser_map&);

    void
    creator_parser (::metadata::orcid_person_pskel&);

    void
    creator_parser (::xml_schema::parser_map&);

    void
    citation_parser (::metadata::citation_pskel&);

    void
    citation_parser (::xml_schema::parser_map&);

    void
    user_parser (::metadata::orcid_person_pskel&);

    void
    user_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    software_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    software_pskel* software_impl_;
    software_pskel (software_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* software_name_parser_;
    ::xml_schema::parser_map* software_name_parser_map_;

    ::xml_schema::string_pskel* software_version_parser_;
    ::xml_schema::parser_map* software_version_parser_map_;

    ::common::custom_pskel* software_input_configuration_parser_;
    ::xml_schema::parser_map* software_input_configuration_parser_map_;

    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::parser_map* name_parser_map_;

    ::xml_schema::string_pskel* version_parser_;
    ::xml_schema::parser_map* version_parser_map_;

    ::common::custom_pskel* input_configuration_parser_;
    ::xml_schema::parser_map* input_configuration_parser_map_;

    ::metadata::URL_pskel* URL_parser_;
    ::xml_schema::parser_map* URL_parser_map_;

    ::metadata::orcid_person_pskel* creator_parser_;
    ::xml_schema::parser_map* creator_parser_map_;

    ::metadata::citation_pskel* citation_parser_;
    ::xml_schema::parser_map* citation_parser_map_;

    ::metadata::orcid_person_pskel* user_parser_;
    ::xml_schema::parser_map* user_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::software_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class species_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    MeSH_ID (const ::std::string&);

    virtual ::metadata::species
    post_species () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* MeSH_ID */);

    // Individual attribute parsers.
    //
    void
    MeSH_ID_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    species_pskel (::xml_schema::string_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    species_pskel* species_impl_;
    species_pskel (species_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* MeSH_ID_parser_;
  };

  class disease_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    EFO_ID (const ::std::string&);

    virtual void
    DOID_ID (const ::std::string&);

    virtual ::metadata::disease
    post_disease () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* EFO_ID */,
             ::xml_schema::string_pskel& /* DOID_ID */);

    // Individual attribute parsers.
    //
    void
    EFO_ID_parser (::xml_schema::string_pskel&);

    void
    DOID_ID_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    disease_pskel (::xml_schema::string_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    disease_pskel* disease_impl_;
    disease_pskel (disease_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* EFO_ID_parser_;
    ::xml_schema::string_pskel* DOID_ID_parser_;
  };

  class patient_derived_pskel: public ::xml_schema::boolean_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    patient_ID (const ::std::string&);

    virtual ::metadata::patient_derived
    post_patient_derived () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* patient_ID */);

    // Individual attribute parsers.
    //
    void
    patient_ID_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    patient_derived_pskel (::xml_schema::boolean_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual bool
    post_boolean ();

    protected:
    patient_derived_pskel* patient_derived_impl_;
    patient_derived_pskel (patient_derived_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* patient_ID_parser_;
  };

  class cell_origin_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    BTO_ID (const ::std::string&);

    virtual void
    CLO_ID (const ::std::string&);

    virtual void
    species (const ::metadata::species&);

    virtual void
    strain (const ::std::string&);

    virtual void
    organ (const ::std::string&);

    virtual void
    disease (const ::metadata::disease&);

    virtual void
    morphology (const ::std::string&);

    virtual void
    patient_derived (const ::metadata::patient_derived&);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::cell_origin*
    post_cell_origin () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* BTO_ID */,
             ::xml_schema::string_pskel& /* CLO_ID */,
             ::metadata::species_pskel& /* species */,
             ::xml_schema::string_pskel& /* strain */,
             ::xml_schema::string_pskel& /* organ */,
             ::metadata::disease_pskel& /* disease */,
             ::xml_schema::string_pskel& /* morphology */,
             ::metadata::patient_derived_pskel& /* patient_derived */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* BTO_ID */,
                 ::xml_schema::parser_map& /* CLO_ID */,
                 ::xml_schema::parser_map& /* species */,
                 ::xml_schema::parser_map& /* strain */,
                 ::xml_schema::parser_map& /* organ */,
                 ::xml_schema::parser_map& /* disease */,
                 ::xml_schema::parser_map& /* morphology */,
                 ::xml_schema::parser_map& /* patient_derived */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    BTO_ID_parser (::xml_schema::string_pskel&);

    void
    BTO_ID_parser (::xml_schema::parser_map&);

    void
    CLO_ID_parser (::xml_schema::string_pskel&);

    void
    CLO_ID_parser (::xml_schema::parser_map&);

    void
    species_parser (::metadata::species_pskel&);

    void
    species_parser (::xml_schema::parser_map&);

    void
    strain_parser (::xml_schema::string_pskel&);

    void
    strain_parser (::xml_schema::parser_map&);

    void
    organ_parser (::xml_schema::string_pskel&);

    void
    organ_parser (::xml_schema::parser_map&);

    void
    disease_parser (::metadata::disease_pskel&);

    void
    disease_parser (::xml_schema::parser_map&);

    void
    morphology_parser (::xml_schema::string_pskel&);

    void
    morphology_parser (::xml_schema::parser_map&);

    void
    patient_derived_parser (::metadata::patient_derived_pskel&);

    void
    patient_derived_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_origin_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    cell_origin_pskel* cell_origin_impl_;
    cell_origin_pskel (cell_origin_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* BTO_ID_parser_;
    ::xml_schema::parser_map* BTO_ID_parser_map_;

    ::xml_schema::string_pskel* CLO_ID_parser_;
    ::xml_schema::parser_map* CLO_ID_parser_map_;

    ::metadata::species_pskel* species_parser_;
    ::xml_schema::parser_map* species_parser_map_;

    ::xml_schema::string_pskel* strain_parser_;
    ::xml_schema::parser_map* strain_parser_map_;

    ::xml_schema::string_pskel* organ_parser_;
    ::xml_schema::parser_map* organ_parser_map_;

    ::metadata::disease_pskel* disease_parser_;
    ::xml_schema::parser_map* disease_parser_map_;

    ::xml_schema::string_pskel* morphology_parser_;
    ::xml_schema::parser_map* morphology_parser_map_;

    ::metadata::patient_derived_pskel* patient_derived_parser_;
    ::xml_schema::parser_map* patient_derived_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::cell_origin_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[9UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class MultiCellDB_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    ID (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual ::metadata::MultiCellDB
    post_MultiCellDB () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* ID */,
             ::xml_schema::string_pskel& /* name */);

    void
    parser_maps (::xml_schema::parser_map& /* ID */,
                 ::xml_schema::parser_map& /* name */);

    // Individual element parsers.
    //
    void
    ID_parser (::xml_schema::string_pskel&);

    void
    ID_parser (::xml_schema::parser_map&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    MultiCellDB_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    MultiCellDB_pskel* MultiCellDB_impl_;
    MultiCellDB_pskel (MultiCellDB_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* ID_parser_;
    ::xml_schema::parser_map* ID_parser_map_;

    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::parser_map* name_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::MultiCellDB_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[2UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class rights_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    license (::metadata::license*);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::rights*
    post_rights () = 0;

    // Parser construction API.
    //
    void
    parsers (::metadata::license_pskel& /* license */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* license */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    license_parser (::metadata::license_pskel&);

    void
    license_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    rights_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    rights_pskel* rights_impl_;
    rights_pskel (rights_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::metadata::license_pskel* license_parser_;
    ::xml_schema::parser_map* license_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::rights_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class license_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    LicenseDocument (::metadata::LicenseDocument*);

    virtual void
    notes (const ::std::string&);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::license*
    post_license () = 0;

    // Parser construction API.
    //
    void
    parsers (::metadata::LicenseDocument_pskel& /* LicenseDocument */,
             ::xml_schema::string_pskel& /* notes */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* LicenseDocument */,
                 ::xml_schema::parser_map& /* notes */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    LicenseDocument_parser (::metadata::LicenseDocument_pskel&);

    void
    LicenseDocument_parser (::xml_schema::parser_map&);

    void
    notes_parser (::xml_schema::string_pskel&);

    void
    notes_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    license_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    license_pskel* license_impl_;
    license_pskel (license_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::metadata::LicenseDocument_pskel* LicenseDocument_parser_;
    ::xml_schema::parser_map* LicenseDocument_parser_map_;

    ::xml_schema::string_pskel* notes_parser_;
    ::xml_schema::parser_map* notes_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::license_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class LicenseDocument_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    name (const ::std::string&);

    virtual void
    URL (const ::metadata::URL&);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::LicenseDocument*
    post_LicenseDocument () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::metadata::URL_pskel& /* URL */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* name */,
                 ::xml_schema::parser_map& /* URL */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::parser_map&);

    void
    URL_parser (::metadata::URL_pskel&);

    void
    URL_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    LicenseDocument_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    LicenseDocument_pskel* LicenseDocument_impl_;
    LicenseDocument_pskel (LicenseDocument_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::parser_map* name_parser_map_;

    ::metadata::URL_pskel* URL_parser_;
    ::xml_schema::parser_map* URL_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::LicenseDocument_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class metadata_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    MultiCellDB (const ::metadata::MultiCellDB&);

    virtual void
    description (const ::std::string&);

    virtual void
    software (::metadata::software*);

    virtual void
    citation (::metadata::citation*);

    virtual void
    curation (::metadata::curation*);

    virtual void
    data_origins (::metadata::data_origins*);

    virtual void
    data_analysis (::metadata::data_analysis*);

    virtual void
    rights (::metadata::rights*);

    virtual void
    cell_origin (::metadata::cell_origin*);

    virtual void
    current_time (::common::units_decimal_nonnegative*);

    virtual void
    current_runtime (::common::units_decimal_nonnegative*);

    virtual void
    created (const ::xml_schema::date_time&);

    virtual void
    last_modified (const ::xml_schema::date_time&);

    virtual void
    notes (const ::std::string&);

    virtual void
    custom (::common::custom*);

    virtual ::metadata::metadata*
    post_metadata () = 0;

    // Parser construction API.
    //
    void
    parsers (::metadata::MultiCellDB_pskel& /* MultiCellDB */,
             ::xml_schema::string_pskel& /* description */,
             ::metadata::software_pskel& /* software */,
             ::metadata::citation_pskel& /* citation */,
             ::metadata::curation_pskel& /* curation */,
             ::metadata::data_origins_pskel& /* data_origins */,
             ::metadata::data_analysis_pskel& /* data_analysis */,
             ::metadata::rights_pskel& /* rights */,
             ::metadata::cell_origin_pskel& /* cell_origin */,
             ::common::units_decimal_nonnegative_pskel& /* current_time */,
             ::common::units_decimal_nonnegative_pskel& /* current_runtime */,
             ::xml_schema::date_time_pskel& /* created */,
             ::xml_schema::date_time_pskel& /* last_modified */,
             ::xml_schema::string_pskel& /* notes */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* MultiCellDB */,
                 ::xml_schema::parser_map& /* description */,
                 ::xml_schema::parser_map& /* software */,
                 ::xml_schema::parser_map& /* citation */,
                 ::xml_schema::parser_map& /* curation */,
                 ::xml_schema::parser_map& /* data_origins */,
                 ::xml_schema::parser_map& /* data_analysis */,
                 ::xml_schema::parser_map& /* rights */,
                 ::xml_schema::parser_map& /* cell_origin */,
                 ::xml_schema::parser_map& /* current_time */,
                 ::xml_schema::parser_map& /* current_runtime */,
                 ::xml_schema::parser_map& /* created */,
                 ::xml_schema::parser_map& /* last_modified */,
                 ::xml_schema::parser_map& /* notes */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    MultiCellDB_parser (::metadata::MultiCellDB_pskel&);

    void
    MultiCellDB_parser (::xml_schema::parser_map&);

    void
    description_parser (::xml_schema::string_pskel&);

    void
    description_parser (::xml_schema::parser_map&);

    void
    software_parser (::metadata::software_pskel&);

    void
    software_parser (::xml_schema::parser_map&);

    void
    citation_parser (::metadata::citation_pskel&);

    void
    citation_parser (::xml_schema::parser_map&);

    void
    curation_parser (::metadata::curation_pskel&);

    void
    curation_parser (::xml_schema::parser_map&);

    void
    data_origins_parser (::metadata::data_origins_pskel&);

    void
    data_origins_parser (::xml_schema::parser_map&);

    void
    data_analysis_parser (::metadata::data_analysis_pskel&);

    void
    data_analysis_parser (::xml_schema::parser_map&);

    void
    rights_parser (::metadata::rights_pskel&);

    void
    rights_parser (::xml_schema::parser_map&);

    void
    cell_origin_parser (::metadata::cell_origin_pskel&);

    void
    cell_origin_parser (::xml_schema::parser_map&);

    void
    current_time_parser (::common::units_decimal_nonnegative_pskel&);

    void
    current_time_parser (::xml_schema::parser_map&);

    void
    current_runtime_parser (::common::units_decimal_nonnegative_pskel&);

    void
    current_runtime_parser (::xml_schema::parser_map&);

    void
    created_parser (::xml_schema::date_time_pskel&);

    void
    created_parser (::xml_schema::parser_map&);

    void
    last_modified_parser (::xml_schema::date_time_pskel&);

    void
    last_modified_parser (::xml_schema::parser_map&);

    void
    notes_parser (::xml_schema::string_pskel&);

    void
    notes_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    metadata_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    metadata_pskel* metadata_impl_;
    metadata_pskel (metadata_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::metadata::MultiCellDB_pskel* MultiCellDB_parser_;
    ::xml_schema::parser_map* MultiCellDB_parser_map_;

    ::xml_schema::string_pskel* description_parser_;
    ::xml_schema::parser_map* description_parser_map_;

    ::metadata::software_pskel* software_parser_;
    ::xml_schema::parser_map* software_parser_map_;

    ::metadata::citation_pskel* citation_parser_;
    ::xml_schema::parser_map* citation_parser_map_;

    ::metadata::curation_pskel* curation_parser_;
    ::xml_schema::parser_map* curation_parser_map_;

    ::metadata::data_origins_pskel* data_origins_parser_;
    ::xml_schema::parser_map* data_origins_parser_map_;

    ::metadata::data_analysis_pskel* data_analysis_parser_;
    ::xml_schema::parser_map* data_analysis_parser_map_;

    ::metadata::rights_pskel* rights_parser_;
    ::xml_schema::parser_map* rights_parser_map_;

    ::metadata::cell_origin_pskel* cell_origin_parser_;
    ::xml_schema::parser_map* cell_origin_parser_map_;

    ::common::units_decimal_nonnegative_pskel* current_time_parser_;
    ::xml_schema::parser_map* current_time_parser_map_;

    ::common::units_decimal_nonnegative_pskel* current_runtime_parser_;
    ::xml_schema::parser_map* current_runtime_parser_map_;

    ::xml_schema::date_time_pskel* created_parser_;
    ::xml_schema::parser_map* created_parser_map_;

    ::xml_schema::date_time_pskel* last_modified_parser_;
    ::xml_schema::parser_map* last_modified_parser_map_;

    ::xml_schema::string_pskel* notes_parser_;
    ::xml_schema::parser_map* notes_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::metadata::metadata_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };
}

#include "metadata-pskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // METADATA_PSKEL_HPP
