// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PKPD_PSKEL_HPP
#define PKPD_PSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
namespace pkpd
{
  class pharmacokinetics_pskel;
  class drug_pskel;
  class drug_dose_pskel;
  class drug_pk_pskel;
  class dose_pskel;
  class therapy_pskel;
  class response_pskel;
  class response_observation_pskel;
  class pharmacodynamics_pskel;
  class therapy_measurement_set_pskel;
  class PKPD_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/parser/map.hxx>
#include <xsde/cxx/parser/substitution-map-callback.hxx>
#include <xsde/cxx/parser/substitution-map-load.hxx>
#include <xsde/cxx/parser/validating/inheritance-map-load.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "pkpd.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser map interface and default implementation.
  //
  using ::xsde::cxx::parser::parser_map;
  using ::xsde::cxx::parser::parser_map_impl;

  // Parser substitution map callack.
  //
  using ::xsde::cxx::parser::parser_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::parser::parser_smap_buckets;
  using ::xsde::cxx::parser::parser_smap_elements;
  using ::xsde::cxx::parser::validating::parser_imap_buckets;
  using ::xsde::cxx::parser::validating::parser_imap_elements;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "common-pskel.hpp"

#include "variables-pskel.hpp"

namespace pkpd
{
  class pharmacokinetics_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    inactivation_rate (::common::units_decimal*);

    virtual void
    half_life (::common::units_decimal*);

    virtual ::pkpd::pharmacokinetics*
    post_pharmacokinetics () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_pskel& /* inactivation_rate */,
             ::common::units_decimal_pskel& /* half_life */);

    void
    parser_maps (::xml_schema::parser_map& /* inactivation_rate */,
                 ::xml_schema::parser_map& /* half_life */);

    // Individual element parsers.
    //
    void
    inactivation_rate_parser (::common::units_decimal_pskel&);

    void
    inactivation_rate_parser (::xml_schema::parser_map&);

    void
    half_life_parser (::common::units_decimal_pskel&);

    void
    half_life_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    pharmacokinetics_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    pharmacokinetics_pskel* pharmacokinetics_impl_;
    pharmacokinetics_pskel (pharmacokinetics_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_pskel* inactivation_rate_parser_;
    ::xml_schema::parser_map* inactivation_rate_parser_map_;

    ::common::units_decimal_pskel* half_life_parser_;
    ::xml_schema::parser_map* half_life_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::pharmacokinetics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class drug_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    enum choice_arm_tag
    {
      dose_tag,
      pharmacokinetics_tag
    };

    virtual void
    choice_arm (choice_arm_tag);

    virtual void
    dose (::pkpd::dose*);

    virtual void
    pharmacokinetics (::pkpd::pharmacokinetics*);

    virtual ::pkpd::drug*
    post_drug () = 0;

    // Parser construction API.
    //
    void
    parsers (::pkpd::dose_pskel& /* dose */,
             ::pkpd::pharmacokinetics_pskel& /* pharmacokinetics */);

    void
    parser_maps (::xml_schema::parser_map& /* dose */,
                 ::xml_schema::parser_map& /* pharmacokinetics */);

    // Individual element parsers.
    //
    void
    dose_parser (::pkpd::dose_pskel&);

    void
    dose_parser (::xml_schema::parser_map&);

    void
    pharmacokinetics_parser (::pkpd::pharmacokinetics_pskel&);

    void
    pharmacokinetics_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    drug_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    drug_pskel* drug_impl_;
    drug_pskel (drug_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_two (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);

    protected:
    ::pkpd::dose_pskel* dose_parser_;
    ::xml_schema::parser_map* dose_parser_map_;

    ::pkpd::pharmacokinetics_pskel* pharmacokinetics_parser_;
    ::xml_schema::parser_map* pharmacokinetics_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::drug_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              const char*,
              bool);
  };

  class drug_dose_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned short);

    virtual void
    ChEBI_ID (const ::std::string&);

    virtual void
    MeSH_ID (const ::std::string&);

    virtual void
    DrugBank_ID (const ::std::string&);

    virtual void
    GMO_ID (const ::std::string&);

    virtual void
    GO_ID (const ::std::string&);

    virtual void
    UniProt_ID (const ::std::string&);

    virtual void
    PR_ID (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    dose (::pkpd::dose*);

    virtual ::pkpd::drug_dose*
    post_drug_dose () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_short_pskel& /* ID */,
             ::xml_schema::string_pskel& /* ChEBI_ID */,
             ::xml_schema::string_pskel& /* MeSH_ID */,
             ::xml_schema::string_pskel& /* DrugBank_ID */,
             ::xml_schema::string_pskel& /* GMO_ID */,
             ::xml_schema::string_pskel& /* GO_ID */,
             ::xml_schema::string_pskel& /* UniProt_ID */,
             ::xml_schema::string_pskel& /* PR_ID */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* units */,
             ::pkpd::dose_pskel& /* dose */);

    void
    parser_maps (::xml_schema::parser_map& /* dose */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_short_pskel&);

    void
    ChEBI_ID_parser (::xml_schema::string_pskel&);

    void
    MeSH_ID_parser (::xml_schema::string_pskel&);

    void
    DrugBank_ID_parser (::xml_schema::string_pskel&);

    void
    GMO_ID_parser (::xml_schema::string_pskel&);

    void
    GO_ID_parser (::xml_schema::string_pskel&);

    void
    UniProt_ID_parser (::xml_schema::string_pskel&);

    void
    PR_ID_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    units_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    dose_parser (::pkpd::dose_pskel&);

    void
    dose_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    drug_dose_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    drug_dose_pskel* drug_dose_impl_;
    drug_dose_pskel (drug_dose_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_short_pskel* ID_parser_;
    ::xml_schema::string_pskel* ChEBI_ID_parser_;
    ::xml_schema::string_pskel* MeSH_ID_parser_;
    ::xml_schema::string_pskel* DrugBank_ID_parser_;
    ::xml_schema::string_pskel* GMO_ID_parser_;
    ::xml_schema::string_pskel* GO_ID_parser_;
    ::xml_schema::string_pskel* UniProt_ID_parser_;
    ::xml_schema::string_pskel* PR_ID_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* units_parser_;
    ::pkpd::dose_pskel* dose_parser_;
    ::xml_schema::parser_map* dose_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::drug_dose_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class drug_pk_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned short);

    virtual void
    ChEBI_ID (const ::std::string&);

    virtual void
    MeSH_ID (const ::std::string&);

    virtual void
    DrugBank_ID (const ::std::string&);

    virtual void
    GMO_ID (const ::std::string&);

    virtual void
    GO_ID (const ::std::string&);

    virtual void
    UniProt_ID (const ::std::string&);

    virtual void
    PR_ID (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    units (const ::std::string&);

    // Elements.
    //
    virtual void
    pharmacokinetics (::pkpd::pharmacokinetics*);

    virtual ::pkpd::drug_pk*
    post_drug_pk () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_short_pskel& /* ID */,
             ::xml_schema::string_pskel& /* ChEBI_ID */,
             ::xml_schema::string_pskel& /* MeSH_ID */,
             ::xml_schema::string_pskel& /* DrugBank_ID */,
             ::xml_schema::string_pskel& /* GMO_ID */,
             ::xml_schema::string_pskel& /* GO_ID */,
             ::xml_schema::string_pskel& /* UniProt_ID */,
             ::xml_schema::string_pskel& /* PR_ID */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* units */,
             ::pkpd::pharmacokinetics_pskel& /* pharmacokinetics */);

    void
    parser_maps (::xml_schema::parser_map& /* pharmacokinetics */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_short_pskel&);

    void
    ChEBI_ID_parser (::xml_schema::string_pskel&);

    void
    MeSH_ID_parser (::xml_schema::string_pskel&);

    void
    DrugBank_ID_parser (::xml_schema::string_pskel&);

    void
    GMO_ID_parser (::xml_schema::string_pskel&);

    void
    GO_ID_parser (::xml_schema::string_pskel&);

    void
    UniProt_ID_parser (::xml_schema::string_pskel&);

    void
    PR_ID_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    units_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    pharmacokinetics_parser (::pkpd::pharmacokinetics_pskel&);

    void
    pharmacokinetics_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    drug_pk_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    drug_pk_pskel* drug_pk_impl_;
    drug_pk_pskel (drug_pk_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_short_pskel* ID_parser_;
    ::xml_schema::string_pskel* ChEBI_ID_parser_;
    ::xml_schema::string_pskel* MeSH_ID_parser_;
    ::xml_schema::string_pskel* DrugBank_ID_parser_;
    ::xml_schema::string_pskel* GMO_ID_parser_;
    ::xml_schema::string_pskel* GO_ID_parser_;
    ::xml_schema::string_pskel* UniProt_ID_parser_;
    ::xml_schema::string_pskel* PR_ID_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* units_parser_;
    ::pkpd::pharmacokinetics_pskel* pharmacokinetics_parser_;
    ::xml_schema::parser_map* pharmacokinetics_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::drug_pk_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class dose_pskel: public ::common::units_decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    type (const ::std::string&);

    virtual ::pkpd::dose*
    post_dose () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::string_pskel& /* units */,
             ::xml_schema::string_pskel& /* measurement_type */,
             ::xml_schema::double_pskel& /* uncertainty */,
             ::xml_schema::double_pskel& /* negative_uncertainty */,
             ::xml_schema::double_pskel& /* positive_uncertainty */,
             ::xml_schema::double_pskel& /* uncertainty_percentage */,
             ::xml_schema::double_pskel& /* negative_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* positive_uncertainty_percentage */,
             ::xml_schema::double_pskel& /* median */,
             ::xml_schema::double_pskel& /* standard_deviation */,
             ::common::two_doubles_pskel& /* interquartile_range */,
             ::common::two_doubles_pskel& /* range */,
             ::xml_schema::double_pskel& /* min */,
             ::xml_schema::double_pskel& /* max */,
             ::xml_schema::double_pskel& /* standard_error */,
             ::xml_schema::double_pskel& /* standard_error_of_the_mean */,
             ::xml_schema::int_pskel& /* number_obs */,
             ::xml_schema::double_pskel& /* skewnesss */,
             ::xml_schema::double_pskel& /* kurtosis */,
             ::xml_schema::string_pskel& /* type */);

    // Individual attribute parsers.
    //
    void
    type_parser (::xml_schema::string_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    dose_pskel (::common::units_decimal_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::common::units_decimal*
    post_units_decimal ();

    protected:
    dose_pskel* dose_impl_;
    dose_pskel (dose_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::string_pskel* type_parser_;
  };

  class therapy_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    drug (::pkpd::drug_dose*);

    virtual ::pkpd::therapy*
    post_therapy () = 0;

    // Parser construction API.
    //
    void
    parsers (::pkpd::drug_dose_pskel& /* drug */);

    void
    parser_maps (::xml_schema::parser_map& /* drug */);

    // Individual element parsers.
    //
    void
    drug_parser (::pkpd::drug_dose_pskel&);

    void
    drug_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    therapy_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    therapy_pskel* therapy_impl_;
    therapy_pskel (therapy_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::pkpd::drug_dose_pskel* drug_parser_;
    ::xml_schema::parser_map* drug_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::therapy_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class response_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    maximum_birth_inhibition (::common::units_decimal*);

    virtual void
    maximum_birth_inhibition_time (::common::units_decimal*);

    virtual void
    birth_inhibition_recovery_rate (::common::units_decimal*);

    virtual void
    maximum_death_rate (::common::units_decimal*);

    virtual void
    maximum_death_time (::common::units_decimal*);

    virtual void
    death_recovery_rate (::common::units_decimal*);

    virtual void
    response_observation (::pkpd::response_observation*);

    virtual void
    custom (::common::custom*);

    virtual ::pkpd::response*
    post_response () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_pskel& /* maximum_birth_inhibition */,
             ::common::units_decimal_pskel& /* maximum_birth_inhibition_time */,
             ::common::units_decimal_pskel& /* birth_inhibition_recovery_rate */,
             ::common::units_decimal_pskel& /* maximum_death_rate */,
             ::common::units_decimal_pskel& /* maximum_death_time */,
             ::common::units_decimal_pskel& /* death_recovery_rate */,
             ::pkpd::response_observation_pskel& /* response_observation */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* maximum_birth_inhibition */,
                 ::xml_schema::parser_map& /* maximum_birth_inhibition_time */,
                 ::xml_schema::parser_map& /* birth_inhibition_recovery_rate */,
                 ::xml_schema::parser_map& /* maximum_death_rate */,
                 ::xml_schema::parser_map& /* maximum_death_time */,
                 ::xml_schema::parser_map& /* death_recovery_rate */,
                 ::xml_schema::parser_map& /* response_observation */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    maximum_birth_inhibition_parser (::common::units_decimal_pskel&);

    void
    maximum_birth_inhibition_parser (::xml_schema::parser_map&);

    void
    maximum_birth_inhibition_time_parser (::common::units_decimal_pskel&);

    void
    maximum_birth_inhibition_time_parser (::xml_schema::parser_map&);

    void
    birth_inhibition_recovery_rate_parser (::common::units_decimal_pskel&);

    void
    birth_inhibition_recovery_rate_parser (::xml_schema::parser_map&);

    void
    maximum_death_rate_parser (::common::units_decimal_pskel&);

    void
    maximum_death_rate_parser (::xml_schema::parser_map&);

    void
    maximum_death_time_parser (::common::units_decimal_pskel&);

    void
    maximum_death_time_parser (::xml_schema::parser_map&);

    void
    death_recovery_rate_parser (::common::units_decimal_pskel&);

    void
    death_recovery_rate_parser (::xml_schema::parser_map&);

    void
    response_observation_parser (::pkpd::response_observation_pskel&);

    void
    response_observation_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    response_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    response_pskel* response_impl_;
    response_pskel (response_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_pskel* maximum_birth_inhibition_parser_;
    ::xml_schema::parser_map* maximum_birth_inhibition_parser_map_;

    ::common::units_decimal_pskel* maximum_birth_inhibition_time_parser_;
    ::xml_schema::parser_map* maximum_birth_inhibition_time_parser_map_;

    ::common::units_decimal_pskel* birth_inhibition_recovery_rate_parser_;
    ::xml_schema::parser_map* birth_inhibition_recovery_rate_parser_map_;

    ::common::units_decimal_pskel* maximum_death_rate_parser_;
    ::xml_schema::parser_map* maximum_death_rate_parser_map_;

    ::common::units_decimal_pskel* maximum_death_time_parser_;
    ::xml_schema::parser_map* maximum_death_time_parser_map_;

    ::common::units_decimal_pskel* death_recovery_rate_parser_;
    ::xml_schema::parser_map* death_recovery_rate_parser_map_;

    ::pkpd::response_observation_pskel* response_observation_parser_;
    ::xml_schema::parser_map* response_observation_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::response_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class response_observation_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    time (::common::units_decimal*);

    virtual void
    birth_rate (::common::units_decimal_nonnegative*);

    virtual void
    death_rate (::common::units_decimal_nonnegative*);

    virtual void
    net_birth_rate (::common::units_decimal*);

    virtual void
    net_death_rate (::common::units_decimal*);

    virtual void
    apoptotic_duration (::common::units_decimal*);

    virtual void
    percent_cell_viability (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::pkpd::response_observation*
    post_response_observation () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_pskel& /* time */,
             ::common::units_decimal_nonnegative_pskel& /* birth_rate */,
             ::common::units_decimal_nonnegative_pskel& /* death_rate */,
             ::common::units_decimal_pskel& /* net_birth_rate */,
             ::common::units_decimal_pskel& /* net_death_rate */,
             ::common::units_decimal_pskel& /* apoptotic_duration */,
             ::common::units_decimal_pskel& /* percent_cell_viability */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* time */,
                 ::xml_schema::parser_map& /* birth_rate */,
                 ::xml_schema::parser_map& /* death_rate */,
                 ::xml_schema::parser_map& /* net_birth_rate */,
                 ::xml_schema::parser_map& /* net_death_rate */,
                 ::xml_schema::parser_map& /* apoptotic_duration */,
                 ::xml_schema::parser_map& /* percent_cell_viability */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    time_parser (::common::units_decimal_pskel&);

    void
    time_parser (::xml_schema::parser_map&);

    void
    birth_rate_parser (::common::units_decimal_nonnegative_pskel&);

    void
    birth_rate_parser (::xml_schema::parser_map&);

    void
    death_rate_parser (::common::units_decimal_nonnegative_pskel&);

    void
    death_rate_parser (::xml_schema::parser_map&);

    void
    net_birth_rate_parser (::common::units_decimal_pskel&);

    void
    net_birth_rate_parser (::xml_schema::parser_map&);

    void
    net_death_rate_parser (::common::units_decimal_pskel&);

    void
    net_death_rate_parser (::xml_schema::parser_map&);

    void
    apoptotic_duration_parser (::common::units_decimal_pskel&);

    void
    apoptotic_duration_parser (::xml_schema::parser_map&);

    void
    percent_cell_viability_parser (::common::units_decimal_pskel&);

    void
    percent_cell_viability_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    response_observation_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    response_observation_pskel* response_observation_impl_;
    response_observation_pskel (response_observation_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_pskel* time_parser_;
    ::xml_schema::parser_map* time_parser_map_;

    ::common::units_decimal_nonnegative_pskel* birth_rate_parser_;
    ::xml_schema::parser_map* birth_rate_parser_map_;

    ::common::units_decimal_nonnegative_pskel* death_rate_parser_;
    ::xml_schema::parser_map* death_rate_parser_map_;

    ::common::units_decimal_pskel* net_birth_rate_parser_;
    ::xml_schema::parser_map* net_birth_rate_parser_map_;

    ::common::units_decimal_pskel* net_death_rate_parser_;
    ::xml_schema::parser_map* net_death_rate_parser_map_;

    ::common::units_decimal_pskel* apoptotic_duration_parser_;
    ::xml_schema::parser_map* apoptotic_duration_parser_map_;

    ::common::units_decimal_pskel* percent_cell_viability_parser_;
    ::xml_schema::parser_map* percent_cell_viability_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::response_observation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class pharmacodynamics_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    therapy_measurement_set (::pkpd::therapy_measurement_set*);

    virtual ::pkpd::pharmacodynamics*
    post_pharmacodynamics () = 0;

    // Parser construction API.
    //
    void
    parsers (::pkpd::therapy_measurement_set_pskel& /* therapy_measurement_set */);

    void
    parser_maps (::xml_schema::parser_map& /* therapy_measurement_set */);

    // Individual element parsers.
    //
    void
    therapy_measurement_set_parser (::pkpd::therapy_measurement_set_pskel&);

    void
    therapy_measurement_set_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    pharmacodynamics_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    pharmacodynamics_pskel* pharmacodynamics_impl_;
    pharmacodynamics_pskel (pharmacodynamics_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::pkpd::therapy_measurement_set_pskel* therapy_measurement_set_parser_;
    ::xml_schema::parser_map* therapy_measurement_set_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::pharmacodynamics_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class therapy_measurement_set_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned short);

    // Elements.
    //
    virtual void
    therapy (::pkpd::therapy*);

    virtual void
    response (::pkpd::response*);

    virtual ::pkpd::therapy_measurement_set*
    post_therapy_measurement_set () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_short_pskel& /* ID */,
             ::pkpd::therapy_pskel& /* therapy */,
             ::pkpd::response_pskel& /* response */);

    void
    parser_maps (::xml_schema::parser_map& /* therapy */,
                 ::xml_schema::parser_map& /* response */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_short_pskel&);

    // Individual element parsers.
    //
    void
    therapy_parser (::pkpd::therapy_pskel&);

    void
    therapy_parser (::xml_schema::parser_map&);

    void
    response_parser (::pkpd::response_pskel&);

    void
    response_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    therapy_measurement_set_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    therapy_measurement_set_pskel* therapy_measurement_set_impl_;
    therapy_measurement_set_pskel (therapy_measurement_set_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    virtual bool
    _attribute_impl_phase_two (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);

    protected:
    ::xml_schema::unsigned_short_pskel* ID_parser_;
    ::pkpd::therapy_pskel* therapy_parser_;
    ::xml_schema::parser_map* therapy_parser_map_;

    ::pkpd::response_pskel* response_parser_;
    ::xml_schema::parser_map* response_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::therapy_measurement_set_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class PKPD_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    drug (::pkpd::drug_pk*);

    virtual void
    pharmacodynamics (::pkpd::pharmacodynamics*);

    virtual ::pkpd::PKPD*
    post_PKPD () = 0;

    // Parser construction API.
    //
    void
    parsers (::pkpd::drug_pk_pskel& /* drug */,
             ::pkpd::pharmacodynamics_pskel& /* pharmacodynamics */);

    void
    parser_maps (::xml_schema::parser_map& /* drug */,
                 ::xml_schema::parser_map& /* pharmacodynamics */);

    // Individual element parsers.
    //
    void
    drug_parser (::pkpd::drug_pk_pskel&);

    void
    drug_parser (::xml_schema::parser_map&);

    void
    pharmacodynamics_parser (::pkpd::pharmacodynamics_pskel&);

    void
    pharmacodynamics_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    PKPD_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    PKPD_pskel* PKPD_impl_;
    PKPD_pskel (PKPD_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::pkpd::drug_pk_pskel* drug_parser_;
    ::xml_schema::parser_map* drug_parser_map_;

    ::pkpd::pharmacodynamics_pskel* pharmacodynamics_parser_;
    ::xml_schema::parser_map* pharmacodynamics_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::pkpd::PKPD_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };
}

#include "pkpd-pskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PKPD_PSKEL_HPP
