// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_CYCLE_SIMPL_HPP
#define CELL_CYCLE_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define CELL_CYCLE_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "cell_cycle-sskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-simpl.hpp"

#include "variables-simpl.hpp"

#include "phenotype_base-simpl.hpp"

namespace cell_cycle
{
  class death_type_simpl: public death_type_sskel
  {
    public:
    death_type_simpl ();

    virtual void
    pre (const ::cell_cycle::death_type&);

    virtual void
    _serialize_content ();

    public:
    const ::cell_cycle::death_type* death_type_simpl_state_;
  };

  class death_rate_type_simpl: public death_rate_type_sskel
  {
    public:
    death_rate_type_simpl ();

    virtual void
    pre (const ::cell_cycle::death_rate_type&);

    // Attributes.
    //
    virtual const ::cell_cycle::death_type&
    type ();

    public:
    ::common::units_decimal_nonnegative_simpl base_impl_;

    public:
    struct death_rate_type_simpl_state
    {
      const ::cell_cycle::death_rate_type* death_rate_type_;
    };

    death_rate_type_simpl_state death_rate_type_simpl_state_;
  };

  class cell_cycle_arrest_simpl: public cell_cycle_arrest_sskel
  {
    public:
    virtual void
    pre (const ::cell_cycle::cell_cycle_arrest&);

    // Elements.
    //
    virtual bool
    condition_present ();

    virtual const ::cell_cycle::arrest_condition&
    condition ();

    public:
    struct cell_cycle_arrest_simpl_state
    {
      const ::cell_cycle::cell_cycle_arrest* cell_cycle_arrest_;
    };

    cell_cycle_arrest_simpl_state cell_cycle_arrest_simpl_state_;
  };

  class transition_simpl: public transition_sskel
  {
    public:
    virtual void
    pre (const ::cell_cycle::transition&);

    // Elements.
    //
    virtual bool
    checkpoint_failure_probability_present ();

    virtual const ::common::units_decimal&
    checkpoint_failure_probability ();

    virtual bool
    subsequent_phase_present ();

    virtual unsigned long long
    subsequent_phase ();

    virtual bool
    threshold_next ();

    virtual const ::variables::transition_threshold&
    threshold ();

    virtual bool
    transition_rate_present ();

    virtual const ::common::units_decimal&
    transition_rate ();

    public:
    struct transition_simpl_state
    {
      const ::cell_cycle::transition* transition_;
      ::cell_cycle::transition::threshold_const_iterator threshold_;
      ::cell_cycle::transition::threshold_const_iterator threshold_end_;
    };

    transition_simpl_state transition_simpl_state_;
  };

  class cell_cycle_phase_simpl: public cell_cycle_phase_sskel
  {
    public:
    virtual void
    pre (const ::cell_cycle::cell_cycle_phase&);

    // Attributes.
    //
    virtual ::std::string
    name ();

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID ();

    // Elements.
    //
    virtual bool
    birth_rate_present ();

    virtual const ::common::units_decimal_nonnegative&
    birth_rate ();

    virtual bool
    duration_present ();

    virtual const ::common::units_decimal_nonnegative&
    duration ();

    virtual bool
    death_rate_next ();

    virtual const ::cell_cycle::death_rate_type&
    death_rate ();

    virtual bool
    net_birth_rate_present ();

    virtual const ::common::units_decimal&
    net_birth_rate ();

    virtual bool
    population_doubling_time_present ();

    virtual const ::common::units_decimal_nonnegative&
    population_doubling_time ();

    virtual bool
    cell_cycle_arrest_present ();

    virtual const ::cell_cycle::cell_cycle_arrest&
    cell_cycle_arrest ();

    virtual bool
    transition_next ();

    virtual const ::cell_cycle::transition&
    transition ();

    virtual bool
    cell_part_next ();

    virtual const ::phenotype_base::cell_parts&
    cell_part ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct cell_cycle_phase_simpl_state
    {
      const ::cell_cycle::cell_cycle_phase* cell_cycle_phase_;
      ::cell_cycle::cell_cycle_phase::death_rate_const_iterator death_rate_;
      ::cell_cycle::cell_cycle_phase::death_rate_const_iterator death_rate_end_;
      ::cell_cycle::cell_cycle_phase::transition_const_iterator transition_;
      ::cell_cycle::cell_cycle_phase::transition_const_iterator transition_end_;
      ::cell_cycle::cell_cycle_phase::cell_part_const_iterator cell_part_;
      ::cell_cycle::cell_cycle_phase::cell_part_const_iterator cell_part_end_;
    };

    cell_cycle_phase_simpl_state cell_cycle_phase_simpl_state_;
  };

  class summary_elements_simpl: public summary_elements_sskel
  {
    public:
    virtual void
    pre (const ::cell_cycle::summary_elements&);

    // Elements.
    //
    virtual bool
    birth_rate_present ();

    virtual const ::common::units_decimal_nonnegative&
    birth_rate ();

    virtual bool
    duration_present ();

    virtual const ::common::units_decimal_nonnegative&
    duration ();

    virtual bool
    death_rate_next ();

    virtual const ::cell_cycle::death_rate_type&
    death_rate ();

    virtual bool
    net_birth_rate_present ();

    virtual const ::common::units_decimal&
    net_birth_rate ();

    virtual bool
    population_doubling_time_present ();

    virtual const ::common::units_decimal_nonnegative&
    population_doubling_time ();

    public:
    struct summary_elements_simpl_state
    {
      const ::cell_cycle::summary_elements* summary_elements_;
      ::cell_cycle::summary_elements::death_rate_const_iterator death_rate_;
      ::cell_cycle::summary_elements::death_rate_const_iterator death_rate_end_;
    };

    summary_elements_simpl_state summary_elements_simpl_state_;
  };

  class cell_cycle_simpl: public cell_cycle_sskel
  {
    public:
    virtual void
    pre (const ::cell_cycle::cell_cycle&);

    // Attributes.
    //
    virtual ::std::string
    model ();

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID ();

    // Elements.
    //
    virtual bool
    cell_cycle_phase_next ();

    virtual const ::cell_cycle::cell_cycle_phase&
    cell_cycle_phase ();

    virtual bool
    cell_death_next ();

    virtual const ::cell_cycle::cell_death&
    cell_death ();

    virtual bool
    summary_elements_present ();

    virtual const ::cell_cycle::summary_elements&
    summary_elements ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct cell_cycle_simpl_state
    {
      const ::cell_cycle::cell_cycle* cell_cycle_;
      ::cell_cycle::cell_cycle::cell_cycle_phase_const_iterator cell_cycle_phase_;
      ::cell_cycle::cell_cycle::cell_cycle_phase_const_iterator cell_cycle_phase_end_;
      ::cell_cycle::cell_cycle::cell_death_const_iterator cell_death_;
      ::cell_cycle::cell_cycle::cell_death_const_iterator cell_death_end_;
    };

    cell_cycle_simpl_state cell_cycle_simpl_state_;
  };

  class cell_death_simpl: public cell_death_sskel
  {
    public:
    virtual void
    pre (const ::cell_cycle::cell_death&);

    // Attributes.
    //
    virtual const ::cell_cycle::death_type&
    type ();

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID ();

    // Elements.
    //
    virtual const ::common::units_decimal&
    duration ();

    virtual bool
    cell_part_next ();

    virtual const ::phenotype_base::cell_parts&
    cell_part ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct cell_death_simpl_state
    {
      const ::cell_cycle::cell_death* cell_death_;
      ::cell_cycle::cell_death::cell_part_const_iterator cell_part_;
      ::cell_cycle::cell_death::cell_part_const_iterator cell_part_end_;
    };

    cell_death_simpl_state cell_death_simpl_state_;
  };

  class arrest_type_simpl: public arrest_type_sskel
  {
    public:
    arrest_type_simpl ();

    virtual void
    pre (const ::cell_cycle::arrest_type&);

    virtual void
    _serialize_content ();

    public:
    const ::cell_cycle::arrest_type* arrest_type_simpl_state_;
  };

  class arrest_condition_simpl: public arrest_condition_sskel
  {
    public:
    arrest_condition_simpl ();

    virtual void
    pre (const ::cell_cycle::arrest_condition&);

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual const ::cell_cycle::arrest_type&
    type ();

    public:
    ::common::units_decimal_simpl base_impl_;

    public:
    struct arrest_condition_simpl_state
    {
      const ::cell_cycle::arrest_condition* arrest_condition_;
    };

    arrest_condition_simpl_state arrest_condition_simpl_state_;
  };

  class cycles_and_deaths_simpl: public cycles_and_deaths_sskel
  {
    public:
    virtual void
    pre (const ::cell_cycle::cycles_and_deaths&);

    // Elements.
    //
    virtual bool
    cell_cycle_next ();

    virtual const ::cell_cycle::cell_cycle&
    cell_cycle ();

    virtual bool
    cell_death_next ();

    virtual const ::cell_cycle::cell_death&
    cell_death ();

    public:
    struct cycles_and_deaths_simpl_state
    {
      const ::cell_cycle::cycles_and_deaths* cycles_and_deaths_;
      ::cell_cycle::cycles_and_deaths::cell_cycle_const_iterator cell_cycle_;
      ::cell_cycle::cycles_and_deaths::cell_cycle_const_iterator cell_cycle_end_;
      ::cell_cycle::cycles_and_deaths::cell_death_const_iterator cell_death_;
      ::cell_cycle::cycles_and_deaths::cell_death_const_iterator cell_death_end_;
    };

    cycles_and_deaths_simpl_state cycles_and_deaths_simpl_state_;
  };
}

#ifdef CELL_CYCLE_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // CELL_CYCLE_SIMPL_HPP
