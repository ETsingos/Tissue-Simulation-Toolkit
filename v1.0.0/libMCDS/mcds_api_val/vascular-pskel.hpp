// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VASCULAR_PSKEL_HPP
#define VASCULAR_PSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
namespace vascular
{
  class vascular_node_pskel;
  class list_of_vascular_nodes_pskel;
  class boundary_node_pskel;
  class list_of_boundary_nodes_pskel;
  class boundary_conditions_pskel;
  class boundary_type_pskel;
  class boundary_condition_pskel;
  class vascular_segments_pskel;
  class vascular_segment_pskel;
  class endpoint_pskel;
  class surface_properties_pskel;
  class volume_properties_pskel;
  class vascular_network_pskel;
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/parser/map.hxx>
#include <xsde/cxx/parser/substitution-map-callback.hxx>
#include <xsde/cxx/parser/substitution-map-load.hxx>
#include <xsde/cxx/parser/validating/inheritance-map-load.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "vascular.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser map interface and default implementation.
  //
  using ::xsde::cxx::parser::parser_map;
  using ::xsde::cxx::parser::parser_map_impl;

  // Parser substitution map callack.
  //
  using ::xsde::cxx::parser::parser_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::parser::parser_smap_buckets;
  using ::xsde::cxx::parser::parser_smap_elements;
  using ::xsde::cxx::parser::validating::parser_imap_buckets;
  using ::xsde::cxx::parser::validating::parser_imap_elements;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

#include "common-pskel.hpp"

#include "mesh-pskel.hpp"

#include "variables-pskel.hpp"

#include "phenotype_common-pskel.hpp"

namespace vascular
{
  class vascular_node_pskel: public ::mesh::node_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    boundary_node (bool);

    virtual ::vascular::vascular_node*
    post_vascular_node () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* ID */,
             ::common::units_double_list_pskel& /* position */,
             ::common::custom_pskel& /* custom */,
             ::xml_schema::boolean_pskel& /* boundary_node */);

    // Individual attribute parsers.
    //
    void
    boundary_node_parser (::xml_schema::boolean_pskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    vascular_node_pskel (::mesh::node_pskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    virtual ::mesh::node*
    post_node ();

    protected:
    vascular_node_pskel* vascular_node_impl_;
    vascular_node_pskel (vascular_node_pskel*, void*);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::boolean_pskel* boundary_node_parser_;
  };

  class list_of_vascular_nodes_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    vascular_node (::vascular::vascular_node*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::list_of_vascular_nodes*
    post_list_of_vascular_nodes () = 0;

    // Parser construction API.
    //
    void
    parsers (::vascular::vascular_node_pskel& /* vascular_node */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* vascular_node */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    vascular_node_parser (::vascular::vascular_node_pskel&);

    void
    vascular_node_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    list_of_vascular_nodes_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    list_of_vascular_nodes_pskel* list_of_vascular_nodes_impl_;
    list_of_vascular_nodes_pskel (list_of_vascular_nodes_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::vascular::vascular_node_pskel* vascular_node_parser_;
    ::xml_schema::parser_map* vascular_node_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::list_of_vascular_nodes_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class boundary_node_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    node_ID (unsigned int);

    // Elements.
    //
    virtual void
    fluid_flow_velocity (::common::units_decimal*);

    virtual void
    variables (::variables::list_of_variables*);

    virtual void
    boundary_conditions (::vascular::boundary_conditions*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::boundary_node*
    post_boundary_node () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* node_ID */,
             ::common::units_decimal_pskel& /* fluid_flow_velocity */,
             ::variables::list_of_variables_pskel& /* variables */,
             ::vascular::boundary_conditions_pskel& /* boundary_conditions */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* fluid_flow_velocity */,
                 ::xml_schema::parser_map& /* variables */,
                 ::xml_schema::parser_map& /* boundary_conditions */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    node_ID_parser (::xml_schema::unsigned_int_pskel&);

    // Individual element parsers.
    //
    void
    fluid_flow_velocity_parser (::common::units_decimal_pskel&);

    void
    fluid_flow_velocity_parser (::xml_schema::parser_map&);

    void
    variables_parser (::variables::list_of_variables_pskel&);

    void
    variables_parser (::xml_schema::parser_map&);

    void
    boundary_conditions_parser (::vascular::boundary_conditions_pskel&);

    void
    boundary_conditions_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    boundary_node_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    boundary_node_pskel* boundary_node_impl_;
    boundary_node_pskel (boundary_node_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* node_ID_parser_;
    ::common::units_decimal_pskel* fluid_flow_velocity_parser_;
    ::xml_schema::parser_map* fluid_flow_velocity_parser_map_;

    ::variables::list_of_variables_pskel* variables_parser_;
    ::xml_schema::parser_map* variables_parser_map_;

    ::vascular::boundary_conditions_pskel* boundary_conditions_parser_;
    ::xml_schema::parser_map* boundary_conditions_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::boundary_node_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[4UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class list_of_boundary_nodes_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    boundary_node (::vascular::boundary_node*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::list_of_boundary_nodes*
    post_list_of_boundary_nodes () = 0;

    // Parser construction API.
    //
    void
    parsers (::vascular::boundary_node_pskel& /* boundary_node */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* boundary_node */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    boundary_node_parser (::vascular::boundary_node_pskel&);

    void
    boundary_node_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    list_of_boundary_nodes_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    list_of_boundary_nodes_pskel* list_of_boundary_nodes_impl_;
    list_of_boundary_nodes_pskel (list_of_boundary_nodes_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::vascular::boundary_node_pskel* boundary_node_parser_;
    ::xml_schema::parser_map* boundary_node_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::list_of_boundary_nodes_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class boundary_conditions_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    // Elements.
    //
    virtual void
    boundary_condition (::vascular::boundary_condition*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::boundary_conditions*
    post_boundary_conditions () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* ID */,
             ::vascular::boundary_condition_pskel& /* boundary_condition */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* boundary_condition */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_int_pskel&);

    // Individual element parsers.
    //
    void
    boundary_condition_parser (::vascular::boundary_condition_pskel&);

    void
    boundary_condition_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    boundary_conditions_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    boundary_conditions_pskel* boundary_conditions_impl_;
    boundary_conditions_pskel (boundary_conditions_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* ID_parser_;
    ::vascular::boundary_condition_pskel* boundary_condition_parser_;
    ::xml_schema::parser_map* boundary_condition_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::boundary_conditions_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class boundary_type_pskel: public ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::vascular::boundary_type
    post_boundary_type () = 0;

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    boundary_type_pskel (::xml_schema::string_pskel* tiein);

    // Implementation details.
    //
    virtual ::std::string
    post_string ();

    protected:
    boundary_type_pskel* boundary_type_impl_;
    boundary_type_pskel (boundary_type_pskel*, void*);

    protected:
    static const char* const _xsde_boundary_type_pskel_enums_[6UL];
  };

  class boundary_condition_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    virtual void
    variable_ID (unsigned int);

    // Elements.
    //
    virtual void
    boundary_type (const ::vascular::boundary_type&);

    virtual void
    value (::common::units_decimal*);

    virtual void
    direction (const ::std::string&);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::boundary_condition*
    post_boundary_condition () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* ID */,
             ::xml_schema::unsigned_int_pskel& /* variable_ID */,
             ::vascular::boundary_type_pskel& /* boundary_type */,
             ::common::units_decimal_pskel& /* value */,
             ::xml_schema::string_pskel& /* direction */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* boundary_type */,
                 ::xml_schema::parser_map& /* value */,
                 ::xml_schema::parser_map& /* direction */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_int_pskel&);

    void
    variable_ID_parser (::xml_schema::unsigned_int_pskel&);

    // Individual element parsers.
    //
    void
    boundary_type_parser (::vascular::boundary_type_pskel&);

    void
    boundary_type_parser (::xml_schema::parser_map&);

    void
    value_parser (::common::units_decimal_pskel&);

    void
    value_parser (::xml_schema::parser_map&);

    void
    direction_parser (::xml_schema::string_pskel&);

    void
    direction_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    boundary_condition_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    boundary_condition_pskel* boundary_condition_impl_;
    boundary_condition_pskel (boundary_condition_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* ID_parser_;
    ::xml_schema::unsigned_int_pskel* variable_ID_parser_;
    ::vascular::boundary_type_pskel* boundary_type_parser_;
    ::xml_schema::parser_map* boundary_type_parser_map_;

    ::common::units_decimal_pskel* value_parser_;
    ::xml_schema::parser_map* value_parser_map_;

    ::xml_schema::string_pskel* direction_parser_;
    ::xml_schema::parser_map* direction_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::boundary_condition_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);

    protected:
    struct v_state_attr_
    {
      bool variable_ID;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsde::cxx::stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class vascular_segments_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    vascular_segment (::vascular::vascular_segment*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::vascular_segments*
    post_vascular_segments () = 0;

    // Parser construction API.
    //
    void
    parsers (::vascular::vascular_segment_pskel& /* vascular_segment */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* vascular_segment */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    vascular_segment_parser (::vascular::vascular_segment_pskel&);

    void
    vascular_segment_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    vascular_segments_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    vascular_segments_pskel* vascular_segments_impl_;
    vascular_segments_pskel (vascular_segments_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::vascular::vascular_segment_pskel* vascular_segment_parser_;
    ::xml_schema::parser_map* vascular_segment_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::vascular_segments_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };

  class vascular_segment_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    endpoint_1 (::vascular::endpoint*);

    virtual void
    endpoint_2 (::vascular::endpoint*);

    virtual void
    surface (::vascular::surface_properties*);

    virtual void
    interior (::vascular::volume_properties*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::vascular_segment*
    post_vascular_segment () = 0;

    // Parser construction API.
    //
    void
    parsers (::vascular::endpoint_pskel& /* endpoint_1 */,
             ::vascular::endpoint_pskel& /* endpoint_2 */,
             ::vascular::surface_properties_pskel& /* surface */,
             ::vascular::volume_properties_pskel& /* interior */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* endpoint_1 */,
                 ::xml_schema::parser_map& /* endpoint_2 */,
                 ::xml_schema::parser_map& /* surface */,
                 ::xml_schema::parser_map& /* interior */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    endpoint_1_parser (::vascular::endpoint_pskel&);

    void
    endpoint_1_parser (::xml_schema::parser_map&);

    void
    endpoint_2_parser (::vascular::endpoint_pskel&);

    void
    endpoint_2_parser (::xml_schema::parser_map&);

    void
    surface_parser (::vascular::surface_properties_pskel&);

    void
    surface_parser (::xml_schema::parser_map&);

    void
    interior_parser (::vascular::volume_properties_pskel&);

    void
    interior_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    vascular_segment_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    vascular_segment_pskel* vascular_segment_impl_;
    vascular_segment_pskel (vascular_segment_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::vascular::endpoint_pskel* endpoint_1_parser_;
    ::xml_schema::parser_map* endpoint_1_parser_map_;

    ::vascular::endpoint_pskel* endpoint_2_parser_;
    ::xml_schema::parser_map* endpoint_2_parser_map_;

    ::vascular::surface_properties_pskel* surface_parser_;
    ::xml_schema::parser_map* surface_parser_map_;

    ::vascular::volume_properties_pskel* interior_parser_;
    ::xml_schema::parser_map* interior_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::vascular_segment_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[5UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class endpoint_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    node_ID (unsigned int);

    // Elements.
    //
    virtual void
    lengths (::phenotype_common::lengths*);

    virtual void
    areas (::phenotype_common::areas_2D*);

    virtual void
    fluid_flow_velocity (::common::units_decimal*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::endpoint*
    post_endpoint () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* node_ID */,
             ::phenotype_common::lengths_pskel& /* lengths */,
             ::phenotype_common::areas_2D_pskel& /* areas */,
             ::common::units_decimal_pskel& /* fluid_flow_velocity */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* lengths */,
                 ::xml_schema::parser_map& /* areas */,
                 ::xml_schema::parser_map& /* fluid_flow_velocity */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    node_ID_parser (::xml_schema::unsigned_int_pskel&);

    // Individual element parsers.
    //
    void
    lengths_parser (::phenotype_common::lengths_pskel&);

    void
    lengths_parser (::xml_schema::parser_map&);

    void
    areas_parser (::phenotype_common::areas_2D_pskel&);

    void
    areas_parser (::xml_schema::parser_map&);

    void
    fluid_flow_velocity_parser (::common::units_decimal_pskel&);

    void
    fluid_flow_velocity_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    endpoint_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    endpoint_pskel* endpoint_impl_;
    endpoint_pskel (endpoint_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* node_ID_parser_;
    ::phenotype_common::lengths_pskel* lengths_parser_;
    ::xml_schema::parser_map* lengths_parser_map_;

    ::phenotype_common::areas_2D_pskel* areas_parser_;
    ::xml_schema::parser_map* areas_parser_map_;

    ::common::units_decimal_pskel* fluid_flow_velocity_parser_;
    ::xml_schema::parser_map* fluid_flow_velocity_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::endpoint_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[4UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class surface_properties_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    areas (::phenotype_common::areas_3D*);

    virtual void
    fluid_flow_velocity (::common::units_decimal*);

    virtual void
    mechanics (::phenotype_common::mechanics*);

    virtual void
    permeability (::common::units_decimal*);

    virtual void
    surface_proteins (::variables::list_of_variables*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::surface_properties*
    post_surface_properties () = 0;

    // Parser construction API.
    //
    void
    parsers (::phenotype_common::areas_3D_pskel& /* areas */,
             ::common::units_decimal_pskel& /* fluid_flow_velocity */,
             ::phenotype_common::mechanics_pskel& /* mechanics */,
             ::common::units_decimal_pskel& /* permeability */,
             ::variables::list_of_variables_pskel& /* surface_proteins */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* areas */,
                 ::xml_schema::parser_map& /* fluid_flow_velocity */,
                 ::xml_schema::parser_map& /* mechanics */,
                 ::xml_schema::parser_map& /* permeability */,
                 ::xml_schema::parser_map& /* surface_proteins */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    areas_parser (::phenotype_common::areas_3D_pskel&);

    void
    areas_parser (::xml_schema::parser_map&);

    void
    fluid_flow_velocity_parser (::common::units_decimal_pskel&);

    void
    fluid_flow_velocity_parser (::xml_schema::parser_map&);

    void
    mechanics_parser (::phenotype_common::mechanics_pskel&);

    void
    mechanics_parser (::xml_schema::parser_map&);

    void
    permeability_parser (::common::units_decimal_pskel&);

    void
    permeability_parser (::xml_schema::parser_map&);

    void
    surface_proteins_parser (::variables::list_of_variables_pskel&);

    void
    surface_proteins_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    surface_properties_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    surface_properties_pskel* surface_properties_impl_;
    surface_properties_pskel (surface_properties_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::phenotype_common::areas_3D_pskel* areas_parser_;
    ::xml_schema::parser_map* areas_parser_map_;

    ::common::units_decimal_pskel* fluid_flow_velocity_parser_;
    ::xml_schema::parser_map* fluid_flow_velocity_parser_map_;

    ::phenotype_common::mechanics_pskel* mechanics_parser_;
    ::xml_schema::parser_map* mechanics_parser_map_;

    ::common::units_decimal_pskel* permeability_parser_;
    ::xml_schema::parser_map* permeability_parser_map_;

    ::variables::list_of_variables_pskel* surface_proteins_parser_;
    ::xml_schema::parser_map* surface_proteins_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::surface_properties_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[6UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class volume_properties_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Elements.
    //
    virtual void
    fluid_flow_velocity (::common::units_decimal*);

    virtual void
    variables (::variables::list_of_variables*);

    virtual void
    volumes (::phenotype_common::volumes*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::volume_properties*
    post_volume_properties () = 0;

    // Parser construction API.
    //
    void
    parsers (::common::units_decimal_pskel& /* fluid_flow_velocity */,
             ::variables::list_of_variables_pskel& /* variables */,
             ::phenotype_common::volumes_pskel& /* volumes */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* fluid_flow_velocity */,
                 ::xml_schema::parser_map& /* variables */,
                 ::xml_schema::parser_map& /* volumes */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual element parsers.
    //
    void
    fluid_flow_velocity_parser (::common::units_decimal_pskel&);

    void
    fluid_flow_velocity_parser (::xml_schema::parser_map&);

    void
    variables_parser (::variables::list_of_variables_pskel&);

    void
    variables_parser (::xml_schema::parser_map&);

    void
    volumes_parser (::phenotype_common::volumes_pskel&);

    void
    volumes_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    volume_properties_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    volume_properties_pskel* volume_properties_impl_;
    volume_properties_pskel (volume_properties_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    ::common::units_decimal_pskel* fluid_flow_velocity_parser_;
    ::xml_schema::parser_map* fluid_flow_velocity_parser_map_;

    ::variables::list_of_variables_pskel* variables_parser_;
    ::xml_schema::parser_map* variables_parser_map_;

    ::phenotype_common::volumes_pskel* volumes_parser_;
    ::xml_schema::parser_map* volumes_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::volume_properties_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    all_0 (unsigned long&,
           unsigned char*,
           const ::xsde::cxx::ro_string&,
           const ::xsde::cxx::ro_string&,
           const char*,
           bool);

    unsigned char v_all_first_[4UL];
    ::xsde::cxx::parser::validating::all_stack v_all_count_;
  };

  class vascular_network_pskel: public ::xsde::cxx::parser::validating::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    // Attributes.
    //
    virtual void
    ID (unsigned int);

    virtual void
    keywords (const ::std::string&);

    virtual void
    name (const ::std::string&);

    // Elements.
    //
    virtual void
    vascular_nodes (::vascular::list_of_vascular_nodes*);

    virtual void
    boundary_nodes (::vascular::list_of_boundary_nodes*);

    virtual void
    vascular_segments (::vascular::vascular_segments*);

    virtual void
    voxels (::mesh::int_list_xpath*);

    virtual void
    custom (::common::custom*);

    virtual ::vascular::vascular_network*
    post_vascular_network () = 0;

    // Parser construction API.
    //
    void
    parsers (::xml_schema::unsigned_int_pskel& /* ID */,
             ::xml_schema::string_pskel& /* keywords */,
             ::xml_schema::string_pskel& /* name */,
             ::vascular::list_of_vascular_nodes_pskel& /* vascular_nodes */,
             ::vascular::list_of_boundary_nodes_pskel& /* boundary_nodes */,
             ::vascular::vascular_segments_pskel& /* vascular_segments */,
             ::mesh::int_list_xpath_pskel& /* voxels */,
             ::common::custom_pskel& /* custom */);

    void
    parser_maps (::xml_schema::parser_map& /* vascular_nodes */,
                 ::xml_schema::parser_map& /* boundary_nodes */,
                 ::xml_schema::parser_map& /* vascular_segments */,
                 ::xml_schema::parser_map& /* voxels */,
                 ::xml_schema::parser_map& /* custom */);

    // Individual attribute parsers.
    //
    void
    ID_parser (::xml_schema::unsigned_int_pskel&);

    void
    keywords_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    // Individual element parsers.
    //
    void
    vascular_nodes_parser (::vascular::list_of_vascular_nodes_pskel&);

    void
    vascular_nodes_parser (::xml_schema::parser_map&);

    void
    boundary_nodes_parser (::vascular::list_of_boundary_nodes_pskel&);

    void
    boundary_nodes_parser (::xml_schema::parser_map&);

    void
    vascular_segments_parser (::vascular::vascular_segments_pskel&);

    void
    vascular_segments_parser (::xml_schema::parser_map&);

    void
    voxels_parser (::mesh::int_list_xpath_pskel&);

    void
    voxels_parser (::xml_schema::parser_map&);

    void
    custom_parser (::common::custom_pskel&);

    void
    custom_parser (::xml_schema::parser_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    vascular_network_pskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation details.
    //
    protected:
    vascular_network_pskel* vascular_network_impl_;
    vascular_network_pskel (vascular_network_pskel*, void*);

    protected:
    virtual bool
    _start_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&,
                         const char*);

    virtual bool
    _end_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&,
                               const ::xsde::cxx::ro_string&);


    protected:
    ::xml_schema::unsigned_int_pskel* ID_parser_;
    ::xml_schema::string_pskel* keywords_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::vascular::list_of_vascular_nodes_pskel* vascular_nodes_parser_;
    ::xml_schema::parser_map* vascular_nodes_parser_map_;

    ::vascular::list_of_boundary_nodes_pskel* boundary_nodes_parser_;
    ::xml_schema::parser_map* boundary_nodes_parser_map_;

    ::vascular::vascular_segments_pskel* vascular_segments_parser_;
    ::xml_schema::parser_map* vascular_segments_parser_map_;

    ::mesh::int_list_xpath_pskel* voxels_parser_;
    ::xml_schema::parser_map* voxels_parser_map_;

    ::common::custom_pskel* custom_parser_;
    ::xml_schema::parser_map* custom_parser_map_;


    public:
    struct v_state_descr_
    {
      void (::vascular::vascular_network_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xsde::cxx::ro_string&,
        const ::xsde::cxx::ro_string&,
        const char*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    protected:
    v_state_ v_state_first_;
    ::xsde::cxx::stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                const char*,
                bool);
  };
}

#include "vascular-pskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // VASCULAR_PSKEL_HPP
