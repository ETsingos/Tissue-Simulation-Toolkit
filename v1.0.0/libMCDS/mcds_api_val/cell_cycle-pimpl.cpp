// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "cell_cycle-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace cell_cycle
{
  // death_type_pimpl
  //

  death_type_pimpl::
  death_type_pimpl ()
  : death_type_pskel (0)
  {
  }

  void death_type_pimpl::
  pre ()
  {
    this->death_type_pimpl_state_.str_.clear ();
  }

  void death_type_pimpl::
  _characters (const ::xsde::cxx::ro_string& s)
  {
    if (this->_facets ().whitespace_ == 2 &&
        this->death_type_pimpl_state_.str_.size () == 0)
    {
      ::xsde::cxx::ro_string tmp (s.data (), s.size ());

      if (::xsde::cxx::trim_left (tmp) != 0)
      {
        this->death_type_pimpl_state_.str_ += tmp;
      }
    }
    else
      this->death_type_pimpl_state_.str_ += s;
  }

  void death_type_pimpl::
  _post ()
  {
    ::xsde::cxx::parser::validating::string_common::validate_facets (
      this->death_type_pimpl_state_.str_,
      this->_facets (),
      this->_context ());
  }

  ::cell_cycle::death_type death_type_pimpl::
  post_death_type ()
  {
    ::cell_cycle::death_type::value_type v =
    static_cast< ::cell_cycle::death_type::value_type > (0);
    const char* s = this->death_type_pimpl_state_.str_.c_str ();

    if (strcmp (s, "apoptosis") == 0)
      v = ::cell_cycle::death_type::apoptosis;
    else if (strcmp (s, "necrosis") == 0)
      v = ::cell_cycle::death_type::necrosis;
    else if (strcmp (s, "autophagy") == 0)
      v = ::cell_cycle::death_type::autophagy;

    ::cell_cycle::death_type r (v);
    return r;
  }

  // death_rate_type_pimpl
  //

  death_rate_type_pimpl::
  death_rate_type_pimpl (bool b)
  : death_rate_type_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->death_rate_type_pimpl_base_ = b;
    this->death_rate_type_pimpl_state_.death_rate_type_ = 0;
  }

  death_rate_type_pimpl::
  ~death_rate_type_pimpl ()
  {
    if (!this->death_rate_type_pimpl_base_ && this->death_rate_type_pimpl_state_.death_rate_type_)
      delete this->death_rate_type_pimpl_state_.death_rate_type_;
  }

  void death_rate_type_pimpl::
  _reset ()
  {
    death_rate_type_pskel::_reset ();

    if (!this->death_rate_type_pimpl_base_ && this->death_rate_type_pimpl_state_.death_rate_type_)
    {
      delete this->death_rate_type_pimpl_state_.death_rate_type_;
      this->death_rate_type_pimpl_state_.death_rate_type_ = 0;
    }
  }

  void death_rate_type_pimpl::
  pre_impl (::cell_cycle::death_rate_type* x)
  {
    this->death_rate_type_pimpl_state_.death_rate_type_ = x;
    this->base_impl_.pre_impl (x);
  }

  void death_rate_type_pimpl::
  pre ()
  {
    ::cell_cycle::death_rate_type* x = new ::cell_cycle::death_rate_type;
    this->pre_impl (x);
  }

  void death_rate_type_pimpl::
  type (const ::cell_cycle::death_type& x)
  {
    this->death_rate_type_pimpl_state_.death_rate_type_->type (x);
  }

  ::cell_cycle::death_rate_type* death_rate_type_pimpl::
  post_death_rate_type ()
  {
    this->base_impl_.post_units_decimal_nonnegative ();
    ::cell_cycle::death_rate_type* r = this->death_rate_type_pimpl_state_.death_rate_type_;
    this->death_rate_type_pimpl_state_.death_rate_type_ = 0;
    return r;
  }

  // cell_cycle_arrest_pimpl
  //

  cell_cycle_arrest_pimpl::
  cell_cycle_arrest_pimpl (bool b)
  {
    this->cell_cycle_arrest_pimpl_base_ = b;
    this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_ = 0;
  }

  cell_cycle_arrest_pimpl::
  ~cell_cycle_arrest_pimpl ()
  {
    if (!this->cell_cycle_arrest_pimpl_base_ && this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_)
      delete this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_;
  }

  void cell_cycle_arrest_pimpl::
  _reset ()
  {
    cell_cycle_arrest_pskel::_reset ();

    if (!this->cell_cycle_arrest_pimpl_base_ && this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_)
    {
      delete this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_;
      this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_ = 0;
    }
  }

  void cell_cycle_arrest_pimpl::
  pre_impl (::cell_cycle::cell_cycle_arrest* x)
  {
    this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_ = x;
  }

  void cell_cycle_arrest_pimpl::
  pre ()
  {
    ::cell_cycle::cell_cycle_arrest* x = new ::cell_cycle::cell_cycle_arrest;
    this->pre_impl (x);
  }

  void cell_cycle_arrest_pimpl::
  condition (::cell_cycle::arrest_condition* x)
  {
    this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_->condition (x);
  }

  ::cell_cycle::cell_cycle_arrest* cell_cycle_arrest_pimpl::
  post_cell_cycle_arrest ()
  {
    ::cell_cycle::cell_cycle_arrest* r = this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_;
    this->cell_cycle_arrest_pimpl_state_.cell_cycle_arrest_ = 0;
    return r;
  }

  // transition_pimpl
  //

  transition_pimpl::
  transition_pimpl (bool b)
  {
    this->transition_pimpl_base_ = b;
    this->transition_pimpl_state_.transition_ = 0;
  }

  transition_pimpl::
  ~transition_pimpl ()
  {
    if (!this->transition_pimpl_base_ && this->transition_pimpl_state_.transition_)
      delete this->transition_pimpl_state_.transition_;
  }

  void transition_pimpl::
  _reset ()
  {
    transition_pskel::_reset ();

    if (!this->transition_pimpl_base_ && this->transition_pimpl_state_.transition_)
    {
      delete this->transition_pimpl_state_.transition_;
      this->transition_pimpl_state_.transition_ = 0;
    }
  }

  void transition_pimpl::
  pre_impl (::cell_cycle::transition* x)
  {
    this->transition_pimpl_state_.transition_ = x;
  }

  void transition_pimpl::
  pre ()
  {
    ::cell_cycle::transition* x = new ::cell_cycle::transition;
    this->pre_impl (x);
  }

  void transition_pimpl::
  checkpoint_failure_probability (::common::units_decimal* x)
  {
    this->transition_pimpl_state_.transition_->checkpoint_failure_probability (x);
  }

  void transition_pimpl::
  subsequent_phase (unsigned long long x)
  {
    this->transition_pimpl_state_.transition_->subsequent_phase (x);
  }

  void transition_pimpl::
  threshold (::variables::transition_threshold* x)
  {
    this->transition_pimpl_state_.transition_->threshold ().push_back (x);
  }

  void transition_pimpl::
  transition_rate (::common::units_decimal* x)
  {
    this->transition_pimpl_state_.transition_->transition_rate (x);
  }

  ::cell_cycle::transition* transition_pimpl::
  post_transition ()
  {
    ::cell_cycle::transition* r = this->transition_pimpl_state_.transition_;
    this->transition_pimpl_state_.transition_ = 0;
    return r;
  }

  // cell_cycle_phase_pimpl
  //

  cell_cycle_phase_pimpl::
  cell_cycle_phase_pimpl (bool b)
  {
    this->cell_cycle_phase_pimpl_base_ = b;
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_ = 0;
  }

  cell_cycle_phase_pimpl::
  ~cell_cycle_phase_pimpl ()
  {
    if (!this->cell_cycle_phase_pimpl_base_ && this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_)
      delete this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_;
  }

  void cell_cycle_phase_pimpl::
  _reset ()
  {
    cell_cycle_phase_pskel::_reset ();

    if (!this->cell_cycle_phase_pimpl_base_ && this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_)
    {
      delete this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_;
      this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_ = 0;
    }
  }

  void cell_cycle_phase_pimpl::
  pre_impl (::cell_cycle::cell_cycle_phase* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_ = x;
  }

  void cell_cycle_phase_pimpl::
  pre ()
  {
    ::cell_cycle::cell_cycle_phase* x = new ::cell_cycle::cell_cycle_phase;
    this->pre_impl (x);
  }

  void cell_cycle_phase_pimpl::
  name (const ::std::string& x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->name (x);
  }

  void cell_cycle_phase_pimpl::
  ID (unsigned long long x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->ID (x);
  }

  void cell_cycle_phase_pimpl::
  birth_rate (::common::units_decimal_nonnegative* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->birth_rate (x);
  }

  void cell_cycle_phase_pimpl::
  duration (::common::units_decimal_nonnegative* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->duration (x);
  }

  void cell_cycle_phase_pimpl::
  death_rate (::cell_cycle::death_rate_type* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->death_rate ().push_back (x);
  }

  void cell_cycle_phase_pimpl::
  net_birth_rate (::common::units_decimal* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->net_birth_rate (x);
  }

  void cell_cycle_phase_pimpl::
  population_doubling_time (::common::units_decimal_nonnegative* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->population_doubling_time (x);
  }

  void cell_cycle_phase_pimpl::
  cell_cycle_arrest (::cell_cycle::cell_cycle_arrest* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->cell_cycle_arrest (x);
  }

  void cell_cycle_phase_pimpl::
  transition (::cell_cycle::transition* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->transition ().push_back (x);
  }

  void cell_cycle_phase_pimpl::
  cell_part (::phenotype_base::cell_parts* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->cell_part ().push_back (x);
  }

  void cell_cycle_phase_pimpl::
  custom (::common::custom* x)
  {
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_->custom (x);
  }

  ::cell_cycle::cell_cycle_phase* cell_cycle_phase_pimpl::
  post_cell_cycle_phase ()
  {
    ::cell_cycle::cell_cycle_phase* r = this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_;
    this->cell_cycle_phase_pimpl_state_.cell_cycle_phase_ = 0;
    return r;
  }

  // summary_elements_pimpl
  //

  summary_elements_pimpl::
  summary_elements_pimpl (bool b)
  {
    this->summary_elements_pimpl_base_ = b;
    this->summary_elements_pimpl_state_.summary_elements_ = 0;
  }

  summary_elements_pimpl::
  ~summary_elements_pimpl ()
  {
    if (!this->summary_elements_pimpl_base_ && this->summary_elements_pimpl_state_.summary_elements_)
      delete this->summary_elements_pimpl_state_.summary_elements_;
  }

  void summary_elements_pimpl::
  _reset ()
  {
    summary_elements_pskel::_reset ();

    if (!this->summary_elements_pimpl_base_ && this->summary_elements_pimpl_state_.summary_elements_)
    {
      delete this->summary_elements_pimpl_state_.summary_elements_;
      this->summary_elements_pimpl_state_.summary_elements_ = 0;
    }
  }

  void summary_elements_pimpl::
  pre_impl (::cell_cycle::summary_elements* x)
  {
    this->summary_elements_pimpl_state_.summary_elements_ = x;
  }

  void summary_elements_pimpl::
  pre ()
  {
    ::cell_cycle::summary_elements* x = new ::cell_cycle::summary_elements;
    this->pre_impl (x);
  }

  void summary_elements_pimpl::
  birth_rate (::common::units_decimal_nonnegative* x)
  {
    this->summary_elements_pimpl_state_.summary_elements_->birth_rate (x);
  }

  void summary_elements_pimpl::
  duration (::common::units_decimal_nonnegative* x)
  {
    this->summary_elements_pimpl_state_.summary_elements_->duration (x);
  }

  void summary_elements_pimpl::
  death_rate (::cell_cycle::death_rate_type* x)
  {
    this->summary_elements_pimpl_state_.summary_elements_->death_rate ().push_back (x);
  }

  void summary_elements_pimpl::
  net_birth_rate (::common::units_decimal* x)
  {
    this->summary_elements_pimpl_state_.summary_elements_->net_birth_rate (x);
  }

  void summary_elements_pimpl::
  population_doubling_time (::common::units_decimal_nonnegative* x)
  {
    this->summary_elements_pimpl_state_.summary_elements_->population_doubling_time (x);
  }

  ::cell_cycle::summary_elements* summary_elements_pimpl::
  post_summary_elements ()
  {
    ::cell_cycle::summary_elements* r = this->summary_elements_pimpl_state_.summary_elements_;
    this->summary_elements_pimpl_state_.summary_elements_ = 0;
    return r;
  }

  // cell_cycle_pimpl
  //

  cell_cycle_pimpl::
  cell_cycle_pimpl (bool b)
  {
    this->cell_cycle_pimpl_base_ = b;
    this->cell_cycle_pimpl_state_.cell_cycle_ = 0;
  }

  cell_cycle_pimpl::
  ~cell_cycle_pimpl ()
  {
    if (!this->cell_cycle_pimpl_base_ && this->cell_cycle_pimpl_state_.cell_cycle_)
      delete this->cell_cycle_pimpl_state_.cell_cycle_;
  }

  void cell_cycle_pimpl::
  _reset ()
  {
    cell_cycle_pskel::_reset ();

    if (!this->cell_cycle_pimpl_base_ && this->cell_cycle_pimpl_state_.cell_cycle_)
    {
      delete this->cell_cycle_pimpl_state_.cell_cycle_;
      this->cell_cycle_pimpl_state_.cell_cycle_ = 0;
    }
  }

  void cell_cycle_pimpl::
  pre_impl (::cell_cycle::cell_cycle* x)
  {
    this->cell_cycle_pimpl_state_.cell_cycle_ = x;
  }

  void cell_cycle_pimpl::
  pre ()
  {
    ::cell_cycle::cell_cycle* x = new ::cell_cycle::cell_cycle;
    this->pre_impl (x);
  }

  void cell_cycle_pimpl::
  model (const ::std::string& x)
  {
    this->cell_cycle_pimpl_state_.cell_cycle_->model (x);
  }

  void cell_cycle_pimpl::
  ID (unsigned long long x)
  {
    this->cell_cycle_pimpl_state_.cell_cycle_->ID (x);
  }

  void cell_cycle_pimpl::
  cell_cycle_phase (::cell_cycle::cell_cycle_phase* x)
  {
    this->cell_cycle_pimpl_state_.cell_cycle_->cell_cycle_phase ().push_back (x);
  }

  void cell_cycle_pimpl::
  cell_death (::cell_cycle::cell_death* x)
  {
    this->cell_cycle_pimpl_state_.cell_cycle_->cell_death ().push_back (x);
  }

  void cell_cycle_pimpl::
  summary_elements (::cell_cycle::summary_elements* x)
  {
    this->cell_cycle_pimpl_state_.cell_cycle_->summary_elements (x);
  }

  void cell_cycle_pimpl::
  custom (::common::custom* x)
  {
    this->cell_cycle_pimpl_state_.cell_cycle_->custom (x);
  }

  ::cell_cycle::cell_cycle* cell_cycle_pimpl::
  post_cell_cycle ()
  {
    ::cell_cycle::cell_cycle* r = this->cell_cycle_pimpl_state_.cell_cycle_;
    this->cell_cycle_pimpl_state_.cell_cycle_ = 0;
    return r;
  }

  // cell_death_pimpl
  //

  cell_death_pimpl::
  cell_death_pimpl (bool b)
  {
    this->cell_death_pimpl_base_ = b;
    this->cell_death_pimpl_state_.cell_death_ = 0;
  }

  cell_death_pimpl::
  ~cell_death_pimpl ()
  {
    if (!this->cell_death_pimpl_base_ && this->cell_death_pimpl_state_.cell_death_)
      delete this->cell_death_pimpl_state_.cell_death_;
  }

  void cell_death_pimpl::
  _reset ()
  {
    cell_death_pskel::_reset ();

    if (!this->cell_death_pimpl_base_ && this->cell_death_pimpl_state_.cell_death_)
    {
      delete this->cell_death_pimpl_state_.cell_death_;
      this->cell_death_pimpl_state_.cell_death_ = 0;
    }
  }

  void cell_death_pimpl::
  pre_impl (::cell_cycle::cell_death* x)
  {
    this->cell_death_pimpl_state_.cell_death_ = x;
  }

  void cell_death_pimpl::
  pre ()
  {
    ::cell_cycle::cell_death* x = new ::cell_cycle::cell_death;
    this->pre_impl (x);
  }

  void cell_death_pimpl::
  type (const ::cell_cycle::death_type& x)
  {
    this->cell_death_pimpl_state_.cell_death_->type (x);
  }

  void cell_death_pimpl::
  ID (unsigned long long x)
  {
    this->cell_death_pimpl_state_.cell_death_->ID (x);
  }

  void cell_death_pimpl::
  duration (::common::units_decimal* x)
  {
    this->cell_death_pimpl_state_.cell_death_->duration (x);
  }

  void cell_death_pimpl::
  cell_part (::phenotype_base::cell_parts* x)
  {
    this->cell_death_pimpl_state_.cell_death_->cell_part ().push_back (x);
  }

  void cell_death_pimpl::
  custom (::common::custom* x)
  {
    this->cell_death_pimpl_state_.cell_death_->custom (x);
  }

  ::cell_cycle::cell_death* cell_death_pimpl::
  post_cell_death ()
  {
    ::cell_cycle::cell_death* r = this->cell_death_pimpl_state_.cell_death_;
    this->cell_death_pimpl_state_.cell_death_ = 0;
    return r;
  }

  // arrest_type_pimpl
  //

  arrest_type_pimpl::
  arrest_type_pimpl ()
  : arrest_type_pskel (0)
  {
  }

  void arrest_type_pimpl::
  pre ()
  {
    this->arrest_type_pimpl_state_.str_.clear ();
  }

  void arrest_type_pimpl::
  _characters (const ::xsde::cxx::ro_string& s)
  {
    if (this->_facets ().whitespace_ == 2 &&
        this->arrest_type_pimpl_state_.str_.size () == 0)
    {
      ::xsde::cxx::ro_string tmp (s.data (), s.size ());

      if (::xsde::cxx::trim_left (tmp) != 0)
      {
        this->arrest_type_pimpl_state_.str_ += tmp;
      }
    }
    else
      this->arrest_type_pimpl_state_.str_ += s;
  }

  void arrest_type_pimpl::
  _post ()
  {
    ::xsde::cxx::parser::validating::string_common::validate_facets (
      this->arrest_type_pimpl_state_.str_,
      this->_facets (),
      this->_context ());
  }

  ::cell_cycle::arrest_type arrest_type_pimpl::
  post_arrest_type ()
  {
    ::cell_cycle::arrest_type::value_type v =
    static_cast< ::cell_cycle::arrest_type::value_type > (0);
    const char* s = this->arrest_type_pimpl_state_.str_.c_str ();

    if (strcmp (s, "maximum_cell_density") == 0)
      v = ::cell_cycle::arrest_type::maximum_cell_density;
    else if (strcmp (s, "maximum_cell_surface_density") == 0)
      v = ::cell_cycle::arrest_type::maximum_cell_surface_density;
    else if (strcmp (s, "maximum_cell_volume_density") == 0)
      v = ::cell_cycle::arrest_type::maximum_cell_volume_density;
    else if (strcmp (s, "maximum_cell_number") == 0)
      v = ::cell_cycle::arrest_type::maximum_cell_number;
    else if (strcmp (s, "maximum_volume_fraction") == 0)
      v = ::cell_cycle::arrest_type::maximum_volume_fraction;
    else if (strcmp (s, "maximum_area_fraction") == 0)
      v = ::cell_cycle::arrest_type::maximum_area_fraction;

    ::cell_cycle::arrest_type r (v);
    return r;
  }

  // arrest_condition_pimpl
  //

  arrest_condition_pimpl::
  arrest_condition_pimpl (bool b)
  : arrest_condition_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->arrest_condition_pimpl_base_ = b;
    this->arrest_condition_pimpl_state_.arrest_condition_ = 0;
  }

  arrest_condition_pimpl::
  ~arrest_condition_pimpl ()
  {
    if (!this->arrest_condition_pimpl_base_ && this->arrest_condition_pimpl_state_.arrest_condition_)
      delete this->arrest_condition_pimpl_state_.arrest_condition_;
  }

  void arrest_condition_pimpl::
  _reset ()
  {
    arrest_condition_pskel::_reset ();

    if (!this->arrest_condition_pimpl_base_ && this->arrest_condition_pimpl_state_.arrest_condition_)
    {
      delete this->arrest_condition_pimpl_state_.arrest_condition_;
      this->arrest_condition_pimpl_state_.arrest_condition_ = 0;
    }
  }

  void arrest_condition_pimpl::
  pre_impl (::cell_cycle::arrest_condition* x)
  {
    this->arrest_condition_pimpl_state_.arrest_condition_ = x;
    this->base_impl_.pre_impl (x);
  }

  void arrest_condition_pimpl::
  pre ()
  {
    ::cell_cycle::arrest_condition* x = new ::cell_cycle::arrest_condition;
    this->pre_impl (x);
  }

  void arrest_condition_pimpl::
  type (const ::cell_cycle::arrest_type& x)
  {
    this->arrest_condition_pimpl_state_.arrest_condition_->type (x);
  }

  ::cell_cycle::arrest_condition* arrest_condition_pimpl::
  post_arrest_condition ()
  {
    this->base_impl_.post_units_decimal ();
    ::cell_cycle::arrest_condition* r = this->arrest_condition_pimpl_state_.arrest_condition_;
    this->arrest_condition_pimpl_state_.arrest_condition_ = 0;
    return r;
  }

  // cycles_and_deaths_pimpl
  //

  cycles_and_deaths_pimpl::
  cycles_and_deaths_pimpl (bool b)
  {
    this->cycles_and_deaths_pimpl_base_ = b;
    this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_ = 0;
  }

  cycles_and_deaths_pimpl::
  ~cycles_and_deaths_pimpl ()
  {
    if (!this->cycles_and_deaths_pimpl_base_ && this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_)
      delete this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_;
  }

  void cycles_and_deaths_pimpl::
  _reset ()
  {
    cycles_and_deaths_pskel::_reset ();

    if (!this->cycles_and_deaths_pimpl_base_ && this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_)
    {
      delete this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_;
      this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_ = 0;
    }
  }

  void cycles_and_deaths_pimpl::
  pre_impl (::cell_cycle::cycles_and_deaths* x)
  {
    this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_ = x;
  }

  void cycles_and_deaths_pimpl::
  pre ()
  {
    ::cell_cycle::cycles_and_deaths* x = new ::cell_cycle::cycles_and_deaths;
    this->pre_impl (x);
  }

  void cycles_and_deaths_pimpl::
  cell_cycle (::cell_cycle::cell_cycle* x)
  {
    this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_->cell_cycle ().push_back (x);
  }

  void cycles_and_deaths_pimpl::
  cell_death (::cell_cycle::cell_death* x)
  {
    this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_->cell_death ().push_back (x);
  }

  ::cell_cycle::cycles_and_deaths* cycles_and_deaths_pimpl::
  post_cycles_and_deaths ()
  {
    ::cell_cycle::cycles_and_deaths* r = this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_;
    this->cycles_and_deaths_pimpl_state_.cycles_and_deaths_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

