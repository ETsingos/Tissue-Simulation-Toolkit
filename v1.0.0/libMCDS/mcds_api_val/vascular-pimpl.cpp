// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "vascular-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace vascular
{
  // vascular_node_pimpl
  //

  vascular_node_pimpl::
  vascular_node_pimpl (bool b)
  : vascular_node_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->vascular_node_pimpl_base_ = b;
    this->vascular_node_pimpl_state_.vascular_node_ = 0;
  }

  vascular_node_pimpl::
  ~vascular_node_pimpl ()
  {
    if (!this->vascular_node_pimpl_base_ && this->vascular_node_pimpl_state_.vascular_node_)
      delete this->vascular_node_pimpl_state_.vascular_node_;
  }

  void vascular_node_pimpl::
  _reset ()
  {
    vascular_node_pskel::_reset ();

    if (!this->vascular_node_pimpl_base_ && this->vascular_node_pimpl_state_.vascular_node_)
    {
      delete this->vascular_node_pimpl_state_.vascular_node_;
      this->vascular_node_pimpl_state_.vascular_node_ = 0;
    }
  }

  void vascular_node_pimpl::
  pre_impl (::vascular::vascular_node* x)
  {
    this->vascular_node_pimpl_state_.vascular_node_ = x;
    this->base_impl_.pre_impl (x);
  }

  void vascular_node_pimpl::
  pre ()
  {
    ::vascular::vascular_node* x = new ::vascular::vascular_node;
    this->pre_impl (x);
  }

  void vascular_node_pimpl::
  boundary_node (bool x)
  {
    this->vascular_node_pimpl_state_.vascular_node_->boundary_node (x);
  }

  ::mesh::node* vascular_node_pimpl::
  post_node ()
  {
    return this->post_vascular_node ();
  }

  ::vascular::vascular_node* vascular_node_pimpl::
  post_vascular_node ()
  {
    this->base_impl_.post_node ();
    ::vascular::vascular_node* r = this->vascular_node_pimpl_state_.vascular_node_;
    this->vascular_node_pimpl_state_.vascular_node_ = 0;
    return r;
  }

  // list_of_vascular_nodes_pimpl
  //

  list_of_vascular_nodes_pimpl::
  list_of_vascular_nodes_pimpl (bool b)
  : list_of_vascular_nodes_pimpl_state_ (sizeof (list_of_vascular_nodes_pimpl_state ), &list_of_vascular_nodes_pimpl_state_first_)
  {
    this->list_of_vascular_nodes_pimpl_base_ = b;
  }

  list_of_vascular_nodes_pimpl::
  ~list_of_vascular_nodes_pimpl ()
  {
    for (; !this->list_of_vascular_nodes_pimpl_state_.empty (); this->list_of_vascular_nodes_pimpl_state_.pop ())
    {
      if (!this->list_of_vascular_nodes_pimpl_base_ && static_cast< list_of_vascular_nodes_pimpl_state* > (this->list_of_vascular_nodes_pimpl_state_.top ())->list_of_vascular_nodes_)
        delete static_cast< list_of_vascular_nodes_pimpl_state* > (this->list_of_vascular_nodes_pimpl_state_.top ())->list_of_vascular_nodes_;
    }
  }

  void list_of_vascular_nodes_pimpl::
  _reset ()
  {
    list_of_vascular_nodes_pskel::_reset ();

    for (; !this->list_of_vascular_nodes_pimpl_state_.empty (); this->list_of_vascular_nodes_pimpl_state_.pop ())
    {
      if (!this->list_of_vascular_nodes_pimpl_base_ && static_cast< list_of_vascular_nodes_pimpl_state* > (this->list_of_vascular_nodes_pimpl_state_.top ())->list_of_vascular_nodes_)
        delete static_cast< list_of_vascular_nodes_pimpl_state* > (this->list_of_vascular_nodes_pimpl_state_.top ())->list_of_vascular_nodes_;
    }
  }

  void list_of_vascular_nodes_pimpl::
  pre_impl (::vascular::list_of_vascular_nodes* x)
  {
    this->list_of_vascular_nodes_pimpl_state_.push ();
    static_cast< list_of_vascular_nodes_pimpl_state* > (this->list_of_vascular_nodes_pimpl_state_.top ())->list_of_vascular_nodes_ = x;
  }

  void list_of_vascular_nodes_pimpl::
  pre ()
  {
    ::vascular::list_of_vascular_nodes* x = new ::vascular::list_of_vascular_nodes;
    this->pre_impl (x);
  }

  void list_of_vascular_nodes_pimpl::
  vascular_node (::vascular::vascular_node* x)
  {
    static_cast< list_of_vascular_nodes_pimpl_state* > (this->list_of_vascular_nodes_pimpl_state_.top ())->list_of_vascular_nodes_->vascular_node ().push_back (x);
  }

  void list_of_vascular_nodes_pimpl::
  custom (::common::custom* x)
  {
    static_cast< list_of_vascular_nodes_pimpl_state* > (this->list_of_vascular_nodes_pimpl_state_.top ())->list_of_vascular_nodes_->custom (x);
  }

  ::vascular::list_of_vascular_nodes* list_of_vascular_nodes_pimpl::
  post_list_of_vascular_nodes ()
  {
    ::vascular::list_of_vascular_nodes* r = static_cast< list_of_vascular_nodes_pimpl_state* > (this->list_of_vascular_nodes_pimpl_state_.top ())->list_of_vascular_nodes_;
    this->list_of_vascular_nodes_pimpl_state_.pop ();
    return r;
  }

  // boundary_node_pimpl
  //

  boundary_node_pimpl::
  boundary_node_pimpl (bool b)
  {
    this->boundary_node_pimpl_base_ = b;
    this->boundary_node_pimpl_state_.boundary_node_ = 0;
  }

  boundary_node_pimpl::
  ~boundary_node_pimpl ()
  {
    if (!this->boundary_node_pimpl_base_ && this->boundary_node_pimpl_state_.boundary_node_)
      delete this->boundary_node_pimpl_state_.boundary_node_;
  }

  void boundary_node_pimpl::
  _reset ()
  {
    boundary_node_pskel::_reset ();

    if (!this->boundary_node_pimpl_base_ && this->boundary_node_pimpl_state_.boundary_node_)
    {
      delete this->boundary_node_pimpl_state_.boundary_node_;
      this->boundary_node_pimpl_state_.boundary_node_ = 0;
    }
  }

  void boundary_node_pimpl::
  pre_impl (::vascular::boundary_node* x)
  {
    this->boundary_node_pimpl_state_.boundary_node_ = x;
  }

  void boundary_node_pimpl::
  pre ()
  {
    ::vascular::boundary_node* x = new ::vascular::boundary_node;
    this->pre_impl (x);
  }

  void boundary_node_pimpl::
  node_ID (unsigned int x)
  {
    this->boundary_node_pimpl_state_.boundary_node_->node_ID (x);
  }

  void boundary_node_pimpl::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    this->boundary_node_pimpl_state_.boundary_node_->fluid_flow_velocity (x);
  }

  void boundary_node_pimpl::
  variables (::variables::list_of_variables* x)
  {
    this->boundary_node_pimpl_state_.boundary_node_->variables (x);
  }

  void boundary_node_pimpl::
  boundary_conditions (::vascular::boundary_conditions* x)
  {
    this->boundary_node_pimpl_state_.boundary_node_->boundary_conditions (x);
  }

  void boundary_node_pimpl::
  custom (::common::custom* x)
  {
    this->boundary_node_pimpl_state_.boundary_node_->custom (x);
  }

  ::vascular::boundary_node* boundary_node_pimpl::
  post_boundary_node ()
  {
    ::vascular::boundary_node* r = this->boundary_node_pimpl_state_.boundary_node_;
    this->boundary_node_pimpl_state_.boundary_node_ = 0;
    return r;
  }

  // list_of_boundary_nodes_pimpl
  //

  list_of_boundary_nodes_pimpl::
  list_of_boundary_nodes_pimpl (bool b)
  {
    this->list_of_boundary_nodes_pimpl_base_ = b;
    this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_ = 0;
  }

  list_of_boundary_nodes_pimpl::
  ~list_of_boundary_nodes_pimpl ()
  {
    if (!this->list_of_boundary_nodes_pimpl_base_ && this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_)
      delete this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_;
  }

  void list_of_boundary_nodes_pimpl::
  _reset ()
  {
    list_of_boundary_nodes_pskel::_reset ();

    if (!this->list_of_boundary_nodes_pimpl_base_ && this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_)
    {
      delete this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_;
      this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_ = 0;
    }
  }

  void list_of_boundary_nodes_pimpl::
  pre_impl (::vascular::list_of_boundary_nodes* x)
  {
    this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_ = x;
  }

  void list_of_boundary_nodes_pimpl::
  pre ()
  {
    ::vascular::list_of_boundary_nodes* x = new ::vascular::list_of_boundary_nodes;
    this->pre_impl (x);
  }

  void list_of_boundary_nodes_pimpl::
  boundary_node (::vascular::boundary_node* x)
  {
    this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_->boundary_node ().push_back (x);
  }

  void list_of_boundary_nodes_pimpl::
  custom (::common::custom* x)
  {
    this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_->custom (x);
  }

  ::vascular::list_of_boundary_nodes* list_of_boundary_nodes_pimpl::
  post_list_of_boundary_nodes ()
  {
    ::vascular::list_of_boundary_nodes* r = this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_;
    this->list_of_boundary_nodes_pimpl_state_.list_of_boundary_nodes_ = 0;
    return r;
  }

  // boundary_conditions_pimpl
  //

  boundary_conditions_pimpl::
  boundary_conditions_pimpl (bool b)
  {
    this->boundary_conditions_pimpl_base_ = b;
    this->boundary_conditions_pimpl_state_.boundary_conditions_ = 0;
  }

  boundary_conditions_pimpl::
  ~boundary_conditions_pimpl ()
  {
    if (!this->boundary_conditions_pimpl_base_ && this->boundary_conditions_pimpl_state_.boundary_conditions_)
      delete this->boundary_conditions_pimpl_state_.boundary_conditions_;
  }

  void boundary_conditions_pimpl::
  _reset ()
  {
    boundary_conditions_pskel::_reset ();

    if (!this->boundary_conditions_pimpl_base_ && this->boundary_conditions_pimpl_state_.boundary_conditions_)
    {
      delete this->boundary_conditions_pimpl_state_.boundary_conditions_;
      this->boundary_conditions_pimpl_state_.boundary_conditions_ = 0;
    }
  }

  void boundary_conditions_pimpl::
  pre_impl (::vascular::boundary_conditions* x)
  {
    this->boundary_conditions_pimpl_state_.boundary_conditions_ = x;
  }

  void boundary_conditions_pimpl::
  pre ()
  {
    ::vascular::boundary_conditions* x = new ::vascular::boundary_conditions;
    this->pre_impl (x);
  }

  void boundary_conditions_pimpl::
  ID (unsigned int x)
  {
    this->boundary_conditions_pimpl_state_.boundary_conditions_->ID (x);
  }

  void boundary_conditions_pimpl::
  boundary_condition (::vascular::boundary_condition* x)
  {
    this->boundary_conditions_pimpl_state_.boundary_conditions_->boundary_condition ().push_back (x);
  }

  void boundary_conditions_pimpl::
  custom (::common::custom* x)
  {
    this->boundary_conditions_pimpl_state_.boundary_conditions_->custom (x);
  }

  ::vascular::boundary_conditions* boundary_conditions_pimpl::
  post_boundary_conditions ()
  {
    ::vascular::boundary_conditions* r = this->boundary_conditions_pimpl_state_.boundary_conditions_;
    this->boundary_conditions_pimpl_state_.boundary_conditions_ = 0;
    return r;
  }

  // boundary_type_pimpl
  //

  boundary_type_pimpl::
  boundary_type_pimpl ()
  : boundary_type_pskel (0)
  {
  }

  void boundary_type_pimpl::
  pre ()
  {
    this->boundary_type_pimpl_state_.str_.clear ();
  }

  void boundary_type_pimpl::
  _characters (const ::xsde::cxx::ro_string& s)
  {
    if (this->_facets ().whitespace_ == 2 &&
        this->boundary_type_pimpl_state_.str_.size () == 0)
    {
      ::xsde::cxx::ro_string tmp (s.data (), s.size ());

      if (::xsde::cxx::trim_left (tmp) != 0)
      {
        this->boundary_type_pimpl_state_.str_ += tmp;
      }
    }
    else
      this->boundary_type_pimpl_state_.str_ += s;
  }

  void boundary_type_pimpl::
  _post ()
  {
    ::xsde::cxx::parser::validating::string_common::validate_facets (
      this->boundary_type_pimpl_state_.str_,
      this->_facets (),
      this->_context ());
  }

  ::vascular::boundary_type boundary_type_pimpl::
  post_boundary_type ()
  {
    ::vascular::boundary_type::value_type v =
    static_cast< ::vascular::boundary_type::value_type > (0);
    const char* s = this->boundary_type_pimpl_state_.str_.c_str ();

    if (strcmp (s, "Neumann") == 0)
      v = ::vascular::boundary_type::Neumann;
    else if (strcmp (s, "Dirichlet") == 0)
      v = ::vascular::boundary_type::Dirichlet;
    else if (strcmp (s, "Periodic") == 0)
      v = ::vascular::boundary_type::Periodic;
    else if (strcmp (s, "Anti-Periodic") == 0)
      v = ::vascular::boundary_type::Anti_Periodic;
    else if (strcmp (s, "Reflecting") == 0)
      v = ::vascular::boundary_type::Reflecting;
    else if (strcmp (s, "Anti-Reflecting") == 0)
      v = ::vascular::boundary_type::Anti_Reflecting;

    ::vascular::boundary_type r (v);
    return r;
  }

  // boundary_condition_pimpl
  //

  boundary_condition_pimpl::
  boundary_condition_pimpl (bool b)
  {
    this->boundary_condition_pimpl_base_ = b;
    this->boundary_condition_pimpl_state_.boundary_condition_ = 0;
  }

  boundary_condition_pimpl::
  ~boundary_condition_pimpl ()
  {
    if (!this->boundary_condition_pimpl_base_ && this->boundary_condition_pimpl_state_.boundary_condition_)
      delete this->boundary_condition_pimpl_state_.boundary_condition_;
  }

  void boundary_condition_pimpl::
  _reset ()
  {
    boundary_condition_pskel::_reset ();

    if (!this->boundary_condition_pimpl_base_ && this->boundary_condition_pimpl_state_.boundary_condition_)
    {
      delete this->boundary_condition_pimpl_state_.boundary_condition_;
      this->boundary_condition_pimpl_state_.boundary_condition_ = 0;
    }
  }

  void boundary_condition_pimpl::
  pre_impl (::vascular::boundary_condition* x)
  {
    this->boundary_condition_pimpl_state_.boundary_condition_ = x;
  }

  void boundary_condition_pimpl::
  pre ()
  {
    ::vascular::boundary_condition* x = new ::vascular::boundary_condition;
    this->pre_impl (x);
  }

  void boundary_condition_pimpl::
  ID (unsigned int x)
  {
    this->boundary_condition_pimpl_state_.boundary_condition_->ID (x);
  }

  void boundary_condition_pimpl::
  variable_ID (unsigned int x)
  {
    this->boundary_condition_pimpl_state_.boundary_condition_->variable_ID (x);
  }

  void boundary_condition_pimpl::
  boundary_type (const ::vascular::boundary_type& x)
  {
    this->boundary_condition_pimpl_state_.boundary_condition_->boundary_type (x);
  }

  void boundary_condition_pimpl::
  value (::common::units_decimal* x)
  {
    this->boundary_condition_pimpl_state_.boundary_condition_->value (x);
  }

  void boundary_condition_pimpl::
  direction (const ::std::string& x)
  {
    this->boundary_condition_pimpl_state_.boundary_condition_->direction (x);
  }

  void boundary_condition_pimpl::
  custom (::common::custom* x)
  {
    this->boundary_condition_pimpl_state_.boundary_condition_->custom (x);
  }

  ::vascular::boundary_condition* boundary_condition_pimpl::
  post_boundary_condition ()
  {
    ::vascular::boundary_condition* r = this->boundary_condition_pimpl_state_.boundary_condition_;
    this->boundary_condition_pimpl_state_.boundary_condition_ = 0;
    return r;
  }

  // vascular_segments_pimpl
  //

  vascular_segments_pimpl::
  vascular_segments_pimpl (bool b)
  {
    this->vascular_segments_pimpl_base_ = b;
    this->vascular_segments_pimpl_state_.vascular_segments_ = 0;
  }

  vascular_segments_pimpl::
  ~vascular_segments_pimpl ()
  {
    if (!this->vascular_segments_pimpl_base_ && this->vascular_segments_pimpl_state_.vascular_segments_)
      delete this->vascular_segments_pimpl_state_.vascular_segments_;
  }

  void vascular_segments_pimpl::
  _reset ()
  {
    vascular_segments_pskel::_reset ();

    if (!this->vascular_segments_pimpl_base_ && this->vascular_segments_pimpl_state_.vascular_segments_)
    {
      delete this->vascular_segments_pimpl_state_.vascular_segments_;
      this->vascular_segments_pimpl_state_.vascular_segments_ = 0;
    }
  }

  void vascular_segments_pimpl::
  pre_impl (::vascular::vascular_segments* x)
  {
    this->vascular_segments_pimpl_state_.vascular_segments_ = x;
  }

  void vascular_segments_pimpl::
  pre ()
  {
    ::vascular::vascular_segments* x = new ::vascular::vascular_segments;
    this->pre_impl (x);
  }

  void vascular_segments_pimpl::
  vascular_segment (::vascular::vascular_segment* x)
  {
    this->vascular_segments_pimpl_state_.vascular_segments_->vascular_segment ().push_back (x);
  }

  void vascular_segments_pimpl::
  custom (::common::custom* x)
  {
    this->vascular_segments_pimpl_state_.vascular_segments_->custom (x);
  }

  ::vascular::vascular_segments* vascular_segments_pimpl::
  post_vascular_segments ()
  {
    ::vascular::vascular_segments* r = this->vascular_segments_pimpl_state_.vascular_segments_;
    this->vascular_segments_pimpl_state_.vascular_segments_ = 0;
    return r;
  }

  // vascular_segment_pimpl
  //

  vascular_segment_pimpl::
  vascular_segment_pimpl (bool b)
  {
    this->vascular_segment_pimpl_base_ = b;
    this->vascular_segment_pimpl_state_.vascular_segment_ = 0;
  }

  vascular_segment_pimpl::
  ~vascular_segment_pimpl ()
  {
    if (!this->vascular_segment_pimpl_base_ && this->vascular_segment_pimpl_state_.vascular_segment_)
      delete this->vascular_segment_pimpl_state_.vascular_segment_;
  }

  void vascular_segment_pimpl::
  _reset ()
  {
    vascular_segment_pskel::_reset ();

    if (!this->vascular_segment_pimpl_base_ && this->vascular_segment_pimpl_state_.vascular_segment_)
    {
      delete this->vascular_segment_pimpl_state_.vascular_segment_;
      this->vascular_segment_pimpl_state_.vascular_segment_ = 0;
    }
  }

  void vascular_segment_pimpl::
  pre_impl (::vascular::vascular_segment* x)
  {
    this->vascular_segment_pimpl_state_.vascular_segment_ = x;
  }

  void vascular_segment_pimpl::
  pre ()
  {
    ::vascular::vascular_segment* x = new ::vascular::vascular_segment;
    this->pre_impl (x);
  }

  void vascular_segment_pimpl::
  endpoint_1 (::vascular::endpoint* x)
  {
    this->vascular_segment_pimpl_state_.vascular_segment_->endpoint_1 (x);
  }

  void vascular_segment_pimpl::
  endpoint_2 (::vascular::endpoint* x)
  {
    this->vascular_segment_pimpl_state_.vascular_segment_->endpoint_2 (x);
  }

  void vascular_segment_pimpl::
  surface (::vascular::surface_properties* x)
  {
    this->vascular_segment_pimpl_state_.vascular_segment_->surface (x);
  }

  void vascular_segment_pimpl::
  interior (::vascular::volume_properties* x)
  {
    this->vascular_segment_pimpl_state_.vascular_segment_->interior (x);
  }

  void vascular_segment_pimpl::
  custom (::common::custom* x)
  {
    this->vascular_segment_pimpl_state_.vascular_segment_->custom (x);
  }

  ::vascular::vascular_segment* vascular_segment_pimpl::
  post_vascular_segment ()
  {
    ::vascular::vascular_segment* r = this->vascular_segment_pimpl_state_.vascular_segment_;
    this->vascular_segment_pimpl_state_.vascular_segment_ = 0;
    return r;
  }

  // endpoint_pimpl
  //

  endpoint_pimpl::
  endpoint_pimpl (bool b)
  {
    this->endpoint_pimpl_base_ = b;
    this->endpoint_pimpl_state_.endpoint_ = 0;
  }

  endpoint_pimpl::
  ~endpoint_pimpl ()
  {
    if (!this->endpoint_pimpl_base_ && this->endpoint_pimpl_state_.endpoint_)
      delete this->endpoint_pimpl_state_.endpoint_;
  }

  void endpoint_pimpl::
  _reset ()
  {
    endpoint_pskel::_reset ();

    if (!this->endpoint_pimpl_base_ && this->endpoint_pimpl_state_.endpoint_)
    {
      delete this->endpoint_pimpl_state_.endpoint_;
      this->endpoint_pimpl_state_.endpoint_ = 0;
    }
  }

  void endpoint_pimpl::
  pre_impl (::vascular::endpoint* x)
  {
    this->endpoint_pimpl_state_.endpoint_ = x;
  }

  void endpoint_pimpl::
  pre ()
  {
    ::vascular::endpoint* x = new ::vascular::endpoint;
    this->pre_impl (x);
  }

  void endpoint_pimpl::
  node_ID (unsigned int x)
  {
    this->endpoint_pimpl_state_.endpoint_->node_ID (x);
  }

  void endpoint_pimpl::
  lengths (::phenotype_common::lengths* x)
  {
    this->endpoint_pimpl_state_.endpoint_->lengths (x);
  }

  void endpoint_pimpl::
  areas (::phenotype_common::areas_2D* x)
  {
    this->endpoint_pimpl_state_.endpoint_->areas (x);
  }

  void endpoint_pimpl::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    this->endpoint_pimpl_state_.endpoint_->fluid_flow_velocity (x);
  }

  void endpoint_pimpl::
  custom (::common::custom* x)
  {
    this->endpoint_pimpl_state_.endpoint_->custom (x);
  }

  ::vascular::endpoint* endpoint_pimpl::
  post_endpoint ()
  {
    ::vascular::endpoint* r = this->endpoint_pimpl_state_.endpoint_;
    this->endpoint_pimpl_state_.endpoint_ = 0;
    return r;
  }

  // surface_properties_pimpl
  //

  surface_properties_pimpl::
  surface_properties_pimpl (bool b)
  {
    this->surface_properties_pimpl_base_ = b;
    this->surface_properties_pimpl_state_.surface_properties_ = 0;
  }

  surface_properties_pimpl::
  ~surface_properties_pimpl ()
  {
    if (!this->surface_properties_pimpl_base_ && this->surface_properties_pimpl_state_.surface_properties_)
      delete this->surface_properties_pimpl_state_.surface_properties_;
  }

  void surface_properties_pimpl::
  _reset ()
  {
    surface_properties_pskel::_reset ();

    if (!this->surface_properties_pimpl_base_ && this->surface_properties_pimpl_state_.surface_properties_)
    {
      delete this->surface_properties_pimpl_state_.surface_properties_;
      this->surface_properties_pimpl_state_.surface_properties_ = 0;
    }
  }

  void surface_properties_pimpl::
  pre_impl (::vascular::surface_properties* x)
  {
    this->surface_properties_pimpl_state_.surface_properties_ = x;
  }

  void surface_properties_pimpl::
  pre ()
  {
    ::vascular::surface_properties* x = new ::vascular::surface_properties;
    this->pre_impl (x);
  }

  void surface_properties_pimpl::
  areas (::phenotype_common::areas_3D* x)
  {
    this->surface_properties_pimpl_state_.surface_properties_->areas (x);
  }

  void surface_properties_pimpl::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    this->surface_properties_pimpl_state_.surface_properties_->fluid_flow_velocity (x);
  }

  void surface_properties_pimpl::
  mechanics (::phenotype_common::mechanics* x)
  {
    this->surface_properties_pimpl_state_.surface_properties_->mechanics (x);
  }

  void surface_properties_pimpl::
  permeability (::common::units_decimal* x)
  {
    this->surface_properties_pimpl_state_.surface_properties_->permeability (x);
  }

  void surface_properties_pimpl::
  surface_proteins (::variables::list_of_variables* x)
  {
    this->surface_properties_pimpl_state_.surface_properties_->surface_proteins (x);
  }

  void surface_properties_pimpl::
  custom (::common::custom* x)
  {
    this->surface_properties_pimpl_state_.surface_properties_->custom (x);
  }

  ::vascular::surface_properties* surface_properties_pimpl::
  post_surface_properties ()
  {
    ::vascular::surface_properties* r = this->surface_properties_pimpl_state_.surface_properties_;
    this->surface_properties_pimpl_state_.surface_properties_ = 0;
    return r;
  }

  // volume_properties_pimpl
  //

  volume_properties_pimpl::
  volume_properties_pimpl (bool b)
  {
    this->volume_properties_pimpl_base_ = b;
    this->volume_properties_pimpl_state_.volume_properties_ = 0;
  }

  volume_properties_pimpl::
  ~volume_properties_pimpl ()
  {
    if (!this->volume_properties_pimpl_base_ && this->volume_properties_pimpl_state_.volume_properties_)
      delete this->volume_properties_pimpl_state_.volume_properties_;
  }

  void volume_properties_pimpl::
  _reset ()
  {
    volume_properties_pskel::_reset ();

    if (!this->volume_properties_pimpl_base_ && this->volume_properties_pimpl_state_.volume_properties_)
    {
      delete this->volume_properties_pimpl_state_.volume_properties_;
      this->volume_properties_pimpl_state_.volume_properties_ = 0;
    }
  }

  void volume_properties_pimpl::
  pre_impl (::vascular::volume_properties* x)
  {
    this->volume_properties_pimpl_state_.volume_properties_ = x;
  }

  void volume_properties_pimpl::
  pre ()
  {
    ::vascular::volume_properties* x = new ::vascular::volume_properties;
    this->pre_impl (x);
  }

  void volume_properties_pimpl::
  fluid_flow_velocity (::common::units_decimal* x)
  {
    this->volume_properties_pimpl_state_.volume_properties_->fluid_flow_velocity (x);
  }

  void volume_properties_pimpl::
  variables (::variables::list_of_variables* x)
  {
    this->volume_properties_pimpl_state_.volume_properties_->variables (x);
  }

  void volume_properties_pimpl::
  volumes (::phenotype_common::volumes* x)
  {
    this->volume_properties_pimpl_state_.volume_properties_->volumes (x);
  }

  void volume_properties_pimpl::
  custom (::common::custom* x)
  {
    this->volume_properties_pimpl_state_.volume_properties_->custom (x);
  }

  ::vascular::volume_properties* volume_properties_pimpl::
  post_volume_properties ()
  {
    ::vascular::volume_properties* r = this->volume_properties_pimpl_state_.volume_properties_;
    this->volume_properties_pimpl_state_.volume_properties_ = 0;
    return r;
  }

  // vascular_network_pimpl
  //

  vascular_network_pimpl::
  vascular_network_pimpl (bool b)
  {
    this->vascular_network_pimpl_base_ = b;
    this->vascular_network_pimpl_state_.vascular_network_ = 0;
  }

  vascular_network_pimpl::
  ~vascular_network_pimpl ()
  {
    if (!this->vascular_network_pimpl_base_ && this->vascular_network_pimpl_state_.vascular_network_)
      delete this->vascular_network_pimpl_state_.vascular_network_;
  }

  void vascular_network_pimpl::
  _reset ()
  {
    vascular_network_pskel::_reset ();

    if (!this->vascular_network_pimpl_base_ && this->vascular_network_pimpl_state_.vascular_network_)
    {
      delete this->vascular_network_pimpl_state_.vascular_network_;
      this->vascular_network_pimpl_state_.vascular_network_ = 0;
    }
  }

  void vascular_network_pimpl::
  pre_impl (::vascular::vascular_network* x)
  {
    this->vascular_network_pimpl_state_.vascular_network_ = x;
  }

  void vascular_network_pimpl::
  pre ()
  {
    ::vascular::vascular_network* x = new ::vascular::vascular_network;
    this->pre_impl (x);
  }

  void vascular_network_pimpl::
  ID (unsigned int x)
  {
    this->vascular_network_pimpl_state_.vascular_network_->ID (x);
  }

  void vascular_network_pimpl::
  keywords (const ::std::string& x)
  {
    this->vascular_network_pimpl_state_.vascular_network_->keywords (x);
  }

  void vascular_network_pimpl::
  name (const ::std::string& x)
  {
    this->vascular_network_pimpl_state_.vascular_network_->name (x);
  }

  void vascular_network_pimpl::
  vascular_nodes (::vascular::list_of_vascular_nodes* x)
  {
    this->vascular_network_pimpl_state_.vascular_network_->vascular_nodes (x);
  }

  void vascular_network_pimpl::
  boundary_nodes (::vascular::list_of_boundary_nodes* x)
  {
    this->vascular_network_pimpl_state_.vascular_network_->boundary_nodes (x);
  }

  void vascular_network_pimpl::
  vascular_segments (::vascular::vascular_segments* x)
  {
    this->vascular_network_pimpl_state_.vascular_network_->vascular_segments (x);
  }

  void vascular_network_pimpl::
  voxels (::mesh::int_list_xpath* x)
  {
    this->vascular_network_pimpl_state_.vascular_network_->voxels (x);
  }

  void vascular_network_pimpl::
  custom (::common::custom* x)
  {
    this->vascular_network_pimpl_state_.vascular_network_->custom (x);
  }

  ::vascular::vascular_network* vascular_network_pimpl::
  post_vascular_network ()
  {
    ::vascular::vascular_network* r = this->vascular_network_pimpl_state_.vascular_network_;
    this->vascular_network_pimpl_state_.vascular_network_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

