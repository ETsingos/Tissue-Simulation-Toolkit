// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MICROENVIRONMENT_HPP
#define MICROENVIRONMENT_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "microenvironment-fwd.hpp"

#ifndef XSDE_DONT_INCLUDE_INLINE
#define XSDE_DONT_INCLUDE_INLINE

#include "common.hpp"

#include "mesh.hpp"

#include "basement_membrane.hpp"

#include "vascular.hpp"

#include "variables.hpp"

#undef XSDE_DONT_INCLUDE_INLINE
#else

#include "common.hpp"

#include "mesh.hpp"

#include "basement_membrane.hpp"

#include "vascular.hpp"

#include "variables.hpp"

#endif // XSDE_DONT_INCLUDE_INLINE

namespace microenvironment
{
  // domain (variable-length)
  //
  class domain
  {
    private:
    domain (const domain&);
    domain& operator= (const domain&);

    public:
    domain ();

    domain*
    _clone () const;

    ~domain ();

    // name
    //
    bool
    name_present () const;

    void
    name_present (bool);

    const ::std::string&
    name () const;

    ::std::string&
    name ();

    void
    name (const ::std::string&);

    // variables
    //
    bool
    variables_present () const;

    const ::variables::list_of_variables&
    variables () const;

    ::variables::list_of_variables&
    variables ();

    void
    variables (::variables::list_of_variables*);

    ::variables::list_of_variables*
    variables_detach ();

    // experimental_condition
    //
    bool
    experimental_condition_present () const;

    const ::variables::experimental_conditions&
    experimental_condition () const;

    ::variables::experimental_conditions&
    experimental_condition ();

    void
    experimental_condition (::variables::experimental_conditions*);

    ::variables::experimental_conditions*
    experimental_condition_detach ();

    // mesh
    //
    bool
    mesh_present () const;

    const ::mesh::mesh&
    mesh () const;

    ::mesh::mesh&
    mesh ();

    void
    mesh (::mesh::mesh*);

    ::mesh::mesh*
    mesh_detach ();

    // data
    //
    bool
    data_present () const;

    const ::variables::data&
    data () const;

    ::variables::data&
    data ();

    void
    data (::variables::data*);

    ::variables::data*
    data_detach ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (domain&) const;

    private:
    ::std::string name_;
    unsigned char name_present_;
    ::variables::list_of_variables* variables_;
    ::variables::experimental_conditions* experimental_condition_;
    ::mesh::mesh* mesh_;
    ::variables::data* data_;
    ::common::custom* custom_;
  };

  // microenvironment (variable-length)
  //
  class microenvironment
  {
    private:
    microenvironment (const microenvironment&);
    microenvironment& operator= (const microenvironment&);

    public:
    microenvironment ();

    microenvironment*
    _clone () const;

    ~microenvironment ();

    // domain
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::microenvironment::domain > domain_sequence;
    typedef domain_sequence::iterator domain_iterator;
    typedef domain_sequence::const_iterator domain_const_iterator;

    const domain_sequence&
    domain () const;

    domain_sequence&
    domain ();

    // vascular_network
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::vascular::vascular_network > vascular_network_sequence;
    typedef vascular_network_sequence::iterator vascular_network_iterator;
    typedef vascular_network_sequence::const_iterator vascular_network_const_iterator;

    const vascular_network_sequence&
    vascular_network () const;

    vascular_network_sequence&
    vascular_network ();

    // basement_membrane
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::basement::basement_membrane > basement_membrane_sequence;
    typedef basement_membrane_sequence::iterator basement_membrane_iterator;
    typedef basement_membrane_sequence::const_iterator basement_membrane_const_iterator;

    const basement_membrane_sequence&
    basement_membrane () const;

    basement_membrane_sequence&
    basement_membrane ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (microenvironment&) const;

    private:
    domain_sequence domain_;
    vascular_network_sequence vascular_network_;
    basement_membrane_sequence basement_membrane_;
    ::common::custom* custom_;
  };
}

#ifndef XSDE_DONT_INCLUDE_INLINE

#include "common.ipp"

#include "mesh.ipp"

#include "basement_membrane.ipp"

#include "vascular.ipp"

#include "variables.ipp"

#endif // XSDE_DONT_INCLUDE_INLINE

#ifndef XSDE_DONT_INCLUDE_INLINE
#include "microenvironment.ipp"
#endif // XSDE_DONT_INCLUDE_INLINE

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // MICROENVIRONMENT_HPP
