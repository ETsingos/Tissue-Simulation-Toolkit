// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "pkpd-sskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::serializer::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace pkpd
{
  // pharmacokinetics_sskel
  //

  bool pharmacokinetics_sskel::
  inactivation_rate_present ()
  {
    return this->pharmacokinetics_impl_ ? this->pharmacokinetics_impl_->inactivation_rate_present () : false;
  }

  bool pharmacokinetics_sskel::
  half_life_present ()
  {
    return this->pharmacokinetics_impl_ ? this->pharmacokinetics_impl_->half_life_present () : false;
  }

  void pharmacokinetics_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->inactivation_rate_serializer_)
      this->inactivation_rate_serializer_->_reset ();

    if (this->inactivation_rate_serializer_map_)
      this->inactivation_rate_serializer_map_->reset ();

    if (this->half_life_serializer_)
      this->half_life_serializer_->_reset ();

    if (this->half_life_serializer_map_)
      this->half_life_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* pharmacokinetics_sskel::
  _static_type ()
  {
    return "pharmacokinetics pkpd";
  }

  const char* pharmacokinetics_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // drug_sskel
  //

  bool drug_sskel::
  any_attribute_next ()
  {
    return this->drug_impl_ ? this->drug_impl_->any_attribute_next () : false;
  }

  void drug_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->drug_impl_)
      this->drug_impl_->any_attribute (ns, n);
  }

  void drug_sskel::
  serialize_any_attribute ()
  {
    if (this->drug_impl_)
      this->drug_impl_->serialize_any_attribute ();
  }

  void drug_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->dose_serializer_)
      this->dose_serializer_->_reset ();

    if (this->dose_serializer_map_)
      this->dose_serializer_map_->reset ();

    if (this->pharmacokinetics_serializer_)
      this->pharmacokinetics_serializer_->_reset ();

    if (this->pharmacokinetics_serializer_map_)
      this->pharmacokinetics_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* drug_sskel::
  _static_type ()
  {
    return "drug pkpd";
  }

  const char* drug_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // drug_dose_sskel
  //

  bool drug_dose_sskel::
  ID_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->ID_present () : false;
  }

  bool drug_dose_sskel::
  ChEBI_ID_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->ChEBI_ID_present () : false;
  }

  bool drug_dose_sskel::
  MeSH_ID_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->MeSH_ID_present () : false;
  }

  bool drug_dose_sskel::
  DrugBank_ID_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->DrugBank_ID_present () : false;
  }

  bool drug_dose_sskel::
  GMO_ID_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->GMO_ID_present () : false;
  }

  bool drug_dose_sskel::
  GO_ID_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->GO_ID_present () : false;
  }

  bool drug_dose_sskel::
  UniProt_ID_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->UniProt_ID_present () : false;
  }

  bool drug_dose_sskel::
  PR_ID_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->PR_ID_present () : false;
  }

  bool drug_dose_sskel::
  name_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->name_present () : false;
  }

  bool drug_dose_sskel::
  units_present ()
  {
    return this->drug_dose_impl_ ? this->drug_dose_impl_->units_present () : false;
  }

  void drug_dose_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    if (this->ChEBI_ID_serializer_)
      this->ChEBI_ID_serializer_->_reset ();

    if (this->MeSH_ID_serializer_)
      this->MeSH_ID_serializer_->_reset ();

    if (this->DrugBank_ID_serializer_)
      this->DrugBank_ID_serializer_->_reset ();

    if (this->GMO_ID_serializer_)
      this->GMO_ID_serializer_->_reset ();

    if (this->GO_ID_serializer_)
      this->GO_ID_serializer_->_reset ();

    if (this->UniProt_ID_serializer_)
      this->UniProt_ID_serializer_->_reset ();

    if (this->PR_ID_serializer_)
      this->PR_ID_serializer_->_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();

    this->resetting_ = true;

    if (this->dose_serializer_)
      this->dose_serializer_->_reset ();

    if (this->dose_serializer_map_)
      this->dose_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* drug_dose_sskel::
  _static_type ()
  {
    return "drug_dose pkpd";
  }

  const char* drug_dose_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // drug_pk_sskel
  //

  bool drug_pk_sskel::
  ID_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->ID_present () : false;
  }

  bool drug_pk_sskel::
  ChEBI_ID_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->ChEBI_ID_present () : false;
  }

  bool drug_pk_sskel::
  MeSH_ID_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->MeSH_ID_present () : false;
  }

  bool drug_pk_sskel::
  DrugBank_ID_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->DrugBank_ID_present () : false;
  }

  bool drug_pk_sskel::
  GMO_ID_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->GMO_ID_present () : false;
  }

  bool drug_pk_sskel::
  GO_ID_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->GO_ID_present () : false;
  }

  bool drug_pk_sskel::
  UniProt_ID_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->UniProt_ID_present () : false;
  }

  bool drug_pk_sskel::
  PR_ID_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->PR_ID_present () : false;
  }

  bool drug_pk_sskel::
  name_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->name_present () : false;
  }

  bool drug_pk_sskel::
  units_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->units_present () : false;
  }

  bool drug_pk_sskel::
  pharmacokinetics_present ()
  {
    return this->drug_pk_impl_ ? this->drug_pk_impl_->pharmacokinetics_present () : false;
  }

  void drug_pk_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    if (this->ChEBI_ID_serializer_)
      this->ChEBI_ID_serializer_->_reset ();

    if (this->MeSH_ID_serializer_)
      this->MeSH_ID_serializer_->_reset ();

    if (this->DrugBank_ID_serializer_)
      this->DrugBank_ID_serializer_->_reset ();

    if (this->GMO_ID_serializer_)
      this->GMO_ID_serializer_->_reset ();

    if (this->GO_ID_serializer_)
      this->GO_ID_serializer_->_reset ();

    if (this->UniProt_ID_serializer_)
      this->UniProt_ID_serializer_->_reset ();

    if (this->PR_ID_serializer_)
      this->PR_ID_serializer_->_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    if (this->units_serializer_)
      this->units_serializer_->_reset ();

    this->resetting_ = true;

    if (this->pharmacokinetics_serializer_)
      this->pharmacokinetics_serializer_->_reset ();

    if (this->pharmacokinetics_serializer_map_)
      this->pharmacokinetics_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* drug_pk_sskel::
  _static_type ()
  {
    return "drug_pk pkpd";
  }

  const char* drug_pk_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // dose_sskel
  //

  bool dose_sskel::
  type_present ()
  {
    return this->dose_impl_ ? this->dose_impl_->type_present () : false;
  }

  void dose_sskel::
  _reset ()
  {
    typedef ::common::units_decimal_sskel base;
    base::_reset ();

    if (this->type_serializer_)
      this->type_serializer_->_reset ();
  }

  const char* dose_sskel::
  _static_type ()
  {
    return "dose pkpd";
  }

  const char* dose_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_dose_sskel_inheritance_map_entry_ (
    dose_sskel::_static_type (),
    ::common::units_decimal_sskel::_static_type ());

  void dose_sskel::
  pre (const ::common::units_decimal& x)
  {
    assert (this->units_decimal_impl_);
    this->units_decimal_impl_->pre (x);
  }

  ::std::string dose_sskel::
  units ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->units ();
  }

  ::std::string dose_sskel::
  measurement_type ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->measurement_type ();
  }

  double dose_sskel::
  uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty ();
  }

  double dose_sskel::
  negative_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty ();
  }

  double dose_sskel::
  positive_uncertainty ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty ();
  }

  double dose_sskel::
  uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->uncertainty_percentage ();
  }

  double dose_sskel::
  negative_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->negative_uncertainty_percentage ();
  }

  double dose_sskel::
  positive_uncertainty_percentage ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->positive_uncertainty_percentage ();
  }

  double dose_sskel::
  median ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->median ();
  }

  double dose_sskel::
  standard_deviation ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_deviation ();
  }

  const ::common::two_doubles& dose_sskel::
  interquartile_range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->interquartile_range ();
  }

  const ::common::two_doubles& dose_sskel::
  range ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->range ();
  }

  double dose_sskel::
  min ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->min ();
  }

  double dose_sskel::
  max ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->max ();
  }

  double dose_sskel::
  standard_error ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error ();
  }

  double dose_sskel::
  standard_error_of_the_mean ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->standard_error_of_the_mean ();
  }

  int dose_sskel::
  number_obs ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->number_obs ();
  }

  double dose_sskel::
  skewnesss ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->skewnesss ();
  }

  double dose_sskel::
  kurtosis ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->kurtosis ();
  }

  // therapy_sskel
  //

  void therapy_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->drug_serializer_)
      this->drug_serializer_->_reset ();

    if (this->drug_serializer_map_)
      this->drug_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* therapy_sskel::
  _static_type ()
  {
    return "therapy pkpd";
  }

  const char* therapy_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // response_sskel
  //

  bool response_sskel::
  maximum_birth_inhibition_present ()
  {
    return this->response_impl_ ? this->response_impl_->maximum_birth_inhibition_present () : false;
  }

  bool response_sskel::
  maximum_birth_inhibition_time_present ()
  {
    return this->response_impl_ ? this->response_impl_->maximum_birth_inhibition_time_present () : false;
  }

  bool response_sskel::
  birth_inhibition_recovery_rate_present ()
  {
    return this->response_impl_ ? this->response_impl_->birth_inhibition_recovery_rate_present () : false;
  }

  bool response_sskel::
  maximum_death_rate_present ()
  {
    return this->response_impl_ ? this->response_impl_->maximum_death_rate_present () : false;
  }

  bool response_sskel::
  maximum_death_time_present ()
  {
    return this->response_impl_ ? this->response_impl_->maximum_death_time_present () : false;
  }

  bool response_sskel::
  death_recovery_rate_present ()
  {
    return this->response_impl_ ? this->response_impl_->death_recovery_rate_present () : false;
  }

  bool response_sskel::
  response_observation_next ()
  {
    return this->response_impl_ ? this->response_impl_->response_observation_next () : false;
  }

  bool response_sskel::
  custom_present ()
  {
    return this->response_impl_ ? this->response_impl_->custom_present () : false;
  }

  void response_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->maximum_birth_inhibition_serializer_)
      this->maximum_birth_inhibition_serializer_->_reset ();

    if (this->maximum_birth_inhibition_serializer_map_)
      this->maximum_birth_inhibition_serializer_map_->reset ();

    if (this->maximum_birth_inhibition_time_serializer_)
      this->maximum_birth_inhibition_time_serializer_->_reset ();

    if (this->maximum_birth_inhibition_time_serializer_map_)
      this->maximum_birth_inhibition_time_serializer_map_->reset ();

    if (this->birth_inhibition_recovery_rate_serializer_)
      this->birth_inhibition_recovery_rate_serializer_->_reset ();

    if (this->birth_inhibition_recovery_rate_serializer_map_)
      this->birth_inhibition_recovery_rate_serializer_map_->reset ();

    if (this->maximum_death_rate_serializer_)
      this->maximum_death_rate_serializer_->_reset ();

    if (this->maximum_death_rate_serializer_map_)
      this->maximum_death_rate_serializer_map_->reset ();

    if (this->maximum_death_time_serializer_)
      this->maximum_death_time_serializer_->_reset ();

    if (this->maximum_death_time_serializer_map_)
      this->maximum_death_time_serializer_map_->reset ();

    if (this->death_recovery_rate_serializer_)
      this->death_recovery_rate_serializer_->_reset ();

    if (this->death_recovery_rate_serializer_map_)
      this->death_recovery_rate_serializer_map_->reset ();

    if (this->response_observation_serializer_)
      this->response_observation_serializer_->_reset ();

    if (this->response_observation_serializer_map_)
      this->response_observation_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* response_sskel::
  _static_type ()
  {
    return "response pkpd";
  }

  const char* response_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // response_observation_sskel
  //

  bool response_observation_sskel::
  time_present ()
  {
    return this->response_observation_impl_ ? this->response_observation_impl_->time_present () : false;
  }

  bool response_observation_sskel::
  birth_rate_present ()
  {
    return this->response_observation_impl_ ? this->response_observation_impl_->birth_rate_present () : false;
  }

  bool response_observation_sskel::
  death_rate_present ()
  {
    return this->response_observation_impl_ ? this->response_observation_impl_->death_rate_present () : false;
  }

  bool response_observation_sskel::
  net_birth_rate_present ()
  {
    return this->response_observation_impl_ ? this->response_observation_impl_->net_birth_rate_present () : false;
  }

  bool response_observation_sskel::
  net_death_rate_present ()
  {
    return this->response_observation_impl_ ? this->response_observation_impl_->net_death_rate_present () : false;
  }

  bool response_observation_sskel::
  apoptotic_duration_present ()
  {
    return this->response_observation_impl_ ? this->response_observation_impl_->apoptotic_duration_present () : false;
  }

  bool response_observation_sskel::
  percent_cell_viability_present ()
  {
    return this->response_observation_impl_ ? this->response_observation_impl_->percent_cell_viability_present () : false;
  }

  bool response_observation_sskel::
  custom_present ()
  {
    return this->response_observation_impl_ ? this->response_observation_impl_->custom_present () : false;
  }

  void response_observation_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->time_serializer_)
      this->time_serializer_->_reset ();

    if (this->time_serializer_map_)
      this->time_serializer_map_->reset ();

    if (this->birth_rate_serializer_)
      this->birth_rate_serializer_->_reset ();

    if (this->birth_rate_serializer_map_)
      this->birth_rate_serializer_map_->reset ();

    if (this->death_rate_serializer_)
      this->death_rate_serializer_->_reset ();

    if (this->death_rate_serializer_map_)
      this->death_rate_serializer_map_->reset ();

    if (this->net_birth_rate_serializer_)
      this->net_birth_rate_serializer_->_reset ();

    if (this->net_birth_rate_serializer_map_)
      this->net_birth_rate_serializer_map_->reset ();

    if (this->net_death_rate_serializer_)
      this->net_death_rate_serializer_->_reset ();

    if (this->net_death_rate_serializer_map_)
      this->net_death_rate_serializer_map_->reset ();

    if (this->apoptotic_duration_serializer_)
      this->apoptotic_duration_serializer_->_reset ();

    if (this->apoptotic_duration_serializer_map_)
      this->apoptotic_duration_serializer_map_->reset ();

    if (this->percent_cell_viability_serializer_)
      this->percent_cell_viability_serializer_->_reset ();

    if (this->percent_cell_viability_serializer_map_)
      this->percent_cell_viability_serializer_map_->reset ();

    if (this->custom_serializer_)
      this->custom_serializer_->_reset ();

    if (this->custom_serializer_map_)
      this->custom_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* response_observation_sskel::
  _static_type ()
  {
    return "response_observation pkpd";
  }

  const char* response_observation_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // pharmacodynamics_sskel
  //

  void pharmacodynamics_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->therapy_measurement_set_serializer_)
      this->therapy_measurement_set_serializer_->_reset ();

    if (this->therapy_measurement_set_serializer_map_)
      this->therapy_measurement_set_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* pharmacodynamics_sskel::
  _static_type ()
  {
    return "pharmacodynamics pkpd";
  }

  const char* pharmacodynamics_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // therapy_measurement_set_sskel
  //

  bool therapy_measurement_set_sskel::
  ID_present ()
  {
    return this->therapy_measurement_set_impl_ ? this->therapy_measurement_set_impl_->ID_present () : false;
  }

  bool therapy_measurement_set_sskel::
  any_attribute_next ()
  {
    return this->therapy_measurement_set_impl_ ? this->therapy_measurement_set_impl_->any_attribute_next () : false;
  }

  void therapy_measurement_set_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->therapy_measurement_set_impl_)
      this->therapy_measurement_set_impl_->any_attribute (ns, n);
  }

  void therapy_measurement_set_sskel::
  serialize_any_attribute ()
  {
    if (this->therapy_measurement_set_impl_)
      this->therapy_measurement_set_impl_->serialize_any_attribute ();
  }

  void therapy_measurement_set_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->ID_serializer_)
      this->ID_serializer_->_reset ();

    this->resetting_ = true;

    if (this->therapy_serializer_)
      this->therapy_serializer_->_reset ();

    if (this->therapy_serializer_map_)
      this->therapy_serializer_map_->reset ();

    if (this->response_serializer_)
      this->response_serializer_->_reset ();

    if (this->response_serializer_map_)
      this->response_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* therapy_measurement_set_sskel::
  _static_type ()
  {
    return "therapy_measurement_set pkpd";
  }

  const char* therapy_measurement_set_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // PKPD_sskel
  //

  bool PKPD_sskel::
  drug_next ()
  {
    return this->PKPD_impl_ ? this->PKPD_impl_->drug_next () : false;
  }

  bool PKPD_sskel::
  pharmacodynamics_present ()
  {
    return this->PKPD_impl_ ? this->PKPD_impl_->pharmacodynamics_present () : false;
  }

  void PKPD_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->drug_serializer_)
      this->drug_serializer_->_reset ();

    if (this->drug_serializer_map_)
      this->drug_serializer_map_->reset ();

    if (this->pharmacodynamics_serializer_)
      this->pharmacodynamics_serializer_->_reset ();

    if (this->pharmacodynamics_serializer_map_)
      this->pharmacodynamics_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* PKPD_sskel::
  _static_type ()
  {
    return "PKPD pkpd";
  }

  const char* PKPD_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

namespace pkpd
{
  // Element validation and serialization for pharmacokinetics_sskel.
  //
  void pharmacokinetics_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // inactivation_rate
    //
    if (this->inactivation_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->inactivation_rate ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->inactivation_rate_serializer_ != 0)
        s = this->inactivation_rate_serializer_;
      else if (this->inactivation_rate_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->inactivation_rate_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("inactivation_rate");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // half_life
    //
    if (this->half_life_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->half_life ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->half_life_serializer_ != 0)
        s = this->half_life_serializer_;
      else if (this->half_life_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->half_life_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("half_life");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for drug_sskel.
  //
  void drug_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    switch (this->choice_arm ())
    {
      case dose_tag:
      {
        // dose
        //
        {
          ctx.type_id (0);
          const ::pkpd::dose& r = this->dose ();

          const void* t = ctx.type_id ();
          const char* dt = 0;
          ::pkpd::dose_sskel* s = 0;

          if (t == 0 && this->dose_serializer_ != 0)
            s = this->dose_serializer_;
          else if (this->dose_serializer_map_ != 0)
          {
            ::xml_schema::serializer_base* b = this->dose_serializer_map_->find (t);

            if (b != 0)
            {
              dt = b->_dynamic_type ();
              const char* st = ::pkpd::dose_sskel::_static_type ();

              if (strcmp (dt, st) == 0)
                dt = 0;

              if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              s = static_cast< ::pkpd::dose_sskel* > (b);
            }
          }

          if (s)
          {
            s->pre (r);
            this->_start_element ("dose");
            if (dt != 0)
              this->_set_type (dt);

            s->_pre_impl (ctx);

            if (ctx.error_type ())
              return;

            s->_serialize_attributes ();

            if (ctx.error_type ())
              return;

            s->_serialize_content ();

            if (ctx.error_type ())
              return;

            s->_post_impl ();

            if (ctx.error_type ())
              return;

            this->_end_element ();
            s->post ();
          }
          else
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return;
          }
        }

        break;
      }
      case pharmacokinetics_tag:
      {
        // pharmacokinetics
        //
        {
          ctx.type_id (0);
          const ::pkpd::pharmacokinetics& r = this->pharmacokinetics ();

          const void* t = ctx.type_id ();
          const char* dt = 0;
          ::pkpd::pharmacokinetics_sskel* s = 0;

          if (t == 0 && this->pharmacokinetics_serializer_ != 0)
            s = this->pharmacokinetics_serializer_;
          else if (this->pharmacokinetics_serializer_map_ != 0)
          {
            ::xml_schema::serializer_base* b = this->pharmacokinetics_serializer_map_->find (t);

            if (b != 0)
            {
              dt = b->_dynamic_type ();
              const char* st = ::pkpd::pharmacokinetics_sskel::_static_type ();

              if (strcmp (dt, st) == 0)
                dt = 0;

              if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              s = static_cast< ::pkpd::pharmacokinetics_sskel* > (b);
            }
          }

          if (s)
          {
            s->pre (r);
            this->_start_element ("pharmacokinetics");
            if (dt != 0)
              this->_set_type (dt);

            s->_pre_impl (ctx);

            if (ctx.error_type ())
              return;

            s->_serialize_attributes ();

            if (ctx.error_type ())
              return;

            s->_serialize_content ();

            if (ctx.error_type ())
              return;

            s->_post_impl ();

            if (ctx.error_type ())
              return;

            this->_end_element ();
            s->post ();
          }
          else
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return;
          }
        }

        break;
      }
      default:
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_element);
        return;
      }
    }
  }

  // Element validation and serialization for drug_dose_sskel.
  //
  void drug_dose_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // dose
    //
    {
      ctx.type_id (0);
      const ::pkpd::dose& r = this->dose ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::pkpd::dose_sskel* s = 0;

      if (t == 0 && this->dose_serializer_ != 0)
        s = this->dose_serializer_;
      else if (this->dose_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->dose_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::pkpd::dose_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::pkpd::dose_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("dose");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }
  }

  // Element validation and serialization for drug_pk_sskel.
  //
  void drug_pk_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // pharmacokinetics
    //
    if (this->pharmacokinetics_present ())
    {
      ctx.type_id (0);
      const ::pkpd::pharmacokinetics& r = this->pharmacokinetics ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::pkpd::pharmacokinetics_sskel* s = 0;

      if (t == 0 && this->pharmacokinetics_serializer_ != 0)
        s = this->pharmacokinetics_serializer_;
      else if (this->pharmacokinetics_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->pharmacokinetics_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::pkpd::pharmacokinetics_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::pkpd::pharmacokinetics_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("pharmacokinetics");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for therapy_sskel.
  //
  void therapy_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // drug
    //
    {
      size_t i = 0;
      for (; this->drug_next (); ++i)
      {
        ctx.type_id (0);
        const ::pkpd::drug_dose& r = this->drug ();

        const void* t = ctx.type_id ();
        const char* dt = 0;
        ::pkpd::drug_dose_sskel* s = 0;

        if (t == 0 && this->drug_serializer_ != 0)
          s = this->drug_serializer_;
        else if (this->drug_serializer_map_ != 0)
        {
          ::xml_schema::serializer_base* b = this->drug_serializer_map_->find (t);

          if (b != 0)
          {
            dt = b->_dynamic_type ();
            const char* st = ::pkpd::drug_dose_sskel::_static_type ();

            if (strcmp (dt, st) == 0)
              dt = 0;

            if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
            {
              ctx.schema_error (::xsde::cxx::schema_error::not_derived);
              return;
            }

            s = static_cast< ::pkpd::drug_dose_sskel* > (b);
          }
        }

        if (s)
        {
          s->pre (r);
          this->_start_element ("drug");
          if (dt != 0)
            this->_set_type (dt);

          s->_pre_impl (ctx);

          if (ctx.error_type ())
            return;

          s->_serialize_attributes ();

          if (ctx.error_type ())
            return;

          s->_serialize_content ();

          if (ctx.error_type ())
            return;

          s->_post_impl ();

          if (ctx.error_type ())
            return;

          this->_end_element ();
          s->post ();
        }
        else
        {
          this->_schema_error (::xsde::cxx::schema_error::expected_element);
          return;
        }
      }

      if (i < 1UL)
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }
  }

  // Element validation and serialization for response_sskel.
  //
  void response_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // maximum_birth_inhibition
    //
    if (this->maximum_birth_inhibition_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->maximum_birth_inhibition ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->maximum_birth_inhibition_serializer_ != 0)
        s = this->maximum_birth_inhibition_serializer_;
      else if (this->maximum_birth_inhibition_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->maximum_birth_inhibition_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("maximum_birth_inhibition");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // maximum_birth_inhibition_time
    //
    if (this->maximum_birth_inhibition_time_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->maximum_birth_inhibition_time ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->maximum_birth_inhibition_time_serializer_ != 0)
        s = this->maximum_birth_inhibition_time_serializer_;
      else if (this->maximum_birth_inhibition_time_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->maximum_birth_inhibition_time_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("maximum_birth_inhibition_time");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // birth_inhibition_recovery_rate
    //
    if (this->birth_inhibition_recovery_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->birth_inhibition_recovery_rate ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->birth_inhibition_recovery_rate_serializer_ != 0)
        s = this->birth_inhibition_recovery_rate_serializer_;
      else if (this->birth_inhibition_recovery_rate_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->birth_inhibition_recovery_rate_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("birth_inhibition_recovery_rate");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // maximum_death_rate
    //
    if (this->maximum_death_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->maximum_death_rate ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->maximum_death_rate_serializer_ != 0)
        s = this->maximum_death_rate_serializer_;
      else if (this->maximum_death_rate_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->maximum_death_rate_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("maximum_death_rate");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // maximum_death_time
    //
    if (this->maximum_death_time_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->maximum_death_time ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->maximum_death_time_serializer_ != 0)
        s = this->maximum_death_time_serializer_;
      else if (this->maximum_death_time_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->maximum_death_time_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("maximum_death_time");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // death_recovery_rate
    //
    if (this->death_recovery_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->death_recovery_rate ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->death_recovery_rate_serializer_ != 0)
        s = this->death_recovery_rate_serializer_;
      else if (this->death_recovery_rate_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->death_recovery_rate_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("death_recovery_rate");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // response_observation
    //
    while (this->response_observation_next ())
    {
      ctx.type_id (0);
      const ::pkpd::response_observation& r = this->response_observation ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::pkpd::response_observation_sskel* s = 0;

      if (t == 0 && this->response_observation_serializer_ != 0)
        s = this->response_observation_serializer_;
      else if (this->response_observation_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->response_observation_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::pkpd::response_observation_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::pkpd::response_observation_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("response_observation");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for response_observation_sskel.
  //
  void response_observation_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // time
    //
    if (this->time_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->time ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->time_serializer_ != 0)
        s = this->time_serializer_;
      else if (this->time_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->time_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("time");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // birth_rate
    //
    if (this->birth_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->birth_rate ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->birth_rate_serializer_ != 0)
        s = this->birth_rate_serializer_;
      else if (this->birth_rate_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->birth_rate_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_nonnegative_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_nonnegative_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("birth_rate");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // death_rate
    //
    if (this->death_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal_nonnegative& r = this->death_rate ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_nonnegative_sskel* s = 0;

      if (t == 0 && this->death_rate_serializer_ != 0)
        s = this->death_rate_serializer_;
      else if (this->death_rate_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->death_rate_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_nonnegative_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_nonnegative_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("death_rate");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // net_birth_rate
    //
    if (this->net_birth_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->net_birth_rate ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->net_birth_rate_serializer_ != 0)
        s = this->net_birth_rate_serializer_;
      else if (this->net_birth_rate_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->net_birth_rate_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("net_birth_rate");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // net_death_rate
    //
    if (this->net_death_rate_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->net_death_rate ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->net_death_rate_serializer_ != 0)
        s = this->net_death_rate_serializer_;
      else if (this->net_death_rate_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->net_death_rate_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("net_death_rate");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // apoptotic_duration
    //
    if (this->apoptotic_duration_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->apoptotic_duration ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->apoptotic_duration_serializer_ != 0)
        s = this->apoptotic_duration_serializer_;
      else if (this->apoptotic_duration_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->apoptotic_duration_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("apoptotic_duration");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // percent_cell_viability
    //
    if (this->percent_cell_viability_present ())
    {
      ctx.type_id (0);
      const ::common::units_decimal& r = this->percent_cell_viability ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::units_decimal_sskel* s = 0;

      if (t == 0 && this->percent_cell_viability_serializer_ != 0)
        s = this->percent_cell_viability_serializer_;
      else if (this->percent_cell_viability_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->percent_cell_viability_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::units_decimal_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::units_decimal_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("percent_cell_viability");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // custom
    //
    if (this->custom_present ())
    {
      ctx.type_id (0);
      const ::common::custom& r = this->custom ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::common::custom_sskel* s = 0;

      if (t == 0 && this->custom_serializer_ != 0)
        s = this->custom_serializer_;
      else if (this->custom_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->custom_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::common::custom_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::common::custom_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("custom");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }

  // Element validation and serialization for pharmacodynamics_sskel.
  //
  void pharmacodynamics_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // therapy_measurement_set
    //
    {
      size_t i = 0;
      for (; this->therapy_measurement_set_next (); ++i)
      {
        ctx.type_id (0);
        const ::pkpd::therapy_measurement_set& r = this->therapy_measurement_set ();

        const void* t = ctx.type_id ();
        const char* dt = 0;
        ::pkpd::therapy_measurement_set_sskel* s = 0;

        if (t == 0 && this->therapy_measurement_set_serializer_ != 0)
          s = this->therapy_measurement_set_serializer_;
        else if (this->therapy_measurement_set_serializer_map_ != 0)
        {
          ::xml_schema::serializer_base* b = this->therapy_measurement_set_serializer_map_->find (t);

          if (b != 0)
          {
            dt = b->_dynamic_type ();
            const char* st = ::pkpd::therapy_measurement_set_sskel::_static_type ();

            if (strcmp (dt, st) == 0)
              dt = 0;

            if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
            {
              ctx.schema_error (::xsde::cxx::schema_error::not_derived);
              return;
            }

            s = static_cast< ::pkpd::therapy_measurement_set_sskel* > (b);
          }
        }

        if (s)
        {
          s->pre (r);
          this->_start_element ("therapy_measurement_set");
          if (dt != 0)
            this->_set_type (dt);

          s->_pre_impl (ctx);

          if (ctx.error_type ())
            return;

          s->_serialize_attributes ();

          if (ctx.error_type ())
            return;

          s->_serialize_content ();

          if (ctx.error_type ())
            return;

          s->_post_impl ();

          if (ctx.error_type ())
            return;

          this->_end_element ();
          s->post ();
        }
        else
        {
          this->_schema_error (::xsde::cxx::schema_error::expected_element);
          return;
        }
      }

      if (i < 1UL)
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }
  }

  // Element validation and serialization for therapy_measurement_set_sskel.
  //
  void therapy_measurement_set_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // therapy
    //
    {
      ctx.type_id (0);
      const ::pkpd::therapy& r = this->therapy ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::pkpd::therapy_sskel* s = 0;

      if (t == 0 && this->therapy_serializer_ != 0)
        s = this->therapy_serializer_;
      else if (this->therapy_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->therapy_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::pkpd::therapy_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::pkpd::therapy_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("therapy");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // response
    //
    {
      ctx.type_id (0);
      const ::pkpd::response& r = this->response ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::pkpd::response_sskel* s = 0;

      if (t == 0 && this->response_serializer_ != 0)
        s = this->response_serializer_;
      else if (this->response_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->response_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::pkpd::response_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::pkpd::response_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("response");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }
  }

  // Element validation and serialization for PKPD_sskel.
  //
  void PKPD_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // drug
    //
    while (this->drug_next ())
    {
      ctx.type_id (0);
      const ::pkpd::drug_pk& r = this->drug ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::pkpd::drug_pk_sskel* s = 0;

      if (t == 0 && this->drug_serializer_ != 0)
        s = this->drug_serializer_;
      else if (this->drug_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->drug_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::pkpd::drug_pk_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::pkpd::drug_pk_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("drug");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    // pharmacodynamics
    //
    if (this->pharmacodynamics_present ())
    {
      ctx.type_id (0);
      const ::pkpd::pharmacodynamics& r = this->pharmacodynamics ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::pkpd::pharmacodynamics_sskel* s = 0;

      if (t == 0 && this->pharmacodynamics_serializer_ != 0)
        s = this->pharmacodynamics_serializer_;
      else if (this->pharmacodynamics_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->pharmacodynamics_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::pkpd::pharmacodynamics_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::pkpd::pharmacodynamics_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("pharmacodynamics");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }
  }
}

namespace pkpd
{
  // Attribute validation and serialization for drug_sskel.
  //
  void drug_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if (!name.empty ())
      {
        if (ns.empty ())
        {
          this->_start_attribute (name.c_str ());
        }
        else
        {
          this->_start_attribute (ns.c_str (), name.c_str ());
        }

        this->serialize_any_attribute ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_attribute);
        return;
      }
    }
  }

  // Attribute validation and serialization for drug_dose_sskel.
  //
  void drug_dose_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned short r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    // ChEBI_ID
    //
    if (this->ChEBI_ID_present ())
    {
      const ::std::string& r = this->ChEBI_ID ();

      if (this->ChEBI_ID_serializer_)
      {
        this->ChEBI_ID_serializer_->pre (r);
        this->_start_attribute ("ChEBI_ID");
        this->ChEBI_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ChEBI_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ChEBI_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ChEBI_ID_serializer_->post ();
      }
    }

    // MeSH_ID
    //
    if (this->MeSH_ID_present ())
    {
      const ::std::string& r = this->MeSH_ID ();

      if (this->MeSH_ID_serializer_)
      {
        this->MeSH_ID_serializer_->pre (r);
        this->_start_attribute ("MeSH_ID");
        this->MeSH_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->MeSH_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->MeSH_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->MeSH_ID_serializer_->post ();
      }
    }

    // DrugBank_ID
    //
    if (this->DrugBank_ID_present ())
    {
      const ::std::string& r = this->DrugBank_ID ();

      if (this->DrugBank_ID_serializer_)
      {
        this->DrugBank_ID_serializer_->pre (r);
        this->_start_attribute ("DrugBank_ID");
        this->DrugBank_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->DrugBank_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->DrugBank_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->DrugBank_ID_serializer_->post ();
      }
    }

    // GMO_ID
    //
    if (this->GMO_ID_present ())
    {
      const ::std::string& r = this->GMO_ID ();

      if (this->GMO_ID_serializer_)
      {
        this->GMO_ID_serializer_->pre (r);
        this->_start_attribute ("GMO_ID");
        this->GMO_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->GMO_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->GMO_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->GMO_ID_serializer_->post ();
      }
    }

    // GO_ID
    //
    if (this->GO_ID_present ())
    {
      const ::std::string& r = this->GO_ID ();

      if (this->GO_ID_serializer_)
      {
        this->GO_ID_serializer_->pre (r);
        this->_start_attribute ("GO_ID");
        this->GO_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->GO_ID_serializer_->post ();
      }
    }

    // UniProt_ID
    //
    if (this->UniProt_ID_present ())
    {
      const ::std::string& r = this->UniProt_ID ();

      if (this->UniProt_ID_serializer_)
      {
        this->UniProt_ID_serializer_->pre (r);
        this->_start_attribute ("UniProt_ID");
        this->UniProt_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->UniProt_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->UniProt_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->UniProt_ID_serializer_->post ();
      }
    }

    // PR_ID
    //
    if (this->PR_ID_present ())
    {
      const ::std::string& r = this->PR_ID ();

      if (this->PR_ID_serializer_)
      {
        this->PR_ID_serializer_->pre (r);
        this->_start_attribute ("PR_ID");
        this->PR_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->PR_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->PR_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->PR_ID_serializer_->post ();
      }
    }

    // name
    //
    if (this->name_present ())
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->name_serializer_->post ();
      }
    }

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for drug_pk_sskel.
  //
  void drug_pk_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned short r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    // ChEBI_ID
    //
    if (this->ChEBI_ID_present ())
    {
      const ::std::string& r = this->ChEBI_ID ();

      if (this->ChEBI_ID_serializer_)
      {
        this->ChEBI_ID_serializer_->pre (r);
        this->_start_attribute ("ChEBI_ID");
        this->ChEBI_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ChEBI_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ChEBI_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ChEBI_ID_serializer_->post ();
      }
    }

    // MeSH_ID
    //
    if (this->MeSH_ID_present ())
    {
      const ::std::string& r = this->MeSH_ID ();

      if (this->MeSH_ID_serializer_)
      {
        this->MeSH_ID_serializer_->pre (r);
        this->_start_attribute ("MeSH_ID");
        this->MeSH_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->MeSH_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->MeSH_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->MeSH_ID_serializer_->post ();
      }
    }

    // DrugBank_ID
    //
    if (this->DrugBank_ID_present ())
    {
      const ::std::string& r = this->DrugBank_ID ();

      if (this->DrugBank_ID_serializer_)
      {
        this->DrugBank_ID_serializer_->pre (r);
        this->_start_attribute ("DrugBank_ID");
        this->DrugBank_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->DrugBank_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->DrugBank_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->DrugBank_ID_serializer_->post ();
      }
    }

    // GMO_ID
    //
    if (this->GMO_ID_present ())
    {
      const ::std::string& r = this->GMO_ID ();

      if (this->GMO_ID_serializer_)
      {
        this->GMO_ID_serializer_->pre (r);
        this->_start_attribute ("GMO_ID");
        this->GMO_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->GMO_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->GMO_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->GMO_ID_serializer_->post ();
      }
    }

    // GO_ID
    //
    if (this->GO_ID_present ())
    {
      const ::std::string& r = this->GO_ID ();

      if (this->GO_ID_serializer_)
      {
        this->GO_ID_serializer_->pre (r);
        this->_start_attribute ("GO_ID");
        this->GO_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->GO_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->GO_ID_serializer_->post ();
      }
    }

    // UniProt_ID
    //
    if (this->UniProt_ID_present ())
    {
      const ::std::string& r = this->UniProt_ID ();

      if (this->UniProt_ID_serializer_)
      {
        this->UniProt_ID_serializer_->pre (r);
        this->_start_attribute ("UniProt_ID");
        this->UniProt_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->UniProt_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->UniProt_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->UniProt_ID_serializer_->post ();
      }
    }

    // PR_ID
    //
    if (this->PR_ID_present ())
    {
      const ::std::string& r = this->PR_ID ();

      if (this->PR_ID_serializer_)
      {
        this->PR_ID_serializer_->pre (r);
        this->_start_attribute ("PR_ID");
        this->PR_ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->PR_ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->PR_ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->PR_ID_serializer_->post ();
      }
    }

    // name
    //
    if (this->name_present ())
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->name_serializer_->post ();
      }
    }

    // units
    //
    if (this->units_present ())
    {
      const ::std::string& r = this->units ();

      if (this->units_serializer_)
      {
        this->units_serializer_->pre (r);
        this->_start_attribute ("units");
        this->units_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->units_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->units_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->units_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for dose_sskel.
  //
  void dose_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::common::units_decimal_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // type
    //
    if (this->type_present ())
    {
      const ::std::string& r = this->type ();

      if (this->type_serializer_)
      {
        this->type_serializer_->pre (r);
        this->_start_attribute ("type");
        this->type_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->type_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->type_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->type_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for therapy_measurement_set_sskel.
  //
  void therapy_measurement_set_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ID
    //
    if (this->ID_present ())
    {
      unsigned short r = this->ID ();

      if (this->ID_serializer_)
      {
        this->ID_serializer_->pre (r);
        this->_start_attribute ("ID");
        this->ID_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ID_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ID_serializer_->post ();
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if (!name.empty ())
      {
        if (ns.empty ())
        {
          this->_start_attribute (name.c_str ());
        }
        else
        {
          this->_start_attribute (ns.c_str (), name.c_str ());
        }

        this->serialize_any_attribute ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_attribute);
        return;
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

