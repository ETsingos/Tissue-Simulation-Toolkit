// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace mesh
{
  // bounding_box_pskel
  //

  inline
  void bounding_box_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void bounding_box_pskel::
  parsers (::xml_schema::double_pskel& double_list_pskel_item,
           ::xml_schema::string_pskel& units,
           ::xml_schema::string_pskel& measurement_type,
           ::xml_schema::double_pskel& uncertainty,
           ::xml_schema::double_pskel& negative_uncertainty,
           ::xml_schema::double_pskel& positive_uncertainty,
           ::xml_schema::double_pskel& uncertainty_percentage,
           ::xml_schema::double_pskel& negative_uncertainty_percentage,
           ::xml_schema::double_pskel& positive_uncertainty_percentage,
           ::xml_schema::double_pskel& median,
           ::xml_schema::double_pskel& standard_deviation,
           ::common::two_doubles_pskel& interquartile_range,
           ::common::two_doubles_pskel& range,
           ::xml_schema::double_pskel& min,
           ::xml_schema::double_pskel& max,
           ::xml_schema::double_pskel& standard_error,
           ::xml_schema::double_pskel& standard_error_of_the_mean,
           ::xml_schema::int_pskel& number_obs,
           ::xml_schema::double_pskel& skewnesss,
           ::xml_schema::double_pskel& kurtosis,
           ::xml_schema::string_pskel& type)
  {
    this->_xsde_item_ = &double_list_pskel_item;
    this->units_parser_ = &units;
    this->measurement_type_parser_ = &measurement_type;
    this->uncertainty_parser_ = &uncertainty;
    this->negative_uncertainty_parser_ = &negative_uncertainty;
    this->positive_uncertainty_parser_ = &positive_uncertainty;
    this->uncertainty_percentage_parser_ = &uncertainty_percentage;
    this->negative_uncertainty_percentage_parser_ = &negative_uncertainty_percentage;
    this->positive_uncertainty_percentage_parser_ = &positive_uncertainty_percentage;
    this->median_parser_ = &median;
    this->standard_deviation_parser_ = &standard_deviation;
    this->interquartile_range_parser_ = &interquartile_range;
    this->range_parser_ = &range;
    this->min_parser_ = &min;
    this->max_parser_ = &max;
    this->standard_error_parser_ = &standard_error;
    this->standard_error_of_the_mean_parser_ = &standard_error_of_the_mean;
    this->number_obs_parser_ = &number_obs;
    this->skewnesss_parser_ = &skewnesss;
    this->kurtosis_parser_ = &kurtosis;
    this->type_parser_ = &type;
  }

  inline
  bounding_box_pskel::
  bounding_box_pskel (::common::units_double_list_pskel* tiein)
  : ::common::units_double_list_pskel (tiein, 0),
    bounding_box_impl_ (0),
    type_parser_ (0)
  {
  }

  inline
  bounding_box_pskel::
  bounding_box_pskel (bounding_box_pskel* impl, void*)
  : ::common::units_double_list_pskel (impl, 0),
    bounding_box_impl_ (impl),
    type_parser_ (0)
  {
  }

  // mesh_pskel
  //

  inline
  void mesh_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void mesh_pskel::
  uniform_parser (::xml_schema::boolean_pskel& p)
  {
    this->uniform_parser_ = &p;
  }

  inline
  void mesh_pskel::
  regular_parser (::xml_schema::boolean_pskel& p)
  {
    this->regular_parser_ = &p;
  }

  inline
  void mesh_pskel::
  units_parser (::xml_schema::string_pskel& p)
  {
    this->units_parser_ = &p;
  }

  inline
  void mesh_pskel::
  bounding_box_parser (::mesh::bounding_box_pskel& p)
  {
    this->bounding_box_parser_ = &p;
  }

  inline
  void mesh_pskel::
  bounding_box_parser (::xml_schema::parser_map& m)
  {
    this->bounding_box_parser_map_ = &m;
  }

  inline
  void mesh_pskel::
  x_coordinates_parser (::common::units_double_list_pskel& p)
  {
    this->x_coordinates_parser_ = &p;
  }

  inline
  void mesh_pskel::
  x_coordinates_parser (::xml_schema::parser_map& m)
  {
    this->x_coordinates_parser_map_ = &m;
  }

  inline
  void mesh_pskel::
  y_coordinates_parser (::common::units_double_list_pskel& p)
  {
    this->y_coordinates_parser_ = &p;
  }

  inline
  void mesh_pskel::
  y_coordinates_parser (::xml_schema::parser_map& m)
  {
    this->y_coordinates_parser_map_ = &m;
  }

  inline
  void mesh_pskel::
  z_coordinates_parser (::common::units_double_list_pskel& p)
  {
    this->z_coordinates_parser_ = &p;
  }

  inline
  void mesh_pskel::
  z_coordinates_parser (::xml_schema::parser_map& m)
  {
    this->z_coordinates_parser_map_ = &m;
  }

  inline
  void mesh_pskel::
  voxels_parser (::mesh::list_of_voxels_pskel& p)
  {
    this->voxels_parser_ = &p;
  }

  inline
  void mesh_pskel::
  voxels_parser (::xml_schema::parser_map& m)
  {
    this->voxels_parser_map_ = &m;
  }

  inline
  void mesh_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void mesh_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void mesh_pskel::
  parsers (::xml_schema::string_pskel& type,
           ::xml_schema::boolean_pskel& uniform,
           ::xml_schema::boolean_pskel& regular,
           ::xml_schema::string_pskel& units,
           ::mesh::bounding_box_pskel& bounding_box,
           ::common::units_double_list_pskel& x_coordinates,
           ::common::units_double_list_pskel& y_coordinates,
           ::common::units_double_list_pskel& z_coordinates,
           ::mesh::list_of_voxels_pskel& voxels,
           ::common::custom_pskel& custom)
  {
    this->type_parser_ = &type;
    this->uniform_parser_ = &uniform;
    this->regular_parser_ = &regular;
    this->units_parser_ = &units;
    this->bounding_box_parser_ = &bounding_box;
    this->x_coordinates_parser_ = &x_coordinates;
    this->y_coordinates_parser_ = &y_coordinates;
    this->z_coordinates_parser_ = &z_coordinates;
    this->voxels_parser_ = &voxels;
    this->custom_parser_ = &custom;
  }

  inline
  void mesh_pskel::
  parser_maps (::xml_schema::parser_map& bounding_box,
               ::xml_schema::parser_map& x_coordinates,
               ::xml_schema::parser_map& y_coordinates,
               ::xml_schema::parser_map& z_coordinates,
               ::xml_schema::parser_map& voxels,
               ::xml_schema::parser_map& custom)
  {
    this->bounding_box_parser_map_ = &bounding_box;
    this->x_coordinates_parser_map_ = &x_coordinates;
    this->y_coordinates_parser_map_ = &y_coordinates;
    this->z_coordinates_parser_map_ = &z_coordinates;
    this->voxels_parser_map_ = &voxels;
    this->custom_parser_map_ = &custom;
  }

  inline
  mesh_pskel::
  mesh_pskel ()
  : mesh_impl_ (0),
    type_parser_ (0),
    uniform_parser_ (0),
    regular_parser_ (0),
    units_parser_ (0),
    bounding_box_parser_ (0),
    bounding_box_parser_map_ (0),
    x_coordinates_parser_ (0),
    x_coordinates_parser_map_ (0),
    y_coordinates_parser_ (0),
    y_coordinates_parser_map_ (0),
    z_coordinates_parser_ (0),
    z_coordinates_parser_map_ (0),
    voxels_parser_ (0),
    voxels_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_)
  {
  }

  inline
  mesh_pskel::
  mesh_pskel (mesh_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    mesh_impl_ (impl),
    type_parser_ (0),
    uniform_parser_ (0),
    regular_parser_ (0),
    units_parser_ (0),
    bounding_box_parser_ (0),
    bounding_box_parser_map_ (0),
    x_coordinates_parser_ (0),
    x_coordinates_parser_map_ (0),
    y_coordinates_parser_ (0),
    y_coordinates_parser_map_ (0),
    z_coordinates_parser_ (0),
    z_coordinates_parser_map_ (0),
    voxels_parser_ (0),
    voxels_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_)
  {
  }

  // list_of_voxels_pskel
  //

  inline
  void list_of_voxels_pskel::
  type_parser (::common::data_storage_formats_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void list_of_voxels_pskel::
  filename_parser (::xml_schema::string_pskel& p)
  {
    this->filename_parser_ = &p;
  }

  inline
  void list_of_voxels_pskel::
  filename_parser (::xml_schema::parser_map& m)
  {
    this->filename_parser_map_ = &m;
  }

  inline
  void list_of_voxels_pskel::
  voxel_parser (::mesh::voxel_pskel& p)
  {
    this->voxel_parser_ = &p;
  }

  inline
  void list_of_voxels_pskel::
  voxel_parser (::xml_schema::parser_map& m)
  {
    this->voxel_parser_map_ = &m;
  }

  inline
  void list_of_voxels_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void list_of_voxels_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void list_of_voxels_pskel::
  parsers (::common::data_storage_formats_pskel& type,
           ::xml_schema::string_pskel& filename,
           ::mesh::voxel_pskel& voxel,
           ::common::custom_pskel& custom)
  {
    this->type_parser_ = &type;
    this->filename_parser_ = &filename;
    this->voxel_parser_ = &voxel;
    this->custom_parser_ = &custom;
  }

  inline
  void list_of_voxels_pskel::
  parser_maps (::xml_schema::parser_map& filename,
               ::xml_schema::parser_map& voxel,
               ::xml_schema::parser_map& custom)
  {
    this->filename_parser_map_ = &filename;
    this->voxel_parser_map_ = &voxel;
    this->custom_parser_map_ = &custom;
  }

  inline
  list_of_voxels_pskel::
  list_of_voxels_pskel ()
  : list_of_voxels_impl_ (0),
    type_parser_ (0),
    filename_parser_ (0),
    filename_parser_map_ (0),
    voxel_parser_ (0),
    voxel_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  list_of_voxels_pskel::
  list_of_voxels_pskel (list_of_voxels_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    list_of_voxels_impl_ (impl),
    type_parser_ (0),
    filename_parser_ (0),
    filename_parser_map_ (0),
    voxel_parser_ (0),
    voxel_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // voxel_pskel
  //

  inline
  void voxel_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void voxel_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  inline
  void voxel_pskel::
  center_parser (::common::units_double_list_pskel& p)
  {
    this->center_parser_ = &p;
  }

  inline
  void voxel_pskel::
  center_parser (::xml_schema::parser_map& m)
  {
    this->center_parser_map_ = &m;
  }

  inline
  void voxel_pskel::
  volume_parser (::common::units_decimal_nonnegative_pskel& p)
  {
    this->volume_parser_ = &p;
  }

  inline
  void voxel_pskel::
  volume_parser (::xml_schema::parser_map& m)
  {
    this->volume_parser_map_ = &m;
  }

  inline
  void voxel_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void voxel_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void voxel_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::xml_schema::string_pskel& type,
           ::common::units_double_list_pskel& center,
           ::common::units_decimal_nonnegative_pskel& volume,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->type_parser_ = &type;
    this->center_parser_ = &center;
    this->volume_parser_ = &volume;
    this->custom_parser_ = &custom;
  }

  inline
  void voxel_pskel::
  parser_maps (::xml_schema::parser_map& center,
               ::xml_schema::parser_map& volume,
               ::xml_schema::parser_map& custom)
  {
    this->center_parser_map_ = &center;
    this->volume_parser_map_ = &volume;
    this->custom_parser_map_ = &custom;
  }

  inline
  voxel_pskel::
  voxel_pskel ()
  : voxel_impl_ (0),
    ID_parser_ (0),
    type_parser_ (0),
    center_parser_ (0),
    center_parser_map_ (0),
    volume_parser_ (0),
    volume_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (3UL, v_all_first_)
  {
  }

  inline
  voxel_pskel::
  voxel_pskel (voxel_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    voxel_impl_ (impl),
    ID_parser_ (0),
    type_parser_ (0),
    center_parser_ (0),
    center_parser_map_ (0),
    volume_parser_ (0),
    volume_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (3UL, v_all_first_)
  {
  }

  // node_pskel
  //

  inline
  void node_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void node_pskel::
  position_parser (::common::units_double_list_pskel& p)
  {
    this->position_parser_ = &p;
  }

  inline
  void node_pskel::
  position_parser (::xml_schema::parser_map& m)
  {
    this->position_parser_map_ = &m;
  }

  inline
  void node_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void node_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void node_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::common::units_double_list_pskel& position,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->position_parser_ = &position;
    this->custom_parser_ = &custom;
  }

  inline
  void node_pskel::
  parser_maps (::xml_schema::parser_map& position,
               ::xml_schema::parser_map& custom)
  {
    this->position_parser_map_ = &position;
    this->custom_parser_map_ = &custom;
  }

  inline
  node_pskel::
  node_pskel ()
  : node_impl_ (0),
    ID_parser_ (0),
    position_parser_ (0),
    position_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  node_pskel::
  node_pskel (node_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    node_impl_ (impl),
    ID_parser_ (0),
    position_parser_ (0),
    position_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // edge_pskel
  //

  inline
  void edge_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void edge_pskel::
  node_ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->node_ID_parser_ = &p;
  }

  inline
  void edge_pskel::
  node_ID_parser (::xml_schema::parser_map& m)
  {
    this->node_ID_parser_map_ = &m;
  }

  inline
  void edge_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::xml_schema::unsigned_int_pskel& node_ID)
  {
    this->ID_parser_ = &ID;
    this->node_ID_parser_ = &node_ID;
  }

  inline
  void edge_pskel::
  parser_maps (::xml_schema::parser_map& node_ID)
  {
    this->node_ID_parser_map_ = &node_ID;
  }

  inline
  edge_pskel::
  edge_pskel ()
  : edge_impl_ (0),
    ID_parser_ (0),
    node_ID_parser_ (0),
    node_ID_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  edge_pskel::
  edge_pskel (edge_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    edge_impl_ (impl),
    ID_parser_ (0),
    node_ID_parser_ (0),
    node_ID_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // face_pskel
  //

  inline
  void face_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void face_pskel::
  edge_ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->edge_ID_parser_ = &p;
  }

  inline
  void face_pskel::
  edge_ID_parser (::xml_schema::parser_map& m)
  {
    this->edge_ID_parser_map_ = &m;
  }

  inline
  void face_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::xml_schema::unsigned_int_pskel& edge_ID)
  {
    this->ID_parser_ = &ID;
    this->edge_ID_parser_ = &edge_ID;
  }

  inline
  void face_pskel::
  parser_maps (::xml_schema::parser_map& edge_ID)
  {
    this->edge_ID_parser_map_ = &edge_ID;
  }

  inline
  face_pskel::
  face_pskel ()
  : face_impl_ (0),
    ID_parser_ (0),
    edge_ID_parser_ (0),
    edge_ID_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  face_pskel::
  face_pskel (face_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    face_impl_ (impl),
    ID_parser_ (0),
    edge_ID_parser_ (0),
    edge_ID_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // int_list_xpath_pskel
  //

  inline
  void int_list_xpath_pskel::
  xpath_parser (::xml_schema::string_pskel& p)
  {
    this->xpath_parser_ = &p;
  }

  inline
  void int_list_xpath_pskel::
  grouping_number_parser (::xml_schema::unsigned_short_pskel& p)
  {
    this->grouping_number_parser_ = &p;
  }

  inline
  void int_list_xpath_pskel::
  parsers (::xml_schema::unsigned_int_pskel& unsigned_int_list_pskel_item,
           ::xml_schema::string_pskel& xpath,
           ::xml_schema::unsigned_short_pskel& grouping_number)
  {
    this->_xsde_item_ = &unsigned_int_list_pskel_item;
    this->xpath_parser_ = &xpath;
    this->grouping_number_parser_ = &grouping_number;
  }

  inline
  int_list_xpath_pskel::
  int_list_xpath_pskel (::common::unsigned_int_list_pskel* tiein)
  : ::common::unsigned_int_list_pskel (tiein, 0),
    int_list_xpath_impl_ (0),
    xpath_parser_ (0),
    grouping_number_parser_ (0)
  {
  }

  inline
  int_list_xpath_pskel::
  int_list_xpath_pskel (int_list_xpath_pskel* impl, void*)
  : ::common::unsigned_int_list_pskel (impl, 0),
    int_list_xpath_impl_ (impl),
    xpath_parser_ (0),
    grouping_number_parser_ (0)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

