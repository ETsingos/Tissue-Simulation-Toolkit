// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "pkpd-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace pkpd
{
  // pharmacokinetics_pimpl
  //

  pharmacokinetics_pimpl::
  pharmacokinetics_pimpl (bool b)
  {
    this->pharmacokinetics_pimpl_base_ = b;
    this->pharmacokinetics_pimpl_state_.pharmacokinetics_ = 0;
  }

  pharmacokinetics_pimpl::
  ~pharmacokinetics_pimpl ()
  {
    if (!this->pharmacokinetics_pimpl_base_ && this->pharmacokinetics_pimpl_state_.pharmacokinetics_)
      delete this->pharmacokinetics_pimpl_state_.pharmacokinetics_;
  }

  void pharmacokinetics_pimpl::
  _reset ()
  {
    pharmacokinetics_pskel::_reset ();

    if (!this->pharmacokinetics_pimpl_base_ && this->pharmacokinetics_pimpl_state_.pharmacokinetics_)
    {
      delete this->pharmacokinetics_pimpl_state_.pharmacokinetics_;
      this->pharmacokinetics_pimpl_state_.pharmacokinetics_ = 0;
    }
  }

  void pharmacokinetics_pimpl::
  pre_impl (::pkpd::pharmacokinetics* x)
  {
    this->pharmacokinetics_pimpl_state_.pharmacokinetics_ = x;
  }

  void pharmacokinetics_pimpl::
  pre ()
  {
    ::pkpd::pharmacokinetics* x = new ::pkpd::pharmacokinetics;
    this->pre_impl (x);
  }

  void pharmacokinetics_pimpl::
  inactivation_rate (::common::units_decimal* x)
  {
    this->pharmacokinetics_pimpl_state_.pharmacokinetics_->inactivation_rate (x);
  }

  void pharmacokinetics_pimpl::
  half_life (::common::units_decimal* x)
  {
    this->pharmacokinetics_pimpl_state_.pharmacokinetics_->half_life (x);
  }

  ::pkpd::pharmacokinetics* pharmacokinetics_pimpl::
  post_pharmacokinetics ()
  {
    ::pkpd::pharmacokinetics* r = this->pharmacokinetics_pimpl_state_.pharmacokinetics_;
    this->pharmacokinetics_pimpl_state_.pharmacokinetics_ = 0;
    return r;
  }

  // drug_pimpl
  //

  drug_pimpl::
  drug_pimpl (bool b)
  {
    this->drug_pimpl_base_ = b;
    this->drug_pimpl_state_.drug_ = 0;
  }

  drug_pimpl::
  ~drug_pimpl ()
  {
    if (!this->drug_pimpl_base_ && this->drug_pimpl_state_.drug_)
      delete this->drug_pimpl_state_.drug_;
  }

  void drug_pimpl::
  _reset ()
  {
    drug_pskel::_reset ();

    if (!this->drug_pimpl_base_ && this->drug_pimpl_state_.drug_)
    {
      delete this->drug_pimpl_state_.drug_;
      this->drug_pimpl_state_.drug_ = 0;
    }
  }

  void drug_pimpl::
  pre_impl (::pkpd::drug* x)
  {
    this->drug_pimpl_state_.drug_ = x;
  }

  void drug_pimpl::
  pre ()
  {
    ::pkpd::drug* x = new ::pkpd::drug;
    this->pre_impl (x);
  }

  void drug_pimpl::
  choice_arm (choice_arm_tag t)
  {
    this->drug_pimpl_state_.drug_->choice_arm (
      static_cast< ::pkpd::drug::choice_arm_tag > (t));
  }

  void drug_pimpl::
  dose (::pkpd::dose* x)
  {
    this->drug_pimpl_state_.drug_->dose (x);
  }

  void drug_pimpl::
  pharmacokinetics (::pkpd::pharmacokinetics* x)
  {
    this->drug_pimpl_state_.drug_->pharmacokinetics (x);
  }

  ::pkpd::drug* drug_pimpl::
  post_drug ()
  {
    ::pkpd::drug* r = this->drug_pimpl_state_.drug_;
    this->drug_pimpl_state_.drug_ = 0;
    return r;
  }

  // drug_dose_pimpl
  //

  drug_dose_pimpl::
  drug_dose_pimpl (bool b)
  {
    this->drug_dose_pimpl_base_ = b;
    this->drug_dose_pimpl_state_.drug_dose_ = 0;
  }

  drug_dose_pimpl::
  ~drug_dose_pimpl ()
  {
    if (!this->drug_dose_pimpl_base_ && this->drug_dose_pimpl_state_.drug_dose_)
      delete this->drug_dose_pimpl_state_.drug_dose_;
  }

  void drug_dose_pimpl::
  _reset ()
  {
    drug_dose_pskel::_reset ();

    if (!this->drug_dose_pimpl_base_ && this->drug_dose_pimpl_state_.drug_dose_)
    {
      delete this->drug_dose_pimpl_state_.drug_dose_;
      this->drug_dose_pimpl_state_.drug_dose_ = 0;
    }
  }

  void drug_dose_pimpl::
  pre_impl (::pkpd::drug_dose* x)
  {
    this->drug_dose_pimpl_state_.drug_dose_ = x;
  }

  void drug_dose_pimpl::
  pre ()
  {
    ::pkpd::drug_dose* x = new ::pkpd::drug_dose;
    this->pre_impl (x);
  }

  void drug_dose_pimpl::
  ID (unsigned short x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->ID (x);
  }

  void drug_dose_pimpl::
  ChEBI_ID (const ::std::string& x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->ChEBI_ID (x);
  }

  void drug_dose_pimpl::
  MeSH_ID (const ::std::string& x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->MeSH_ID (x);
  }

  void drug_dose_pimpl::
  DrugBank_ID (const ::std::string& x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->DrugBank_ID (x);
  }

  void drug_dose_pimpl::
  GMO_ID (const ::std::string& x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->GMO_ID (x);
  }

  void drug_dose_pimpl::
  GO_ID (const ::std::string& x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->GO_ID (x);
  }

  void drug_dose_pimpl::
  UniProt_ID (const ::std::string& x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->UniProt_ID (x);
  }

  void drug_dose_pimpl::
  PR_ID (const ::std::string& x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->PR_ID (x);
  }

  void drug_dose_pimpl::
  name (const ::std::string& x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->name (x);
  }

  void drug_dose_pimpl::
  units (const ::std::string& x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->units (x);
  }

  void drug_dose_pimpl::
  dose (::pkpd::dose* x)
  {
    this->drug_dose_pimpl_state_.drug_dose_->dose (x);
  }

  ::pkpd::drug_dose* drug_dose_pimpl::
  post_drug_dose ()
  {
    ::pkpd::drug_dose* r = this->drug_dose_pimpl_state_.drug_dose_;
    this->drug_dose_pimpl_state_.drug_dose_ = 0;
    return r;
  }

  // drug_pk_pimpl
  //

  drug_pk_pimpl::
  drug_pk_pimpl (bool b)
  {
    this->drug_pk_pimpl_base_ = b;
    this->drug_pk_pimpl_state_.drug_pk_ = 0;
  }

  drug_pk_pimpl::
  ~drug_pk_pimpl ()
  {
    if (!this->drug_pk_pimpl_base_ && this->drug_pk_pimpl_state_.drug_pk_)
      delete this->drug_pk_pimpl_state_.drug_pk_;
  }

  void drug_pk_pimpl::
  _reset ()
  {
    drug_pk_pskel::_reset ();

    if (!this->drug_pk_pimpl_base_ && this->drug_pk_pimpl_state_.drug_pk_)
    {
      delete this->drug_pk_pimpl_state_.drug_pk_;
      this->drug_pk_pimpl_state_.drug_pk_ = 0;
    }
  }

  void drug_pk_pimpl::
  pre_impl (::pkpd::drug_pk* x)
  {
    this->drug_pk_pimpl_state_.drug_pk_ = x;
  }

  void drug_pk_pimpl::
  pre ()
  {
    ::pkpd::drug_pk* x = new ::pkpd::drug_pk;
    this->pre_impl (x);
  }

  void drug_pk_pimpl::
  ID (unsigned short x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->ID (x);
  }

  void drug_pk_pimpl::
  ChEBI_ID (const ::std::string& x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->ChEBI_ID (x);
  }

  void drug_pk_pimpl::
  MeSH_ID (const ::std::string& x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->MeSH_ID (x);
  }

  void drug_pk_pimpl::
  DrugBank_ID (const ::std::string& x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->DrugBank_ID (x);
  }

  void drug_pk_pimpl::
  GMO_ID (const ::std::string& x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->GMO_ID (x);
  }

  void drug_pk_pimpl::
  GO_ID (const ::std::string& x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->GO_ID (x);
  }

  void drug_pk_pimpl::
  UniProt_ID (const ::std::string& x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->UniProt_ID (x);
  }

  void drug_pk_pimpl::
  PR_ID (const ::std::string& x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->PR_ID (x);
  }

  void drug_pk_pimpl::
  name (const ::std::string& x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->name (x);
  }

  void drug_pk_pimpl::
  units (const ::std::string& x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->units (x);
  }

  void drug_pk_pimpl::
  pharmacokinetics (::pkpd::pharmacokinetics* x)
  {
    this->drug_pk_pimpl_state_.drug_pk_->pharmacokinetics (x);
  }

  ::pkpd::drug_pk* drug_pk_pimpl::
  post_drug_pk ()
  {
    ::pkpd::drug_pk* r = this->drug_pk_pimpl_state_.drug_pk_;
    this->drug_pk_pimpl_state_.drug_pk_ = 0;
    return r;
  }

  // dose_pimpl
  //

  dose_pimpl::
  dose_pimpl (bool b)
  : dose_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->dose_pimpl_base_ = b;
    this->dose_pimpl_state_.dose_ = 0;
  }

  dose_pimpl::
  ~dose_pimpl ()
  {
    if (!this->dose_pimpl_base_ && this->dose_pimpl_state_.dose_)
      delete this->dose_pimpl_state_.dose_;
  }

  void dose_pimpl::
  _reset ()
  {
    dose_pskel::_reset ();

    if (!this->dose_pimpl_base_ && this->dose_pimpl_state_.dose_)
    {
      delete this->dose_pimpl_state_.dose_;
      this->dose_pimpl_state_.dose_ = 0;
    }
  }

  void dose_pimpl::
  pre_impl (::pkpd::dose* x)
  {
    this->dose_pimpl_state_.dose_ = x;
    this->base_impl_.pre_impl (x);
  }

  void dose_pimpl::
  pre ()
  {
    ::pkpd::dose* x = new ::pkpd::dose;
    this->pre_impl (x);
  }

  void dose_pimpl::
  type (const ::std::string& x)
  {
    this->dose_pimpl_state_.dose_->type (x);
  }

  ::pkpd::dose* dose_pimpl::
  post_dose ()
  {
    this->base_impl_.post_units_decimal ();
    ::pkpd::dose* r = this->dose_pimpl_state_.dose_;
    this->dose_pimpl_state_.dose_ = 0;
    return r;
  }

  // therapy_pimpl
  //

  therapy_pimpl::
  therapy_pimpl (bool b)
  {
    this->therapy_pimpl_base_ = b;
    this->therapy_pimpl_state_.therapy_ = 0;
  }

  therapy_pimpl::
  ~therapy_pimpl ()
  {
    if (!this->therapy_pimpl_base_ && this->therapy_pimpl_state_.therapy_)
      delete this->therapy_pimpl_state_.therapy_;
  }

  void therapy_pimpl::
  _reset ()
  {
    therapy_pskel::_reset ();

    if (!this->therapy_pimpl_base_ && this->therapy_pimpl_state_.therapy_)
    {
      delete this->therapy_pimpl_state_.therapy_;
      this->therapy_pimpl_state_.therapy_ = 0;
    }
  }

  void therapy_pimpl::
  pre_impl (::pkpd::therapy* x)
  {
    this->therapy_pimpl_state_.therapy_ = x;
  }

  void therapy_pimpl::
  pre ()
  {
    ::pkpd::therapy* x = new ::pkpd::therapy;
    this->pre_impl (x);
  }

  void therapy_pimpl::
  drug (::pkpd::drug_dose* x)
  {
    this->therapy_pimpl_state_.therapy_->drug ().push_back (x);
  }

  ::pkpd::therapy* therapy_pimpl::
  post_therapy ()
  {
    ::pkpd::therapy* r = this->therapy_pimpl_state_.therapy_;
    this->therapy_pimpl_state_.therapy_ = 0;
    return r;
  }

  // response_pimpl
  //

  response_pimpl::
  response_pimpl (bool b)
  {
    this->response_pimpl_base_ = b;
    this->response_pimpl_state_.response_ = 0;
  }

  response_pimpl::
  ~response_pimpl ()
  {
    if (!this->response_pimpl_base_ && this->response_pimpl_state_.response_)
      delete this->response_pimpl_state_.response_;
  }

  void response_pimpl::
  _reset ()
  {
    response_pskel::_reset ();

    if (!this->response_pimpl_base_ && this->response_pimpl_state_.response_)
    {
      delete this->response_pimpl_state_.response_;
      this->response_pimpl_state_.response_ = 0;
    }
  }

  void response_pimpl::
  pre_impl (::pkpd::response* x)
  {
    this->response_pimpl_state_.response_ = x;
  }

  void response_pimpl::
  pre ()
  {
    ::pkpd::response* x = new ::pkpd::response;
    this->pre_impl (x);
  }

  void response_pimpl::
  maximum_birth_inhibition (::common::units_decimal* x)
  {
    this->response_pimpl_state_.response_->maximum_birth_inhibition (x);
  }

  void response_pimpl::
  maximum_birth_inhibition_time (::common::units_decimal* x)
  {
    this->response_pimpl_state_.response_->maximum_birth_inhibition_time (x);
  }

  void response_pimpl::
  birth_inhibition_recovery_rate (::common::units_decimal* x)
  {
    this->response_pimpl_state_.response_->birth_inhibition_recovery_rate (x);
  }

  void response_pimpl::
  maximum_death_rate (::common::units_decimal* x)
  {
    this->response_pimpl_state_.response_->maximum_death_rate (x);
  }

  void response_pimpl::
  maximum_death_time (::common::units_decimal* x)
  {
    this->response_pimpl_state_.response_->maximum_death_time (x);
  }

  void response_pimpl::
  death_recovery_rate (::common::units_decimal* x)
  {
    this->response_pimpl_state_.response_->death_recovery_rate (x);
  }

  void response_pimpl::
  response_observation (::pkpd::response_observation* x)
  {
    this->response_pimpl_state_.response_->response_observation ().push_back (x);
  }

  void response_pimpl::
  custom (::common::custom* x)
  {
    this->response_pimpl_state_.response_->custom (x);
  }

  ::pkpd::response* response_pimpl::
  post_response ()
  {
    ::pkpd::response* r = this->response_pimpl_state_.response_;
    this->response_pimpl_state_.response_ = 0;
    return r;
  }

  // response_observation_pimpl
  //

  response_observation_pimpl::
  response_observation_pimpl (bool b)
  {
    this->response_observation_pimpl_base_ = b;
    this->response_observation_pimpl_state_.response_observation_ = 0;
  }

  response_observation_pimpl::
  ~response_observation_pimpl ()
  {
    if (!this->response_observation_pimpl_base_ && this->response_observation_pimpl_state_.response_observation_)
      delete this->response_observation_pimpl_state_.response_observation_;
  }

  void response_observation_pimpl::
  _reset ()
  {
    response_observation_pskel::_reset ();

    if (!this->response_observation_pimpl_base_ && this->response_observation_pimpl_state_.response_observation_)
    {
      delete this->response_observation_pimpl_state_.response_observation_;
      this->response_observation_pimpl_state_.response_observation_ = 0;
    }
  }

  void response_observation_pimpl::
  pre_impl (::pkpd::response_observation* x)
  {
    this->response_observation_pimpl_state_.response_observation_ = x;
  }

  void response_observation_pimpl::
  pre ()
  {
    ::pkpd::response_observation* x = new ::pkpd::response_observation;
    this->pre_impl (x);
  }

  void response_observation_pimpl::
  time (::common::units_decimal* x)
  {
    this->response_observation_pimpl_state_.response_observation_->time (x);
  }

  void response_observation_pimpl::
  birth_rate (::common::units_decimal_nonnegative* x)
  {
    this->response_observation_pimpl_state_.response_observation_->birth_rate (x);
  }

  void response_observation_pimpl::
  death_rate (::common::units_decimal_nonnegative* x)
  {
    this->response_observation_pimpl_state_.response_observation_->death_rate (x);
  }

  void response_observation_pimpl::
  net_birth_rate (::common::units_decimal* x)
  {
    this->response_observation_pimpl_state_.response_observation_->net_birth_rate (x);
  }

  void response_observation_pimpl::
  net_death_rate (::common::units_decimal* x)
  {
    this->response_observation_pimpl_state_.response_observation_->net_death_rate (x);
  }

  void response_observation_pimpl::
  apoptotic_duration (::common::units_decimal* x)
  {
    this->response_observation_pimpl_state_.response_observation_->apoptotic_duration (x);
  }

  void response_observation_pimpl::
  percent_cell_viability (::common::units_decimal* x)
  {
    this->response_observation_pimpl_state_.response_observation_->percent_cell_viability (x);
  }

  void response_observation_pimpl::
  custom (::common::custom* x)
  {
    this->response_observation_pimpl_state_.response_observation_->custom (x);
  }

  ::pkpd::response_observation* response_observation_pimpl::
  post_response_observation ()
  {
    ::pkpd::response_observation* r = this->response_observation_pimpl_state_.response_observation_;
    this->response_observation_pimpl_state_.response_observation_ = 0;
    return r;
  }

  // pharmacodynamics_pimpl
  //

  pharmacodynamics_pimpl::
  pharmacodynamics_pimpl (bool b)
  {
    this->pharmacodynamics_pimpl_base_ = b;
    this->pharmacodynamics_pimpl_state_.pharmacodynamics_ = 0;
  }

  pharmacodynamics_pimpl::
  ~pharmacodynamics_pimpl ()
  {
    if (!this->pharmacodynamics_pimpl_base_ && this->pharmacodynamics_pimpl_state_.pharmacodynamics_)
      delete this->pharmacodynamics_pimpl_state_.pharmacodynamics_;
  }

  void pharmacodynamics_pimpl::
  _reset ()
  {
    pharmacodynamics_pskel::_reset ();

    if (!this->pharmacodynamics_pimpl_base_ && this->pharmacodynamics_pimpl_state_.pharmacodynamics_)
    {
      delete this->pharmacodynamics_pimpl_state_.pharmacodynamics_;
      this->pharmacodynamics_pimpl_state_.pharmacodynamics_ = 0;
    }
  }

  void pharmacodynamics_pimpl::
  pre_impl (::pkpd::pharmacodynamics* x)
  {
    this->pharmacodynamics_pimpl_state_.pharmacodynamics_ = x;
  }

  void pharmacodynamics_pimpl::
  pre ()
  {
    ::pkpd::pharmacodynamics* x = new ::pkpd::pharmacodynamics;
    this->pre_impl (x);
  }

  void pharmacodynamics_pimpl::
  therapy_measurement_set (::pkpd::therapy_measurement_set* x)
  {
    this->pharmacodynamics_pimpl_state_.pharmacodynamics_->therapy_measurement_set ().push_back (x);
  }

  ::pkpd::pharmacodynamics* pharmacodynamics_pimpl::
  post_pharmacodynamics ()
  {
    ::pkpd::pharmacodynamics* r = this->pharmacodynamics_pimpl_state_.pharmacodynamics_;
    this->pharmacodynamics_pimpl_state_.pharmacodynamics_ = 0;
    return r;
  }

  // therapy_measurement_set_pimpl
  //

  therapy_measurement_set_pimpl::
  therapy_measurement_set_pimpl (bool b)
  {
    this->therapy_measurement_set_pimpl_base_ = b;
    this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_ = 0;
  }

  therapy_measurement_set_pimpl::
  ~therapy_measurement_set_pimpl ()
  {
    if (!this->therapy_measurement_set_pimpl_base_ && this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_)
      delete this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_;
  }

  void therapy_measurement_set_pimpl::
  _reset ()
  {
    therapy_measurement_set_pskel::_reset ();

    if (!this->therapy_measurement_set_pimpl_base_ && this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_)
    {
      delete this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_;
      this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_ = 0;
    }
  }

  void therapy_measurement_set_pimpl::
  pre_impl (::pkpd::therapy_measurement_set* x)
  {
    this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_ = x;
  }

  void therapy_measurement_set_pimpl::
  pre ()
  {
    ::pkpd::therapy_measurement_set* x = new ::pkpd::therapy_measurement_set;
    this->pre_impl (x);
  }

  void therapy_measurement_set_pimpl::
  ID (unsigned short x)
  {
    this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_->ID (x);
  }

  void therapy_measurement_set_pimpl::
  therapy (::pkpd::therapy* x)
  {
    this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_->therapy (x);
  }

  void therapy_measurement_set_pimpl::
  response (::pkpd::response* x)
  {
    this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_->response (x);
  }

  ::pkpd::therapy_measurement_set* therapy_measurement_set_pimpl::
  post_therapy_measurement_set ()
  {
    ::pkpd::therapy_measurement_set* r = this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_;
    this->therapy_measurement_set_pimpl_state_.therapy_measurement_set_ = 0;
    return r;
  }

  // PKPD_pimpl
  //

  PKPD_pimpl::
  PKPD_pimpl (bool b)
  {
    this->PKPD_pimpl_base_ = b;
    this->PKPD_pimpl_state_.PKPD_ = 0;
  }

  PKPD_pimpl::
  ~PKPD_pimpl ()
  {
    if (!this->PKPD_pimpl_base_ && this->PKPD_pimpl_state_.PKPD_)
      delete this->PKPD_pimpl_state_.PKPD_;
  }

  void PKPD_pimpl::
  _reset ()
  {
    PKPD_pskel::_reset ();

    if (!this->PKPD_pimpl_base_ && this->PKPD_pimpl_state_.PKPD_)
    {
      delete this->PKPD_pimpl_state_.PKPD_;
      this->PKPD_pimpl_state_.PKPD_ = 0;
    }
  }

  void PKPD_pimpl::
  pre_impl (::pkpd::PKPD* x)
  {
    this->PKPD_pimpl_state_.PKPD_ = x;
  }

  void PKPD_pimpl::
  pre ()
  {
    ::pkpd::PKPD* x = new ::pkpd::PKPD;
    this->pre_impl (x);
  }

  void PKPD_pimpl::
  drug (::pkpd::drug_pk* x)
  {
    this->PKPD_pimpl_state_.PKPD_->drug ().push_back (x);
  }

  void PKPD_pimpl::
  pharmacodynamics (::pkpd::pharmacodynamics* x)
  {
    this->PKPD_pimpl_state_.PKPD_->pharmacodynamics (x);
  }

  ::pkpd::PKPD* PKPD_pimpl::
  post_PKPD ()
  {
    ::pkpd::PKPD* r = this->PKPD_pimpl_state_.PKPD_;
    this->PKPD_pimpl_state_.PKPD_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

