// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VARIABLES_SIMPL_HPP
#define VARIABLES_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define VARIABLES_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "variables-sskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-simpl.hpp"

namespace variables
{
  class amount_type_simpl: public amount_type_sskel
  {
    public:
    amount_type_simpl ();

    virtual void
    pre (const ::variables::amount_type&);

    virtual void
    _serialize_content ();

    public:
    const ::variables::amount_type* amount_type_simpl_state_;
  };

  class variable_simpl: public variable_sskel
  {
    public:
    virtual void
    pre (const ::variables::variable&);

    // Attributes.
    //
    virtual ::std::string
    name ();

    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID ();

    virtual bool
    type_present ();

    virtual const ::variables::amount_type&
    type ();

    virtual bool
    ChEBI_ID_present ();

    virtual ::std::string
    ChEBI_ID ();

    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID ();

    virtual bool
    DrugBank_ID_present ();

    virtual ::std::string
    DrugBank_ID ();

    virtual bool
    GMO_ID_present ();

    virtual ::std::string
    GMO_ID ();

    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID ();

    virtual bool
    UniProt_ID_present ();

    virtual ::std::string
    UniProt_ID ();

    virtual bool
    PR_ID_present ();

    virtual ::std::string
    PR_ID ();

    // Elements.
    //
    virtual bool
    material_amount_present ();

    virtual const ::variables::material_amount&
    material_amount ();

    virtual bool
    physical_parameter_set_present ();

    virtual const ::variables::physical_parameter_set&
    physical_parameter_set ();

    public:
    struct variable_simpl_state
    {
      const ::variables::variable* variable_;
    };

    variable_simpl_state variable_simpl_state_;
  };

  class material_amount_simpl: public material_amount_sskel
  {
    public:
    material_amount_simpl ();

    virtual void
    pre (const ::variables::material_amount&);

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual const ::variables::amount_type&
    type ();

    virtual bool
    scale_units_present ();

    virtual ::std::string
    scale_units ();

    public:
    ::common::units_decimal_simpl base_impl_;

    public:
    struct material_amount_simpl_state
    {
      const ::variables::material_amount* material_amount_;
    };

    material_amount_simpl_state material_amount_simpl_state_;
  };

  class physical_parameter_set_simpl: public physical_parameter_set_sskel
  {
    public:
    virtual void
    pre (const ::variables::physical_parameter_set&);

    // Elements.
    //
    virtual bool
    conditions_present ();

    virtual const ::variables::physical_conditions&
    conditions ();

    virtual bool
    diffusion_coefficient_present ();

    virtual const ::common::units_decimal&
    diffusion_coefficient ();

    virtual bool
    decay_rate_present ();

    virtual const ::common::units_decimal&
    decay_rate ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct physical_parameter_set_simpl_state
    {
      const ::variables::physical_parameter_set* physical_parameter_set_;
    };

    physical_parameter_set_simpl_state physical_parameter_set_simpl_state_;
  };

  class physical_conditions_simpl: public physical_conditions_sskel
  {
    public:
    virtual void
    pre (const ::variables::physical_conditions&);

    // Elements.
    //
    virtual bool
    temperature_present ();

    virtual const ::common::units_decimal&
    temperature ();

    virtual bool
    mechanical_pressure_present ();

    virtual const ::common::units_decimal&
    mechanical_pressure ();

    virtual bool
    acidity_present ();

    virtual const ::common::units_decimal&
    acidity ();

    virtual bool
    pH_present ();

    virtual const ::common::units_decimal&
    pH ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct physical_conditions_simpl_state
    {
      const ::variables::physical_conditions* physical_conditions_;
    };

    physical_conditions_simpl_state physical_conditions_simpl_state_;
  };

  class conditions_simpl: public conditions_sskel
  {
    public:
    conditions_simpl ();

    virtual void
    pre (const ::variables::conditions&);

    virtual void
    _serialize_content ();

    public:
    const ::variables::conditions* conditions_simpl_state_;
  };

  class system_simpl: public system_sskel
  {
    public:
    system_simpl ();

    virtual void
    pre (const ::variables::system&);

    virtual void
    _serialize_content ();

    public:
    const ::variables::system* system_simpl_state_;
  };

  class experimental_conditions_simpl: public experimental_conditions_sskel
  {
    public:
    virtual void
    pre (const ::variables::experimental_conditions&);

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual ::std::string
    type ();

    // Elements.
    //
    virtual bool
    dimensionality_present ();

    virtual unsigned short
    dimensionality ();

    virtual bool
    system_present ();

    virtual const ::variables::system&
    system ();

    virtual bool
    conditions_present ();

    virtual const ::variables::conditions&
    conditions ();

    virtual bool
    surface_variable_next ();

    virtual const ::variables::variable&
    surface_variable ();

    public:
    struct experimental_conditions_simpl_state
    {
      const ::variables::experimental_conditions* experimental_conditions_;
      ::variables::experimental_conditions::surface_variable_const_iterator surface_variable_;
      ::variables::experimental_conditions::surface_variable_const_iterator surface_variable_end_;
    };

    experimental_conditions_simpl_state experimental_conditions_simpl_state_;
  };

  class data_vector_simpl: public data_vector_sskel
  {
    public:
    data_vector_simpl ();

    virtual void
    pre (const ::variables::data_vector&);

    // Attributes.
    //
    virtual bool
    voxel_ID_present ();

    virtual const ::common::unsigned_int_list&
    voxel_ID ();

    public:
    ::common::units_double_list_simpl base_impl_;

    public:
    struct data_vector_simpl_state
    {
      const ::variables::data_vector* data_vector_;
    };

    data_vector_simpl_state data_vector_simpl_state_;
  };

  class data_simpl: public data_sskel
  {
    public:
    virtual void
    pre (const ::variables::data&);

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual const ::common::data_storage_formats&
    type ();

    // Elements.
    //
    virtual bool
    filename_present ();

    virtual ::std::string
    filename ();

    virtual bool
    data_vector_next ();

    virtual const ::variables::data_vector&
    data_vector ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct data_simpl_state
    {
      const ::variables::data* data_;
      ::variables::data::data_vector_const_iterator data_vector_;
      ::variables::data::data_vector_const_iterator data_vector_end_;
    };

    data_simpl_state data_simpl_state_;
  };

  class list_of_variables_simpl: public list_of_variables_sskel
  {
    public:
    virtual void
    pre (const ::variables::list_of_variables&);

    // Elements.
    //
    virtual bool
    variable_next ();

    virtual const ::variables::variable&
    variable ();

    virtual bool
    physical_parameter_set_present ();

    virtual const ::variables::physical_parameter_set&
    physical_parameter_set ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct list_of_variables_simpl_state
    {
      const ::variables::list_of_variables* list_of_variables_;
      ::variables::list_of_variables::variable_const_iterator variable_;
      ::variables::list_of_variables::variable_const_iterator variable_end_;
    };

    list_of_variables_simpl_state list_of_variables_simpl_state_;
  };

  class transition_threshold_simpl: public transition_threshold_sskel
  {
    public:
    transition_threshold_simpl ();

    virtual void
    pre (const ::variables::transition_threshold&);

    // Attributes.
    //
    virtual bool
    ChEBI_ID_present ();

    virtual ::std::string
    ChEBI_ID ();

    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID ();

    virtual bool
    DrugBank_ID_present ();

    virtual ::std::string
    DrugBank_ID ();

    virtual bool
    GMO_ID_present ();

    virtual ::std::string
    GMO_ID ();

    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID ();

    virtual bool
    UniProt_ID_present ();

    virtual ::std::string
    UniProt_ID ();

    virtual bool
    PR_ID_present ();

    virtual ::std::string
    PR_ID ();

    public:
    ::common::transition_threshold_simpl base_impl_;

    public:
    struct transition_threshold_simpl_state
    {
      const ::variables::transition_threshold* transition_threshold_;
    };

    transition_threshold_simpl_state transition_threshold_simpl_state_;
  };
}

#ifdef VARIABLES_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // VARIABLES_SIMPL_HPP
