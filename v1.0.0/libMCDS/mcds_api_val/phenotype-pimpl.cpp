// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "phenotype-pimpl.hpp"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace phenotype
{
  // phenotype_elements_pimpl
  //

  phenotype_elements_pimpl::
  phenotype_elements_pimpl (bool b)
  : phenotype_elements_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->phenotype_elements_pimpl_base_ = b;
    this->phenotype_elements_pimpl_state_.phenotype_elements_ = 0;
  }

  phenotype_elements_pimpl::
  ~phenotype_elements_pimpl ()
  {
    if (!this->phenotype_elements_pimpl_base_ && this->phenotype_elements_pimpl_state_.phenotype_elements_)
      delete this->phenotype_elements_pimpl_state_.phenotype_elements_;
  }

  void phenotype_elements_pimpl::
  _reset ()
  {
    phenotype_elements_pskel::_reset ();

    if (!this->phenotype_elements_pimpl_base_ && this->phenotype_elements_pimpl_state_.phenotype_elements_)
    {
      delete this->phenotype_elements_pimpl_state_.phenotype_elements_;
      this->phenotype_elements_pimpl_state_.phenotype_elements_ = 0;
    }
  }

  void phenotype_elements_pimpl::
  pre_impl (::phenotype::phenotype_elements* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_ = x;
    this->base_impl_.pre_impl (x);
  }

  void phenotype_elements_pimpl::
  pre ()
  {
    ::phenotype::phenotype_elements* x = new ::phenotype::phenotype_elements;
    this->pre_impl (x);
  }

  void phenotype_elements_pimpl::
  adhesion (::phenotype_common::adhesion* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_->adhesion (x);
  }

  void phenotype_elements_pimpl::
  geometrical_properties (::phenotype_common::geometrical_properties* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_->geometrical_properties (x);
  }

  void phenotype_elements_pimpl::
  mass (::phenotype_common::mass* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_->mass (x);
  }

  void phenotype_elements_pimpl::
  mechanics (::phenotype_common::mechanics* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_->mechanics (x);
  }

  void phenotype_elements_pimpl::
  motility (::phenotype_common::motility* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_->motility (x);
  }

  void phenotype_elements_pimpl::
  PKPD (::pkpd::PKPD* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_->PKPD (x);
  }

  void phenotype_elements_pimpl::
  timescale (::phenotype_base::expected_timescale* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_->timescale (x);
  }

  void phenotype_elements_pimpl::
  transport_processes (::phenotype_common::transport_processes* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_->transport_processes (x);
  }

  void phenotype_elements_pimpl::
  custom (::common::custom* x)
  {
    this->phenotype_elements_pimpl_state_.phenotype_elements_->custom (x);
  }

  ::phenotype::phenotype_elements* phenotype_elements_pimpl::
  post_phenotype_elements ()
  {
    this->base_impl_.post_cycles_and_deaths ();
    ::phenotype::phenotype_elements* r = this->phenotype_elements_pimpl_state_.phenotype_elements_;
    this->phenotype_elements_pimpl_state_.phenotype_elements_ = 0;
    return r;
  }

  // phenotype_pimpl
  //

  phenotype_pimpl::
  phenotype_pimpl (bool b)
  : phenotype_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->phenotype_pimpl_base_ = b;
    this->phenotype_pimpl_state_.phenotype_ = 0;
  }

  phenotype_pimpl::
  ~phenotype_pimpl ()
  {
    if (!this->phenotype_pimpl_base_ && this->phenotype_pimpl_state_.phenotype_)
      delete this->phenotype_pimpl_state_.phenotype_;
  }

  void phenotype_pimpl::
  _reset ()
  {
    phenotype_pskel::_reset ();

    if (!this->phenotype_pimpl_base_ && this->phenotype_pimpl_state_.phenotype_)
    {
      delete this->phenotype_pimpl_state_.phenotype_;
      this->phenotype_pimpl_state_.phenotype_ = 0;
    }
  }

  void phenotype_pimpl::
  pre_impl (::phenotype::phenotype* x)
  {
    this->phenotype_pimpl_state_.phenotype_ = x;
    this->base_impl_.pre_impl (x);
  }

  void phenotype_pimpl::
  pre ()
  {
    ::phenotype::phenotype* x = new ::phenotype::phenotype;
    this->pre_impl (x);
  }

  void phenotype_pimpl::
  type (const ::phenotype_base::phenotype_type& x)
  {
    this->phenotype_pimpl_state_.phenotype_->type (x);
  }

  ::phenotype::phenotype* phenotype_pimpl::
  post_phenotype ()
  {
    this->base_impl_.post_phenotype_elements ();
    ::phenotype::phenotype* r = this->phenotype_pimpl_state_.phenotype_;
    this->phenotype_pimpl_state_.phenotype_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

