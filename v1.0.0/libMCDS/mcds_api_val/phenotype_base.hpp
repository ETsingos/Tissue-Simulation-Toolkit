// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_BASE_HPP
#define PHENOTYPE_BASE_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "phenotype_base-fwd.hpp"

#ifndef XSDE_DONT_INCLUDE_INLINE
#define XSDE_DONT_INCLUDE_INLINE

#include "phenotype_common.hpp"

#include "common.hpp"

#include "pkpd.hpp"

#include "variables.hpp"

#undef XSDE_DONT_INCLUDE_INLINE
#else

#include "phenotype_common.hpp"

#include "common.hpp"

#include "pkpd.hpp"

#include "variables.hpp"

#endif // XSDE_DONT_INCLUDE_INLINE

namespace phenotype_base
{
  // phenotype_type (fixed-length)
  //
  class phenotype_type
  {
    public:
    enum value_type
    {
      expected,
      current,
      target
    };

    phenotype_type ();
    phenotype_type (value_type);

    void
    value (value_type);

    operator value_type () const
    {
      return value_;
    }

    const char*
    string () const;

    private:
    value_type value_;
  };

  // phenotype_base (variable-length)
  //
  class phenotype_base
  {
    private:
    phenotype_base (const phenotype_base&);
    phenotype_base& operator= (const phenotype_base&);

    public:
    phenotype_base ();

    phenotype_base*
    _clone () const;

    ~phenotype_base ();

    // type
    //
    bool
    type_present () const;

    void
    type_present (bool);

    const ::phenotype_base::phenotype_type&
    type () const;

    ::phenotype_base::phenotype_type&
    type ();

    void
    type (const ::phenotype_base::phenotype_type&);

    // adhesion
    //
    bool
    adhesion_present () const;

    const ::phenotype_common::adhesion&
    adhesion () const;

    ::phenotype_common::adhesion&
    adhesion ();

    void
    adhesion (::phenotype_common::adhesion*);

    ::phenotype_common::adhesion*
    adhesion_detach ();

    // geometrical_properties
    //
    bool
    geometrical_properties_present () const;

    const ::phenotype_common::geometrical_properties&
    geometrical_properties () const;

    ::phenotype_common::geometrical_properties&
    geometrical_properties ();

    void
    geometrical_properties (::phenotype_common::geometrical_properties*);

    ::phenotype_common::geometrical_properties*
    geometrical_properties_detach ();

    // mass
    //
    bool
    mass_present () const;

    const ::phenotype_common::mass&
    mass () const;

    ::phenotype_common::mass&
    mass ();

    void
    mass (::phenotype_common::mass*);

    ::phenotype_common::mass*
    mass_detach ();

    // mechanics
    //
    bool
    mechanics_present () const;

    const ::phenotype_common::mechanics&
    mechanics () const;

    ::phenotype_common::mechanics&
    mechanics ();

    void
    mechanics (::phenotype_common::mechanics*);

    ::phenotype_common::mechanics*
    mechanics_detach ();

    // motility
    //
    bool
    motility_present () const;

    const ::phenotype_common::motility&
    motility () const;

    ::phenotype_common::motility&
    motility ();

    void
    motility (::phenotype_common::motility*);

    ::phenotype_common::motility*
    motility_detach ();

    // PKPD
    //
    bool
    PKPD_present () const;

    const ::pkpd::PKPD&
    PKPD () const;

    ::pkpd::PKPD&
    PKPD ();

    void
    PKPD (::pkpd::PKPD*);

    ::pkpd::PKPD*
    PKPD_detach ();

    // timescale
    //
    bool
    timescale_present () const;

    const ::phenotype_base::expected_timescale&
    timescale () const;

    ::phenotype_base::expected_timescale&
    timescale ();

    void
    timescale (::phenotype_base::expected_timescale*);

    ::phenotype_base::expected_timescale*
    timescale_detach ();

    // transport_processes
    //
    bool
    transport_processes_present () const;

    const ::phenotype_common::transport_processes&
    transport_processes () const;

    ::phenotype_common::transport_processes&
    transport_processes ();

    void
    transport_processes (::phenotype_common::transport_processes*);

    ::phenotype_common::transport_processes*
    transport_processes_detach ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (phenotype_base&) const;

    private:
    ::phenotype_base::phenotype_type type_;
    unsigned char type_present_;
    ::phenotype_common::adhesion* adhesion_;
    ::phenotype_common::geometrical_properties* geometrical_properties_;
    ::phenotype_common::mass* mass_;
    ::phenotype_common::mechanics* mechanics_;
    ::phenotype_common::motility* motility_;
    ::pkpd::PKPD* PKPD_;
    ::phenotype_base::expected_timescale* timescale_;
    ::phenotype_common::transport_processes* transport_processes_;
    ::common::custom* custom_;
  };

  // expected_timescale (variable-length)
  //
  class expected_timescale: public ::common::units_decimal_nonnegative
  {
    private:
    expected_timescale (const expected_timescale&);
    expected_timescale& operator= (const expected_timescale&);

    public:
    expected_timescale ();

    expected_timescale*
    _clone () const;

    ~expected_timescale ();

    // cell_cycle_ID
    //
    bool
    cell_cycle_ID_present () const;

    void
    cell_cycle_ID_present (bool);

    unsigned int
    cell_cycle_ID () const;

    unsigned int&
    cell_cycle_ID ();

    void
    cell_cycle_ID (unsigned int);

    // cell_cycle_phase_ID
    //
    bool
    cell_cycle_phase_ID_present () const;

    void
    cell_cycle_phase_ID_present (bool);

    unsigned int
    cell_cycle_phase_ID () const;

    unsigned int&
    cell_cycle_phase_ID ();

    void
    cell_cycle_phase_ID (unsigned int);

    // cell_death_ID
    //
    bool
    cell_death_ID_present () const;

    void
    cell_death_ID_present (bool);

    unsigned int
    cell_death_ID () const;

    unsigned int&
    cell_death_ID ();

    void
    cell_death_ID (unsigned int);

    void
    _copy (expected_timescale&) const;

    private:
    unsigned int cell_cycle_ID_;
    unsigned char cell_cycle_ID_present_;
    unsigned int cell_cycle_phase_ID_;
    unsigned char cell_cycle_phase_ID_present_;
    unsigned int cell_death_ID_;
    unsigned char cell_death_ID_present_;
  };

  // cell_parts (variable-length)
  //
  class cell_parts
  {
    private:
    cell_parts (const cell_parts&);
    cell_parts& operator= (const cell_parts&);

    public:
    cell_parts ();

    cell_parts*
    _clone () const;

    ~cell_parts ();

    // name
    //
    const ::std::string&
    name () const;

    ::std::string&
    name ();

    void
    name (const ::std::string&);

    // ID
    //
    bool
    ID_present () const;

    void
    ID_present (bool);

    unsigned int
    ID () const;

    unsigned int&
    ID ();

    void
    ID (unsigned int);

    // phenotype
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::phenotype_base::phenotype_base > phenotype_sequence;
    typedef phenotype_sequence::iterator phenotype_iterator;
    typedef phenotype_sequence::const_iterator phenotype_const_iterator;

    const phenotype_sequence&
    phenotype () const;

    phenotype_sequence&
    phenotype ();

    // cell_part
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::phenotype_base::cell_parts > cell_part_sequence;
    typedef cell_part_sequence::iterator cell_part_iterator;
    typedef cell_part_sequence::const_iterator cell_part_const_iterator;

    const cell_part_sequence&
    cell_part () const;

    cell_part_sequence&
    cell_part ();

    // custom
    //
    bool
    custom_present () const;

    const ::common::custom&
    custom () const;

    ::common::custom&
    custom ();

    void
    custom (::common::custom*);

    ::common::custom*
    custom_detach ();

    void
    _copy (cell_parts&) const;

    private:
    ::std::string name_;
    unsigned int ID_;
    unsigned char ID_present_;
    phenotype_sequence phenotype_;
    cell_part_sequence cell_part_;
    ::common::custom* custom_;
  };
}

#ifndef XSDE_DONT_INCLUDE_INLINE

#include "phenotype_common.ipp"

#include "common.ipp"

#include "pkpd.ipp"

#include "variables.ipp"

#endif // XSDE_DONT_INCLUDE_INLINE

#ifndef XSDE_DONT_INCLUDE_INLINE
#include "phenotype_base.ipp"
#endif // XSDE_DONT_INCLUDE_INLINE

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PHENOTYPE_BASE_HPP
