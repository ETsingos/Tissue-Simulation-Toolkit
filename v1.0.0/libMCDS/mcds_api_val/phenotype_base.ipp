// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_BASE_IPP
#define PHENOTYPE_BASE_IPP

// Begin prologue.
//
//
// End prologue.

#include "phenotype_common.ipp"

#include "common.ipp"

#include "pkpd.ipp"

#include "variables.ipp"

namespace phenotype_base
{
  // phenotype_type
  //

  inline
  phenotype_type::
  phenotype_type ()
  {
  }

  inline
  phenotype_type::
  phenotype_type (value_type v)
  {
    value_ = v;
  }

  inline
  void phenotype_type::
  value (value_type v)
  {
    value_ = v;
  }

  // phenotype_base
  //

  inline
  bool phenotype_base::
  type_present () const
  {
    return this->type_present_;
  }

  inline
  void phenotype_base::
  type_present (bool x)
  {
    this->type_present_ = x;
  }

  inline
  const ::phenotype_base::phenotype_type& phenotype_base::
  type () const
  {
    return this->type_;
  }

  inline
  ::phenotype_base::phenotype_type& phenotype_base::
  type ()
  {
    return this->type_;
  }

  inline
  void phenotype_base::
  type (const ::phenotype_base::phenotype_type& x)
  {
    this->type_ = x;
    this->type_present_ = true;
  }

  inline
  bool phenotype_base::
  adhesion_present () const
  {
    return this->adhesion_ != 0;
  }

  inline
  const ::phenotype_common::adhesion& phenotype_base::
  adhesion () const
  {
    return *this->adhesion_;
  }

  inline
  ::phenotype_common::adhesion& phenotype_base::
  adhesion ()
  {
    return *this->adhesion_;
  }

  inline
  void phenotype_base::
  adhesion (::phenotype_common::adhesion* x)
  {
    delete this->adhesion_;
    this->adhesion_ = x;
  }

  inline
  ::phenotype_common::adhesion* phenotype_base::
  adhesion_detach ()
  {
    ::phenotype_common::adhesion* r = this->adhesion_;
    this->adhesion_ = 0;
    return r;
  }

  inline
  bool phenotype_base::
  geometrical_properties_present () const
  {
    return this->geometrical_properties_ != 0;
  }

  inline
  const ::phenotype_common::geometrical_properties& phenotype_base::
  geometrical_properties () const
  {
    return *this->geometrical_properties_;
  }

  inline
  ::phenotype_common::geometrical_properties& phenotype_base::
  geometrical_properties ()
  {
    return *this->geometrical_properties_;
  }

  inline
  void phenotype_base::
  geometrical_properties (::phenotype_common::geometrical_properties* x)
  {
    delete this->geometrical_properties_;
    this->geometrical_properties_ = x;
  }

  inline
  ::phenotype_common::geometrical_properties* phenotype_base::
  geometrical_properties_detach ()
  {
    ::phenotype_common::geometrical_properties* r = this->geometrical_properties_;
    this->geometrical_properties_ = 0;
    return r;
  }

  inline
  bool phenotype_base::
  mass_present () const
  {
    return this->mass_ != 0;
  }

  inline
  const ::phenotype_common::mass& phenotype_base::
  mass () const
  {
    return *this->mass_;
  }

  inline
  ::phenotype_common::mass& phenotype_base::
  mass ()
  {
    return *this->mass_;
  }

  inline
  void phenotype_base::
  mass (::phenotype_common::mass* x)
  {
    delete this->mass_;
    this->mass_ = x;
  }

  inline
  ::phenotype_common::mass* phenotype_base::
  mass_detach ()
  {
    ::phenotype_common::mass* r = this->mass_;
    this->mass_ = 0;
    return r;
  }

  inline
  bool phenotype_base::
  mechanics_present () const
  {
    return this->mechanics_ != 0;
  }

  inline
  const ::phenotype_common::mechanics& phenotype_base::
  mechanics () const
  {
    return *this->mechanics_;
  }

  inline
  ::phenotype_common::mechanics& phenotype_base::
  mechanics ()
  {
    return *this->mechanics_;
  }

  inline
  void phenotype_base::
  mechanics (::phenotype_common::mechanics* x)
  {
    delete this->mechanics_;
    this->mechanics_ = x;
  }

  inline
  ::phenotype_common::mechanics* phenotype_base::
  mechanics_detach ()
  {
    ::phenotype_common::mechanics* r = this->mechanics_;
    this->mechanics_ = 0;
    return r;
  }

  inline
  bool phenotype_base::
  motility_present () const
  {
    return this->motility_ != 0;
  }

  inline
  const ::phenotype_common::motility& phenotype_base::
  motility () const
  {
    return *this->motility_;
  }

  inline
  ::phenotype_common::motility& phenotype_base::
  motility ()
  {
    return *this->motility_;
  }

  inline
  void phenotype_base::
  motility (::phenotype_common::motility* x)
  {
    delete this->motility_;
    this->motility_ = x;
  }

  inline
  ::phenotype_common::motility* phenotype_base::
  motility_detach ()
  {
    ::phenotype_common::motility* r = this->motility_;
    this->motility_ = 0;
    return r;
  }

  inline
  bool phenotype_base::
  PKPD_present () const
  {
    return this->PKPD_ != 0;
  }

  inline
  const ::pkpd::PKPD& phenotype_base::
  PKPD () const
  {
    return *this->PKPD_;
  }

  inline
  ::pkpd::PKPD& phenotype_base::
  PKPD ()
  {
    return *this->PKPD_;
  }

  inline
  void phenotype_base::
  PKPD (::pkpd::PKPD* x)
  {
    delete this->PKPD_;
    this->PKPD_ = x;
  }

  inline
  ::pkpd::PKPD* phenotype_base::
  PKPD_detach ()
  {
    ::pkpd::PKPD* r = this->PKPD_;
    this->PKPD_ = 0;
    return r;
  }

  inline
  bool phenotype_base::
  timescale_present () const
  {
    return this->timescale_ != 0;
  }

  inline
  const ::phenotype_base::expected_timescale& phenotype_base::
  timescale () const
  {
    return *this->timescale_;
  }

  inline
  ::phenotype_base::expected_timescale& phenotype_base::
  timescale ()
  {
    return *this->timescale_;
  }

  inline
  void phenotype_base::
  timescale (::phenotype_base::expected_timescale* x)
  {
    delete this->timescale_;
    this->timescale_ = x;
  }

  inline
  ::phenotype_base::expected_timescale* phenotype_base::
  timescale_detach ()
  {
    ::phenotype_base::expected_timescale* r = this->timescale_;
    this->timescale_ = 0;
    return r;
  }

  inline
  bool phenotype_base::
  transport_processes_present () const
  {
    return this->transport_processes_ != 0;
  }

  inline
  const ::phenotype_common::transport_processes& phenotype_base::
  transport_processes () const
  {
    return *this->transport_processes_;
  }

  inline
  ::phenotype_common::transport_processes& phenotype_base::
  transport_processes ()
  {
    return *this->transport_processes_;
  }

  inline
  void phenotype_base::
  transport_processes (::phenotype_common::transport_processes* x)
  {
    delete this->transport_processes_;
    this->transport_processes_ = x;
  }

  inline
  ::phenotype_common::transport_processes* phenotype_base::
  transport_processes_detach ()
  {
    ::phenotype_common::transport_processes* r = this->transport_processes_;
    this->transport_processes_ = 0;
    return r;
  }

  inline
  bool phenotype_base::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& phenotype_base::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& phenotype_base::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void phenotype_base::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* phenotype_base::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // expected_timescale
  //

  inline
  bool expected_timescale::
  cell_cycle_ID_present () const
  {
    return this->cell_cycle_ID_present_;
  }

  inline
  void expected_timescale::
  cell_cycle_ID_present (bool x)
  {
    this->cell_cycle_ID_present_ = x;
  }

  inline
  unsigned int expected_timescale::
  cell_cycle_ID () const
  {
    return this->cell_cycle_ID_;
  }

  inline
  unsigned int& expected_timescale::
  cell_cycle_ID ()
  {
    return this->cell_cycle_ID_;
  }

  inline
  void expected_timescale::
  cell_cycle_ID (unsigned int x)
  {
    this->cell_cycle_ID_ = x;
    this->cell_cycle_ID_present_ = true;
  }

  inline
  bool expected_timescale::
  cell_cycle_phase_ID_present () const
  {
    return this->cell_cycle_phase_ID_present_;
  }

  inline
  void expected_timescale::
  cell_cycle_phase_ID_present (bool x)
  {
    this->cell_cycle_phase_ID_present_ = x;
  }

  inline
  unsigned int expected_timescale::
  cell_cycle_phase_ID () const
  {
    return this->cell_cycle_phase_ID_;
  }

  inline
  unsigned int& expected_timescale::
  cell_cycle_phase_ID ()
  {
    return this->cell_cycle_phase_ID_;
  }

  inline
  void expected_timescale::
  cell_cycle_phase_ID (unsigned int x)
  {
    this->cell_cycle_phase_ID_ = x;
    this->cell_cycle_phase_ID_present_ = true;
  }

  inline
  bool expected_timescale::
  cell_death_ID_present () const
  {
    return this->cell_death_ID_present_;
  }

  inline
  void expected_timescale::
  cell_death_ID_present (bool x)
  {
    this->cell_death_ID_present_ = x;
  }

  inline
  unsigned int expected_timescale::
  cell_death_ID () const
  {
    return this->cell_death_ID_;
  }

  inline
  unsigned int& expected_timescale::
  cell_death_ID ()
  {
    return this->cell_death_ID_;
  }

  inline
  void expected_timescale::
  cell_death_ID (unsigned int x)
  {
    this->cell_death_ID_ = x;
    this->cell_death_ID_present_ = true;
  }

  // cell_parts
  //

  inline
  const ::std::string& cell_parts::
  name () const
  {
    return this->name_;
  }

  inline
  ::std::string& cell_parts::
  name ()
  {
    return this->name_;
  }

  inline
  void cell_parts::
  name (const ::std::string& x)
  {
    this->name_ = x;
  }

  inline
  bool cell_parts::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void cell_parts::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned int cell_parts::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned int& cell_parts::
  ID ()
  {
    return this->ID_;
  }

  inline
  void cell_parts::
  ID (unsigned int x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  const cell_parts::phenotype_sequence& cell_parts::
  phenotype () const
  {
    return this->phenotype_;
  }

  inline
  cell_parts::phenotype_sequence& cell_parts::
  phenotype ()
  {
    return this->phenotype_;
  }

  inline
  const cell_parts::cell_part_sequence& cell_parts::
  cell_part () const
  {
    return this->cell_part_;
  }

  inline
  cell_parts::cell_part_sequence& cell_parts::
  cell_part ()
  {
    return this->cell_part_;
  }

  inline
  bool cell_parts::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& cell_parts::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& cell_parts::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void cell_parts::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* cell_parts::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // PHENOTYPE_BASE_IPP
