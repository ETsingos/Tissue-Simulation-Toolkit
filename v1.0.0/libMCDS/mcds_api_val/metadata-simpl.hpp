// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef METADATA_SIMPL_HPP
#define METADATA_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define METADATA_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "metadata-sskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-simpl.hpp"

namespace metadata
{
  class URL_simpl: public URL_sskel
  {
    public:
    URL_simpl ();

    virtual void
    pre (const ::metadata::URL&);

    public:
    ::xml_schema::string_simpl base_impl_;
  };

  class orcid_identifier_simpl: public orcid_identifier_sskel
  {
    public:
    virtual void
    pre (const ::metadata::orcid_identifier&);

    // Elements.
    //
    virtual bool
    path_present ();

    virtual ::std::string
    path ();

    virtual bool
    given_names_present ();

    virtual ::std::string
    given_names ();

    virtual bool
    family_name_present ();

    virtual ::std::string
    family_name ();

    virtual bool
    email_present ();

    virtual ::std::string
    email ();

    virtual bool
    url_present ();

    virtual const ::metadata::URL&
    url ();

    virtual bool
    organization_name_present ();

    virtual ::std::string
    organization_name ();

    virtual bool
    department_name_present ();

    virtual ::std::string
    department_name ();

    public:
    struct orcid_identifier_simpl_state
    {
      const ::metadata::orcid_identifier* orcid_identifier_;
    };

    orcid_identifier_simpl_state orcid_identifier_simpl_state_;
  };

  class orcid_person_simpl: public orcid_person_sskel
  {
    public:
    virtual void
    pre (const ::metadata::orcid_person&);

    // Elements.
    //
    virtual bool
    orcid_identifier_next ();

    virtual const ::metadata::orcid_identifier&
    orcid_identifier ();

    public:
    struct orcid_person_simpl_state
    {
      const ::metadata::orcid_person* orcid_person_;
      ::metadata::orcid_person::orcid_identifier_const_iterator orcid_identifier_;
      ::metadata::orcid_person::orcid_identifier_const_iterator orcid_identifier_end_;
    };

    orcid_person_simpl_state orcid_person_simpl_state_;
  };

  class classification_simpl: public classification_sskel
  {
    public:
    virtual void
    pre (const ::metadata::classification&);

    // Elements.
    //
    virtual ::std::string
    classification_number ();

    virtual unsigned int
    line ();

    virtual unsigned int
    variant ();

    virtual unsigned int
    branch ();

    virtual unsigned int
    version ();

    public:
    struct classification_simpl_state
    {
      const ::metadata::classification* classification_;
    };

    classification_simpl_state classification_simpl_state_;
  };

  class curation_simpl: public curation_sskel
  {
    public:
    virtual void
    pre (const ::metadata::curation&);

    // Attributes.
    //
    virtual bool
    curated_present ();

    virtual bool
    curated ();

    // Elements.
    //
    virtual ::xml_schema::date_time
    created ();

    virtual ::xml_schema::date_time
    last_modified ();

    virtual choice_arm_tag
    choice_arm ();

    virtual const ::metadata::classification&
    classification ();

    virtual ::std::string
    version ();

    virtual const ::metadata::orcid_person&
    creator ();

    virtual const ::metadata::orcid_person&
    current_contact ();

    virtual bool
    curator_present ();

    virtual const ::metadata::orcid_person&
    curator ();

    virtual const ::metadata::orcid_person&
    last_modified_by ();

    public:
    struct curation_simpl_state
    {
      const ::metadata::curation* curation_;
    };

    curation_simpl_state curation_simpl_state_;
  };

  class citation_simpl: public citation_sskel
  {
    public:
    virtual void
    pre (const ::metadata::citation&);

    // Elements.
    //
    virtual bool
    text_present ();

    virtual ::std::string
    text ();

    virtual bool
    DOI_present ();

    virtual ::std::string
    DOI ();

    virtual bool
    URL_next ();

    virtual const ::metadata::URL&
    URL ();

    virtual bool
    PMID_present ();

    virtual ::std::string
    PMID ();

    virtual bool
    PMCID_present ();

    virtual ::std::string
    PMCID ();

    virtual bool
    arXiv_present ();

    virtual ::std::string
    arXiv ();

    virtual bool
    notes_present ();

    virtual ::std::string
    notes ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct citation_simpl_state
    {
      const ::metadata::citation* citation_;
      ::metadata::citation::URL_const_iterator URL_;
      ::metadata::citation::URL_const_iterator URL_end_;
    };

    citation_simpl_state citation_simpl_state_;
  };

  class data_origin_simpl: public data_origin_sskel
  {
    public:
    virtual void
    pre (const ::metadata::data_origin&);

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned long long
    ID ();

    // Elements.
    //
    virtual bool
    instrumentation_information_present ();

    virtual ::std::string
    instrumentation_information ();

    virtual bool
    experimental_protocol_present ();

    virtual ::std::string
    experimental_protocol ();

    virtual bool
    citation_next ();

    virtual const ::metadata::citation&
    citation ();

    virtual bool
    xpath_present ();

    virtual ::std::string
    xpath ();

    virtual bool
    notes_present ();

    virtual ::std::string
    notes ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct data_origin_simpl_state
    {
      const ::metadata::data_origin* data_origin_;
      ::metadata::data_origin::citation_const_iterator citation_;
      ::metadata::data_origin::citation_const_iterator citation_end_;
    };

    data_origin_simpl_state data_origin_simpl_state_;
  };

  class data_origins_simpl: public data_origins_sskel
  {
    public:
    virtual void
    pre (const ::metadata::data_origins&);

    // Elements.
    //
    virtual bool
    data_origin_next ();

    virtual const ::metadata::data_origin&
    data_origin ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct data_origins_simpl_state
    {
      const ::metadata::data_origins* data_origins_;
      ::metadata::data_origins::data_origin_const_iterator data_origin_;
      ::metadata::data_origins::data_origin_const_iterator data_origin_end_;
    };

    data_origins_simpl_state data_origins_simpl_state_;
  };

  class data_analysis_simpl: public data_analysis_sskel
  {
    public:
    virtual void
    pre (const ::metadata::data_analysis&);

    // Elements.
    //
    virtual bool
    URL_present ();

    virtual const ::metadata::URL&
    URL ();

    virtual bool
    citation_present ();

    virtual const ::metadata::citation&
    citation ();

    virtual bool
    software_present ();

    virtual const ::metadata::software&
    software ();

    virtual bool
    xpath_present ();

    virtual ::std::string
    xpath ();

    virtual bool
    notes_present ();

    virtual ::std::string
    notes ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct data_analysis_simpl_state
    {
      const ::metadata::data_analysis* data_analysis_;
    };

    data_analysis_simpl_state data_analysis_simpl_state_;
  };

  class software_simpl: public software_sskel
  {
    public:
    virtual void
    pre (const ::metadata::software&);

    // Elements.
    //
    virtual bool
    software_name_present ();

    virtual ::std::string
    software_name ();

    virtual bool
    software_version_present ();

    virtual ::std::string
    software_version ();

    virtual bool
    software_input_configuration_present ();

    virtual const ::common::custom&
    software_input_configuration ();

    virtual bool
    name_present ();

    virtual ::std::string
    name ();

    virtual bool
    version_present ();

    virtual ::std::string
    version ();

    virtual bool
    input_configuration_present ();

    virtual const ::common::custom&
    input_configuration ();

    virtual bool
    URL_present ();

    virtual const ::metadata::URL&
    URL ();

    virtual bool
    creator_present ();

    virtual const ::metadata::orcid_person&
    creator ();

    virtual bool
    citation_present ();

    virtual const ::metadata::citation&
    citation ();

    virtual bool
    user_present ();

    virtual const ::metadata::orcid_person&
    user ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct software_simpl_state
    {
      const ::metadata::software* software_;
    };

    software_simpl_state software_simpl_state_;
  };

  class species_simpl: public species_sskel
  {
    public:
    species_simpl ();

    virtual void
    pre (const ::metadata::species&);

    // Attributes.
    //
    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID ();

    public:
    ::xml_schema::string_simpl base_impl_;

    public:
    struct species_simpl_state
    {
      const ::metadata::species* species_;
    };

    species_simpl_state species_simpl_state_;
  };

  class disease_simpl: public disease_sskel
  {
    public:
    disease_simpl ();

    virtual void
    pre (const ::metadata::disease&);

    // Attributes.
    //
    virtual bool
    EFO_ID_present ();

    virtual ::std::string
    EFO_ID ();

    virtual bool
    DOID_ID_present ();

    virtual ::std::string
    DOID_ID ();

    public:
    ::xml_schema::string_simpl base_impl_;

    public:
    struct disease_simpl_state
    {
      const ::metadata::disease* disease_;
    };

    disease_simpl_state disease_simpl_state_;
  };

  class patient_derived_simpl: public patient_derived_sskel
  {
    public:
    patient_derived_simpl ();

    virtual void
    pre (const ::metadata::patient_derived&);

    // Attributes.
    //
    virtual bool
    patient_ID_present ();

    virtual ::std::string
    patient_ID ();

    public:
    ::xml_schema::boolean_simpl base_impl_;

    public:
    struct patient_derived_simpl_state
    {
      const ::metadata::patient_derived* patient_derived_;
    };

    patient_derived_simpl_state patient_derived_simpl_state_;
  };

  class cell_origin_simpl: public cell_origin_sskel
  {
    public:
    virtual void
    pre (const ::metadata::cell_origin&);

    // Elements.
    //
    virtual bool
    BTO_ID_present ();

    virtual ::std::string
    BTO_ID ();

    virtual bool
    CLO_ID_present ();

    virtual ::std::string
    CLO_ID ();

    virtual bool
    species_present ();

    virtual const ::metadata::species&
    species ();

    virtual bool
    strain_present ();

    virtual ::std::string
    strain ();

    virtual bool
    organ_present ();

    virtual ::std::string
    organ ();

    virtual bool
    disease_present ();

    virtual const ::metadata::disease&
    disease ();

    virtual bool
    morphology_present ();

    virtual ::std::string
    morphology ();

    virtual bool
    patient_derived_present ();

    virtual const ::metadata::patient_derived&
    patient_derived ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct cell_origin_simpl_state
    {
      const ::metadata::cell_origin* cell_origin_;
    };

    cell_origin_simpl_state cell_origin_simpl_state_;
  };

  class MultiCellDB_simpl: public MultiCellDB_sskel
  {
    public:
    virtual void
    pre (const ::metadata::MultiCellDB&);

    // Elements.
    //
    virtual bool
    ID_present ();

    virtual ::std::string
    ID ();

    virtual bool
    name_present ();

    virtual ::std::string
    name ();

    public:
    struct MultiCellDB_simpl_state
    {
      const ::metadata::MultiCellDB* MultiCellDB_;
    };

    MultiCellDB_simpl_state MultiCellDB_simpl_state_;
  };

  class rights_simpl: public rights_sskel
  {
    public:
    virtual void
    pre (const ::metadata::rights&);

    // Elements.
    //
    virtual bool
    license_next ();

    virtual const ::metadata::license&
    license ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct rights_simpl_state
    {
      const ::metadata::rights* rights_;
      ::metadata::rights::license_const_iterator license_;
      ::metadata::rights::license_const_iterator license_end_;
    };

    rights_simpl_state rights_simpl_state_;
  };

  class license_simpl: public license_sskel
  {
    public:
    virtual void
    pre (const ::metadata::license&);

    // Elements.
    //
    virtual const ::metadata::LicenseDocument&
    LicenseDocument ();

    virtual bool
    notes_present ();

    virtual ::std::string
    notes ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct license_simpl_state
    {
      const ::metadata::license* license_;
    };

    license_simpl_state license_simpl_state_;
  };

  class LicenseDocument_simpl: public LicenseDocument_sskel
  {
    public:
    virtual void
    pre (const ::metadata::LicenseDocument&);

    // Elements.
    //
    virtual ::std::string
    name ();

    virtual bool
    URL_present ();

    virtual const ::metadata::URL&
    URL ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct LicenseDocument_simpl_state
    {
      const ::metadata::LicenseDocument* LicenseDocument_;
    };

    LicenseDocument_simpl_state LicenseDocument_simpl_state_;
  };

  class metadata_simpl: public metadata_sskel
  {
    public:
    virtual void
    pre (const ::metadata::metadata&);

    // Elements.
    //
    virtual bool
    MultiCellDB_present ();

    virtual const ::metadata::MultiCellDB&
    MultiCellDB ();

    virtual bool
    description_present ();

    virtual ::std::string
    description ();

    virtual bool
    software_present ();

    virtual const ::metadata::software&
    software ();

    virtual bool
    citation_present ();

    virtual const ::metadata::citation&
    citation ();

    virtual bool
    curation_present ();

    virtual const ::metadata::curation&
    curation ();

    virtual bool
    data_origins_present ();

    virtual const ::metadata::data_origins&
    data_origins ();

    virtual bool
    data_analysis_next ();

    virtual const ::metadata::data_analysis&
    data_analysis ();

    virtual const ::metadata::rights&
    rights ();

    virtual bool
    cell_origin_present ();

    virtual const ::metadata::cell_origin&
    cell_origin ();

    virtual bool
    current_time_present ();

    virtual const ::common::units_decimal_nonnegative&
    current_time ();

    virtual bool
    current_runtime_present ();

    virtual const ::common::units_decimal_nonnegative&
    current_runtime ();

    virtual bool
    created_present ();

    virtual ::xml_schema::date_time
    created ();

    virtual bool
    last_modified_present ();

    virtual ::xml_schema::date_time
    last_modified ();

    virtual bool
    notes_present ();

    virtual ::std::string
    notes ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct metadata_simpl_state
    {
      const ::metadata::metadata* metadata_;
      ::metadata::metadata::data_analysis_const_iterator data_analysis_;
      ::metadata::metadata::data_analysis_const_iterator data_analysis_end_;
    };

    metadata_simpl_state metadata_simpl_state_;
  };
}

#ifdef METADATA_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // METADATA_SIMPL_HPP
