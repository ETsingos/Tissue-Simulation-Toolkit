// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VARIABLES_SSKEL_HPP
#define VARIABLES_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace variables
{
  class amount_type_sskel;
  class variable_sskel;
  class material_amount_sskel;
  class physical_parameter_set_sskel;
  class physical_conditions_sskel;
  class conditions_sskel;
  class system_sskel;
  class experimental_conditions_sskel;
  class data_vector_sskel;
  class data_sskel;
  class list_of_variables_sskel;
  class transition_threshold_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map-load.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "variables.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;
  using ::xsde::cxx::serializer::validating::serializer_imap_buckets;
  using ::xsde::cxx::serializer::validating::serializer_imap_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;
  typedef xsde::cxx::serializer::schema serializer_schema;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "common-sskel.hpp"

namespace variables
{
  class amount_type_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::amount_type&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    amount_type_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    amount_type_sskel* amount_type_impl_;
    amount_type_sskel (amount_type_sskel*, void*);

    protected:
    static const char* const _xsde_amount_type_sskel_enums_[12UL];
  };

  class variable_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::variable&) = 0;

    // Attributes.
    //
    virtual ::std::string
    name () = 0;

    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID () = 0;

    virtual bool
    type_present ();

    virtual const ::variables::amount_type&
    type () = 0;

    virtual bool
    ChEBI_ID_present ();

    virtual ::std::string
    ChEBI_ID () = 0;

    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID () = 0;

    virtual bool
    DrugBank_ID_present ();

    virtual ::std::string
    DrugBank_ID () = 0;

    virtual bool
    GMO_ID_present ();

    virtual ::std::string
    GMO_ID () = 0;

    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID () = 0;

    virtual bool
    UniProt_ID_present ();

    virtual ::std::string
    UniProt_ID () = 0;

    virtual bool
    PR_ID_present ();

    virtual ::std::string
    PR_ID () = 0;

    virtual bool
    any_attribute_next ();

    virtual void
    any_attribute (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any_attribute ();

    // Elements.
    //
    virtual bool
    material_amount_present ();

    virtual const ::variables::material_amount&
    material_amount () = 0;

    virtual bool
    physical_parameter_set_present ();

    virtual const ::variables::physical_parameter_set&
    physical_parameter_set () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* name */,
                 ::xml_schema::string_sskel& /* units */,
                 ::xml_schema::unsigned_long_sskel& /* ID */,
                 ::variables::amount_type_sskel& /* type */,
                 ::xml_schema::string_sskel& /* ChEBI_ID */,
                 ::xml_schema::string_sskel& /* MeSH_ID */,
                 ::xml_schema::string_sskel& /* DrugBank_ID */,
                 ::xml_schema::string_sskel& /* GMO_ID */,
                 ::xml_schema::string_sskel& /* GO_ID */,
                 ::xml_schema::string_sskel& /* UniProt_ID */,
                 ::xml_schema::string_sskel& /* PR_ID */,
                 ::variables::material_amount_sskel& /* material_amount */,
                 ::variables::physical_parameter_set_sskel& /* physical_parameter_set */);

    void
    serializer_maps (::xml_schema::serializer_map& /* material_amount */,
                     ::xml_schema::serializer_map& /* physical_parameter_set */);

    // Individual attribute serializers.
    //
    void
    name_serializer (::xml_schema::string_sskel&);

    void
    units_serializer (::xml_schema::string_sskel&);

    void
    ID_serializer (::xml_schema::unsigned_long_sskel&);

    void
    type_serializer (::variables::amount_type_sskel&);

    void
    ChEBI_ID_serializer (::xml_schema::string_sskel&);

    void
    MeSH_ID_serializer (::xml_schema::string_sskel&);

    void
    DrugBank_ID_serializer (::xml_schema::string_sskel&);

    void
    GMO_ID_serializer (::xml_schema::string_sskel&);

    void
    GO_ID_serializer (::xml_schema::string_sskel&);

    void
    UniProt_ID_serializer (::xml_schema::string_sskel&);

    void
    PR_ID_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    material_amount_serializer (::variables::material_amount_sskel&);

    void
    material_amount_serializer (::xml_schema::serializer_map&);

    void
    physical_parameter_set_serializer (::variables::physical_parameter_set_sskel&);

    void
    physical_parameter_set_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    variable_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    variable_sskel* variable_impl_;
    variable_sskel (variable_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::string_sskel* units_serializer_;
    ::xml_schema::unsigned_long_sskel* ID_serializer_;
    ::variables::amount_type_sskel* type_serializer_;
    ::xml_schema::string_sskel* ChEBI_ID_serializer_;
    ::xml_schema::string_sskel* MeSH_ID_serializer_;
    ::xml_schema::string_sskel* DrugBank_ID_serializer_;
    ::xml_schema::string_sskel* GMO_ID_serializer_;
    ::xml_schema::string_sskel* GO_ID_serializer_;
    ::xml_schema::string_sskel* UniProt_ID_serializer_;
    ::xml_schema::string_sskel* PR_ID_serializer_;
    ::variables::material_amount_sskel* material_amount_serializer_;
    ::xml_schema::serializer_map* material_amount_serializer_map_;

    ::variables::physical_parameter_set_sskel* physical_parameter_set_serializer_;
    ::xml_schema::serializer_map* physical_parameter_set_serializer_map_;
  };

  class material_amount_sskel: public ::common::units_decimal_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::material_amount&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual const ::variables::amount_type&
    type () = 0;

    virtual bool
    scale_units_present ();

    virtual ::std::string
    scale_units () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::variables::amount_type_sskel& /* type */,
                 ::xml_schema::string_sskel& /* scale_units */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::variables::amount_type_sskel&);

    void
    scale_units_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    material_amount_sskel (::common::units_decimal_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_decimal&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    material_amount_sskel* material_amount_impl_;
    material_amount_sskel (material_amount_sskel*, void*);

    protected:
    ::variables::amount_type_sskel* type_serializer_;
    ::xml_schema::string_sskel* scale_units_serializer_;
  };

  class physical_parameter_set_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::physical_parameter_set&) = 0;

    // Elements.
    //
    virtual bool
    conditions_present ();

    virtual const ::variables::physical_conditions&
    conditions () = 0;

    virtual bool
    diffusion_coefficient_present ();

    virtual const ::common::units_decimal&
    diffusion_coefficient () = 0;

    virtual bool
    decay_rate_present ();

    virtual const ::common::units_decimal&
    decay_rate () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::variables::physical_conditions_sskel& /* conditions */,
                 ::common::units_decimal_sskel& /* diffusion_coefficient */,
                 ::common::units_decimal_sskel& /* decay_rate */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* conditions */,
                     ::xml_schema::serializer_map& /* diffusion_coefficient */,
                     ::xml_schema::serializer_map& /* decay_rate */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    conditions_serializer (::variables::physical_conditions_sskel&);

    void
    conditions_serializer (::xml_schema::serializer_map&);

    void
    diffusion_coefficient_serializer (::common::units_decimal_sskel&);

    void
    diffusion_coefficient_serializer (::xml_schema::serializer_map&);

    void
    decay_rate_serializer (::common::units_decimal_sskel&);

    void
    decay_rate_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    physical_parameter_set_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    physical_parameter_set_sskel* physical_parameter_set_impl_;
    physical_parameter_set_sskel (physical_parameter_set_sskel*, void*);

    protected:
    ::variables::physical_conditions_sskel* conditions_serializer_;
    ::xml_schema::serializer_map* conditions_serializer_map_;

    ::common::units_decimal_sskel* diffusion_coefficient_serializer_;
    ::xml_schema::serializer_map* diffusion_coefficient_serializer_map_;

    ::common::units_decimal_sskel* decay_rate_serializer_;
    ::xml_schema::serializer_map* decay_rate_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class physical_conditions_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::physical_conditions&) = 0;

    // Elements.
    //
    virtual bool
    temperature_present ();

    virtual const ::common::units_decimal&
    temperature () = 0;

    virtual bool
    mechanical_pressure_present ();

    virtual const ::common::units_decimal&
    mechanical_pressure () = 0;

    virtual bool
    acidity_present ();

    virtual const ::common::units_decimal&
    acidity () = 0;

    virtual bool
    pH_present ();

    virtual const ::common::units_decimal&
    pH () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::units_decimal_sskel& /* temperature */,
                 ::common::units_decimal_sskel& /* mechanical_pressure */,
                 ::common::units_decimal_sskel& /* acidity */,
                 ::common::units_decimal_sskel& /* pH */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* temperature */,
                     ::xml_schema::serializer_map& /* mechanical_pressure */,
                     ::xml_schema::serializer_map& /* acidity */,
                     ::xml_schema::serializer_map& /* pH */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    temperature_serializer (::common::units_decimal_sskel&);

    void
    temperature_serializer (::xml_schema::serializer_map&);

    void
    mechanical_pressure_serializer (::common::units_decimal_sskel&);

    void
    mechanical_pressure_serializer (::xml_schema::serializer_map&);

    void
    acidity_serializer (::common::units_decimal_sskel&);

    void
    acidity_serializer (::xml_schema::serializer_map&);

    void
    pH_serializer (::common::units_decimal_sskel&);

    void
    pH_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    physical_conditions_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    physical_conditions_sskel* physical_conditions_impl_;
    physical_conditions_sskel (physical_conditions_sskel*, void*);

    protected:
    ::common::units_decimal_sskel* temperature_serializer_;
    ::xml_schema::serializer_map* temperature_serializer_map_;

    ::common::units_decimal_sskel* mechanical_pressure_serializer_;
    ::xml_schema::serializer_map* mechanical_pressure_serializer_map_;

    ::common::units_decimal_sskel* acidity_serializer_;
    ::xml_schema::serializer_map* acidity_serializer_map_;

    ::common::units_decimal_sskel* pH_serializer_;
    ::xml_schema::serializer_map* pH_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class conditions_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::conditions&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    conditions_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    conditions_sskel* conditions_impl_;
    conditions_sskel (conditions_sskel*, void*);

    protected:
    static const char* const _xsde_conditions_sskel_enums_[3UL];
  };

  class system_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::system&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    system_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    system_sskel* system_impl_;
    system_sskel (system_sskel*, void*);

    protected:
    static const char* const _xsde_system_sskel_enums_[4UL];
  };

  class experimental_conditions_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::experimental_conditions&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual ::std::string
    type () = 0;

    // Elements.
    //
    virtual bool
    dimensionality_present ();

    virtual unsigned short
    dimensionality () = 0;

    virtual bool
    system_present ();

    virtual const ::variables::system&
    system () = 0;

    virtual bool
    conditions_present ();

    virtual const ::variables::conditions&
    conditions () = 0;

    virtual bool
    surface_variable_next ();

    virtual const ::variables::variable&
    surface_variable () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* type */,
                 ::xml_schema::unsigned_short_sskel& /* dimensionality */,
                 ::variables::system_sskel& /* system */,
                 ::variables::conditions_sskel& /* conditions */,
                 ::variables::variable_sskel& /* surface_variable */);

    void
    serializer_maps (::xml_schema::serializer_map& /* dimensionality */,
                     ::xml_schema::serializer_map& /* system */,
                     ::xml_schema::serializer_map& /* conditions */,
                     ::xml_schema::serializer_map& /* surface_variable */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    dimensionality_serializer (::xml_schema::unsigned_short_sskel&);

    void
    dimensionality_serializer (::xml_schema::serializer_map&);

    void
    system_serializer (::variables::system_sskel&);

    void
    system_serializer (::xml_schema::serializer_map&);

    void
    conditions_serializer (::variables::conditions_sskel&);

    void
    conditions_serializer (::xml_schema::serializer_map&);

    void
    surface_variable_serializer (::variables::variable_sskel&);

    void
    surface_variable_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    experimental_conditions_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    experimental_conditions_sskel* experimental_conditions_impl_;
    experimental_conditions_sskel (experimental_conditions_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* type_serializer_;
    ::xml_schema::unsigned_short_sskel* dimensionality_serializer_;
    ::xml_schema::serializer_map* dimensionality_serializer_map_;

    ::variables::system_sskel* system_serializer_;
    ::xml_schema::serializer_map* system_serializer_map_;

    ::variables::conditions_sskel* conditions_serializer_;
    ::xml_schema::serializer_map* conditions_serializer_map_;

    ::variables::variable_sskel* surface_variable_serializer_;
    ::xml_schema::serializer_map* surface_variable_serializer_map_;
  };

  class data_vector_sskel: public ::common::units_double_list_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::data_vector&) = 0;

    // Attributes.
    //
    virtual bool
    voxel_ID_present ();

    virtual const ::common::unsigned_int_list&
    voxel_ID () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::double_sskel& /* double_list item */,
                 ::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::common::unsigned_int_list_sskel& /* voxel_ID */);

    // Individual attribute serializers.
    //
    void
    voxel_ID_serializer (::common::unsigned_int_list_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_vector_sskel (::common::units_double_list_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::units_double_list&);

    virtual ::std::string
    units ();

    virtual ::std::string
    measurement_type ();

    virtual double
    uncertainty ();

    virtual double
    negative_uncertainty ();

    virtual double
    positive_uncertainty ();

    virtual double
    uncertainty_percentage ();

    virtual double
    negative_uncertainty_percentage ();

    virtual double
    positive_uncertainty_percentage ();

    virtual double
    median ();

    virtual double
    standard_deviation ();

    virtual const ::common::two_doubles&
    interquartile_range ();

    virtual const ::common::two_doubles&
    range ();

    virtual double
    min ();

    virtual double
    max ();

    virtual double
    standard_error ();

    virtual double
    standard_error_of_the_mean ();

    virtual int
    number_obs ();

    virtual double
    skewnesss ();

    virtual double
    kurtosis ();

    virtual void
    _serialize_attributes ();

    protected:
    data_vector_sskel* data_vector_impl_;
    data_vector_sskel (data_vector_sskel*, void*);

    protected:
    ::common::unsigned_int_list_sskel* voxel_ID_serializer_;
  };

  class data_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::data&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual const ::common::data_storage_formats&
    type () = 0;

    // Elements.
    //
    virtual bool
    filename_present ();

    virtual ::std::string
    filename () = 0;

    virtual bool
    data_vector_next ();

    virtual const ::variables::data_vector&
    data_vector () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::data_storage_formats_sskel& /* type */,
                 ::xml_schema::string_sskel& /* filename */,
                 ::variables::data_vector_sskel& /* data_vector */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* filename */,
                     ::xml_schema::serializer_map& /* data_vector */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::common::data_storage_formats_sskel&);

    // Individual element serializers.
    //
    void
    filename_serializer (::xml_schema::string_sskel&);

    void
    filename_serializer (::xml_schema::serializer_map&);

    void
    data_vector_serializer (::variables::data_vector_sskel&);

    void
    data_vector_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    data_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    data_sskel* data_impl_;
    data_sskel (data_sskel*, void*);

    protected:
    ::common::data_storage_formats_sskel* type_serializer_;
    ::xml_schema::string_sskel* filename_serializer_;
    ::xml_schema::serializer_map* filename_serializer_map_;

    ::variables::data_vector_sskel* data_vector_serializer_;
    ::xml_schema::serializer_map* data_vector_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class list_of_variables_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::list_of_variables&) = 0;

    // Elements.
    //
    virtual bool
    variable_next () = 0;

    virtual const ::variables::variable&
    variable () = 0;

    virtual bool
    physical_parameter_set_present ();

    virtual const ::variables::physical_parameter_set&
    physical_parameter_set () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::variables::variable_sskel& /* variable */,
                 ::variables::physical_parameter_set_sskel& /* physical_parameter_set */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* variable */,
                     ::xml_schema::serializer_map& /* physical_parameter_set */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    variable_serializer (::variables::variable_sskel&);

    void
    variable_serializer (::xml_schema::serializer_map&);

    void
    physical_parameter_set_serializer (::variables::physical_parameter_set_sskel&);

    void
    physical_parameter_set_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    list_of_variables_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    list_of_variables_sskel* list_of_variables_impl_;
    list_of_variables_sskel (list_of_variables_sskel*, void*);

    protected:
    ::variables::variable_sskel* variable_serializer_;
    ::xml_schema::serializer_map* variable_serializer_map_;

    ::variables::physical_parameter_set_sskel* physical_parameter_set_serializer_;
    ::xml_schema::serializer_map* physical_parameter_set_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class transition_threshold_sskel: public ::common::transition_threshold_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::variables::transition_threshold&) = 0;

    // Attributes.
    //
    virtual bool
    ChEBI_ID_present ();

    virtual ::std::string
    ChEBI_ID () = 0;

    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID () = 0;

    virtual bool
    DrugBank_ID_present ();

    virtual ::std::string
    DrugBank_ID () = 0;

    virtual bool
    GMO_ID_present ();

    virtual ::std::string
    GMO_ID () = 0;

    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID () = 0;

    virtual bool
    UniProt_ID_present ();

    virtual ::std::string
    UniProt_ID () = 0;

    virtual bool
    PR_ID_present ();

    virtual ::std::string
    PR_ID () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* units */,
                 ::xml_schema::string_sskel& /* measurement_type */,
                 ::xml_schema::double_sskel& /* uncertainty */,
                 ::xml_schema::double_sskel& /* negative_uncertainty */,
                 ::xml_schema::double_sskel& /* positive_uncertainty */,
                 ::xml_schema::double_sskel& /* uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* negative_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* positive_uncertainty_percentage */,
                 ::xml_schema::double_sskel& /* median */,
                 ::xml_schema::double_sskel& /* standard_deviation */,
                 ::common::two_doubles_sskel& /* interquartile_range */,
                 ::common::two_doubles_sskel& /* range */,
                 ::xml_schema::double_sskel& /* min */,
                 ::xml_schema::double_sskel& /* max */,
                 ::xml_schema::double_sskel& /* standard_error */,
                 ::xml_schema::double_sskel& /* standard_error_of_the_mean */,
                 ::xml_schema::int_sskel& /* number_obs */,
                 ::xml_schema::double_sskel& /* skewnesss */,
                 ::xml_schema::double_sskel& /* kurtosis */,
                 ::xml_schema::string_sskel& /* quantity */,
                 ::common::threshold_type_sskel& /* type */,
                 ::xml_schema::unsigned_long_sskel& /* variable_ID */,
                 ::xml_schema::string_sskel& /* ChEBI_ID */,
                 ::xml_schema::string_sskel& /* MeSH_ID */,
                 ::xml_schema::string_sskel& /* DrugBank_ID */,
                 ::xml_schema::string_sskel& /* GMO_ID */,
                 ::xml_schema::string_sskel& /* GO_ID */,
                 ::xml_schema::string_sskel& /* UniProt_ID */,
                 ::xml_schema::string_sskel& /* PR_ID */);

    // Individual attribute serializers.
    //
    void
    ChEBI_ID_serializer (::xml_schema::string_sskel&);

    void
    MeSH_ID_serializer (::xml_schema::string_sskel&);

    void
    DrugBank_ID_serializer (::xml_schema::string_sskel&);

    void
    GMO_ID_serializer (::xml_schema::string_sskel&);

    void
    GO_ID_serializer (::xml_schema::string_sskel&);

    void
    UniProt_ID_serializer (::xml_schema::string_sskel&);

    void
    PR_ID_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    transition_threshold_sskel (::common::transition_threshold_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::common::transition_threshold&);

    virtual ::std::string
    quantity ();

    virtual const ::common::threshold_type&
    type ();

    virtual unsigned long long
    variable_ID ();

    virtual void
    _serialize_attributes ();

    protected:
    transition_threshold_sskel* transition_threshold_impl_;
    transition_threshold_sskel (transition_threshold_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* ChEBI_ID_serializer_;
    ::xml_schema::string_sskel* MeSH_ID_serializer_;
    ::xml_schema::string_sskel* DrugBank_ID_serializer_;
    ::xml_schema::string_sskel* GMO_ID_serializer_;
    ::xml_schema::string_sskel* GO_ID_serializer_;
    ::xml_schema::string_sskel* UniProt_ID_serializer_;
    ::xml_schema::string_sskel* PR_ID_serializer_;
  };
}

#include "variables-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // VARIABLES_SSKEL_HPP
