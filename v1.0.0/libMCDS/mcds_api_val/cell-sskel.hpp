// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CELL_SSKEL_HPP
#define CELL_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace cell
{
  class population_definition_sskel;
  class population_definitions_sskel;
  class cell_sskel;
  class cell_population_individual_sskel;
  class cell_population_aggregate_sskel;
  class population_vector_sskel;
  class cell_populations_sskel;
  class cellular_information_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map-load.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "cell.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;
  using ::xsde::cxx::serializer::validating::serializer_imap_buckets;
  using ::xsde::cxx::serializer::validating::serializer_imap_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;
  typedef xsde::cxx::serializer::schema serializer_schema;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "common-sskel.hpp"

#include "phenotype_dataset-sskel.hpp"

#include "mesh-sskel.hpp"

#include "cell_line-sskel.hpp"

#include "state-sskel.hpp"

namespace cell
{
  class population_definition_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell::population_definition&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    virtual bool
    name_present ();

    virtual ::std::string
    name () = 0;

    virtual bool
    units_present ();

    virtual ::std::string
    units () = 0;

    // Elements.
    //
    virtual bool
    phenotype_dataset_present ();

    virtual const ::phenotype_dataset::phenotype_dataset&
    phenotype_dataset () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::xml_schema::string_sskel& /* name */,
                 ::xml_schema::string_sskel& /* units */,
                 ::phenotype_dataset::phenotype_dataset_sskel& /* phenotype_dataset */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* phenotype_dataset */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    void
    name_serializer (::xml_schema::string_sskel&);

    void
    units_serializer (::xml_schema::string_sskel&);

    // Individual element serializers.
    //
    void
    phenotype_dataset_serializer (::phenotype_dataset::phenotype_dataset_sskel&);

    void
    phenotype_dataset_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    population_definition_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    population_definition_sskel* population_definition_impl_;
    population_definition_sskel (population_definition_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::string_sskel* units_serializer_;
    ::phenotype_dataset::phenotype_dataset_sskel* phenotype_dataset_serializer_;
    ::xml_schema::serializer_map* phenotype_dataset_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class population_definitions_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell::population_definitions&) = 0;

    // Elements.
    //
    virtual bool
    population_definition_next () = 0;

    virtual const ::cell::population_definition&
    population_definition () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::cell::population_definition_sskel& /* population_definition */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* population_definition */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual element serializers.
    //
    void
    population_definition_serializer (::cell::population_definition_sskel&);

    void
    population_definition_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    population_definitions_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    population_definitions_sskel* population_definitions_impl_;
    population_definitions_sskel (population_definitions_sskel*, void*);

    protected:
    ::cell::population_definition_sskel* population_definition_serializer_;
    ::xml_schema::serializer_map* population_definition_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class cell_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell::cell&) = 0;

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID () = 0;

    // Elements.
    //
    virtual bool
    phenotype_dataset_present ();

    virtual const ::phenotype_dataset::phenotype_dataset&
    phenotype_dataset () = 0;

    virtual bool
    state_present ();

    virtual const ::state::state&
    state () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::unsigned_int_sskel& /* ID */,
                 ::phenotype_dataset::phenotype_dataset_sskel& /* phenotype_dataset */,
                 ::state::state_sskel& /* state */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* phenotype_dataset */,
                     ::xml_schema::serializer_map& /* state */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    phenotype_dataset_serializer (::phenotype_dataset::phenotype_dataset_sskel&);

    void
    phenotype_dataset_serializer (::xml_schema::serializer_map&);

    void
    state_serializer (::state::state_sskel&);

    void
    state_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    cell_sskel* cell_impl_;
    cell_sskel (cell_sskel*, void*);

    protected:
    ::xml_schema::unsigned_int_sskel* ID_serializer_;
    ::phenotype_dataset::phenotype_dataset_sskel* phenotype_dataset_serializer_;
    ::xml_schema::serializer_map* phenotype_dataset_serializer_map_;

    ::state::state_sskel* state_serializer_;
    ::xml_schema::serializer_map* state_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class cell_population_individual_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell::cell_population_individual&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual ::std::string
    type () = 0;

    virtual bool
    population_ID_present ();

    virtual unsigned int
    population_ID () = 0;

    // Elements.
    //
    virtual bool
    cell_next ();

    virtual const ::cell::cell&
    cell () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* type */,
                 ::xml_schema::unsigned_int_sskel& /* population_ID */,
                 ::cell::cell_sskel& /* cell */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* cell */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::xml_schema::string_sskel&);

    void
    population_ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    cell_serializer (::cell::cell_sskel&);

    void
    cell_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_population_individual_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    cell_population_individual_sskel* cell_population_individual_impl_;
    cell_population_individual_sskel (cell_population_individual_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* type_serializer_;
    ::xml_schema::unsigned_int_sskel* population_ID_serializer_;
    ::cell::cell_sskel* cell_serializer_;
    ::xml_schema::serializer_map* cell_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class cell_population_aggregate_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell::cell_population_aggregate&) = 0;

    // Attributes.
    //
    virtual bool
    type_present ();

    virtual ::std::string
    type () = 0;

    virtual bool
    population_ID_present ();

    virtual unsigned int
    population_ID () = 0;

    // Elements.
    //
    virtual bool
    value_present ();

    virtual const ::common::units_decimal&
    value () = 0;

    virtual bool
    sequence_present ();

    virtual bool
    phenotype_dataset_present ();

    virtual const ::phenotype_dataset::phenotype_dataset&
    phenotype_dataset () = 0;

    virtual bool
    state_present ();

    virtual const ::state::state&
    state () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* type */,
                 ::xml_schema::unsigned_int_sskel& /* population_ID */,
                 ::common::units_decimal_sskel& /* value */,
                 ::phenotype_dataset::phenotype_dataset_sskel& /* phenotype_dataset */,
                 ::state::state_sskel& /* state */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* value */,
                     ::xml_schema::serializer_map& /* phenotype_dataset */,
                     ::xml_schema::serializer_map& /* state */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    type_serializer (::xml_schema::string_sskel&);

    void
    population_ID_serializer (::xml_schema::unsigned_int_sskel&);

    // Individual element serializers.
    //
    void
    value_serializer (::common::units_decimal_sskel&);

    void
    value_serializer (::xml_schema::serializer_map&);

    void
    phenotype_dataset_serializer (::phenotype_dataset::phenotype_dataset_sskel&);

    void
    phenotype_dataset_serializer (::xml_schema::serializer_map&);

    void
    state_serializer (::state::state_sskel&);

    void
    state_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_population_aggregate_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    cell_population_aggregate_sskel* cell_population_aggregate_impl_;
    cell_population_aggregate_sskel (cell_population_aggregate_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* type_serializer_;
    ::xml_schema::unsigned_int_sskel* population_ID_serializer_;
    ::common::units_decimal_sskel* value_serializer_;
    ::xml_schema::serializer_map* value_serializer_map_;

    ::phenotype_dataset::phenotype_dataset_sskel* phenotype_dataset_serializer_;
    ::xml_schema::serializer_map* phenotype_dataset_serializer_map_;

    ::state::state_sskel* state_serializer_;
    ::xml_schema::serializer_map* state_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class population_vector_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell::population_vector&) = 0;

    // Attributes.
    //
    virtual bool
    voxel_ID_present ();

    virtual const ::common::unsigned_int_list&
    voxel_ID () = 0;

    // Elements.
    //
    virtual bool
    value_present ();

    virtual const ::common::units_double_list&
    value () = 0;

    virtual bool
    cell_population_next ();

    virtual const ::cell::cell_population_aggregate&
    cell_population () = 0;

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::common::unsigned_int_list_sskel& /* voxel_ID */,
                 ::common::units_double_list_sskel& /* value */,
                 ::cell::cell_population_aggregate_sskel& /* cell_population */,
                 ::common::custom_sskel& /* custom */);

    void
    serializer_maps (::xml_schema::serializer_map& /* value */,
                     ::xml_schema::serializer_map& /* cell_population */,
                     ::xml_schema::serializer_map& /* custom */);

    // Individual attribute serializers.
    //
    void
    voxel_ID_serializer (::common::unsigned_int_list_sskel&);

    // Individual element serializers.
    //
    void
    value_serializer (::common::units_double_list_sskel&);

    void
    value_serializer (::xml_schema::serializer_map&);

    void
    cell_population_serializer (::cell::cell_population_aggregate_sskel&);

    void
    cell_population_serializer (::xml_schema::serializer_map&);

    void
    custom_serializer (::common::custom_sskel&);

    void
    custom_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    population_vector_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    population_vector_sskel* population_vector_impl_;
    population_vector_sskel (population_vector_sskel*, void*);

    protected:
    ::common::unsigned_int_list_sskel* voxel_ID_serializer_;
    ::common::units_double_list_sskel* value_serializer_;
    ::xml_schema::serializer_map* value_serializer_map_;

    ::cell::cell_population_aggregate_sskel* cell_population_serializer_;
    ::xml_schema::serializer_map* cell_population_serializer_map_;

    ::common::custom_sskel* custom_serializer_;
    ::xml_schema::serializer_map* custom_serializer_map_;
  };

  class cell_populations_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell::cell_populations&) = 0;

    // Elements.
    //
    virtual bool
    population_vector_next ();

    virtual const ::cell::population_vector&
    population_vector () = 0;

    virtual bool
    cell_population_present ();

    virtual const ::cell::cell_population_individual&
    cell_population () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::cell::population_vector_sskel& /* population_vector */,
                 ::cell::cell_population_individual_sskel& /* cell_population */);

    void
    serializer_maps (::xml_schema::serializer_map& /* population_vector */,
                     ::xml_schema::serializer_map& /* cell_population */);

    // Individual element serializers.
    //
    void
    population_vector_serializer (::cell::population_vector_sskel&);

    void
    population_vector_serializer (::xml_schema::serializer_map&);

    void
    cell_population_serializer (::cell::cell_population_individual_sskel&);

    void
    cell_population_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cell_populations_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    cell_populations_sskel* cell_populations_impl_;
    cell_populations_sskel (cell_populations_sskel*, void*);

    protected:
    ::cell::population_vector_sskel* population_vector_serializer_;
    ::xml_schema::serializer_map* population_vector_serializer_map_;

    ::cell::cell_population_individual_sskel* cell_population_serializer_;
    ::xml_schema::serializer_map* cell_population_serializer_map_;
  };

  class cellular_information_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::cell::cellular_information&) = 0;

    // Elements.
    //
    virtual bool
    DCLs_present ();

    virtual const ::cell_line::DCLs&
    DCLs () = 0;

    virtual bool
    population_definitions_present ();

    virtual const ::cell::population_definitions&
    population_definitions () = 0;

    virtual bool
    mesh_present ();

    virtual const ::mesh::mesh&
    mesh () = 0;

    virtual bool
    cell_populations_present ();

    virtual const ::cell::cell_populations&
    cell_populations () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::cell_line::DCLs_sskel& /* DCLs */,
                 ::cell::population_definitions_sskel& /* population_definitions */,
                 ::mesh::mesh_sskel& /* mesh */,
                 ::cell::cell_populations_sskel& /* cell_populations */);

    void
    serializer_maps (::xml_schema::serializer_map& /* DCLs */,
                     ::xml_schema::serializer_map& /* population_definitions */,
                     ::xml_schema::serializer_map& /* mesh */,
                     ::xml_schema::serializer_map& /* cell_populations */);

    // Individual element serializers.
    //
    void
    DCLs_serializer (::cell_line::DCLs_sskel&);

    void
    DCLs_serializer (::xml_schema::serializer_map&);

    void
    population_definitions_serializer (::cell::population_definitions_sskel&);

    void
    population_definitions_serializer (::xml_schema::serializer_map&);

    void
    mesh_serializer (::mesh::mesh_sskel&);

    void
    mesh_serializer (::xml_schema::serializer_map&);

    void
    cell_populations_serializer (::cell::cell_populations_sskel&);

    void
    cell_populations_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    cellular_information_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    cellular_information_sskel* cellular_information_impl_;
    cellular_information_sskel (cellular_information_sskel*, void*);

    protected:
    ::cell_line::DCLs_sskel* DCLs_serializer_;
    ::xml_schema::serializer_map* DCLs_serializer_map_;

    ::cell::population_definitions_sskel* population_definitions_serializer_;
    ::xml_schema::serializer_map* population_definitions_serializer_map_;

    ::mesh::mesh_sskel* mesh_serializer_;
    ::xml_schema::serializer_map* mesh_serializer_map_;

    ::cell::cell_populations_sskel* cell_populations_serializer_;
    ::xml_schema::serializer_map* cell_populations_serializer_map_;
  };
}

#include "cell-sskel.ipp"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // CELL_SSKEL_HPP
