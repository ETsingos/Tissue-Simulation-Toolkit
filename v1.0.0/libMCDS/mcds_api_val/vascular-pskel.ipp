// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace vascular
{
  // vascular_node_pskel
  //

  inline
  void vascular_node_pskel::
  boundary_node_parser (::xml_schema::boolean_pskel& p)
  {
    this->boundary_node_parser_ = &p;
  }

  inline
  void vascular_node_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::common::units_double_list_pskel& position,
           ::common::custom_pskel& custom,
           ::xml_schema::boolean_pskel& boundary_node)
  {
    this->ID_parser_ = &ID;
    this->position_parser_ = &position;
    this->custom_parser_ = &custom;
    this->boundary_node_parser_ = &boundary_node;
  }

  inline
  vascular_node_pskel::
  vascular_node_pskel (::mesh::node_pskel* tiein)
  : ::mesh::node_pskel (tiein, 0),
    vascular_node_impl_ (0),
    boundary_node_parser_ (0)
  {
  }

  inline
  vascular_node_pskel::
  vascular_node_pskel (vascular_node_pskel* impl, void*)
  : ::mesh::node_pskel (impl, 0),
    vascular_node_impl_ (impl),
    boundary_node_parser_ (0)
  {
  }

  // list_of_vascular_nodes_pskel
  //

  inline
  void list_of_vascular_nodes_pskel::
  vascular_node_parser (::vascular::vascular_node_pskel& p)
  {
    this->vascular_node_parser_ = &p;
  }

  inline
  void list_of_vascular_nodes_pskel::
  vascular_node_parser (::xml_schema::parser_map& m)
  {
    this->vascular_node_parser_map_ = &m;
  }

  inline
  void list_of_vascular_nodes_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void list_of_vascular_nodes_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void list_of_vascular_nodes_pskel::
  parsers (::vascular::vascular_node_pskel& vascular_node,
           ::common::custom_pskel& custom)
  {
    this->vascular_node_parser_ = &vascular_node;
    this->custom_parser_ = &custom;
  }

  inline
  void list_of_vascular_nodes_pskel::
  parser_maps (::xml_schema::parser_map& vascular_node,
               ::xml_schema::parser_map& custom)
  {
    this->vascular_node_parser_map_ = &vascular_node;
    this->custom_parser_map_ = &custom;
  }

  inline
  list_of_vascular_nodes_pskel::
  list_of_vascular_nodes_pskel ()
  : list_of_vascular_nodes_impl_ (0),
    vascular_node_parser_ (0),
    vascular_node_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  list_of_vascular_nodes_pskel::
  list_of_vascular_nodes_pskel (list_of_vascular_nodes_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    list_of_vascular_nodes_impl_ (impl),
    vascular_node_parser_ (0),
    vascular_node_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // boundary_node_pskel
  //

  inline
  void boundary_node_pskel::
  node_ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->node_ID_parser_ = &p;
  }

  inline
  void boundary_node_pskel::
  fluid_flow_velocity_parser (::common::units_decimal_pskel& p)
  {
    this->fluid_flow_velocity_parser_ = &p;
  }

  inline
  void boundary_node_pskel::
  fluid_flow_velocity_parser (::xml_schema::parser_map& m)
  {
    this->fluid_flow_velocity_parser_map_ = &m;
  }

  inline
  void boundary_node_pskel::
  variables_parser (::variables::list_of_variables_pskel& p)
  {
    this->variables_parser_ = &p;
  }

  inline
  void boundary_node_pskel::
  variables_parser (::xml_schema::parser_map& m)
  {
    this->variables_parser_map_ = &m;
  }

  inline
  void boundary_node_pskel::
  boundary_conditions_parser (::vascular::boundary_conditions_pskel& p)
  {
    this->boundary_conditions_parser_ = &p;
  }

  inline
  void boundary_node_pskel::
  boundary_conditions_parser (::xml_schema::parser_map& m)
  {
    this->boundary_conditions_parser_map_ = &m;
  }

  inline
  void boundary_node_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void boundary_node_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void boundary_node_pskel::
  parsers (::xml_schema::unsigned_int_pskel& node_ID,
           ::common::units_decimal_pskel& fluid_flow_velocity,
           ::variables::list_of_variables_pskel& variables,
           ::vascular::boundary_conditions_pskel& boundary_conditions,
           ::common::custom_pskel& custom)
  {
    this->node_ID_parser_ = &node_ID;
    this->fluid_flow_velocity_parser_ = &fluid_flow_velocity;
    this->variables_parser_ = &variables;
    this->boundary_conditions_parser_ = &boundary_conditions;
    this->custom_parser_ = &custom;
  }

  inline
  void boundary_node_pskel::
  parser_maps (::xml_schema::parser_map& fluid_flow_velocity,
               ::xml_schema::parser_map& variables,
               ::xml_schema::parser_map& boundary_conditions,
               ::xml_schema::parser_map& custom)
  {
    this->fluid_flow_velocity_parser_map_ = &fluid_flow_velocity;
    this->variables_parser_map_ = &variables;
    this->boundary_conditions_parser_map_ = &boundary_conditions;
    this->custom_parser_map_ = &custom;
  }

  inline
  boundary_node_pskel::
  boundary_node_pskel ()
  : boundary_node_impl_ (0),
    node_ID_parser_ (0),
    fluid_flow_velocity_parser_ (0),
    fluid_flow_velocity_parser_map_ (0),
    variables_parser_ (0),
    variables_parser_map_ (0),
    boundary_conditions_parser_ (0),
    boundary_conditions_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (4UL, v_all_first_)
  {
  }

  inline
  boundary_node_pskel::
  boundary_node_pskel (boundary_node_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    boundary_node_impl_ (impl),
    node_ID_parser_ (0),
    fluid_flow_velocity_parser_ (0),
    fluid_flow_velocity_parser_map_ (0),
    variables_parser_ (0),
    variables_parser_map_ (0),
    boundary_conditions_parser_ (0),
    boundary_conditions_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (4UL, v_all_first_)
  {
  }

  // list_of_boundary_nodes_pskel
  //

  inline
  void list_of_boundary_nodes_pskel::
  boundary_node_parser (::vascular::boundary_node_pskel& p)
  {
    this->boundary_node_parser_ = &p;
  }

  inline
  void list_of_boundary_nodes_pskel::
  boundary_node_parser (::xml_schema::parser_map& m)
  {
    this->boundary_node_parser_map_ = &m;
  }

  inline
  void list_of_boundary_nodes_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void list_of_boundary_nodes_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void list_of_boundary_nodes_pskel::
  parsers (::vascular::boundary_node_pskel& boundary_node,
           ::common::custom_pskel& custom)
  {
    this->boundary_node_parser_ = &boundary_node;
    this->custom_parser_ = &custom;
  }

  inline
  void list_of_boundary_nodes_pskel::
  parser_maps (::xml_schema::parser_map& boundary_node,
               ::xml_schema::parser_map& custom)
  {
    this->boundary_node_parser_map_ = &boundary_node;
    this->custom_parser_map_ = &custom;
  }

  inline
  list_of_boundary_nodes_pskel::
  list_of_boundary_nodes_pskel ()
  : list_of_boundary_nodes_impl_ (0),
    boundary_node_parser_ (0),
    boundary_node_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  list_of_boundary_nodes_pskel::
  list_of_boundary_nodes_pskel (list_of_boundary_nodes_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    list_of_boundary_nodes_impl_ (impl),
    boundary_node_parser_ (0),
    boundary_node_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // boundary_conditions_pskel
  //

  inline
  void boundary_conditions_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void boundary_conditions_pskel::
  boundary_condition_parser (::vascular::boundary_condition_pskel& p)
  {
    this->boundary_condition_parser_ = &p;
  }

  inline
  void boundary_conditions_pskel::
  boundary_condition_parser (::xml_schema::parser_map& m)
  {
    this->boundary_condition_parser_map_ = &m;
  }

  inline
  void boundary_conditions_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void boundary_conditions_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void boundary_conditions_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::vascular::boundary_condition_pskel& boundary_condition,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->boundary_condition_parser_ = &boundary_condition;
    this->custom_parser_ = &custom;
  }

  inline
  void boundary_conditions_pskel::
  parser_maps (::xml_schema::parser_map& boundary_condition,
               ::xml_schema::parser_map& custom)
  {
    this->boundary_condition_parser_map_ = &boundary_condition;
    this->custom_parser_map_ = &custom;
  }

  inline
  boundary_conditions_pskel::
  boundary_conditions_pskel ()
  : boundary_conditions_impl_ (0),
    ID_parser_ (0),
    boundary_condition_parser_ (0),
    boundary_condition_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  boundary_conditions_pskel::
  boundary_conditions_pskel (boundary_conditions_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    boundary_conditions_impl_ (impl),
    ID_parser_ (0),
    boundary_condition_parser_ (0),
    boundary_condition_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // boundary_type_pskel
  //

  inline
  boundary_type_pskel::
  boundary_type_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    boundary_type_impl_ (0)
  {
    this->_enumeration_facet (_xsde_boundary_type_pskel_enums_, 6UL);
  }

  inline
  boundary_type_pskel::
  boundary_type_pskel (boundary_type_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    boundary_type_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_boundary_type_pskel_enums_, 6UL);
  }

  // boundary_condition_pskel
  //

  inline
  void boundary_condition_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void boundary_condition_pskel::
  variable_ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->variable_ID_parser_ = &p;
  }

  inline
  void boundary_condition_pskel::
  boundary_type_parser (::vascular::boundary_type_pskel& p)
  {
    this->boundary_type_parser_ = &p;
  }

  inline
  void boundary_condition_pskel::
  boundary_type_parser (::xml_schema::parser_map& m)
  {
    this->boundary_type_parser_map_ = &m;
  }

  inline
  void boundary_condition_pskel::
  value_parser (::common::units_decimal_pskel& p)
  {
    this->value_parser_ = &p;
  }

  inline
  void boundary_condition_pskel::
  value_parser (::xml_schema::parser_map& m)
  {
    this->value_parser_map_ = &m;
  }

  inline
  void boundary_condition_pskel::
  direction_parser (::xml_schema::string_pskel& p)
  {
    this->direction_parser_ = &p;
  }

  inline
  void boundary_condition_pskel::
  direction_parser (::xml_schema::parser_map& m)
  {
    this->direction_parser_map_ = &m;
  }

  inline
  void boundary_condition_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void boundary_condition_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void boundary_condition_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::xml_schema::unsigned_int_pskel& variable_ID,
           ::vascular::boundary_type_pskel& boundary_type,
           ::common::units_decimal_pskel& value,
           ::xml_schema::string_pskel& direction,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->variable_ID_parser_ = &variable_ID;
    this->boundary_type_parser_ = &boundary_type;
    this->value_parser_ = &value;
    this->direction_parser_ = &direction;
    this->custom_parser_ = &custom;
  }

  inline
  void boundary_condition_pskel::
  parser_maps (::xml_schema::parser_map& boundary_type,
               ::xml_schema::parser_map& value,
               ::xml_schema::parser_map& direction,
               ::xml_schema::parser_map& custom)
  {
    this->boundary_type_parser_map_ = &boundary_type;
    this->value_parser_map_ = &value;
    this->direction_parser_map_ = &direction;
    this->custom_parser_map_ = &custom;
  }

  inline
  boundary_condition_pskel::
  boundary_condition_pskel ()
  : boundary_condition_impl_ (0),
    ID_parser_ (0),
    variable_ID_parser_ (0),
    boundary_type_parser_ (0),
    boundary_type_parser_map_ (0),
    value_parser_ (0),
    value_parser_map_ (0),
    direction_parser_ (0),
    direction_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  inline
  boundary_condition_pskel::
  boundary_condition_pskel (boundary_condition_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    boundary_condition_impl_ (impl),
    ID_parser_ (0),
    variable_ID_parser_ (0),
    boundary_type_parser_ (0),
    boundary_type_parser_map_ (0),
    value_parser_ (0),
    value_parser_map_ (0),
    direction_parser_ (0),
    direction_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // vascular_segments_pskel
  //

  inline
  void vascular_segments_pskel::
  vascular_segment_parser (::vascular::vascular_segment_pskel& p)
  {
    this->vascular_segment_parser_ = &p;
  }

  inline
  void vascular_segments_pskel::
  vascular_segment_parser (::xml_schema::parser_map& m)
  {
    this->vascular_segment_parser_map_ = &m;
  }

  inline
  void vascular_segments_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void vascular_segments_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void vascular_segments_pskel::
  parsers (::vascular::vascular_segment_pskel& vascular_segment,
           ::common::custom_pskel& custom)
  {
    this->vascular_segment_parser_ = &vascular_segment;
    this->custom_parser_ = &custom;
  }

  inline
  void vascular_segments_pskel::
  parser_maps (::xml_schema::parser_map& vascular_segment,
               ::xml_schema::parser_map& custom)
  {
    this->vascular_segment_parser_map_ = &vascular_segment;
    this->custom_parser_map_ = &custom;
  }

  inline
  vascular_segments_pskel::
  vascular_segments_pskel ()
  : vascular_segments_impl_ (0),
    vascular_segment_parser_ (0),
    vascular_segment_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  vascular_segments_pskel::
  vascular_segments_pskel (vascular_segments_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    vascular_segments_impl_ (impl),
    vascular_segment_parser_ (0),
    vascular_segment_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // vascular_segment_pskel
  //

  inline
  void vascular_segment_pskel::
  endpoint_1_parser (::vascular::endpoint_pskel& p)
  {
    this->endpoint_1_parser_ = &p;
  }

  inline
  void vascular_segment_pskel::
  endpoint_1_parser (::xml_schema::parser_map& m)
  {
    this->endpoint_1_parser_map_ = &m;
  }

  inline
  void vascular_segment_pskel::
  endpoint_2_parser (::vascular::endpoint_pskel& p)
  {
    this->endpoint_2_parser_ = &p;
  }

  inline
  void vascular_segment_pskel::
  endpoint_2_parser (::xml_schema::parser_map& m)
  {
    this->endpoint_2_parser_map_ = &m;
  }

  inline
  void vascular_segment_pskel::
  surface_parser (::vascular::surface_properties_pskel& p)
  {
    this->surface_parser_ = &p;
  }

  inline
  void vascular_segment_pskel::
  surface_parser (::xml_schema::parser_map& m)
  {
    this->surface_parser_map_ = &m;
  }

  inline
  void vascular_segment_pskel::
  interior_parser (::vascular::volume_properties_pskel& p)
  {
    this->interior_parser_ = &p;
  }

  inline
  void vascular_segment_pskel::
  interior_parser (::xml_schema::parser_map& m)
  {
    this->interior_parser_map_ = &m;
  }

  inline
  void vascular_segment_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void vascular_segment_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void vascular_segment_pskel::
  parsers (::vascular::endpoint_pskel& endpoint_1,
           ::vascular::endpoint_pskel& endpoint_2,
           ::vascular::surface_properties_pskel& surface,
           ::vascular::volume_properties_pskel& interior,
           ::common::custom_pskel& custom)
  {
    this->endpoint_1_parser_ = &endpoint_1;
    this->endpoint_2_parser_ = &endpoint_2;
    this->surface_parser_ = &surface;
    this->interior_parser_ = &interior;
    this->custom_parser_ = &custom;
  }

  inline
  void vascular_segment_pskel::
  parser_maps (::xml_schema::parser_map& endpoint_1,
               ::xml_schema::parser_map& endpoint_2,
               ::xml_schema::parser_map& surface,
               ::xml_schema::parser_map& interior,
               ::xml_schema::parser_map& custom)
  {
    this->endpoint_1_parser_map_ = &endpoint_1;
    this->endpoint_2_parser_map_ = &endpoint_2;
    this->surface_parser_map_ = &surface;
    this->interior_parser_map_ = &interior;
    this->custom_parser_map_ = &custom;
  }

  inline
  vascular_segment_pskel::
  vascular_segment_pskel ()
  : vascular_segment_impl_ (0),
    endpoint_1_parser_ (0),
    endpoint_1_parser_map_ (0),
    endpoint_2_parser_ (0),
    endpoint_2_parser_map_ (0),
    surface_parser_ (0),
    surface_parser_map_ (0),
    interior_parser_ (0),
    interior_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (5UL, v_all_first_)
  {
  }

  inline
  vascular_segment_pskel::
  vascular_segment_pskel (vascular_segment_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    vascular_segment_impl_ (impl),
    endpoint_1_parser_ (0),
    endpoint_1_parser_map_ (0),
    endpoint_2_parser_ (0),
    endpoint_2_parser_map_ (0),
    surface_parser_ (0),
    surface_parser_map_ (0),
    interior_parser_ (0),
    interior_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (5UL, v_all_first_)
  {
  }

  // endpoint_pskel
  //

  inline
  void endpoint_pskel::
  node_ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->node_ID_parser_ = &p;
  }

  inline
  void endpoint_pskel::
  lengths_parser (::phenotype_common::lengths_pskel& p)
  {
    this->lengths_parser_ = &p;
  }

  inline
  void endpoint_pskel::
  lengths_parser (::xml_schema::parser_map& m)
  {
    this->lengths_parser_map_ = &m;
  }

  inline
  void endpoint_pskel::
  areas_parser (::phenotype_common::areas_2D_pskel& p)
  {
    this->areas_parser_ = &p;
  }

  inline
  void endpoint_pskel::
  areas_parser (::xml_schema::parser_map& m)
  {
    this->areas_parser_map_ = &m;
  }

  inline
  void endpoint_pskel::
  fluid_flow_velocity_parser (::common::units_decimal_pskel& p)
  {
    this->fluid_flow_velocity_parser_ = &p;
  }

  inline
  void endpoint_pskel::
  fluid_flow_velocity_parser (::xml_schema::parser_map& m)
  {
    this->fluid_flow_velocity_parser_map_ = &m;
  }

  inline
  void endpoint_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void endpoint_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void endpoint_pskel::
  parsers (::xml_schema::unsigned_int_pskel& node_ID,
           ::phenotype_common::lengths_pskel& lengths,
           ::phenotype_common::areas_2D_pskel& areas,
           ::common::units_decimal_pskel& fluid_flow_velocity,
           ::common::custom_pskel& custom)
  {
    this->node_ID_parser_ = &node_ID;
    this->lengths_parser_ = &lengths;
    this->areas_parser_ = &areas;
    this->fluid_flow_velocity_parser_ = &fluid_flow_velocity;
    this->custom_parser_ = &custom;
  }

  inline
  void endpoint_pskel::
  parser_maps (::xml_schema::parser_map& lengths,
               ::xml_schema::parser_map& areas,
               ::xml_schema::parser_map& fluid_flow_velocity,
               ::xml_schema::parser_map& custom)
  {
    this->lengths_parser_map_ = &lengths;
    this->areas_parser_map_ = &areas;
    this->fluid_flow_velocity_parser_map_ = &fluid_flow_velocity;
    this->custom_parser_map_ = &custom;
  }

  inline
  endpoint_pskel::
  endpoint_pskel ()
  : endpoint_impl_ (0),
    node_ID_parser_ (0),
    lengths_parser_ (0),
    lengths_parser_map_ (0),
    areas_parser_ (0),
    areas_parser_map_ (0),
    fluid_flow_velocity_parser_ (0),
    fluid_flow_velocity_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (4UL, v_all_first_)
  {
  }

  inline
  endpoint_pskel::
  endpoint_pskel (endpoint_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    endpoint_impl_ (impl),
    node_ID_parser_ (0),
    lengths_parser_ (0),
    lengths_parser_map_ (0),
    areas_parser_ (0),
    areas_parser_map_ (0),
    fluid_flow_velocity_parser_ (0),
    fluid_flow_velocity_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (4UL, v_all_first_)
  {
  }

  // surface_properties_pskel
  //

  inline
  void surface_properties_pskel::
  areas_parser (::phenotype_common::areas_3D_pskel& p)
  {
    this->areas_parser_ = &p;
  }

  inline
  void surface_properties_pskel::
  areas_parser (::xml_schema::parser_map& m)
  {
    this->areas_parser_map_ = &m;
  }

  inline
  void surface_properties_pskel::
  fluid_flow_velocity_parser (::common::units_decimal_pskel& p)
  {
    this->fluid_flow_velocity_parser_ = &p;
  }

  inline
  void surface_properties_pskel::
  fluid_flow_velocity_parser (::xml_schema::parser_map& m)
  {
    this->fluid_flow_velocity_parser_map_ = &m;
  }

  inline
  void surface_properties_pskel::
  mechanics_parser (::phenotype_common::mechanics_pskel& p)
  {
    this->mechanics_parser_ = &p;
  }

  inline
  void surface_properties_pskel::
  mechanics_parser (::xml_schema::parser_map& m)
  {
    this->mechanics_parser_map_ = &m;
  }

  inline
  void surface_properties_pskel::
  permeability_parser (::common::units_decimal_pskel& p)
  {
    this->permeability_parser_ = &p;
  }

  inline
  void surface_properties_pskel::
  permeability_parser (::xml_schema::parser_map& m)
  {
    this->permeability_parser_map_ = &m;
  }

  inline
  void surface_properties_pskel::
  surface_proteins_parser (::variables::list_of_variables_pskel& p)
  {
    this->surface_proteins_parser_ = &p;
  }

  inline
  void surface_properties_pskel::
  surface_proteins_parser (::xml_schema::parser_map& m)
  {
    this->surface_proteins_parser_map_ = &m;
  }

  inline
  void surface_properties_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void surface_properties_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void surface_properties_pskel::
  parsers (::phenotype_common::areas_3D_pskel& areas,
           ::common::units_decimal_pskel& fluid_flow_velocity,
           ::phenotype_common::mechanics_pskel& mechanics,
           ::common::units_decimal_pskel& permeability,
           ::variables::list_of_variables_pskel& surface_proteins,
           ::common::custom_pskel& custom)
  {
    this->areas_parser_ = &areas;
    this->fluid_flow_velocity_parser_ = &fluid_flow_velocity;
    this->mechanics_parser_ = &mechanics;
    this->permeability_parser_ = &permeability;
    this->surface_proteins_parser_ = &surface_proteins;
    this->custom_parser_ = &custom;
  }

  inline
  void surface_properties_pskel::
  parser_maps (::xml_schema::parser_map& areas,
               ::xml_schema::parser_map& fluid_flow_velocity,
               ::xml_schema::parser_map& mechanics,
               ::xml_schema::parser_map& permeability,
               ::xml_schema::parser_map& surface_proteins,
               ::xml_schema::parser_map& custom)
  {
    this->areas_parser_map_ = &areas;
    this->fluid_flow_velocity_parser_map_ = &fluid_flow_velocity;
    this->mechanics_parser_map_ = &mechanics;
    this->permeability_parser_map_ = &permeability;
    this->surface_proteins_parser_map_ = &surface_proteins;
    this->custom_parser_map_ = &custom;
  }

  inline
  surface_properties_pskel::
  surface_properties_pskel ()
  : surface_properties_impl_ (0),
    areas_parser_ (0),
    areas_parser_map_ (0),
    fluid_flow_velocity_parser_ (0),
    fluid_flow_velocity_parser_map_ (0),
    mechanics_parser_ (0),
    mechanics_parser_map_ (0),
    permeability_parser_ (0),
    permeability_parser_map_ (0),
    surface_proteins_parser_ (0),
    surface_proteins_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_)
  {
  }

  inline
  surface_properties_pskel::
  surface_properties_pskel (surface_properties_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    surface_properties_impl_ (impl),
    areas_parser_ (0),
    areas_parser_map_ (0),
    fluid_flow_velocity_parser_ (0),
    fluid_flow_velocity_parser_map_ (0),
    mechanics_parser_ (0),
    mechanics_parser_map_ (0),
    permeability_parser_ (0),
    permeability_parser_map_ (0),
    surface_proteins_parser_ (0),
    surface_proteins_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (6UL, v_all_first_)
  {
  }

  // volume_properties_pskel
  //

  inline
  void volume_properties_pskel::
  fluid_flow_velocity_parser (::common::units_decimal_pskel& p)
  {
    this->fluid_flow_velocity_parser_ = &p;
  }

  inline
  void volume_properties_pskel::
  fluid_flow_velocity_parser (::xml_schema::parser_map& m)
  {
    this->fluid_flow_velocity_parser_map_ = &m;
  }

  inline
  void volume_properties_pskel::
  variables_parser (::variables::list_of_variables_pskel& p)
  {
    this->variables_parser_ = &p;
  }

  inline
  void volume_properties_pskel::
  variables_parser (::xml_schema::parser_map& m)
  {
    this->variables_parser_map_ = &m;
  }

  inline
  void volume_properties_pskel::
  volumes_parser (::phenotype_common::volumes_pskel& p)
  {
    this->volumes_parser_ = &p;
  }

  inline
  void volume_properties_pskel::
  volumes_parser (::xml_schema::parser_map& m)
  {
    this->volumes_parser_map_ = &m;
  }

  inline
  void volume_properties_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void volume_properties_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void volume_properties_pskel::
  parsers (::common::units_decimal_pskel& fluid_flow_velocity,
           ::variables::list_of_variables_pskel& variables,
           ::phenotype_common::volumes_pskel& volumes,
           ::common::custom_pskel& custom)
  {
    this->fluid_flow_velocity_parser_ = &fluid_flow_velocity;
    this->variables_parser_ = &variables;
    this->volumes_parser_ = &volumes;
    this->custom_parser_ = &custom;
  }

  inline
  void volume_properties_pskel::
  parser_maps (::xml_schema::parser_map& fluid_flow_velocity,
               ::xml_schema::parser_map& variables,
               ::xml_schema::parser_map& volumes,
               ::xml_schema::parser_map& custom)
  {
    this->fluid_flow_velocity_parser_map_ = &fluid_flow_velocity;
    this->variables_parser_map_ = &variables;
    this->volumes_parser_map_ = &volumes;
    this->custom_parser_map_ = &custom;
  }

  inline
  volume_properties_pskel::
  volume_properties_pskel ()
  : volume_properties_impl_ (0),
    fluid_flow_velocity_parser_ (0),
    fluid_flow_velocity_parser_map_ (0),
    variables_parser_ (0),
    variables_parser_map_ (0),
    volumes_parser_ (0),
    volumes_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (4UL, v_all_first_)
  {
  }

  inline
  volume_properties_pskel::
  volume_properties_pskel (volume_properties_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    volume_properties_impl_ (impl),
    fluid_flow_velocity_parser_ (0),
    fluid_flow_velocity_parser_map_ (0),
    variables_parser_ (0),
    variables_parser_map_ (0),
    volumes_parser_ (0),
    volumes_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_all_count_ (4UL, v_all_first_)
  {
  }

  // vascular_network_pskel
  //

  inline
  void vascular_network_pskel::
  ID_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->ID_parser_ = &p;
  }

  inline
  void vascular_network_pskel::
  keywords_parser (::xml_schema::string_pskel& p)
  {
    this->keywords_parser_ = &p;
  }

  inline
  void vascular_network_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  inline
  void vascular_network_pskel::
  vascular_nodes_parser (::vascular::list_of_vascular_nodes_pskel& p)
  {
    this->vascular_nodes_parser_ = &p;
  }

  inline
  void vascular_network_pskel::
  vascular_nodes_parser (::xml_schema::parser_map& m)
  {
    this->vascular_nodes_parser_map_ = &m;
  }

  inline
  void vascular_network_pskel::
  boundary_nodes_parser (::vascular::list_of_boundary_nodes_pskel& p)
  {
    this->boundary_nodes_parser_ = &p;
  }

  inline
  void vascular_network_pskel::
  boundary_nodes_parser (::xml_schema::parser_map& m)
  {
    this->boundary_nodes_parser_map_ = &m;
  }

  inline
  void vascular_network_pskel::
  vascular_segments_parser (::vascular::vascular_segments_pskel& p)
  {
    this->vascular_segments_parser_ = &p;
  }

  inline
  void vascular_network_pskel::
  vascular_segments_parser (::xml_schema::parser_map& m)
  {
    this->vascular_segments_parser_map_ = &m;
  }

  inline
  void vascular_network_pskel::
  voxels_parser (::mesh::int_list_xpath_pskel& p)
  {
    this->voxels_parser_ = &p;
  }

  inline
  void vascular_network_pskel::
  voxels_parser (::xml_schema::parser_map& m)
  {
    this->voxels_parser_map_ = &m;
  }

  inline
  void vascular_network_pskel::
  custom_parser (::common::custom_pskel& p)
  {
    this->custom_parser_ = &p;
  }

  inline
  void vascular_network_pskel::
  custom_parser (::xml_schema::parser_map& m)
  {
    this->custom_parser_map_ = &m;
  }

  inline
  void vascular_network_pskel::
  parsers (::xml_schema::unsigned_int_pskel& ID,
           ::xml_schema::string_pskel& keywords,
           ::xml_schema::string_pskel& name,
           ::vascular::list_of_vascular_nodes_pskel& vascular_nodes,
           ::vascular::list_of_boundary_nodes_pskel& boundary_nodes,
           ::vascular::vascular_segments_pskel& vascular_segments,
           ::mesh::int_list_xpath_pskel& voxels,
           ::common::custom_pskel& custom)
  {
    this->ID_parser_ = &ID;
    this->keywords_parser_ = &keywords;
    this->name_parser_ = &name;
    this->vascular_nodes_parser_ = &vascular_nodes;
    this->boundary_nodes_parser_ = &boundary_nodes;
    this->vascular_segments_parser_ = &vascular_segments;
    this->voxels_parser_ = &voxels;
    this->custom_parser_ = &custom;
  }

  inline
  void vascular_network_pskel::
  parser_maps (::xml_schema::parser_map& vascular_nodes,
               ::xml_schema::parser_map& boundary_nodes,
               ::xml_schema::parser_map& vascular_segments,
               ::xml_schema::parser_map& voxels,
               ::xml_schema::parser_map& custom)
  {
    this->vascular_nodes_parser_map_ = &vascular_nodes;
    this->boundary_nodes_parser_map_ = &boundary_nodes;
    this->vascular_segments_parser_map_ = &vascular_segments;
    this->voxels_parser_map_ = &voxels;
    this->custom_parser_map_ = &custom;
  }

  inline
  vascular_network_pskel::
  vascular_network_pskel ()
  : vascular_network_impl_ (0),
    ID_parser_ (0),
    keywords_parser_ (0),
    name_parser_ (0),
    vascular_nodes_parser_ (0),
    vascular_nodes_parser_map_ (0),
    boundary_nodes_parser_ (0),
    boundary_nodes_parser_map_ (0),
    vascular_segments_parser_ (0),
    vascular_segments_parser_map_ (0),
    voxels_parser_ (0),
    voxels_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  vascular_network_pskel::
  vascular_network_pskel (vascular_network_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    vascular_network_impl_ (impl),
    ID_parser_ (0),
    keywords_parser_ (0),
    name_parser_ (0),
    vascular_nodes_parser_ (0),
    vascular_nodes_parser_map_ (0),
    boundary_nodes_parser_ (0),
    boundary_nodes_parser_map_ (0),
    vascular_segments_parser_ (0),
    vascular_segments_parser_map_ (0),
    voxels_parser_ (0),
    voxels_parser_map_ (0),
    custom_parser_ (0),
    custom_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

