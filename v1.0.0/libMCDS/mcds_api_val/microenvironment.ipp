// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MICROENVIRONMENT_IPP
#define MICROENVIRONMENT_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

#include "mesh.ipp"

#include "basement_membrane.ipp"

#include "vascular.ipp"

#include "variables.ipp"

namespace microenvironment
{
  // domain
  //

  inline
  bool domain::
  name_present () const
  {
    return this->name_present_;
  }

  inline
  void domain::
  name_present (bool x)
  {
    this->name_present_ = x;
  }

  inline
  const ::std::string& domain::
  name () const
  {
    return this->name_;
  }

  inline
  ::std::string& domain::
  name ()
  {
    return this->name_;
  }

  inline
  void domain::
  name (const ::std::string& x)
  {
    this->name_ = x;
    this->name_present_ = true;
  }

  inline
  bool domain::
  variables_present () const
  {
    return this->variables_ != 0;
  }

  inline
  const ::variables::list_of_variables& domain::
  variables () const
  {
    return *this->variables_;
  }

  inline
  ::variables::list_of_variables& domain::
  variables ()
  {
    return *this->variables_;
  }

  inline
  void domain::
  variables (::variables::list_of_variables* x)
  {
    delete this->variables_;
    this->variables_ = x;
  }

  inline
  ::variables::list_of_variables* domain::
  variables_detach ()
  {
    ::variables::list_of_variables* r = this->variables_;
    this->variables_ = 0;
    return r;
  }

  inline
  bool domain::
  experimental_condition_present () const
  {
    return this->experimental_condition_ != 0;
  }

  inline
  const ::variables::experimental_conditions& domain::
  experimental_condition () const
  {
    return *this->experimental_condition_;
  }

  inline
  ::variables::experimental_conditions& domain::
  experimental_condition ()
  {
    return *this->experimental_condition_;
  }

  inline
  void domain::
  experimental_condition (::variables::experimental_conditions* x)
  {
    delete this->experimental_condition_;
    this->experimental_condition_ = x;
  }

  inline
  ::variables::experimental_conditions* domain::
  experimental_condition_detach ()
  {
    ::variables::experimental_conditions* r = this->experimental_condition_;
    this->experimental_condition_ = 0;
    return r;
  }

  inline
  bool domain::
  mesh_present () const
  {
    return this->mesh_ != 0;
  }

  inline
  const ::mesh::mesh& domain::
  mesh () const
  {
    return *this->mesh_;
  }

  inline
  ::mesh::mesh& domain::
  mesh ()
  {
    return *this->mesh_;
  }

  inline
  void domain::
  mesh (::mesh::mesh* x)
  {
    delete this->mesh_;
    this->mesh_ = x;
  }

  inline
  ::mesh::mesh* domain::
  mesh_detach ()
  {
    ::mesh::mesh* r = this->mesh_;
    this->mesh_ = 0;
    return r;
  }

  inline
  bool domain::
  data_present () const
  {
    return this->data_ != 0;
  }

  inline
  const ::variables::data& domain::
  data () const
  {
    return *this->data_;
  }

  inline
  ::variables::data& domain::
  data ()
  {
    return *this->data_;
  }

  inline
  void domain::
  data (::variables::data* x)
  {
    delete this->data_;
    this->data_ = x;
  }

  inline
  ::variables::data* domain::
  data_detach ()
  {
    ::variables::data* r = this->data_;
    this->data_ = 0;
    return r;
  }

  inline
  bool domain::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& domain::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& domain::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void domain::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* domain::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // microenvironment
  //

  inline
  const microenvironment::domain_sequence& microenvironment::
  domain () const
  {
    return this->domain_;
  }

  inline
  microenvironment::domain_sequence& microenvironment::
  domain ()
  {
    return this->domain_;
  }

  inline
  const microenvironment::vascular_network_sequence& microenvironment::
  vascular_network () const
  {
    return this->vascular_network_;
  }

  inline
  microenvironment::vascular_network_sequence& microenvironment::
  vascular_network ()
  {
    return this->vascular_network_;
  }

  inline
  const microenvironment::basement_membrane_sequence& microenvironment::
  basement_membrane () const
  {
    return this->basement_membrane_;
  }

  inline
  microenvironment::basement_membrane_sequence& microenvironment::
  basement_membrane ()
  {
    return this->basement_membrane_;
  }

  inline
  bool microenvironment::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& microenvironment::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& microenvironment::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void microenvironment::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* microenvironment::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // MICROENVIRONMENT_IPP
