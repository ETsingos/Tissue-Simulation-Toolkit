// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "phenotype_common-simpl.hpp"

#include <xsde/cxx/serializer/validating/string-common.hxx>

namespace phenotype_common
{
  // adhesion_simpl
  //

  void adhesion_simpl::
  pre (const ::phenotype_common::adhesion& x)
  {
    this->adhesion_simpl_state_.adhesion_ = &x;
    this->adhesion_simpl_state_.rolling_observation_ = 
    this->adhesion_simpl_state_.adhesion_->rolling_observation ().begin ();
    this->adhesion_simpl_state_.rolling_observation_end_ = 
    this->adhesion_simpl_state_.adhesion_->rolling_observation ().end ();
  }

  bool adhesion_simpl::
  adhesion_bond_breaking_rate_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_bond_breaking_rate_present ();
  }

  const ::common::units_decimal& adhesion_simpl::
  adhesion_bond_breaking_rate ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_bond_breaking_rate ();
  }

  bool adhesion_simpl::
  adhesion_bond_formation_rate_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_bond_formation_rate_present ();
  }

  const ::common::units_decimal& adhesion_simpl::
  adhesion_bond_formation_rate ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_bond_formation_rate ();
  }

  bool adhesion_simpl::
  adhesion_spring_constant_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_spring_constant_present ();
  }

  const ::common::units_decimal_nonnegative& adhesion_simpl::
  adhesion_spring_constant ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_spring_constant ();
  }

  bool adhesion_simpl::
  adhesion_receptor_density_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_receptor_density_present ();
  }

  const ::common::units_decimal_nonnegative& adhesion_simpl::
  adhesion_receptor_density ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_receptor_density ();
  }

  bool adhesion_simpl::
  surface_binding_energy_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->surface_binding_energy_present ();
  }

  const ::common::units_decimal& adhesion_simpl::
  surface_binding_energy ()
  {
    return this->adhesion_simpl_state_.adhesion_->surface_binding_energy ();
  }

  bool adhesion_simpl::
  number_of_adhered_cells_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->number_of_adhered_cells_present ();
  }

  const ::common::units_decimal_nonnegative& adhesion_simpl::
  number_of_adhered_cells ()
  {
    return this->adhesion_simpl_state_.adhesion_->number_of_adhered_cells ();
  }

  bool adhesion_simpl::
  maximum_number_of_adhered_cells_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->maximum_number_of_adhered_cells_present ();
  }

  const ::common::units_unsignedShort& adhesion_simpl::
  maximum_number_of_adhered_cells ()
  {
    return this->adhesion_simpl_state_.adhesion_->maximum_number_of_adhered_cells ();
  }

  bool adhesion_simpl::
  adhered_surface_area_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhered_surface_area_present ();
  }

  const ::common::units_decimal_nonnegative& adhesion_simpl::
  adhered_surface_area ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhered_surface_area ();
  }

  bool adhesion_simpl::
  maximum_adhered_surface_area_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->maximum_adhered_surface_area_present ();
  }

  const ::common::units_decimal_nonnegative& adhesion_simpl::
  maximum_adhered_surface_area ()
  {
    return this->adhesion_simpl_state_.adhesion_->maximum_adhered_surface_area ();
  }

  bool adhesion_simpl::
  adhesion_force_per_surface_area_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_force_per_surface_area_present ();
  }

  const ::common::units_decimal& adhesion_simpl::
  adhesion_force_per_surface_area ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_force_per_surface_area ();
  }

  bool adhesion_simpl::
  adhesion_probability_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_probability_present ();
  }

  const ::common::units_fraction& adhesion_simpl::
  adhesion_probability ()
  {
    return this->adhesion_simpl_state_.adhesion_->adhesion_probability ();
  }

  bool adhesion_simpl::
  detachment_proability_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->detachment_proability_present ();
  }

  const ::common::units_fraction& adhesion_simpl::
  detachment_proability ()
  {
    return this->adhesion_simpl_state_.adhesion_->detachment_proability ();
  }

  bool adhesion_simpl::
  rolling_observation_next ()
  {
    return this->adhesion_simpl_state_.rolling_observation_ != 
    this->adhesion_simpl_state_.rolling_observation_end_;
  }

  const ::phenotype_common::rolling_observation& adhesion_simpl::
  rolling_observation ()
  {
    return *this->adhesion_simpl_state_.rolling_observation_++;
  }

  bool adhesion_simpl::
  custom_present ()
  {
    return this->adhesion_simpl_state_.adhesion_->custom_present ();
  }

  const ::common::custom& adhesion_simpl::
  custom ()
  {
    return this->adhesion_simpl_state_.adhesion_->custom ();
  }

  // rolling_observation_simpl
  //

  void rolling_observation_simpl::
  pre (const ::phenotype_common::rolling_observation& x)
  {
    this->rolling_observation_simpl_state_.rolling_observation_ = &x;
  }

  const ::common::units_decimal& rolling_observation_simpl::
  rolling_velocity ()
  {
    return this->rolling_observation_simpl_state_.rolling_observation_->rolling_velocity ();
  }

  const ::common::units_decimal& rolling_observation_simpl::
  shear_stress ()
  {
    return this->rolling_observation_simpl_state_.rolling_observation_->shear_stress ();
  }

  // friction_simpl
  //

  void friction_simpl::
  pre (const ::phenotype_common::friction& x)
  {
    this->friction_simpl_state_.friction_ = &x;
  }

  bool friction_simpl::
  compression_present ()
  {
    return this->friction_simpl_state_.friction_->compression_present ();
  }

  const ::common::units_decimal_nonnegative& friction_simpl::
  compression ()
  {
    return this->friction_simpl_state_.friction_->compression ();
  }

  bool friction_simpl::
  ECM_present ()
  {
    return this->friction_simpl_state_.friction_->ECM_present ();
  }

  const ::common::units_decimal_nonnegative& friction_simpl::
  ECM ()
  {
    return this->friction_simpl_state_.friction_->ECM ();
  }

  bool friction_simpl::
  shear_present ()
  {
    return this->friction_simpl_state_.friction_->shear_present ();
  }

  const ::common::units_decimal_nonnegative& friction_simpl::
  shear ()
  {
    return this->friction_simpl_state_.friction_->shear ();
  }

  // mechanics_simpl
  //

  void mechanics_simpl::
  pre (const ::phenotype_common::mechanics& x)
  {
    this->mechanics_simpl_state_.mechanics_ = &x;
    this->mechanics_simpl_state_.indentation_observation_ = 
    this->mechanics_simpl_state_.mechanics_->indentation_observation ().begin ();
    this->mechanics_simpl_state_.indentation_observation_end_ = 
    this->mechanics_simpl_state_.mechanics_->indentation_observation ().end ();
  }

  bool mechanics_simpl::
  friction_present ()
  {
    return this->mechanics_simpl_state_.mechanics_->friction_present ();
  }

  const ::phenotype_common::friction& mechanics_simpl::
  friction ()
  {
    return this->mechanics_simpl_state_.mechanics_->friction ();
  }

  bool mechanics_simpl::
  maximum_cell_deformation_present ()
  {
    return this->mechanics_simpl_state_.mechanics_->maximum_cell_deformation_present ();
  }

  const ::common::units_decimal& mechanics_simpl::
  maximum_cell_deformation ()
  {
    return this->mechanics_simpl_state_.mechanics_->maximum_cell_deformation ();
  }

  bool mechanics_simpl::
  mechanical_pressure_present ()
  {
    return this->mechanics_simpl_state_.mechanics_->mechanical_pressure_present ();
  }

  const ::common::units_decimal& mechanics_simpl::
  mechanical_pressure ()
  {
    return this->mechanics_simpl_state_.mechanics_->mechanical_pressure ();
  }

  bool mechanics_simpl::
  indentation_observation_next ()
  {
    return this->mechanics_simpl_state_.indentation_observation_ != 
    this->mechanics_simpl_state_.indentation_observation_end_;
  }

  const ::phenotype_common::indentation_observation& mechanics_simpl::
  indentation_observation ()
  {
    return *this->mechanics_simpl_state_.indentation_observation_++;
  }

  bool mechanics_simpl::
  poisson_ratio_present ()
  {
    return this->mechanics_simpl_state_.mechanics_->poisson_ratio_present ();
  }

  const ::common::units_decimal& mechanics_simpl::
  poisson_ratio ()
  {
    return this->mechanics_simpl_state_.mechanics_->poisson_ratio ();
  }

  bool mechanics_simpl::
  youngs_modulus_present ()
  {
    return this->mechanics_simpl_state_.mechanics_->youngs_modulus_present ();
  }

  const ::common::units_decimal& mechanics_simpl::
  youngs_modulus ()
  {
    return this->mechanics_simpl_state_.mechanics_->youngs_modulus ();
  }

  bool mechanics_simpl::
  custom_present ()
  {
    return this->mechanics_simpl_state_.mechanics_->custom_present ();
  }

  const ::common::custom& mechanics_simpl::
  custom ()
  {
    return this->mechanics_simpl_state_.mechanics_->custom ();
  }

  // indentation_observation_simpl
  //

  void indentation_observation_simpl::
  pre (const ::phenotype_common::indentation_observation& x)
  {
    this->indentation_observation_simpl_state_.indentation_observation_ = &x;
  }

  const ::common::units_decimal& indentation_observation_simpl::
  depth ()
  {
    return this->indentation_observation_simpl_state_.indentation_observation_->depth ();
  }

  bool indentation_observation_simpl::
  poisson_ratio_present ()
  {
    return this->indentation_observation_simpl_state_.indentation_observation_->poisson_ratio_present ();
  }

  const ::common::units_decimal& indentation_observation_simpl::
  poisson_ratio ()
  {
    return this->indentation_observation_simpl_state_.indentation_observation_->poisson_ratio ();
  }

  bool indentation_observation_simpl::
  youngs_modulus_present ()
  {
    return this->indentation_observation_simpl_state_.indentation_observation_->youngs_modulus_present ();
  }

  const ::common::units_decimal& indentation_observation_simpl::
  youngs_modulus ()
  {
    return this->indentation_observation_simpl_state_.indentation_observation_->youngs_modulus ();
  }

  // motility_simpl
  //

  void motility_simpl::
  pre (const ::phenotype_common::motility& x)
  {
    this->motility_simpl_state_.motility_ = &x;
    this->motility_simpl_state_.unrestricted_ = 
    this->motility_simpl_state_.motility_->unrestricted ().begin ();
    this->motility_simpl_state_.unrestricted_end_ = 
    this->motility_simpl_state_.motility_->unrestricted ().end ();
    this->motility_simpl_state_.restricted_ = 
    this->motility_simpl_state_.motility_->restricted ().begin ();
    this->motility_simpl_state_.restricted_end_ = 
    this->motility_simpl_state_.motility_->restricted ().end ();
  }

  bool motility_simpl::
  unrestricted_next ()
  {
    return this->motility_simpl_state_.unrestricted_ != 
    this->motility_simpl_state_.unrestricted_end_;
  }

  const ::phenotype_common::motility_types& motility_simpl::
  unrestricted ()
  {
    return *this->motility_simpl_state_.unrestricted_++;
  }

  bool motility_simpl::
  restricted_next ()
  {
    return this->motility_simpl_state_.restricted_ != 
    this->motility_simpl_state_.restricted_end_;
  }

  const ::phenotype_common::motility_types& motility_simpl::
  restricted ()
  {
    return *this->motility_simpl_state_.restricted_++;
  }

  // motility_types_simpl
  //

  void motility_types_simpl::
  pre (const ::phenotype_common::motility_types& x)
  {
    this->motility_types_simpl_state_.motility_types_ = &x;
  }

  bool motility_types_simpl::
  ID_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->ID_present ();
  }

  unsigned int motility_types_simpl::
  ID ()
  {
    return this->motility_types_simpl_state_.motility_types_->ID ();
  }

  bool motility_types_simpl::
  timescale_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->timescale_present ();
  }

  const ::phenotype_common::timescale& motility_types_simpl::
  timescale ()
  {
    return this->motility_types_simpl_state_.motility_types_->timescale ();
  }

  bool motility_types_simpl::
  restriction_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->restriction_present ();
  }

  const ::variables::experimental_conditions& motility_types_simpl::
  restriction ()
  {
    return this->motility_types_simpl_state_.motility_types_->restriction ();
  }

  bool motility_types_simpl::
  net_displacement_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->net_displacement_present ();
  }

  const ::common::units_decimal& motility_types_simpl::
  net_displacement ()
  {
    return this->motility_types_simpl_state_.motility_types_->net_displacement ();
  }

  bool motility_types_simpl::
  total_displacement_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->total_displacement_present ();
  }

  const ::common::units_decimal_nonnegative& motility_types_simpl::
  total_displacement ()
  {
    return this->motility_types_simpl_state_.motility_types_->total_displacement ();
  }

  bool motility_types_simpl::
  mean_square_displacement_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->mean_square_displacement_present ();
  }

  const ::common::units_decimal_nonnegative& motility_types_simpl::
  mean_square_displacement ()
  {
    return this->motility_types_simpl_state_.motility_types_->mean_square_displacement ();
  }

  bool motility_types_simpl::
  mean_speed_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->mean_speed_present ();
  }

  const ::common::units_decimal& motility_types_simpl::
  mean_speed ()
  {
    return this->motility_types_simpl_state_.motility_types_->mean_speed ();
  }

  bool motility_types_simpl::
  net_speed_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->net_speed_present ();
  }

  const ::common::units_decimal& motility_types_simpl::
  net_speed ()
  {
    return this->motility_types_simpl_state_.motility_types_->net_speed ();
  }

  bool motility_types_simpl::
  persistence_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->persistence_present ();
  }

  const ::common::units_decimal& motility_types_simpl::
  persistence ()
  {
    return this->motility_types_simpl_state_.motility_types_->persistence ();
  }

  bool motility_types_simpl::
  mean_path_length_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->mean_path_length_present ();
  }

  const ::common::units_decimal& motility_types_simpl::
  mean_path_length ()
  {
    return this->motility_types_simpl_state_.motility_types_->mean_path_length ();
  }

  bool motility_types_simpl::
  diffusion_coefficient_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->diffusion_coefficient_present ();
  }

  const ::common::units_decimal& motility_types_simpl::
  diffusion_coefficient ()
  {
    return this->motility_types_simpl_state_.motility_types_->diffusion_coefficient ();
  }

  bool motility_types_simpl::
  custom_present ()
  {
    return this->motility_types_simpl_state_.motility_types_->custom_present ();
  }

  const ::common::custom& motility_types_simpl::
  custom ()
  {
    return this->motility_types_simpl_state_.motility_types_->custom ();
  }

  // timescale_simpl
  //

  timescale_simpl::
  timescale_simpl ()
  : timescale_sskel (&base_impl_)
  {
  }

  void timescale_simpl::
  pre (const ::phenotype_common::timescale& x)
  {
    this->base_impl_.pre (x);
    this->timescale_simpl_state_.timescale_ = &x;
  }

  bool timescale_simpl::
  mitotic_present ()
  {
    return this->timescale_simpl_state_.timescale_->mitotic_present ();
  }

  bool timescale_simpl::
  mitotic ()
  {
    return this->timescale_simpl_state_.timescale_->mitotic ();
  }

  // transport_processes_simpl
  //

  void transport_processes_simpl::
  pre (const ::phenotype_common::transport_processes& x)
  {
    this->transport_processes_simpl_state_.transport_processes_ = &x;
    this->transport_processes_simpl_state_.variable_ = 
    this->transport_processes_simpl_state_.transport_processes_->variable ().begin ();
    this->transport_processes_simpl_state_.variable_end_ = 
    this->transport_processes_simpl_state_.transport_processes_->variable ().end ();
  }

  bool transport_processes_simpl::
  variable_next ()
  {
    return this->transport_processes_simpl_state_.variable_ != 
    this->transport_processes_simpl_state_.variable_end_;
  }

  const ::phenotype_common::transport_variable& transport_processes_simpl::
  variable ()
  {
    return *this->transport_processes_simpl_state_.variable_++;
  }

  // transport_variable_simpl
  //

  void transport_variable_simpl::
  pre (const ::phenotype_common::transport_variable& x)
  {
    this->transport_variable_simpl_state_.transport_variable_ = &x;
  }

  ::std::string transport_variable_simpl::
  name ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->name ();
  }

  bool transport_variable_simpl::
  units_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->units_present ();
  }

  ::std::string transport_variable_simpl::
  units ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->units ();
  }

  bool transport_variable_simpl::
  ID_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->ID_present ();
  }

  unsigned long long transport_variable_simpl::
  ID ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->ID ();
  }

  bool transport_variable_simpl::
  type_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->type_present ();
  }

  const ::variables::amount_type& transport_variable_simpl::
  type ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->type ();
  }

  bool transport_variable_simpl::
  ChEBI_ID_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->ChEBI_ID_present ();
  }

  ::std::string transport_variable_simpl::
  ChEBI_ID ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->ChEBI_ID ();
  }

  bool transport_variable_simpl::
  MeSH_ID_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->MeSH_ID_present ();
  }

  ::std::string transport_variable_simpl::
  MeSH_ID ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->MeSH_ID ();
  }

  bool transport_variable_simpl::
  DrugBank_ID_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->DrugBank_ID_present ();
  }

  ::std::string transport_variable_simpl::
  DrugBank_ID ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->DrugBank_ID ();
  }

  bool transport_variable_simpl::
  GMO_ID_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->GMO_ID_present ();
  }

  ::std::string transport_variable_simpl::
  GMO_ID ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->GMO_ID ();
  }

  bool transport_variable_simpl::
  GO_ID_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->GO_ID_present ();
  }

  ::std::string transport_variable_simpl::
  GO_ID ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->GO_ID ();
  }

  bool transport_variable_simpl::
  UniProt_ID_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->UniProt_ID_present ();
  }

  ::std::string transport_variable_simpl::
  UniProt_ID ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->UniProt_ID ();
  }

  bool transport_variable_simpl::
  PR_ID_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->PR_ID_present ();
  }

  ::std::string transport_variable_simpl::
  PR_ID ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->PR_ID ();
  }

  bool transport_variable_simpl::
  all_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all_present ();
  }

  bool transport_variable_simpl::
  export_rate_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().export_rate_present ();
  }

  const ::common::units_decimal& transport_variable_simpl::
  export_rate ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().export_rate ();
  }

  bool transport_variable_simpl::
  export_rate_per_unit_surface_area_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().export_rate_per_unit_surface_area_present ();
  }

  const ::common::units_decimal& transport_variable_simpl::
  export_rate_per_unit_surface_area ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().export_rate_per_unit_surface_area ();
  }

  bool transport_variable_simpl::
  import_rate_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().import_rate_present ();
  }

  const ::common::units_decimal& transport_variable_simpl::
  import_rate ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().import_rate ();
  }

  bool transport_variable_simpl::
  import_rate_per_unit_surface_area_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().import_rate_per_unit_surface_area_present ();
  }

  const ::common::units_decimal& transport_variable_simpl::
  import_rate_per_unit_surface_area ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().import_rate_per_unit_surface_area ();
  }

  bool transport_variable_simpl::
  saturation_density_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().saturation_density_present ();
  }

  const ::common::units_decimal& transport_variable_simpl::
  saturation_density ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().saturation_density ();
  }

  bool transport_variable_simpl::
  custom_present ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().custom_present ();
  }

  const ::common::custom& transport_variable_simpl::
  custom ()
  {
    return this->transport_variable_simpl_state_.transport_variable_->all ().custom ();
  }

  // geometrical_parameters_simpl
  //

  void geometrical_parameters_simpl::
  pre (const ::phenotype_common::geometrical_parameters& x)
  {
    this->geometrical_parameters_simpl_state_.geometrical_parameters_ = &x;
  }

  bool geometrical_parameters_simpl::
  units_present ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->units_present ();
  }

  ::std::string geometrical_parameters_simpl::
  units ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->units ();
  }

  bool geometrical_parameters_simpl::
  aspect_ratio_present ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->aspect_ratio_present ();
  }

  const ::common::units_decimal_nonnegative& geometrical_parameters_simpl::
  aspect_ratio ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->aspect_ratio ();
  }

  bool geometrical_parameters_simpl::
  circularity_present ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->circularity_present ();
  }

  const ::common::units_decimal_nonnegative& geometrical_parameters_simpl::
  circularity ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->circularity ();
  }

  bool geometrical_parameters_simpl::
  eccentricity_present ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->eccentricity_present ();
  }

  const ::common::units_decimal_nonnegative& geometrical_parameters_simpl::
  eccentricity ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->eccentricity ();
  }

  bool geometrical_parameters_simpl::
  sphericity_present ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->sphericity_present ();
  }

  const ::common::units_decimal_nonnegative& geometrical_parameters_simpl::
  sphericity ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->sphericity ();
  }

  bool geometrical_parameters_simpl::
  custom_present ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->custom_present ();
  }

  const ::common::custom& geometrical_parameters_simpl::
  custom ()
  {
    return this->geometrical_parameters_simpl_state_.geometrical_parameters_->custom ();
  }

  // lengths_simpl
  //

  void lengths_simpl::
  pre (const ::phenotype_common::lengths& x)
  {
    this->lengths_simpl_state_.lengths_ = &x;
  }

  bool lengths_simpl::
  units_present ()
  {
    return this->lengths_simpl_state_.lengths_->units_present ();
  }

  ::std::string lengths_simpl::
  units ()
  {
    return this->lengths_simpl_state_.lengths_->units ();
  }

  bool lengths_simpl::
  diameter_present ()
  {
    return this->lengths_simpl_state_.lengths_->diameter_present ();
  }

  const ::common::units_decimal_nonnegative& lengths_simpl::
  diameter ()
  {
    return this->lengths_simpl_state_.lengths_->diameter ();
  }

  bool lengths_simpl::
  major_axis_present ()
  {
    return this->lengths_simpl_state_.lengths_->major_axis_present ();
  }

  const ::common::units_decimal_nonnegative& lengths_simpl::
  major_axis ()
  {
    return this->lengths_simpl_state_.lengths_->major_axis ();
  }

  bool lengths_simpl::
  minor_axis_present ()
  {
    return this->lengths_simpl_state_.lengths_->minor_axis_present ();
  }

  const ::common::units_decimal_nonnegative& lengths_simpl::
  minor_axis ()
  {
    return this->lengths_simpl_state_.lengths_->minor_axis ();
  }

  bool lengths_simpl::
  perimeter_present ()
  {
    return this->lengths_simpl_state_.lengths_->perimeter_present ();
  }

  const ::common::units_decimal_nonnegative& lengths_simpl::
  perimeter ()
  {
    return this->lengths_simpl_state_.lengths_->perimeter ();
  }

  bool lengths_simpl::
  radius_present ()
  {
    return this->lengths_simpl_state_.lengths_->radius_present ();
  }

  const ::common::units_decimal_nonnegative& lengths_simpl::
  radius ()
  {
    return this->lengths_simpl_state_.lengths_->radius ();
  }

  bool lengths_simpl::
  custom_present ()
  {
    return this->lengths_simpl_state_.lengths_->custom_present ();
  }

  const ::common::custom& lengths_simpl::
  custom ()
  {
    return this->lengths_simpl_state_.lengths_->custom ();
  }

  // areas_3D_simpl
  //

  void areas_3D_simpl::
  pre (const ::phenotype_common::areas_3D& x)
  {
    this->areas_3D_simpl_state_.areas_3D_ = &x;
  }

  bool areas_3D_simpl::
  units_present ()
  {
    return this->areas_3D_simpl_state_.areas_3D_->units_present ();
  }

  ::std::string areas_3D_simpl::
  units ()
  {
    return this->areas_3D_simpl_state_.areas_3D_->units ();
  }

  bool areas_3D_simpl::
  free_surface_area_present ()
  {
    return this->areas_3D_simpl_state_.areas_3D_->free_surface_area_present ();
  }

  const ::common::units_decimal_nonnegative& areas_3D_simpl::
  free_surface_area ()
  {
    return this->areas_3D_simpl_state_.areas_3D_->free_surface_area ();
  }

  bool areas_3D_simpl::
  total_surface_area_present ()
  {
    return this->areas_3D_simpl_state_.areas_3D_->total_surface_area_present ();
  }

  const ::common::units_decimal_nonnegative& areas_3D_simpl::
  total_surface_area ()
  {
    return this->areas_3D_simpl_state_.areas_3D_->total_surface_area ();
  }

  bool areas_3D_simpl::
  custom_present ()
  {
    return this->areas_3D_simpl_state_.areas_3D_->custom_present ();
  }

  const ::common::custom& areas_3D_simpl::
  custom ()
  {
    return this->areas_3D_simpl_state_.areas_3D_->custom ();
  }

  // areas_2D_simpl
  //

  void areas_2D_simpl::
  pre (const ::phenotype_common::areas_2D& x)
  {
    this->areas_2D_simpl_state_.areas_2D_ = &x;
  }

  bool areas_2D_simpl::
  units_present ()
  {
    return this->areas_2D_simpl_state_.areas_2D_->units_present ();
  }

  ::std::string areas_2D_simpl::
  units ()
  {
    return this->areas_2D_simpl_state_.areas_2D_->units ();
  }

  bool areas_2D_simpl::
  total_area_present ()
  {
    return this->areas_2D_simpl_state_.areas_2D_->total_area_present ();
  }

  const ::common::units_decimal_nonnegative& areas_2D_simpl::
  total_area ()
  {
    return this->areas_2D_simpl_state_.areas_2D_->total_area ();
  }

  bool areas_2D_simpl::
  custom_present ()
  {
    return this->areas_2D_simpl_state_.areas_2D_->custom_present ();
  }

  const ::common::custom& areas_2D_simpl::
  custom ()
  {
    return this->areas_2D_simpl_state_.areas_2D_->custom ();
  }

  // volumes_simpl
  //

  void volumes_simpl::
  pre (const ::phenotype_common::volumes& x)
  {
    this->volumes_simpl_state_.volumes_ = &x;
  }

  bool volumes_simpl::
  units_present ()
  {
    return this->volumes_simpl_state_.volumes_->units_present ();
  }

  ::std::string volumes_simpl::
  units ()
  {
    return this->volumes_simpl_state_.volumes_->units ();
  }

  bool volumes_simpl::
  fluid_volume_present ()
  {
    return this->volumes_simpl_state_.volumes_->fluid_volume_present ();
  }

  const ::common::units_decimal_nonnegative& volumes_simpl::
  fluid_volume ()
  {
    return this->volumes_simpl_state_.volumes_->fluid_volume ();
  }

  bool volumes_simpl::
  fluid_volume_fraction_present ()
  {
    return this->volumes_simpl_state_.volumes_->fluid_volume_fraction_present ();
  }

  const ::common::units_fraction& volumes_simpl::
  fluid_volume_fraction ()
  {
    return this->volumes_simpl_state_.volumes_->fluid_volume_fraction ();
  }

  bool volumes_simpl::
  solid_calcified_volume_present ()
  {
    return this->volumes_simpl_state_.volumes_->solid_calcified_volume_present ();
  }

  const ::common::units_decimal_nonnegative& volumes_simpl::
  solid_calcified_volume ()
  {
    return this->volumes_simpl_state_.volumes_->solid_calcified_volume ();
  }

  bool volumes_simpl::
  solid_volume_present ()
  {
    return this->volumes_simpl_state_.volumes_->solid_volume_present ();
  }

  const ::common::units_decimal_nonnegative& volumes_simpl::
  solid_volume ()
  {
    return this->volumes_simpl_state_.volumes_->solid_volume ();
  }

  bool volumes_simpl::
  solid_volume_fraction_present ()
  {
    return this->volumes_simpl_state_.volumes_->solid_volume_fraction_present ();
  }

  const ::common::units_fraction& volumes_simpl::
  solid_volume_fraction ()
  {
    return this->volumes_simpl_state_.volumes_->solid_volume_fraction ();
  }

  bool volumes_simpl::
  total_volume_present ()
  {
    return this->volumes_simpl_state_.volumes_->total_volume_present ();
  }

  const ::common::units_decimal_nonnegative& volumes_simpl::
  total_volume ()
  {
    return this->volumes_simpl_state_.volumes_->total_volume ();
  }

  bool volumes_simpl::
  custom_present ()
  {
    return this->volumes_simpl_state_.volumes_->custom_present ();
  }

  const ::common::custom& volumes_simpl::
  custom ()
  {
    return this->volumes_simpl_state_.volumes_->custom ();
  }

  // geometrical_properties_simpl
  //

  void geometrical_properties_simpl::
  pre (const ::phenotype_common::geometrical_properties& x)
  {
    this->geometrical_properties_simpl_state_.geometrical_properties_ = &x;
    this->geometrical_properties_simpl_state_.cross_section_ = 
    this->geometrical_properties_simpl_state_.geometrical_properties_->cross_section ().begin ();
    this->geometrical_properties_simpl_state_.cross_section_end_ = 
    this->geometrical_properties_simpl_state_.geometrical_properties_->cross_section ().end ();
  }

  bool geometrical_properties_simpl::
  parameters_present ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->parameters_present ();
  }

  const ::phenotype_common::geometrical_parameters& geometrical_properties_simpl::
  parameters ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->parameters ();
  }

  bool geometrical_properties_simpl::
  lengths_present ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->lengths_present ();
  }

  const ::phenotype_common::lengths& geometrical_properties_simpl::
  lengths ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->lengths ();
  }

  bool geometrical_properties_simpl::
  areas_present ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->areas_present ();
  }

  const ::phenotype_common::areas_3D& geometrical_properties_simpl::
  areas ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->areas ();
  }

  bool geometrical_properties_simpl::
  volumes_present ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->volumes_present ();
  }

  const ::phenotype_common::volumes& geometrical_properties_simpl::
  volumes ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->volumes ();
  }

  bool geometrical_properties_simpl::
  cross_section_next ()
  {
    return this->geometrical_properties_simpl_state_.cross_section_ != 
    this->geometrical_properties_simpl_state_.cross_section_end_;
  }

  const ::phenotype_common::cross_section& geometrical_properties_simpl::
  cross_section ()
  {
    return *this->geometrical_properties_simpl_state_.cross_section_++;
  }

  bool geometrical_properties_simpl::
  custom_present ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->custom_present ();
  }

  const ::common::custom& geometrical_properties_simpl::
  custom ()
  {
    return this->geometrical_properties_simpl_state_.geometrical_properties_->custom ();
  }

  // cross_section_simpl
  //

  void cross_section_simpl::
  pre (const ::phenotype_common::cross_section& x)
  {
    this->cross_section_simpl_state_.cross_section_ = &x;
  }

  bool cross_section_simpl::
  parameters_present ()
  {
    return this->cross_section_simpl_state_.cross_section_->parameters_present ();
  }

  const ::phenotype_common::geometrical_parameters& cross_section_simpl::
  parameters ()
  {
    return this->cross_section_simpl_state_.cross_section_->parameters ();
  }

  bool cross_section_simpl::
  lengths_present ()
  {
    return this->cross_section_simpl_state_.cross_section_->lengths_present ();
  }

  const ::phenotype_common::lengths& cross_section_simpl::
  lengths ()
  {
    return this->cross_section_simpl_state_.cross_section_->lengths ();
  }

  bool cross_section_simpl::
  areas_present ()
  {
    return this->cross_section_simpl_state_.cross_section_->areas_present ();
  }

  const ::phenotype_common::areas_2D& cross_section_simpl::
  areas ()
  {
    return this->cross_section_simpl_state_.cross_section_->areas ();
  }

  bool cross_section_simpl::
  custom_present ()
  {
    return this->cross_section_simpl_state_.cross_section_->custom_present ();
  }

  const ::common::custom& cross_section_simpl::
  custom ()
  {
    return this->cross_section_simpl_state_.cross_section_->custom ();
  }

  // mass_simpl
  //

  void mass_simpl::
  pre (const ::phenotype_common::mass& x)
  {
    this->mass_simpl_state_.mass_ = &x;
  }

  bool mass_simpl::
  biomass_present ()
  {
    return this->mass_simpl_state_.mass_->biomass_present ();
  }

  const ::common::units_decimal_nonnegative& mass_simpl::
  biomass ()
  {
    return this->mass_simpl_state_.mass_->biomass ();
  }

  bool mass_simpl::
  fluid_mass_present ()
  {
    return this->mass_simpl_state_.mass_->fluid_mass_present ();
  }

  const ::common::units_decimal_nonnegative& mass_simpl::
  fluid_mass ()
  {
    return this->mass_simpl_state_.mass_->fluid_mass ();
  }

  bool mass_simpl::
  total_mass_present ()
  {
    return this->mass_simpl_state_.mass_->total_mass_present ();
  }

  const ::common::units_decimal_nonnegative& mass_simpl::
  total_mass ()
  {
    return this->mass_simpl_state_.mass_->total_mass ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

