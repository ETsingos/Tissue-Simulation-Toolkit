// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_COMMON_IPP
#define PHENOTYPE_COMMON_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

#include "variables.ipp"

namespace phenotype_common
{
  // adhesion
  //

  inline
  bool adhesion::
  adhesion_bond_breaking_rate_present () const
  {
    return this->adhesion_bond_breaking_rate_ != 0;
  }

  inline
  const ::common::units_decimal& adhesion::
  adhesion_bond_breaking_rate () const
  {
    return *this->adhesion_bond_breaking_rate_;
  }

  inline
  ::common::units_decimal& adhesion::
  adhesion_bond_breaking_rate ()
  {
    return *this->adhesion_bond_breaking_rate_;
  }

  inline
  void adhesion::
  adhesion_bond_breaking_rate (::common::units_decimal* x)
  {
    delete this->adhesion_bond_breaking_rate_;
    this->adhesion_bond_breaking_rate_ = x;
  }

  inline
  ::common::units_decimal* adhesion::
  adhesion_bond_breaking_rate_detach ()
  {
    ::common::units_decimal* r = this->adhesion_bond_breaking_rate_;
    this->adhesion_bond_breaking_rate_ = 0;
    return r;
  }

  inline
  bool adhesion::
  adhesion_bond_formation_rate_present () const
  {
    return this->adhesion_bond_formation_rate_ != 0;
  }

  inline
  const ::common::units_decimal& adhesion::
  adhesion_bond_formation_rate () const
  {
    return *this->adhesion_bond_formation_rate_;
  }

  inline
  ::common::units_decimal& adhesion::
  adhesion_bond_formation_rate ()
  {
    return *this->adhesion_bond_formation_rate_;
  }

  inline
  void adhesion::
  adhesion_bond_formation_rate (::common::units_decimal* x)
  {
    delete this->adhesion_bond_formation_rate_;
    this->adhesion_bond_formation_rate_ = x;
  }

  inline
  ::common::units_decimal* adhesion::
  adhesion_bond_formation_rate_detach ()
  {
    ::common::units_decimal* r = this->adhesion_bond_formation_rate_;
    this->adhesion_bond_formation_rate_ = 0;
    return r;
  }

  inline
  bool adhesion::
  adhesion_spring_constant_present () const
  {
    return this->adhesion_spring_constant_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& adhesion::
  adhesion_spring_constant () const
  {
    return *this->adhesion_spring_constant_;
  }

  inline
  ::common::units_decimal_nonnegative& adhesion::
  adhesion_spring_constant ()
  {
    return *this->adhesion_spring_constant_;
  }

  inline
  void adhesion::
  adhesion_spring_constant (::common::units_decimal_nonnegative* x)
  {
    delete this->adhesion_spring_constant_;
    this->adhesion_spring_constant_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* adhesion::
  adhesion_spring_constant_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->adhesion_spring_constant_;
    this->adhesion_spring_constant_ = 0;
    return r;
  }

  inline
  bool adhesion::
  adhesion_receptor_density_present () const
  {
    return this->adhesion_receptor_density_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& adhesion::
  adhesion_receptor_density () const
  {
    return *this->adhesion_receptor_density_;
  }

  inline
  ::common::units_decimal_nonnegative& adhesion::
  adhesion_receptor_density ()
  {
    return *this->adhesion_receptor_density_;
  }

  inline
  void adhesion::
  adhesion_receptor_density (::common::units_decimal_nonnegative* x)
  {
    delete this->adhesion_receptor_density_;
    this->adhesion_receptor_density_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* adhesion::
  adhesion_receptor_density_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->adhesion_receptor_density_;
    this->adhesion_receptor_density_ = 0;
    return r;
  }

  inline
  bool adhesion::
  surface_binding_energy_present () const
  {
    return this->surface_binding_energy_ != 0;
  }

  inline
  const ::common::units_decimal& adhesion::
  surface_binding_energy () const
  {
    return *this->surface_binding_energy_;
  }

  inline
  ::common::units_decimal& adhesion::
  surface_binding_energy ()
  {
    return *this->surface_binding_energy_;
  }

  inline
  void adhesion::
  surface_binding_energy (::common::units_decimal* x)
  {
    delete this->surface_binding_energy_;
    this->surface_binding_energy_ = x;
  }

  inline
  ::common::units_decimal* adhesion::
  surface_binding_energy_detach ()
  {
    ::common::units_decimal* r = this->surface_binding_energy_;
    this->surface_binding_energy_ = 0;
    return r;
  }

  inline
  bool adhesion::
  number_of_adhered_cells_present () const
  {
    return this->number_of_adhered_cells_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& adhesion::
  number_of_adhered_cells () const
  {
    return *this->number_of_adhered_cells_;
  }

  inline
  ::common::units_decimal_nonnegative& adhesion::
  number_of_adhered_cells ()
  {
    return *this->number_of_adhered_cells_;
  }

  inline
  void adhesion::
  number_of_adhered_cells (::common::units_decimal_nonnegative* x)
  {
    delete this->number_of_adhered_cells_;
    this->number_of_adhered_cells_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* adhesion::
  number_of_adhered_cells_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->number_of_adhered_cells_;
    this->number_of_adhered_cells_ = 0;
    return r;
  }

  inline
  bool adhesion::
  maximum_number_of_adhered_cells_present () const
  {
    return this->maximum_number_of_adhered_cells_present_;
  }

  inline
  void adhesion::
  maximum_number_of_adhered_cells_present (bool x)
  {
    this->maximum_number_of_adhered_cells_present_ = x;
  }

  inline
  const ::common::units_unsignedShort& adhesion::
  maximum_number_of_adhered_cells () const
  {
    return this->maximum_number_of_adhered_cells_;
  }

  inline
  ::common::units_unsignedShort& adhesion::
  maximum_number_of_adhered_cells ()
  {
    return this->maximum_number_of_adhered_cells_;
  }

  inline
  void adhesion::
  maximum_number_of_adhered_cells (const ::common::units_unsignedShort& x)
  {
    this->maximum_number_of_adhered_cells_ = x;
    this->maximum_number_of_adhered_cells_present_ = true;
  }

  inline
  bool adhesion::
  adhered_surface_area_present () const
  {
    return this->adhered_surface_area_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& adhesion::
  adhered_surface_area () const
  {
    return *this->adhered_surface_area_;
  }

  inline
  ::common::units_decimal_nonnegative& adhesion::
  adhered_surface_area ()
  {
    return *this->adhered_surface_area_;
  }

  inline
  void adhesion::
  adhered_surface_area (::common::units_decimal_nonnegative* x)
  {
    delete this->adhered_surface_area_;
    this->adhered_surface_area_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* adhesion::
  adhered_surface_area_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->adhered_surface_area_;
    this->adhered_surface_area_ = 0;
    return r;
  }

  inline
  bool adhesion::
  maximum_adhered_surface_area_present () const
  {
    return this->maximum_adhered_surface_area_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& adhesion::
  maximum_adhered_surface_area () const
  {
    return *this->maximum_adhered_surface_area_;
  }

  inline
  ::common::units_decimal_nonnegative& adhesion::
  maximum_adhered_surface_area ()
  {
    return *this->maximum_adhered_surface_area_;
  }

  inline
  void adhesion::
  maximum_adhered_surface_area (::common::units_decimal_nonnegative* x)
  {
    delete this->maximum_adhered_surface_area_;
    this->maximum_adhered_surface_area_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* adhesion::
  maximum_adhered_surface_area_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->maximum_adhered_surface_area_;
    this->maximum_adhered_surface_area_ = 0;
    return r;
  }

  inline
  bool adhesion::
  adhesion_force_per_surface_area_present () const
  {
    return this->adhesion_force_per_surface_area_ != 0;
  }

  inline
  const ::common::units_decimal& adhesion::
  adhesion_force_per_surface_area () const
  {
    return *this->adhesion_force_per_surface_area_;
  }

  inline
  ::common::units_decimal& adhesion::
  adhesion_force_per_surface_area ()
  {
    return *this->adhesion_force_per_surface_area_;
  }

  inline
  void adhesion::
  adhesion_force_per_surface_area (::common::units_decimal* x)
  {
    delete this->adhesion_force_per_surface_area_;
    this->adhesion_force_per_surface_area_ = x;
  }

  inline
  ::common::units_decimal* adhesion::
  adhesion_force_per_surface_area_detach ()
  {
    ::common::units_decimal* r = this->adhesion_force_per_surface_area_;
    this->adhesion_force_per_surface_area_ = 0;
    return r;
  }

  inline
  bool adhesion::
  adhesion_probability_present () const
  {
    return this->adhesion_probability_ != 0;
  }

  inline
  const ::common::units_fraction& adhesion::
  adhesion_probability () const
  {
    return *this->adhesion_probability_;
  }

  inline
  ::common::units_fraction& adhesion::
  adhesion_probability ()
  {
    return *this->adhesion_probability_;
  }

  inline
  void adhesion::
  adhesion_probability (::common::units_fraction* x)
  {
    delete this->adhesion_probability_;
    this->adhesion_probability_ = x;
  }

  inline
  ::common::units_fraction* adhesion::
  adhesion_probability_detach ()
  {
    ::common::units_fraction* r = this->adhesion_probability_;
    this->adhesion_probability_ = 0;
    return r;
  }

  inline
  bool adhesion::
  detachment_proability_present () const
  {
    return this->detachment_proability_ != 0;
  }

  inline
  const ::common::units_fraction& adhesion::
  detachment_proability () const
  {
    return *this->detachment_proability_;
  }

  inline
  ::common::units_fraction& adhesion::
  detachment_proability ()
  {
    return *this->detachment_proability_;
  }

  inline
  void adhesion::
  detachment_proability (::common::units_fraction* x)
  {
    delete this->detachment_proability_;
    this->detachment_proability_ = x;
  }

  inline
  ::common::units_fraction* adhesion::
  detachment_proability_detach ()
  {
    ::common::units_fraction* r = this->detachment_proability_;
    this->detachment_proability_ = 0;
    return r;
  }

  inline
  const adhesion::rolling_observation_sequence& adhesion::
  rolling_observation () const
  {
    return this->rolling_observation_;
  }

  inline
  adhesion::rolling_observation_sequence& adhesion::
  rolling_observation ()
  {
    return this->rolling_observation_;
  }

  inline
  bool adhesion::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& adhesion::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& adhesion::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void adhesion::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* adhesion::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // rolling_observation
  //

  inline
  const ::common::units_decimal& rolling_observation::
  rolling_velocity () const
  {
    return *this->rolling_velocity_;
  }

  inline
  ::common::units_decimal& rolling_observation::
  rolling_velocity ()
  {
    return *this->rolling_velocity_;
  }

  inline
  void rolling_observation::
  rolling_velocity (::common::units_decimal* x)
  {
    delete this->rolling_velocity_;
    this->rolling_velocity_ = x;
  }

  inline
  ::common::units_decimal* rolling_observation::
  rolling_velocity_detach ()
  {
    ::common::units_decimal* r = this->rolling_velocity_;
    this->rolling_velocity_ = 0;
    return r;
  }

  inline
  const ::common::units_decimal& rolling_observation::
  shear_stress () const
  {
    return *this->shear_stress_;
  }

  inline
  ::common::units_decimal& rolling_observation::
  shear_stress ()
  {
    return *this->shear_stress_;
  }

  inline
  void rolling_observation::
  shear_stress (::common::units_decimal* x)
  {
    delete this->shear_stress_;
    this->shear_stress_ = x;
  }

  inline
  ::common::units_decimal* rolling_observation::
  shear_stress_detach ()
  {
    ::common::units_decimal* r = this->shear_stress_;
    this->shear_stress_ = 0;
    return r;
  }

  // friction
  //

  inline
  bool friction::
  compression_present () const
  {
    return this->compression_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& friction::
  compression () const
  {
    return *this->compression_;
  }

  inline
  ::common::units_decimal_nonnegative& friction::
  compression ()
  {
    return *this->compression_;
  }

  inline
  void friction::
  compression (::common::units_decimal_nonnegative* x)
  {
    delete this->compression_;
    this->compression_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* friction::
  compression_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->compression_;
    this->compression_ = 0;
    return r;
  }

  inline
  bool friction::
  ECM_present () const
  {
    return this->ECM_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& friction::
  ECM () const
  {
    return *this->ECM_;
  }

  inline
  ::common::units_decimal_nonnegative& friction::
  ECM ()
  {
    return *this->ECM_;
  }

  inline
  void friction::
  ECM (::common::units_decimal_nonnegative* x)
  {
    delete this->ECM_;
    this->ECM_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* friction::
  ECM_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->ECM_;
    this->ECM_ = 0;
    return r;
  }

  inline
  bool friction::
  shear_present () const
  {
    return this->shear_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& friction::
  shear () const
  {
    return *this->shear_;
  }

  inline
  ::common::units_decimal_nonnegative& friction::
  shear ()
  {
    return *this->shear_;
  }

  inline
  void friction::
  shear (::common::units_decimal_nonnegative* x)
  {
    delete this->shear_;
    this->shear_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* friction::
  shear_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->shear_;
    this->shear_ = 0;
    return r;
  }

  // mechanics
  //

  inline
  bool mechanics::
  friction_present () const
  {
    return this->friction_ != 0;
  }

  inline
  const ::phenotype_common::friction& mechanics::
  friction () const
  {
    return *this->friction_;
  }

  inline
  ::phenotype_common::friction& mechanics::
  friction ()
  {
    return *this->friction_;
  }

  inline
  void mechanics::
  friction (::phenotype_common::friction* x)
  {
    delete this->friction_;
    this->friction_ = x;
  }

  inline
  ::phenotype_common::friction* mechanics::
  friction_detach ()
  {
    ::phenotype_common::friction* r = this->friction_;
    this->friction_ = 0;
    return r;
  }

  inline
  bool mechanics::
  maximum_cell_deformation_present () const
  {
    return this->maximum_cell_deformation_ != 0;
  }

  inline
  const ::common::units_decimal& mechanics::
  maximum_cell_deformation () const
  {
    return *this->maximum_cell_deformation_;
  }

  inline
  ::common::units_decimal& mechanics::
  maximum_cell_deformation ()
  {
    return *this->maximum_cell_deformation_;
  }

  inline
  void mechanics::
  maximum_cell_deformation (::common::units_decimal* x)
  {
    delete this->maximum_cell_deformation_;
    this->maximum_cell_deformation_ = x;
  }

  inline
  ::common::units_decimal* mechanics::
  maximum_cell_deformation_detach ()
  {
    ::common::units_decimal* r = this->maximum_cell_deformation_;
    this->maximum_cell_deformation_ = 0;
    return r;
  }

  inline
  bool mechanics::
  mechanical_pressure_present () const
  {
    return this->mechanical_pressure_ != 0;
  }

  inline
  const ::common::units_decimal& mechanics::
  mechanical_pressure () const
  {
    return *this->mechanical_pressure_;
  }

  inline
  ::common::units_decimal& mechanics::
  mechanical_pressure ()
  {
    return *this->mechanical_pressure_;
  }

  inline
  void mechanics::
  mechanical_pressure (::common::units_decimal* x)
  {
    delete this->mechanical_pressure_;
    this->mechanical_pressure_ = x;
  }

  inline
  ::common::units_decimal* mechanics::
  mechanical_pressure_detach ()
  {
    ::common::units_decimal* r = this->mechanical_pressure_;
    this->mechanical_pressure_ = 0;
    return r;
  }

  inline
  const mechanics::indentation_observation_sequence& mechanics::
  indentation_observation () const
  {
    return this->indentation_observation_;
  }

  inline
  mechanics::indentation_observation_sequence& mechanics::
  indentation_observation ()
  {
    return this->indentation_observation_;
  }

  inline
  bool mechanics::
  poisson_ratio_present () const
  {
    return this->poisson_ratio_ != 0;
  }

  inline
  const ::common::units_decimal& mechanics::
  poisson_ratio () const
  {
    return *this->poisson_ratio_;
  }

  inline
  ::common::units_decimal& mechanics::
  poisson_ratio ()
  {
    return *this->poisson_ratio_;
  }

  inline
  void mechanics::
  poisson_ratio (::common::units_decimal* x)
  {
    delete this->poisson_ratio_;
    this->poisson_ratio_ = x;
  }

  inline
  ::common::units_decimal* mechanics::
  poisson_ratio_detach ()
  {
    ::common::units_decimal* r = this->poisson_ratio_;
    this->poisson_ratio_ = 0;
    return r;
  }

  inline
  bool mechanics::
  youngs_modulus_present () const
  {
    return this->youngs_modulus_ != 0;
  }

  inline
  const ::common::units_decimal& mechanics::
  youngs_modulus () const
  {
    return *this->youngs_modulus_;
  }

  inline
  ::common::units_decimal& mechanics::
  youngs_modulus ()
  {
    return *this->youngs_modulus_;
  }

  inline
  void mechanics::
  youngs_modulus (::common::units_decimal* x)
  {
    delete this->youngs_modulus_;
    this->youngs_modulus_ = x;
  }

  inline
  ::common::units_decimal* mechanics::
  youngs_modulus_detach ()
  {
    ::common::units_decimal* r = this->youngs_modulus_;
    this->youngs_modulus_ = 0;
    return r;
  }

  inline
  bool mechanics::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& mechanics::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& mechanics::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void mechanics::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* mechanics::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // indentation_observation
  //

  inline
  const ::common::units_decimal& indentation_observation::
  depth () const
  {
    return *this->depth_;
  }

  inline
  ::common::units_decimal& indentation_observation::
  depth ()
  {
    return *this->depth_;
  }

  inline
  void indentation_observation::
  depth (::common::units_decimal* x)
  {
    delete this->depth_;
    this->depth_ = x;
  }

  inline
  ::common::units_decimal* indentation_observation::
  depth_detach ()
  {
    ::common::units_decimal* r = this->depth_;
    this->depth_ = 0;
    return r;
  }

  inline
  bool indentation_observation::
  poisson_ratio_present () const
  {
    return this->poisson_ratio_ != 0;
  }

  inline
  const ::common::units_decimal& indentation_observation::
  poisson_ratio () const
  {
    return *this->poisson_ratio_;
  }

  inline
  ::common::units_decimal& indentation_observation::
  poisson_ratio ()
  {
    return *this->poisson_ratio_;
  }

  inline
  void indentation_observation::
  poisson_ratio (::common::units_decimal* x)
  {
    delete this->poisson_ratio_;
    this->poisson_ratio_ = x;
  }

  inline
  ::common::units_decimal* indentation_observation::
  poisson_ratio_detach ()
  {
    ::common::units_decimal* r = this->poisson_ratio_;
    this->poisson_ratio_ = 0;
    return r;
  }

  inline
  bool indentation_observation::
  youngs_modulus_present () const
  {
    return this->youngs_modulus_ != 0;
  }

  inline
  const ::common::units_decimal& indentation_observation::
  youngs_modulus () const
  {
    return *this->youngs_modulus_;
  }

  inline
  ::common::units_decimal& indentation_observation::
  youngs_modulus ()
  {
    return *this->youngs_modulus_;
  }

  inline
  void indentation_observation::
  youngs_modulus (::common::units_decimal* x)
  {
    delete this->youngs_modulus_;
    this->youngs_modulus_ = x;
  }

  inline
  ::common::units_decimal* indentation_observation::
  youngs_modulus_detach ()
  {
    ::common::units_decimal* r = this->youngs_modulus_;
    this->youngs_modulus_ = 0;
    return r;
  }

  // motility
  //

  inline
  const motility::unrestricted_sequence& motility::
  unrestricted () const
  {
    return this->unrestricted_;
  }

  inline
  motility::unrestricted_sequence& motility::
  unrestricted ()
  {
    return this->unrestricted_;
  }

  inline
  const motility::restricted_sequence& motility::
  restricted () const
  {
    return this->restricted_;
  }

  inline
  motility::restricted_sequence& motility::
  restricted ()
  {
    return this->restricted_;
  }

  // motility_types
  //

  inline
  bool motility_types::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void motility_types::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned int motility_types::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned int& motility_types::
  ID ()
  {
    return this->ID_;
  }

  inline
  void motility_types::
  ID (unsigned int x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  bool motility_types::
  timescale_present () const
  {
    return this->timescale_ != 0;
  }

  inline
  const ::phenotype_common::timescale& motility_types::
  timescale () const
  {
    return *this->timescale_;
  }

  inline
  ::phenotype_common::timescale& motility_types::
  timescale ()
  {
    return *this->timescale_;
  }

  inline
  void motility_types::
  timescale (::phenotype_common::timescale* x)
  {
    delete this->timescale_;
    this->timescale_ = x;
  }

  inline
  ::phenotype_common::timescale* motility_types::
  timescale_detach ()
  {
    ::phenotype_common::timescale* r = this->timescale_;
    this->timescale_ = 0;
    return r;
  }

  inline
  bool motility_types::
  restriction_present () const
  {
    return this->restriction_ != 0;
  }

  inline
  const ::variables::experimental_conditions& motility_types::
  restriction () const
  {
    return *this->restriction_;
  }

  inline
  ::variables::experimental_conditions& motility_types::
  restriction ()
  {
    return *this->restriction_;
  }

  inline
  void motility_types::
  restriction (::variables::experimental_conditions* x)
  {
    delete this->restriction_;
    this->restriction_ = x;
  }

  inline
  ::variables::experimental_conditions* motility_types::
  restriction_detach ()
  {
    ::variables::experimental_conditions* r = this->restriction_;
    this->restriction_ = 0;
    return r;
  }

  inline
  bool motility_types::
  net_displacement_present () const
  {
    return this->net_displacement_ != 0;
  }

  inline
  const ::common::units_decimal& motility_types::
  net_displacement () const
  {
    return *this->net_displacement_;
  }

  inline
  ::common::units_decimal& motility_types::
  net_displacement ()
  {
    return *this->net_displacement_;
  }

  inline
  void motility_types::
  net_displacement (::common::units_decimal* x)
  {
    delete this->net_displacement_;
    this->net_displacement_ = x;
  }

  inline
  ::common::units_decimal* motility_types::
  net_displacement_detach ()
  {
    ::common::units_decimal* r = this->net_displacement_;
    this->net_displacement_ = 0;
    return r;
  }

  inline
  bool motility_types::
  total_displacement_present () const
  {
    return this->total_displacement_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& motility_types::
  total_displacement () const
  {
    return *this->total_displacement_;
  }

  inline
  ::common::units_decimal_nonnegative& motility_types::
  total_displacement ()
  {
    return *this->total_displacement_;
  }

  inline
  void motility_types::
  total_displacement (::common::units_decimal_nonnegative* x)
  {
    delete this->total_displacement_;
    this->total_displacement_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* motility_types::
  total_displacement_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->total_displacement_;
    this->total_displacement_ = 0;
    return r;
  }

  inline
  bool motility_types::
  mean_square_displacement_present () const
  {
    return this->mean_square_displacement_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& motility_types::
  mean_square_displacement () const
  {
    return *this->mean_square_displacement_;
  }

  inline
  ::common::units_decimal_nonnegative& motility_types::
  mean_square_displacement ()
  {
    return *this->mean_square_displacement_;
  }

  inline
  void motility_types::
  mean_square_displacement (::common::units_decimal_nonnegative* x)
  {
    delete this->mean_square_displacement_;
    this->mean_square_displacement_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* motility_types::
  mean_square_displacement_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->mean_square_displacement_;
    this->mean_square_displacement_ = 0;
    return r;
  }

  inline
  bool motility_types::
  mean_speed_present () const
  {
    return this->mean_speed_ != 0;
  }

  inline
  const ::common::units_decimal& motility_types::
  mean_speed () const
  {
    return *this->mean_speed_;
  }

  inline
  ::common::units_decimal& motility_types::
  mean_speed ()
  {
    return *this->mean_speed_;
  }

  inline
  void motility_types::
  mean_speed (::common::units_decimal* x)
  {
    delete this->mean_speed_;
    this->mean_speed_ = x;
  }

  inline
  ::common::units_decimal* motility_types::
  mean_speed_detach ()
  {
    ::common::units_decimal* r = this->mean_speed_;
    this->mean_speed_ = 0;
    return r;
  }

  inline
  bool motility_types::
  net_speed_present () const
  {
    return this->net_speed_ != 0;
  }

  inline
  const ::common::units_decimal& motility_types::
  net_speed () const
  {
    return *this->net_speed_;
  }

  inline
  ::common::units_decimal& motility_types::
  net_speed ()
  {
    return *this->net_speed_;
  }

  inline
  void motility_types::
  net_speed (::common::units_decimal* x)
  {
    delete this->net_speed_;
    this->net_speed_ = x;
  }

  inline
  ::common::units_decimal* motility_types::
  net_speed_detach ()
  {
    ::common::units_decimal* r = this->net_speed_;
    this->net_speed_ = 0;
    return r;
  }

  inline
  bool motility_types::
  persistence_present () const
  {
    return this->persistence_ != 0;
  }

  inline
  const ::common::units_decimal& motility_types::
  persistence () const
  {
    return *this->persistence_;
  }

  inline
  ::common::units_decimal& motility_types::
  persistence ()
  {
    return *this->persistence_;
  }

  inline
  void motility_types::
  persistence (::common::units_decimal* x)
  {
    delete this->persistence_;
    this->persistence_ = x;
  }

  inline
  ::common::units_decimal* motility_types::
  persistence_detach ()
  {
    ::common::units_decimal* r = this->persistence_;
    this->persistence_ = 0;
    return r;
  }

  inline
  bool motility_types::
  mean_path_length_present () const
  {
    return this->mean_path_length_ != 0;
  }

  inline
  const ::common::units_decimal& motility_types::
  mean_path_length () const
  {
    return *this->mean_path_length_;
  }

  inline
  ::common::units_decimal& motility_types::
  mean_path_length ()
  {
    return *this->mean_path_length_;
  }

  inline
  void motility_types::
  mean_path_length (::common::units_decimal* x)
  {
    delete this->mean_path_length_;
    this->mean_path_length_ = x;
  }

  inline
  ::common::units_decimal* motility_types::
  mean_path_length_detach ()
  {
    ::common::units_decimal* r = this->mean_path_length_;
    this->mean_path_length_ = 0;
    return r;
  }

  inline
  bool motility_types::
  diffusion_coefficient_present () const
  {
    return this->diffusion_coefficient_ != 0;
  }

  inline
  const ::common::units_decimal& motility_types::
  diffusion_coefficient () const
  {
    return *this->diffusion_coefficient_;
  }

  inline
  ::common::units_decimal& motility_types::
  diffusion_coefficient ()
  {
    return *this->diffusion_coefficient_;
  }

  inline
  void motility_types::
  diffusion_coefficient (::common::units_decimal* x)
  {
    delete this->diffusion_coefficient_;
    this->diffusion_coefficient_ = x;
  }

  inline
  ::common::units_decimal* motility_types::
  diffusion_coefficient_detach ()
  {
    ::common::units_decimal* r = this->diffusion_coefficient_;
    this->diffusion_coefficient_ = 0;
    return r;
  }

  inline
  bool motility_types::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& motility_types::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& motility_types::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void motility_types::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* motility_types::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // timescale
  //

  inline
  bool timescale::
  mitotic_present () const
  {
    return this->mitotic_present_;
  }

  inline
  void timescale::
  mitotic_present (bool x)
  {
    this->mitotic_present_ = x;
  }

  inline
  bool timescale::
  mitotic () const
  {
    return this->mitotic_;
  }

  inline
  bool& timescale::
  mitotic ()
  {
    return this->mitotic_;
  }

  inline
  void timescale::
  mitotic (bool x)
  {
    this->mitotic_ = x;
    this->mitotic_present_ = true;
  }

  // transport_processes
  //

  inline
  const transport_processes::variable_sequence& transport_processes::
  variable () const
  {
    return this->variable_;
  }

  inline
  transport_processes::variable_sequence& transport_processes::
  variable ()
  {
    return this->variable_;
  }

  // transport_variable
  //

  inline
  const ::std::string& transport_variable::
  name () const
  {
    return this->name_;
  }

  inline
  ::std::string& transport_variable::
  name ()
  {
    return this->name_;
  }

  inline
  void transport_variable::
  name (const ::std::string& x)
  {
    this->name_ = x;
  }

  inline
  bool transport_variable::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void transport_variable::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& transport_variable::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& transport_variable::
  units ()
  {
    return this->units_;
  }

  inline
  void transport_variable::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool transport_variable::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void transport_variable::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned long long transport_variable::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned long long& transport_variable::
  ID ()
  {
    return this->ID_;
  }

  inline
  void transport_variable::
  ID (unsigned long long x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  bool transport_variable::
  type_present () const
  {
    return this->type_present_;
  }

  inline
  void transport_variable::
  type_present (bool x)
  {
    this->type_present_ = x;
  }

  inline
  const ::variables::amount_type& transport_variable::
  type () const
  {
    return this->type_;
  }

  inline
  ::variables::amount_type& transport_variable::
  type ()
  {
    return this->type_;
  }

  inline
  void transport_variable::
  type (const ::variables::amount_type& x)
  {
    this->type_ = x;
    this->type_present_ = true;
  }

  inline
  bool transport_variable::
  ChEBI_ID_present () const
  {
    return this->ChEBI_ID_present_;
  }

  inline
  void transport_variable::
  ChEBI_ID_present (bool x)
  {
    this->ChEBI_ID_present_ = x;
  }

  inline
  const ::std::string& transport_variable::
  ChEBI_ID () const
  {
    return this->ChEBI_ID_;
  }

  inline
  ::std::string& transport_variable::
  ChEBI_ID ()
  {
    return this->ChEBI_ID_;
  }

  inline
  void transport_variable::
  ChEBI_ID (const ::std::string& x)
  {
    this->ChEBI_ID_ = x;
    this->ChEBI_ID_present_ = true;
  }

  inline
  bool transport_variable::
  MeSH_ID_present () const
  {
    return this->MeSH_ID_present_;
  }

  inline
  void transport_variable::
  MeSH_ID_present (bool x)
  {
    this->MeSH_ID_present_ = x;
  }

  inline
  const ::std::string& transport_variable::
  MeSH_ID () const
  {
    return this->MeSH_ID_;
  }

  inline
  ::std::string& transport_variable::
  MeSH_ID ()
  {
    return this->MeSH_ID_;
  }

  inline
  void transport_variable::
  MeSH_ID (const ::std::string& x)
  {
    this->MeSH_ID_ = x;
    this->MeSH_ID_present_ = true;
  }

  inline
  bool transport_variable::
  DrugBank_ID_present () const
  {
    return this->DrugBank_ID_present_;
  }

  inline
  void transport_variable::
  DrugBank_ID_present (bool x)
  {
    this->DrugBank_ID_present_ = x;
  }

  inline
  const ::std::string& transport_variable::
  DrugBank_ID () const
  {
    return this->DrugBank_ID_;
  }

  inline
  ::std::string& transport_variable::
  DrugBank_ID ()
  {
    return this->DrugBank_ID_;
  }

  inline
  void transport_variable::
  DrugBank_ID (const ::std::string& x)
  {
    this->DrugBank_ID_ = x;
    this->DrugBank_ID_present_ = true;
  }

  inline
  bool transport_variable::
  GMO_ID_present () const
  {
    return this->GMO_ID_present_;
  }

  inline
  void transport_variable::
  GMO_ID_present (bool x)
  {
    this->GMO_ID_present_ = x;
  }

  inline
  const ::std::string& transport_variable::
  GMO_ID () const
  {
    return this->GMO_ID_;
  }

  inline
  ::std::string& transport_variable::
  GMO_ID ()
  {
    return this->GMO_ID_;
  }

  inline
  void transport_variable::
  GMO_ID (const ::std::string& x)
  {
    this->GMO_ID_ = x;
    this->GMO_ID_present_ = true;
  }

  inline
  bool transport_variable::
  GO_ID_present () const
  {
    return this->GO_ID_present_;
  }

  inline
  void transport_variable::
  GO_ID_present (bool x)
  {
    this->GO_ID_present_ = x;
  }

  inline
  const ::std::string& transport_variable::
  GO_ID () const
  {
    return this->GO_ID_;
  }

  inline
  ::std::string& transport_variable::
  GO_ID ()
  {
    return this->GO_ID_;
  }

  inline
  void transport_variable::
  GO_ID (const ::std::string& x)
  {
    this->GO_ID_ = x;
    this->GO_ID_present_ = true;
  }

  inline
  bool transport_variable::
  UniProt_ID_present () const
  {
    return this->UniProt_ID_present_;
  }

  inline
  void transport_variable::
  UniProt_ID_present (bool x)
  {
    this->UniProt_ID_present_ = x;
  }

  inline
  const ::std::string& transport_variable::
  UniProt_ID () const
  {
    return this->UniProt_ID_;
  }

  inline
  ::std::string& transport_variable::
  UniProt_ID ()
  {
    return this->UniProt_ID_;
  }

  inline
  void transport_variable::
  UniProt_ID (const ::std::string& x)
  {
    this->UniProt_ID_ = x;
    this->UniProt_ID_present_ = true;
  }

  inline
  bool transport_variable::
  PR_ID_present () const
  {
    return this->PR_ID_present_;
  }

  inline
  void transport_variable::
  PR_ID_present (bool x)
  {
    this->PR_ID_present_ = x;
  }

  inline
  const ::std::string& transport_variable::
  PR_ID () const
  {
    return this->PR_ID_;
  }

  inline
  ::std::string& transport_variable::
  PR_ID ()
  {
    return this->PR_ID_;
  }

  inline
  void transport_variable::
  PR_ID (const ::std::string& x)
  {
    this->PR_ID_ = x;
    this->PR_ID_present_ = true;
  }

  inline
  bool transport_variable::
  all_present () const
  {
    return this->all_ != 0;
  }

  inline
  const transport_variable::all_type& transport_variable::
  all () const
  {
    return *this->all_;
  }

  inline
  transport_variable::all_type& transport_variable::
  all ()
  {
    return *this->all_;
  }

  inline
  void transport_variable::
  all (all_type* x)
  {
    delete this->all_;
    this->all_ = x;
  }

  inline
  transport_variable::all_type* transport_variable::
  all_detach ()
  {
    all_type* r = this->all_;
    this->all_ = 0;
    return r;
  }

  inline
  bool transport_variable::all_type::
  export_rate_present () const
  {
    return this->export_rate_ != 0;
  }

  inline
  const ::common::units_decimal& transport_variable::all_type::
  export_rate () const
  {
    return *this->export_rate_;
  }

  inline
  ::common::units_decimal& transport_variable::all_type::
  export_rate ()
  {
    return *this->export_rate_;
  }

  inline
  void transport_variable::all_type::
  export_rate (::common::units_decimal* x)
  {
    delete this->export_rate_;
    this->export_rate_ = x;
  }

  inline
  ::common::units_decimal* transport_variable::all_type::
  export_rate_detach ()
  {
    ::common::units_decimal* r = this->export_rate_;
    this->export_rate_ = 0;
    return r;
  }

  inline
  bool transport_variable::all_type::
  export_rate_per_unit_surface_area_present () const
  {
    return this->export_rate_per_unit_surface_area_ != 0;
  }

  inline
  const ::common::units_decimal& transport_variable::all_type::
  export_rate_per_unit_surface_area () const
  {
    return *this->export_rate_per_unit_surface_area_;
  }

  inline
  ::common::units_decimal& transport_variable::all_type::
  export_rate_per_unit_surface_area ()
  {
    return *this->export_rate_per_unit_surface_area_;
  }

  inline
  void transport_variable::all_type::
  export_rate_per_unit_surface_area (::common::units_decimal* x)
  {
    delete this->export_rate_per_unit_surface_area_;
    this->export_rate_per_unit_surface_area_ = x;
  }

  inline
  ::common::units_decimal* transport_variable::all_type::
  export_rate_per_unit_surface_area_detach ()
  {
    ::common::units_decimal* r = this->export_rate_per_unit_surface_area_;
    this->export_rate_per_unit_surface_area_ = 0;
    return r;
  }

  inline
  bool transport_variable::all_type::
  import_rate_present () const
  {
    return this->import_rate_ != 0;
  }

  inline
  const ::common::units_decimal& transport_variable::all_type::
  import_rate () const
  {
    return *this->import_rate_;
  }

  inline
  ::common::units_decimal& transport_variable::all_type::
  import_rate ()
  {
    return *this->import_rate_;
  }

  inline
  void transport_variable::all_type::
  import_rate (::common::units_decimal* x)
  {
    delete this->import_rate_;
    this->import_rate_ = x;
  }

  inline
  ::common::units_decimal* transport_variable::all_type::
  import_rate_detach ()
  {
    ::common::units_decimal* r = this->import_rate_;
    this->import_rate_ = 0;
    return r;
  }

  inline
  bool transport_variable::all_type::
  import_rate_per_unit_surface_area_present () const
  {
    return this->import_rate_per_unit_surface_area_ != 0;
  }

  inline
  const ::common::units_decimal& transport_variable::all_type::
  import_rate_per_unit_surface_area () const
  {
    return *this->import_rate_per_unit_surface_area_;
  }

  inline
  ::common::units_decimal& transport_variable::all_type::
  import_rate_per_unit_surface_area ()
  {
    return *this->import_rate_per_unit_surface_area_;
  }

  inline
  void transport_variable::all_type::
  import_rate_per_unit_surface_area (::common::units_decimal* x)
  {
    delete this->import_rate_per_unit_surface_area_;
    this->import_rate_per_unit_surface_area_ = x;
  }

  inline
  ::common::units_decimal* transport_variable::all_type::
  import_rate_per_unit_surface_area_detach ()
  {
    ::common::units_decimal* r = this->import_rate_per_unit_surface_area_;
    this->import_rate_per_unit_surface_area_ = 0;
    return r;
  }

  inline
  bool transport_variable::all_type::
  saturation_density_present () const
  {
    return this->saturation_density_ != 0;
  }

  inline
  const ::common::units_decimal& transport_variable::all_type::
  saturation_density () const
  {
    return *this->saturation_density_;
  }

  inline
  ::common::units_decimal& transport_variable::all_type::
  saturation_density ()
  {
    return *this->saturation_density_;
  }

  inline
  void transport_variable::all_type::
  saturation_density (::common::units_decimal* x)
  {
    delete this->saturation_density_;
    this->saturation_density_ = x;
  }

  inline
  ::common::units_decimal* transport_variable::all_type::
  saturation_density_detach ()
  {
    ::common::units_decimal* r = this->saturation_density_;
    this->saturation_density_ = 0;
    return r;
  }

  inline
  bool transport_variable::all_type::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& transport_variable::all_type::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& transport_variable::all_type::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void transport_variable::all_type::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* transport_variable::all_type::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // geometrical_parameters
  //

  inline
  bool geometrical_parameters::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void geometrical_parameters::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& geometrical_parameters::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& geometrical_parameters::
  units ()
  {
    return this->units_;
  }

  inline
  void geometrical_parameters::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool geometrical_parameters::
  aspect_ratio_present () const
  {
    return this->aspect_ratio_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& geometrical_parameters::
  aspect_ratio () const
  {
    return *this->aspect_ratio_;
  }

  inline
  ::common::units_decimal_nonnegative& geometrical_parameters::
  aspect_ratio ()
  {
    return *this->aspect_ratio_;
  }

  inline
  void geometrical_parameters::
  aspect_ratio (::common::units_decimal_nonnegative* x)
  {
    delete this->aspect_ratio_;
    this->aspect_ratio_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* geometrical_parameters::
  aspect_ratio_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->aspect_ratio_;
    this->aspect_ratio_ = 0;
    return r;
  }

  inline
  bool geometrical_parameters::
  circularity_present () const
  {
    return this->circularity_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& geometrical_parameters::
  circularity () const
  {
    return *this->circularity_;
  }

  inline
  ::common::units_decimal_nonnegative& geometrical_parameters::
  circularity ()
  {
    return *this->circularity_;
  }

  inline
  void geometrical_parameters::
  circularity (::common::units_decimal_nonnegative* x)
  {
    delete this->circularity_;
    this->circularity_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* geometrical_parameters::
  circularity_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->circularity_;
    this->circularity_ = 0;
    return r;
  }

  inline
  bool geometrical_parameters::
  eccentricity_present () const
  {
    return this->eccentricity_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& geometrical_parameters::
  eccentricity () const
  {
    return *this->eccentricity_;
  }

  inline
  ::common::units_decimal_nonnegative& geometrical_parameters::
  eccentricity ()
  {
    return *this->eccentricity_;
  }

  inline
  void geometrical_parameters::
  eccentricity (::common::units_decimal_nonnegative* x)
  {
    delete this->eccentricity_;
    this->eccentricity_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* geometrical_parameters::
  eccentricity_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->eccentricity_;
    this->eccentricity_ = 0;
    return r;
  }

  inline
  bool geometrical_parameters::
  sphericity_present () const
  {
    return this->sphericity_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& geometrical_parameters::
  sphericity () const
  {
    return *this->sphericity_;
  }

  inline
  ::common::units_decimal_nonnegative& geometrical_parameters::
  sphericity ()
  {
    return *this->sphericity_;
  }

  inline
  void geometrical_parameters::
  sphericity (::common::units_decimal_nonnegative* x)
  {
    delete this->sphericity_;
    this->sphericity_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* geometrical_parameters::
  sphericity_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->sphericity_;
    this->sphericity_ = 0;
    return r;
  }

  inline
  bool geometrical_parameters::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& geometrical_parameters::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& geometrical_parameters::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void geometrical_parameters::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* geometrical_parameters::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // lengths
  //

  inline
  bool lengths::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void lengths::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& lengths::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& lengths::
  units ()
  {
    return this->units_;
  }

  inline
  void lengths::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool lengths::
  diameter_present () const
  {
    return this->diameter_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& lengths::
  diameter () const
  {
    return *this->diameter_;
  }

  inline
  ::common::units_decimal_nonnegative& lengths::
  diameter ()
  {
    return *this->diameter_;
  }

  inline
  void lengths::
  diameter (::common::units_decimal_nonnegative* x)
  {
    delete this->diameter_;
    this->diameter_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* lengths::
  diameter_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->diameter_;
    this->diameter_ = 0;
    return r;
  }

  inline
  bool lengths::
  major_axis_present () const
  {
    return this->major_axis_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& lengths::
  major_axis () const
  {
    return *this->major_axis_;
  }

  inline
  ::common::units_decimal_nonnegative& lengths::
  major_axis ()
  {
    return *this->major_axis_;
  }

  inline
  void lengths::
  major_axis (::common::units_decimal_nonnegative* x)
  {
    delete this->major_axis_;
    this->major_axis_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* lengths::
  major_axis_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->major_axis_;
    this->major_axis_ = 0;
    return r;
  }

  inline
  bool lengths::
  minor_axis_present () const
  {
    return this->minor_axis_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& lengths::
  minor_axis () const
  {
    return *this->minor_axis_;
  }

  inline
  ::common::units_decimal_nonnegative& lengths::
  minor_axis ()
  {
    return *this->minor_axis_;
  }

  inline
  void lengths::
  minor_axis (::common::units_decimal_nonnegative* x)
  {
    delete this->minor_axis_;
    this->minor_axis_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* lengths::
  minor_axis_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->minor_axis_;
    this->minor_axis_ = 0;
    return r;
  }

  inline
  bool lengths::
  perimeter_present () const
  {
    return this->perimeter_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& lengths::
  perimeter () const
  {
    return *this->perimeter_;
  }

  inline
  ::common::units_decimal_nonnegative& lengths::
  perimeter ()
  {
    return *this->perimeter_;
  }

  inline
  void lengths::
  perimeter (::common::units_decimal_nonnegative* x)
  {
    delete this->perimeter_;
    this->perimeter_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* lengths::
  perimeter_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->perimeter_;
    this->perimeter_ = 0;
    return r;
  }

  inline
  bool lengths::
  radius_present () const
  {
    return this->radius_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& lengths::
  radius () const
  {
    return *this->radius_;
  }

  inline
  ::common::units_decimal_nonnegative& lengths::
  radius ()
  {
    return *this->radius_;
  }

  inline
  void lengths::
  radius (::common::units_decimal_nonnegative* x)
  {
    delete this->radius_;
    this->radius_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* lengths::
  radius_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->radius_;
    this->radius_ = 0;
    return r;
  }

  inline
  bool lengths::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& lengths::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& lengths::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void lengths::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* lengths::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // areas_3D
  //

  inline
  bool areas_3D::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void areas_3D::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& areas_3D::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& areas_3D::
  units ()
  {
    return this->units_;
  }

  inline
  void areas_3D::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool areas_3D::
  free_surface_area_present () const
  {
    return this->free_surface_area_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& areas_3D::
  free_surface_area () const
  {
    return *this->free_surface_area_;
  }

  inline
  ::common::units_decimal_nonnegative& areas_3D::
  free_surface_area ()
  {
    return *this->free_surface_area_;
  }

  inline
  void areas_3D::
  free_surface_area (::common::units_decimal_nonnegative* x)
  {
    delete this->free_surface_area_;
    this->free_surface_area_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* areas_3D::
  free_surface_area_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->free_surface_area_;
    this->free_surface_area_ = 0;
    return r;
  }

  inline
  bool areas_3D::
  total_surface_area_present () const
  {
    return this->total_surface_area_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& areas_3D::
  total_surface_area () const
  {
    return *this->total_surface_area_;
  }

  inline
  ::common::units_decimal_nonnegative& areas_3D::
  total_surface_area ()
  {
    return *this->total_surface_area_;
  }

  inline
  void areas_3D::
  total_surface_area (::common::units_decimal_nonnegative* x)
  {
    delete this->total_surface_area_;
    this->total_surface_area_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* areas_3D::
  total_surface_area_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->total_surface_area_;
    this->total_surface_area_ = 0;
    return r;
  }

  inline
  bool areas_3D::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& areas_3D::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& areas_3D::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void areas_3D::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* areas_3D::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // areas_2D
  //

  inline
  bool areas_2D::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void areas_2D::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& areas_2D::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& areas_2D::
  units ()
  {
    return this->units_;
  }

  inline
  void areas_2D::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool areas_2D::
  total_area_present () const
  {
    return this->total_area_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& areas_2D::
  total_area () const
  {
    return *this->total_area_;
  }

  inline
  ::common::units_decimal_nonnegative& areas_2D::
  total_area ()
  {
    return *this->total_area_;
  }

  inline
  void areas_2D::
  total_area (::common::units_decimal_nonnegative* x)
  {
    delete this->total_area_;
    this->total_area_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* areas_2D::
  total_area_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->total_area_;
    this->total_area_ = 0;
    return r;
  }

  inline
  bool areas_2D::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& areas_2D::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& areas_2D::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void areas_2D::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* areas_2D::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // volumes
  //

  inline
  bool volumes::
  units_present () const
  {
    return this->units_present_;
  }

  inline
  void volumes::
  units_present (bool x)
  {
    this->units_present_ = x;
  }

  inline
  const ::std::string& volumes::
  units () const
  {
    return this->units_;
  }

  inline
  ::std::string& volumes::
  units ()
  {
    return this->units_;
  }

  inline
  void volumes::
  units (const ::std::string& x)
  {
    this->units_ = x;
    this->units_present_ = true;
  }

  inline
  bool volumes::
  fluid_volume_present () const
  {
    return this->fluid_volume_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& volumes::
  fluid_volume () const
  {
    return *this->fluid_volume_;
  }

  inline
  ::common::units_decimal_nonnegative& volumes::
  fluid_volume ()
  {
    return *this->fluid_volume_;
  }

  inline
  void volumes::
  fluid_volume (::common::units_decimal_nonnegative* x)
  {
    delete this->fluid_volume_;
    this->fluid_volume_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* volumes::
  fluid_volume_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->fluid_volume_;
    this->fluid_volume_ = 0;
    return r;
  }

  inline
  bool volumes::
  fluid_volume_fraction_present () const
  {
    return this->fluid_volume_fraction_ != 0;
  }

  inline
  const ::common::units_fraction& volumes::
  fluid_volume_fraction () const
  {
    return *this->fluid_volume_fraction_;
  }

  inline
  ::common::units_fraction& volumes::
  fluid_volume_fraction ()
  {
    return *this->fluid_volume_fraction_;
  }

  inline
  void volumes::
  fluid_volume_fraction (::common::units_fraction* x)
  {
    delete this->fluid_volume_fraction_;
    this->fluid_volume_fraction_ = x;
  }

  inline
  ::common::units_fraction* volumes::
  fluid_volume_fraction_detach ()
  {
    ::common::units_fraction* r = this->fluid_volume_fraction_;
    this->fluid_volume_fraction_ = 0;
    return r;
  }

  inline
  bool volumes::
  solid_calcified_volume_present () const
  {
    return this->solid_calcified_volume_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& volumes::
  solid_calcified_volume () const
  {
    return *this->solid_calcified_volume_;
  }

  inline
  ::common::units_decimal_nonnegative& volumes::
  solid_calcified_volume ()
  {
    return *this->solid_calcified_volume_;
  }

  inline
  void volumes::
  solid_calcified_volume (::common::units_decimal_nonnegative* x)
  {
    delete this->solid_calcified_volume_;
    this->solid_calcified_volume_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* volumes::
  solid_calcified_volume_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->solid_calcified_volume_;
    this->solid_calcified_volume_ = 0;
    return r;
  }

  inline
  bool volumes::
  solid_volume_present () const
  {
    return this->solid_volume_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& volumes::
  solid_volume () const
  {
    return *this->solid_volume_;
  }

  inline
  ::common::units_decimal_nonnegative& volumes::
  solid_volume ()
  {
    return *this->solid_volume_;
  }

  inline
  void volumes::
  solid_volume (::common::units_decimal_nonnegative* x)
  {
    delete this->solid_volume_;
    this->solid_volume_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* volumes::
  solid_volume_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->solid_volume_;
    this->solid_volume_ = 0;
    return r;
  }

  inline
  bool volumes::
  solid_volume_fraction_present () const
  {
    return this->solid_volume_fraction_ != 0;
  }

  inline
  const ::common::units_fraction& volumes::
  solid_volume_fraction () const
  {
    return *this->solid_volume_fraction_;
  }

  inline
  ::common::units_fraction& volumes::
  solid_volume_fraction ()
  {
    return *this->solid_volume_fraction_;
  }

  inline
  void volumes::
  solid_volume_fraction (::common::units_fraction* x)
  {
    delete this->solid_volume_fraction_;
    this->solid_volume_fraction_ = x;
  }

  inline
  ::common::units_fraction* volumes::
  solid_volume_fraction_detach ()
  {
    ::common::units_fraction* r = this->solid_volume_fraction_;
    this->solid_volume_fraction_ = 0;
    return r;
  }

  inline
  bool volumes::
  total_volume_present () const
  {
    return this->total_volume_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& volumes::
  total_volume () const
  {
    return *this->total_volume_;
  }

  inline
  ::common::units_decimal_nonnegative& volumes::
  total_volume ()
  {
    return *this->total_volume_;
  }

  inline
  void volumes::
  total_volume (::common::units_decimal_nonnegative* x)
  {
    delete this->total_volume_;
    this->total_volume_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* volumes::
  total_volume_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->total_volume_;
    this->total_volume_ = 0;
    return r;
  }

  inline
  bool volumes::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& volumes::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& volumes::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void volumes::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* volumes::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // geometrical_properties
  //

  inline
  bool geometrical_properties::
  parameters_present () const
  {
    return this->parameters_ != 0;
  }

  inline
  const ::phenotype_common::geometrical_parameters& geometrical_properties::
  parameters () const
  {
    return *this->parameters_;
  }

  inline
  ::phenotype_common::geometrical_parameters& geometrical_properties::
  parameters ()
  {
    return *this->parameters_;
  }

  inline
  void geometrical_properties::
  parameters (::phenotype_common::geometrical_parameters* x)
  {
    delete this->parameters_;
    this->parameters_ = x;
  }

  inline
  ::phenotype_common::geometrical_parameters* geometrical_properties::
  parameters_detach ()
  {
    ::phenotype_common::geometrical_parameters* r = this->parameters_;
    this->parameters_ = 0;
    return r;
  }

  inline
  bool geometrical_properties::
  lengths_present () const
  {
    return this->lengths_ != 0;
  }

  inline
  const ::phenotype_common::lengths& geometrical_properties::
  lengths () const
  {
    return *this->lengths_;
  }

  inline
  ::phenotype_common::lengths& geometrical_properties::
  lengths ()
  {
    return *this->lengths_;
  }

  inline
  void geometrical_properties::
  lengths (::phenotype_common::lengths* x)
  {
    delete this->lengths_;
    this->lengths_ = x;
  }

  inline
  ::phenotype_common::lengths* geometrical_properties::
  lengths_detach ()
  {
    ::phenotype_common::lengths* r = this->lengths_;
    this->lengths_ = 0;
    return r;
  }

  inline
  bool geometrical_properties::
  areas_present () const
  {
    return this->areas_ != 0;
  }

  inline
  const ::phenotype_common::areas_3D& geometrical_properties::
  areas () const
  {
    return *this->areas_;
  }

  inline
  ::phenotype_common::areas_3D& geometrical_properties::
  areas ()
  {
    return *this->areas_;
  }

  inline
  void geometrical_properties::
  areas (::phenotype_common::areas_3D* x)
  {
    delete this->areas_;
    this->areas_ = x;
  }

  inline
  ::phenotype_common::areas_3D* geometrical_properties::
  areas_detach ()
  {
    ::phenotype_common::areas_3D* r = this->areas_;
    this->areas_ = 0;
    return r;
  }

  inline
  bool geometrical_properties::
  volumes_present () const
  {
    return this->volumes_ != 0;
  }

  inline
  const ::phenotype_common::volumes& geometrical_properties::
  volumes () const
  {
    return *this->volumes_;
  }

  inline
  ::phenotype_common::volumes& geometrical_properties::
  volumes ()
  {
    return *this->volumes_;
  }

  inline
  void geometrical_properties::
  volumes (::phenotype_common::volumes* x)
  {
    delete this->volumes_;
    this->volumes_ = x;
  }

  inline
  ::phenotype_common::volumes* geometrical_properties::
  volumes_detach ()
  {
    ::phenotype_common::volumes* r = this->volumes_;
    this->volumes_ = 0;
    return r;
  }

  inline
  const geometrical_properties::cross_section_sequence& geometrical_properties::
  cross_section () const
  {
    return this->cross_section_;
  }

  inline
  geometrical_properties::cross_section_sequence& geometrical_properties::
  cross_section ()
  {
    return this->cross_section_;
  }

  inline
  bool geometrical_properties::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& geometrical_properties::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& geometrical_properties::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void geometrical_properties::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* geometrical_properties::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // cross_section
  //

  inline
  bool cross_section::
  parameters_present () const
  {
    return this->parameters_ != 0;
  }

  inline
  const ::phenotype_common::geometrical_parameters& cross_section::
  parameters () const
  {
    return *this->parameters_;
  }

  inline
  ::phenotype_common::geometrical_parameters& cross_section::
  parameters ()
  {
    return *this->parameters_;
  }

  inline
  void cross_section::
  parameters (::phenotype_common::geometrical_parameters* x)
  {
    delete this->parameters_;
    this->parameters_ = x;
  }

  inline
  ::phenotype_common::geometrical_parameters* cross_section::
  parameters_detach ()
  {
    ::phenotype_common::geometrical_parameters* r = this->parameters_;
    this->parameters_ = 0;
    return r;
  }

  inline
  bool cross_section::
  lengths_present () const
  {
    return this->lengths_ != 0;
  }

  inline
  const ::phenotype_common::lengths& cross_section::
  lengths () const
  {
    return *this->lengths_;
  }

  inline
  ::phenotype_common::lengths& cross_section::
  lengths ()
  {
    return *this->lengths_;
  }

  inline
  void cross_section::
  lengths (::phenotype_common::lengths* x)
  {
    delete this->lengths_;
    this->lengths_ = x;
  }

  inline
  ::phenotype_common::lengths* cross_section::
  lengths_detach ()
  {
    ::phenotype_common::lengths* r = this->lengths_;
    this->lengths_ = 0;
    return r;
  }

  inline
  bool cross_section::
  areas_present () const
  {
    return this->areas_ != 0;
  }

  inline
  const ::phenotype_common::areas_2D& cross_section::
  areas () const
  {
    return *this->areas_;
  }

  inline
  ::phenotype_common::areas_2D& cross_section::
  areas ()
  {
    return *this->areas_;
  }

  inline
  void cross_section::
  areas (::phenotype_common::areas_2D* x)
  {
    delete this->areas_;
    this->areas_ = x;
  }

  inline
  ::phenotype_common::areas_2D* cross_section::
  areas_detach ()
  {
    ::phenotype_common::areas_2D* r = this->areas_;
    this->areas_ = 0;
    return r;
  }

  inline
  bool cross_section::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& cross_section::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& cross_section::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void cross_section::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* cross_section::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }

  // mass
  //

  inline
  bool mass::
  biomass_present () const
  {
    return this->biomass_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& mass::
  biomass () const
  {
    return *this->biomass_;
  }

  inline
  ::common::units_decimal_nonnegative& mass::
  biomass ()
  {
    return *this->biomass_;
  }

  inline
  void mass::
  biomass (::common::units_decimal_nonnegative* x)
  {
    delete this->biomass_;
    this->biomass_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* mass::
  biomass_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->biomass_;
    this->biomass_ = 0;
    return r;
  }

  inline
  bool mass::
  fluid_mass_present () const
  {
    return this->fluid_mass_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& mass::
  fluid_mass () const
  {
    return *this->fluid_mass_;
  }

  inline
  ::common::units_decimal_nonnegative& mass::
  fluid_mass ()
  {
    return *this->fluid_mass_;
  }

  inline
  void mass::
  fluid_mass (::common::units_decimal_nonnegative* x)
  {
    delete this->fluid_mass_;
    this->fluid_mass_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* mass::
  fluid_mass_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->fluid_mass_;
    this->fluid_mass_ = 0;
    return r;
  }

  inline
  bool mass::
  total_mass_present () const
  {
    return this->total_mass_ != 0;
  }

  inline
  const ::common::units_decimal_nonnegative& mass::
  total_mass () const
  {
    return *this->total_mass_;
  }

  inline
  ::common::units_decimal_nonnegative& mass::
  total_mass ()
  {
    return *this->total_mass_;
  }

  inline
  void mass::
  total_mass (::common::units_decimal_nonnegative* x)
  {
    delete this->total_mass_;
    this->total_mass_ = x;
  }

  inline
  ::common::units_decimal_nonnegative* mass::
  total_mass_detach ()
  {
    ::common::units_decimal_nonnegative* r = this->total_mass_;
    this->total_mass_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // PHENOTYPE_COMMON_IPP
