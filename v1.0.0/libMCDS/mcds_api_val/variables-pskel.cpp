// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "variables-pskel.hpp"

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace variables
{
  // amount_type_pskel
  //

  const char* amount_type_pskel::
  _static_type ()
  {
    return "amount_type variables";
  }

  const char* amount_type_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_amount_type_pskel_inheritance_map_entry_ (
    amount_type_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string amount_type_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const amount_type_pskel::_xsde_amount_type_pskel_enums_[12UL] = 
  {
    "area_fraction",
    "area_percent",
    "area_percentage",
    "concentration",
    "count",
    "density",
    "partial_pressure",
    "surface",
    "surface_density",
    "volume_fraction",
    "volume_percent",
    "volume_percentage"
  };

  // variable_pskel
  //

  void variable_pskel::
  name (const ::std::string& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->name (x);
  }

  void variable_pskel::
  units (const ::std::string& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->units (x);
  }

  void variable_pskel::
  ID (unsigned long long x)
  {
    if (this->variable_impl_)
      this->variable_impl_->ID (x);
  }

  void variable_pskel::
  type (const ::variables::amount_type& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->type (x);
  }

  void variable_pskel::
  ChEBI_ID (const ::std::string& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->ChEBI_ID (x);
  }

  void variable_pskel::
  MeSH_ID (const ::std::string& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->MeSH_ID (x);
  }

  void variable_pskel::
  DrugBank_ID (const ::std::string& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->DrugBank_ID (x);
  }

  void variable_pskel::
  GMO_ID (const ::std::string& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->GMO_ID (x);
  }

  void variable_pskel::
  GO_ID (const ::std::string& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->GO_ID (x);
  }

  void variable_pskel::
  UniProt_ID (const ::std::string& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->UniProt_ID (x);
  }

  void variable_pskel::
  PR_ID (const ::std::string& x)
  {
    if (this->variable_impl_)
      this->variable_impl_->PR_ID (x);
  }

  void variable_pskel::
  material_amount (::variables::material_amount* x)
  {
    if (this->variable_impl_)
      this->variable_impl_->material_amount (x);
  }

  void variable_pskel::
  physical_parameter_set (::variables::physical_parameter_set* x)
  {
    if (this->variable_impl_)
      this->variable_impl_->physical_parameter_set (x);
  }

  void variable_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->units_parser_)
      this->units_parser_->_reset ();

    if (this->ID_parser_)
      this->ID_parser_->_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->ChEBI_ID_parser_)
      this->ChEBI_ID_parser_->_reset ();

    if (this->MeSH_ID_parser_)
      this->MeSH_ID_parser_->_reset ();

    if (this->DrugBank_ID_parser_)
      this->DrugBank_ID_parser_->_reset ();

    if (this->GMO_ID_parser_)
      this->GMO_ID_parser_->_reset ();

    if (this->GO_ID_parser_)
      this->GO_ID_parser_->_reset ();

    if (this->UniProt_ID_parser_)
      this->UniProt_ID_parser_->_reset ();

    if (this->PR_ID_parser_)
      this->PR_ID_parser_->_reset ();

    this->resetting_ = true;

    if (this->material_amount_parser_)
      this->material_amount_parser_->_reset ();

    if (this->material_amount_parser_map_)
      this->material_amount_parser_map_->reset ();

    if (this->physical_parameter_set_parser_)
      this->physical_parameter_set_parser_->_reset ();

    if (this->physical_parameter_set_parser_map_)
      this->physical_parameter_set_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* variable_pskel::
  _static_type ()
  {
    return "variable variables";
  }

  const char* variable_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // material_amount_pskel
  //

  void material_amount_pskel::
  type (const ::variables::amount_type& x)
  {
    if (this->material_amount_impl_)
      this->material_amount_impl_->type (x);
  }

  void material_amount_pskel::
  scale_units (const ::std::string& x)
  {
    if (this->material_amount_impl_)
      this->material_amount_impl_->scale_units (x);
  }

  void material_amount_pskel::
  _reset ()
  {
    typedef ::common::units_decimal_pskel base;
    base::_reset ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    if (this->scale_units_parser_)
      this->scale_units_parser_->_reset ();
  }

  const char* material_amount_pskel::
  _static_type ()
  {
    return "material_amount variables";
  }

  const char* material_amount_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_material_amount_pskel_inheritance_map_entry_ (
    material_amount_pskel::_static_type (),
    ::common::units_decimal_pskel::_static_type ());

  ::common::units_decimal* material_amount_pskel::
  post_units_decimal ()
  {
    assert (this->units_decimal_impl_);
    return this->units_decimal_impl_->post_units_decimal ();
  }

  // physical_parameter_set_pskel
  //

  void physical_parameter_set_pskel::
  conditions (::variables::physical_conditions* x)
  {
    if (this->physical_parameter_set_impl_)
      this->physical_parameter_set_impl_->conditions (x);
  }

  void physical_parameter_set_pskel::
  diffusion_coefficient (::common::units_decimal* x)
  {
    if (this->physical_parameter_set_impl_)
      this->physical_parameter_set_impl_->diffusion_coefficient (x);
  }

  void physical_parameter_set_pskel::
  decay_rate (::common::units_decimal* x)
  {
    if (this->physical_parameter_set_impl_)
      this->physical_parameter_set_impl_->decay_rate (x);
  }

  void physical_parameter_set_pskel::
  custom (::common::custom* x)
  {
    if (this->physical_parameter_set_impl_)
      this->physical_parameter_set_impl_->custom (x);
  }

  void physical_parameter_set_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->conditions_parser_)
      this->conditions_parser_->_reset ();

    if (this->conditions_parser_map_)
      this->conditions_parser_map_->reset ();

    if (this->diffusion_coefficient_parser_)
      this->diffusion_coefficient_parser_->_reset ();

    if (this->diffusion_coefficient_parser_map_)
      this->diffusion_coefficient_parser_map_->reset ();

    if (this->decay_rate_parser_)
      this->decay_rate_parser_->_reset ();

    if (this->decay_rate_parser_map_)
      this->decay_rate_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* physical_parameter_set_pskel::
  _static_type ()
  {
    return "physical_parameter_set variables";
  }

  const char* physical_parameter_set_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // physical_conditions_pskel
  //

  void physical_conditions_pskel::
  temperature (::common::units_decimal* x)
  {
    if (this->physical_conditions_impl_)
      this->physical_conditions_impl_->temperature (x);
  }

  void physical_conditions_pskel::
  mechanical_pressure (::common::units_decimal* x)
  {
    if (this->physical_conditions_impl_)
      this->physical_conditions_impl_->mechanical_pressure (x);
  }

  void physical_conditions_pskel::
  acidity (::common::units_decimal* x)
  {
    if (this->physical_conditions_impl_)
      this->physical_conditions_impl_->acidity (x);
  }

  void physical_conditions_pskel::
  pH (::common::units_decimal* x)
  {
    if (this->physical_conditions_impl_)
      this->physical_conditions_impl_->pH (x);
  }

  void physical_conditions_pskel::
  custom (::common::custom* x)
  {
    if (this->physical_conditions_impl_)
      this->physical_conditions_impl_->custom (x);
  }

  void physical_conditions_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_all_count_.clear ();

    this->resetting_ = true;

    if (this->temperature_parser_)
      this->temperature_parser_->_reset ();

    if (this->temperature_parser_map_)
      this->temperature_parser_map_->reset ();

    if (this->mechanical_pressure_parser_)
      this->mechanical_pressure_parser_->_reset ();

    if (this->mechanical_pressure_parser_map_)
      this->mechanical_pressure_parser_map_->reset ();

    if (this->acidity_parser_)
      this->acidity_parser_->_reset ();

    if (this->acidity_parser_map_)
      this->acidity_parser_map_->reset ();

    if (this->pH_parser_)
      this->pH_parser_->_reset ();

    if (this->pH_parser_map_)
      this->pH_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* physical_conditions_pskel::
  _static_type ()
  {
    return "physical_conditions variables";
  }

  const char* physical_conditions_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // conditions_pskel
  //

  const char* conditions_pskel::
  _static_type ()
  {
    return "conditions variables";
  }

  const char* conditions_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_conditions_pskel_inheritance_map_entry_ (
    conditions_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string conditions_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const conditions_pskel::_xsde_conditions_pskel_enums_[3UL] = 
  {
    "spheroid",
    "surface",
    "suspension"
  };

  // system_pskel
  //

  const char* system_pskel::
  _static_type ()
  {
    return "system variables";
  }

  const char* system_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_system_pskel_inheritance_map_entry_ (
    system_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string system_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const system_pskel::_xsde_system_pskel_enums_[4UL] = 
  {
    "ex vivo",
    "in silico",
    "in vitro",
    "in vivo"
  };

  // experimental_conditions_pskel
  //

  void experimental_conditions_pskel::
  type (const ::std::string& x)
  {
    if (this->experimental_conditions_impl_)
      this->experimental_conditions_impl_->type (x);
  }

  void experimental_conditions_pskel::
  dimensionality (unsigned short x)
  {
    if (this->experimental_conditions_impl_)
      this->experimental_conditions_impl_->dimensionality (x);
  }

  void experimental_conditions_pskel::
  system (const ::variables::system& x)
  {
    if (this->experimental_conditions_impl_)
      this->experimental_conditions_impl_->system (x);
  }

  void experimental_conditions_pskel::
  conditions (const ::variables::conditions& x)
  {
    if (this->experimental_conditions_impl_)
      this->experimental_conditions_impl_->conditions (x);
  }

  void experimental_conditions_pskel::
  surface_variable (::variables::variable* x)
  {
    if (this->experimental_conditions_impl_)
      this->experimental_conditions_impl_->surface_variable (x);
  }

  void experimental_conditions_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = true;

    if (this->dimensionality_parser_)
      this->dimensionality_parser_->_reset ();

    if (this->dimensionality_parser_map_)
      this->dimensionality_parser_map_->reset ();

    if (this->system_parser_)
      this->system_parser_->_reset ();

    if (this->system_parser_map_)
      this->system_parser_map_->reset ();

    if (this->conditions_parser_)
      this->conditions_parser_->_reset ();

    if (this->conditions_parser_map_)
      this->conditions_parser_map_->reset ();

    if (this->surface_variable_parser_)
      this->surface_variable_parser_->_reset ();

    if (this->surface_variable_parser_map_)
      this->surface_variable_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* experimental_conditions_pskel::
  _static_type ()
  {
    return "experimental_conditions variables";
  }

  const char* experimental_conditions_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // data_vector_pskel
  //

  void data_vector_pskel::
  voxel_ID (::common::unsigned_int_list* x)
  {
    if (this->data_vector_impl_)
      this->data_vector_impl_->voxel_ID (x);
  }

  void data_vector_pskel::
  _reset ()
  {
    typedef ::common::units_double_list_pskel base;
    base::_reset ();

    if (this->voxel_ID_parser_)
      this->voxel_ID_parser_->_reset ();
  }

  const char* data_vector_pskel::
  _static_type ()
  {
    return "data_vector variables";
  }

  const char* data_vector_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_data_vector_pskel_inheritance_map_entry_ (
    data_vector_pskel::_static_type (),
    ::common::units_double_list_pskel::_static_type ());

  ::common::units_double_list* data_vector_pskel::
  post_units_double_list ()
  {
    assert (this->units_double_list_impl_);
    return this->units_double_list_impl_->post_units_double_list ();
  }

  // data_pskel
  //

  void data_pskel::
  type (const ::common::data_storage_formats& x)
  {
    if (this->data_impl_)
      this->data_impl_->type (x);
  }

  void data_pskel::
  filename (const ::std::string& x)
  {
    if (this->data_impl_)
      this->data_impl_->filename (x);
  }

  void data_pskel::
  data_vector (::variables::data_vector* x)
  {
    if (this->data_impl_)
      this->data_impl_->data_vector (x);
  }

  void data_pskel::
  custom (::common::custom* x)
  {
    if (this->data_impl_)
      this->data_impl_->custom (x);
  }

  void data_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->type_parser_)
      this->type_parser_->_reset ();

    this->resetting_ = true;

    if (this->filename_parser_)
      this->filename_parser_->_reset ();

    if (this->filename_parser_map_)
      this->filename_parser_map_->reset ();

    if (this->data_vector_parser_)
      this->data_vector_parser_->_reset ();

    if (this->data_vector_parser_map_)
      this->data_vector_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* data_pskel::
  _static_type ()
  {
    return "data variables";
  }

  const char* data_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // list_of_variables_pskel
  //

  void list_of_variables_pskel::
  variable (::variables::variable* x)
  {
    if (this->list_of_variables_impl_)
      this->list_of_variables_impl_->variable (x);
  }

  void list_of_variables_pskel::
  physical_parameter_set (::variables::physical_parameter_set* x)
  {
    if (this->list_of_variables_impl_)
      this->list_of_variables_impl_->physical_parameter_set (x);
  }

  void list_of_variables_pskel::
  custom (::common::custom* x)
  {
    if (this->list_of_variables_impl_)
      this->list_of_variables_impl_->custom (x);
  }

  void list_of_variables_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->variable_parser_)
      this->variable_parser_->_reset ();

    if (this->variable_parser_map_)
      this->variable_parser_map_->reset ();

    if (this->physical_parameter_set_parser_)
      this->physical_parameter_set_parser_->_reset ();

    if (this->physical_parameter_set_parser_map_)
      this->physical_parameter_set_parser_map_->reset ();

    if (this->custom_parser_)
      this->custom_parser_->_reset ();

    if (this->custom_parser_map_)
      this->custom_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* list_of_variables_pskel::
  _static_type ()
  {
    return "list_of_variables variables";
  }

  const char* list_of_variables_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // transition_threshold_pskel
  //

  void transition_threshold_pskel::
  ChEBI_ID (const ::std::string& x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->ChEBI_ID (x);
  }

  void transition_threshold_pskel::
  MeSH_ID (const ::std::string& x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->MeSH_ID (x);
  }

  void transition_threshold_pskel::
  DrugBank_ID (const ::std::string& x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->DrugBank_ID (x);
  }

  void transition_threshold_pskel::
  GMO_ID (const ::std::string& x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->GMO_ID (x);
  }

  void transition_threshold_pskel::
  GO_ID (const ::std::string& x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->GO_ID (x);
  }

  void transition_threshold_pskel::
  UniProt_ID (const ::std::string& x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->UniProt_ID (x);
  }

  void transition_threshold_pskel::
  PR_ID (const ::std::string& x)
  {
    if (this->transition_threshold_impl_)
      this->transition_threshold_impl_->PR_ID (x);
  }

  void transition_threshold_pskel::
  _reset ()
  {
    typedef ::common::transition_threshold_pskel base;
    base::_reset ();

    if (this->ChEBI_ID_parser_)
      this->ChEBI_ID_parser_->_reset ();

    if (this->MeSH_ID_parser_)
      this->MeSH_ID_parser_->_reset ();

    if (this->DrugBank_ID_parser_)
      this->DrugBank_ID_parser_->_reset ();

    if (this->GMO_ID_parser_)
      this->GMO_ID_parser_->_reset ();

    if (this->GO_ID_parser_)
      this->GO_ID_parser_->_reset ();

    if (this->UniProt_ID_parser_)
      this->UniProt_ID_parser_->_reset ();

    if (this->PR_ID_parser_)
      this->PR_ID_parser_->_reset ();
  }

  const char* transition_threshold_pskel::
  _static_type ()
  {
    return "transition_threshold variables";
  }

  const char* transition_threshold_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_transition_threshold_pskel_inheritance_map_entry_ (
    transition_threshold_pskel::_static_type (),
    ::common::transition_threshold_pskel::_static_type ());

  ::common::transition_threshold* transition_threshold_pskel::
  post_transition_threshold ()
  {
    assert (this->transition_threshold_impl_);
    return this->transition_threshold_impl_->post_transition_threshold ();
  }
}

#include <assert.h>

namespace variables
{
  // Element validation and dispatch functions for variable_pskel.
  //
  bool variable_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "material_amount" && ns.empty ())
          s = 0UL;
        else if (n == "physical_parameter_set" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &variable_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool variable_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void variable_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void variable_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void variable_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "material_amount" && ns.empty ())
        {
          if (start)
          {
            ::variables::material_amount_pskel* p = 0;

            if (t == 0 && this->material_amount_parser_ != 0)
              p = this->material_amount_parser_;
            else
            {
              const char* ts = ::variables::material_amount_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->material_amount_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->material_amount_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->material_amount_parser_map_ != 0)
                  p = static_cast< ::variables::material_amount_pskel* > (
                    this->material_amount_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::material_amount_pskel* p =
            static_cast< ::variables::material_amount_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::variables::material_amount* tmp = p->post_material_amount ();
              this->material_amount (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "physical_parameter_set" && ns.empty ())
        {
          if (start)
          {
            ::variables::physical_parameter_set_pskel* p = 0;

            if (t == 0 && this->physical_parameter_set_parser_ != 0)
              p = this->physical_parameter_set_parser_;
            else
            {
              const char* ts = ::variables::physical_parameter_set_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->physical_parameter_set_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->physical_parameter_set_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->physical_parameter_set_parser_map_ != 0)
                  p = static_cast< ::variables::physical_parameter_set_pskel* > (
                    this->physical_parameter_set_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::physical_parameter_set_pskel* p =
            static_cast< ::variables::physical_parameter_set_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::variables::physical_parameter_set* tmp = p->post_physical_parameter_set ();
              this->physical_parameter_set (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for physical_parameter_set_pskel.
  //
  bool physical_parameter_set_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool physical_parameter_set_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void physical_parameter_set_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void physical_parameter_set_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void physical_parameter_set_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "conditions" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::variables::physical_conditions_pskel* p = 0;

          if (t == 0 && this->conditions_parser_ != 0)
            p = this->conditions_parser_;
          else
          {
            const char* ts = ::variables::physical_conditions_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->conditions_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->conditions_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->conditions_parser_map_ != 0)
                p = static_cast< ::variables::physical_conditions_pskel* > (
                  this->conditions_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::variables::physical_conditions_pskel* p =
          static_cast< ::variables::physical_conditions_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::variables::physical_conditions* tmp = p->post_physical_conditions ();
            this->conditions (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "diffusion_coefficient" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->diffusion_coefficient_parser_ != 0)
            p = this->diffusion_coefficient_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->diffusion_coefficient_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->diffusion_coefficient_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->diffusion_coefficient_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->diffusion_coefficient_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->diffusion_coefficient (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "decay_rate" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->decay_rate_parser_ != 0)
            p = this->decay_rate_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->decay_rate_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->decay_rate_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->decay_rate_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->decay_rate_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->decay_rate (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for physical_conditions_pskel.
  //
  bool physical_conditions_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    all_0 (vd->state, v_all_count_.top (), ns, n, t, true);

    if (vd->state != ~0UL || ctx.error_type ())
      vd->count++;
    else
      return false;

    return true;
  }

  bool physical_conditions_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    all_0 (vd.state, v_all_count_.top (), ns, n, 0, false);

    return true;
  }

  void physical_conditions_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_all_count_.push ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void physical_conditions_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.count != 0)
    {
      ::xsde::cxx::ro_string empty;
      all_0 (vd.state, v_all_count_.top (), empty, empty, 0, true);
    }


    vs.size--;
    v_all_count_.pop ();

    this->v_state_stack_.pop ();
  }

  void physical_conditions_pskel::
  all_0 (unsigned long& state,
         unsigned char* count,
         const ::xsde::cxx::ro_string& ns,
         const ::xsde::cxx::ro_string& n,
         const char* t,
         bool start)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "temperature" && ns.empty ())
    {
      if (count[0UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->temperature_parser_ != 0)
            p = this->temperature_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->temperature_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->temperature_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->temperature_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->temperature_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->temperature (tmp);
          }

          count[0UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "mechanical_pressure" && ns.empty ())
    {
      if (count[1UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->mechanical_pressure_parser_ != 0)
            p = this->mechanical_pressure_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->mechanical_pressure_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->mechanical_pressure_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->mechanical_pressure_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->mechanical_pressure_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->mechanical_pressure (tmp);
          }

          count[1UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "acidity" && ns.empty ())
    {
      if (count[2UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->acidity_parser_ != 0)
            p = this->acidity_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->acidity_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->acidity_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->acidity_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->acidity_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->acidity (tmp);
          }

          count[2UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "pH" && ns.empty ())
    {
      if (count[3UL] == 0)
      {
        if (start)
        {
          ::common::units_decimal_pskel* p = 0;

          if (t == 0 && this->pH_parser_ != 0)
            p = this->pH_parser_;
          else
          {
            const char* ts = ::common::units_decimal_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->pH_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->pH_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->pH_parser_map_ != 0)
                p = static_cast< ::common::units_decimal_pskel* > (
                  this->pH_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::units_decimal_pskel* p =
          static_cast< ::common::units_decimal_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::units_decimal* tmp = p->post_units_decimal ();
            this->pH (tmp);
          }

          count[3UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n == "custom" && ns.empty ())
    {
      if (count[4UL] == 0)
      {
        if (start)
        {
          ::common::custom_pskel* p = 0;

          if (t == 0 && this->custom_parser_ != 0)
            p = this->custom_parser_;
          else
          {
            const char* ts = ::common::custom_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->custom_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->custom_parser_map_ != 0)
                p = static_cast< ::common::custom_pskel* > (
                  this->custom_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::common::custom_pskel* p =
          static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            ::common::custom* tmp = p->post_custom ();
            this->custom (tmp);
          }

          count[4UL] = 1;
        }
      }
      else
      {
        assert (start);
        state = ~0UL;
      }
    }
    else if (n.empty () && ns.empty ())
    {
      state = ~0UL;
    }
    else
      state = ~0UL;
  }

  // Element validation and dispatch functions for experimental_conditions_pskel.
  //
  bool experimental_conditions_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "dimensionality" && ns.empty ())
          s = 0UL;
        else if (n == "system" && ns.empty ())
          s = 1UL;
        else if (n == "conditions" && ns.empty ())
          s = 2UL;
        else if (n == "surface_variable" && ns.empty ())
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &experimental_conditions_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool experimental_conditions_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void experimental_conditions_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void experimental_conditions_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void experimental_conditions_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "dimensionality" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::unsigned_short_pskel* p = 0;

            if (t == 0 && this->dimensionality_parser_ != 0)
              p = this->dimensionality_parser_;
            else
            {
              const char* ts = ::xml_schema::unsigned_short_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->dimensionality_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->dimensionality_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->dimensionality_parser_map_ != 0)
                  p = static_cast< ::xml_schema::unsigned_short_pskel* > (
                    this->dimensionality_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::unsigned_short_pskel* p =
            static_cast< ::xml_schema::unsigned_short_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              unsigned short tmp = p->post_unsigned_short ();
              this->dimensionality (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "system" && ns.empty ())
        {
          if (start)
          {
            ::variables::system_pskel* p = 0;

            if (t == 0 && this->system_parser_ != 0)
              p = this->system_parser_;
            else
            {
              const char* ts = ::variables::system_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->system_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->system_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->system_parser_map_ != 0)
                  p = static_cast< ::variables::system_pskel* > (
                    this->system_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::system_pskel* p =
            static_cast< ::variables::system_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::variables::system& tmp = p->post_system ();
              this->system (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "conditions" && ns.empty ())
        {
          if (start)
          {
            ::variables::conditions_pskel* p = 0;

            if (t == 0 && this->conditions_parser_ != 0)
              p = this->conditions_parser_;
            else
            {
              const char* ts = ::variables::conditions_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->conditions_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->conditions_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->conditions_parser_map_ != 0)
                  p = static_cast< ::variables::conditions_pskel* > (
                    this->conditions_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::conditions_pskel* p =
            static_cast< ::variables::conditions_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::variables::conditions& tmp = p->post_conditions ();
              this->conditions (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "surface_variable" && ns.empty ())
        {
          if (start)
          {
            ::variables::variable_pskel* p = 0;

            if (t == 0 && this->surface_variable_parser_ != 0)
              p = this->surface_variable_parser_;
            else
            {
              const char* ts = ::variables::variable_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->surface_variable_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->surface_variable_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->surface_variable_parser_map_ != 0)
                  p = static_cast< ::variables::variable_pskel* > (
                    this->surface_variable_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::variable_pskel* p =
            static_cast< ::variables::variable_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::variables::variable* tmp = p->post_variable ();
              this->surface_variable (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for data_pskel.
  //
  bool data_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "filename" && ns.empty ())
          s = 0UL;
        else if (n == "data_vector" && ns.empty ())
          s = 1UL;
        else if (n == "custom" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &data_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool data_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void data_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void data_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void data_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "filename" && ns.empty ())
        {
          if (start)
          {
            ::xml_schema::string_pskel* p = 0;

            if (t == 0 && this->filename_parser_ != 0)
              p = this->filename_parser_;
            else
            {
              const char* ts = ::xml_schema::string_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->filename_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->filename_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->filename_parser_map_ != 0)
                  p = static_cast< ::xml_schema::string_pskel* > (
                    this->filename_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::string_pskel* p =
            static_cast< ::xml_schema::string_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::std::string& tmp = p->post_string ();
              this->filename (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "data_vector" && ns.empty ())
        {
          if (start)
          {
            ::variables::data_vector_pskel* p = 0;

            if (t == 0 && this->data_vector_parser_ != 0)
              p = this->data_vector_parser_;
            else
            {
              const char* ts = ::variables::data_vector_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->data_vector_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->data_vector_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->data_vector_parser_map_ != 0)
                  p = static_cast< ::variables::data_vector_pskel* > (
                    this->data_vector_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::data_vector_pskel* p =
            static_cast< ::variables::data_vector_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::variables::data_vector* tmp = p->post_data_vector ();
              this->data_vector (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for list_of_variables_pskel.
  //
  bool list_of_variables_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "variable" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &list_of_variables_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool list_of_variables_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void list_of_variables_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void list_of_variables_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void list_of_variables_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "variable" && ns.empty ())
        {
          if (start)
          {
            ::variables::variable_pskel* p = 0;

            if (t == 0 && this->variable_parser_ != 0)
              p = this->variable_parser_;
            else
            {
              const char* ts = ::variables::variable_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->variable_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->variable_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->variable_parser_map_ != 0)
                  p = static_cast< ::variables::variable_pskel* > (
                    this->variable_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::variable_pskel* p =
            static_cast< ::variables::variable_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::variables::variable* tmp = p->post_variable ();
              this->variable (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "physical_parameter_set" && ns.empty ())
        {
          if (start)
          {
            ::variables::physical_parameter_set_pskel* p = 0;

            if (t == 0 && this->physical_parameter_set_parser_ != 0)
              p = this->physical_parameter_set_parser_;
            else
            {
              const char* ts = ::variables::physical_parameter_set_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->physical_parameter_set_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->physical_parameter_set_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->physical_parameter_set_parser_map_ != 0)
                  p = static_cast< ::variables::physical_parameter_set_pskel* > (
                    this->physical_parameter_set_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::variables::physical_parameter_set_pskel* p =
            static_cast< ::variables::physical_parameter_set_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::variables::physical_parameter_set* tmp = p->post_physical_parameter_set ();
              this->physical_parameter_set (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "custom" && ns.empty ())
        {
          if (start)
          {
            ::common::custom_pskel* p = 0;

            if (t == 0 && this->custom_parser_ != 0)
              p = this->custom_parser_;
            else
            {
              const char* ts = ::common::custom_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->custom_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->custom_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->custom_parser_map_ != 0)
                  p = static_cast< ::common::custom_pskel* > (
                    this->custom_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::common::custom_pskel* p =
            static_cast< ::common::custom_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::common::custom* tmp = p->post_custom ();
              this->custom (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace variables
{
  // Attribute validation and dispatch functions for variable_pskel.
  //
  bool variable_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "units" && ns.empty ())
    {
      if (this->units_parser_)
      {
        this->units_parser_->pre ();

        this->units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->units_parser_->post_string ();

          this->units (tmp);
        }
      }

      return true;
    }

    if (n == "ID" && ns.empty ())
    {
      if (this->ID_parser_)
      {
        this->ID_parser_->pre ();

        this->ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          unsigned long long tmp = this->ID_parser_->post_unsigned_long ();

          this->ID (tmp);
        }
      }

      return true;
    }

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::variables::amount_type& tmp = this->type_parser_->post_amount_type ();

          this->type (tmp);
        }
      }

      return true;
    }

    if (n == "ChEBI_ID" && ns.empty ())
    {
      if (this->ChEBI_ID_parser_)
      {
        this->ChEBI_ID_parser_->pre ();

        this->ChEBI_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->ChEBI_ID_parser_->post_string ();

          this->ChEBI_ID (tmp);
        }
      }

      return true;
    }

    if (n == "MeSH_ID" && ns.empty ())
    {
      if (this->MeSH_ID_parser_)
      {
        this->MeSH_ID_parser_->pre ();

        this->MeSH_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->MeSH_ID_parser_->post_string ();

          this->MeSH_ID (tmp);
        }
      }

      return true;
    }

    if (n == "DrugBank_ID" && ns.empty ())
    {
      if (this->DrugBank_ID_parser_)
      {
        this->DrugBank_ID_parser_->pre ();

        this->DrugBank_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->DrugBank_ID_parser_->post_string ();

          this->DrugBank_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GMO_ID" && ns.empty ())
    {
      if (this->GMO_ID_parser_)
      {
        this->GMO_ID_parser_->pre ();

        this->GMO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GMO_ID_parser_->post_string ();

          this->GMO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GO_ID" && ns.empty ())
    {
      if (this->GO_ID_parser_)
      {
        this->GO_ID_parser_->pre ();

        this->GO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GO_ID_parser_->post_string ();

          this->GO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "UniProt_ID" && ns.empty ())
    {
      if (this->UniProt_ID_parser_)
      {
        this->UniProt_ID_parser_->pre ();

        this->UniProt_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->UniProt_ID_parser_->post_string ();

          this->UniProt_ID (tmp);
        }
      }

      return true;
    }

    if (n == "PR_ID" && ns.empty ())
    {
      if (this->PR_ID_parser_)
      {
        this->PR_ID_parser_->pre ();

        this->PR_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->PR_ID_parser_->post_string ();

          this->PR_ID (tmp);
        }
      }

      return true;
    }

    return false;
  }

  bool variable_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if (!n.empty ())
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }

  void variable_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void variable_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for material_amount_pskel.
  //
  bool material_amount_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::variables::amount_type& tmp = this->type_parser_->post_amount_type ();

          this->type (tmp);
        }
      }

      return true;
    }

    if (n == "scale_units" && ns.empty ())
    {
      if (this->scale_units_parser_)
      {
        this->scale_units_parser_->pre ();

        this->scale_units_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->scale_units_parser_->_characters (s);

        if (!ctx.error_type ())
          this->scale_units_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->scale_units_parser_->post_string ();

          this->scale_units (tmp);
        }
      }

      return true;
    }

    typedef ::common::units_decimal_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for experimental_conditions_pskel.
  //
  bool experimental_conditions_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->type_parser_->post_string ();

          this->type (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for data_vector_pskel.
  //
  bool data_vector_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "voxel_ID" && ns.empty ())
    {
      if (this->voxel_ID_parser_)
      {
        this->voxel_ID_parser_->pre ();

        this->voxel_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->voxel_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->voxel_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          ::common::unsigned_int_list* tmp = this->voxel_ID_parser_->post_unsigned_int_list ();

          this->voxel_ID (tmp);
        }
      }

      return true;
    }

    typedef ::common::units_double_list_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for data_pskel.
  //
  bool data_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();

        this->type_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->type_parser_->_characters (s);

        if (!ctx.error_type ())
          this->type_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::common::data_storage_formats& tmp = this->type_parser_->post_data_storage_formats ();

          this->type (tmp);
        }
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for transition_threshold_pskel.
  //
  bool transition_threshold_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ChEBI_ID" && ns.empty ())
    {
      if (this->ChEBI_ID_parser_)
      {
        this->ChEBI_ID_parser_->pre ();

        this->ChEBI_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ChEBI_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->ChEBI_ID_parser_->post_string ();

          this->ChEBI_ID (tmp);
        }
      }

      return true;
    }

    if (n == "MeSH_ID" && ns.empty ())
    {
      if (this->MeSH_ID_parser_)
      {
        this->MeSH_ID_parser_->pre ();

        this->MeSH_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->MeSH_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->MeSH_ID_parser_->post_string ();

          this->MeSH_ID (tmp);
        }
      }

      return true;
    }

    if (n == "DrugBank_ID" && ns.empty ())
    {
      if (this->DrugBank_ID_parser_)
      {
        this->DrugBank_ID_parser_->pre ();

        this->DrugBank_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->DrugBank_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->DrugBank_ID_parser_->post_string ();

          this->DrugBank_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GMO_ID" && ns.empty ())
    {
      if (this->GMO_ID_parser_)
      {
        this->GMO_ID_parser_->pre ();

        this->GMO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GMO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GMO_ID_parser_->post_string ();

          this->GMO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "GO_ID" && ns.empty ())
    {
      if (this->GO_ID_parser_)
      {
        this->GO_ID_parser_->pre ();

        this->GO_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->GO_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->GO_ID_parser_->post_string ();

          this->GO_ID (tmp);
        }
      }

      return true;
    }

    if (n == "UniProt_ID" && ns.empty ())
    {
      if (this->UniProt_ID_parser_)
      {
        this->UniProt_ID_parser_->pre ();

        this->UniProt_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->UniProt_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->UniProt_ID_parser_->post_string ();

          this->UniProt_ID (tmp);
        }
      }

      return true;
    }

    if (n == "PR_ID" && ns.empty ())
    {
      if (this->PR_ID_parser_)
      {
        this->PR_ID_parser_->pre ();

        this->PR_ID_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_characters (s);

        if (!ctx.error_type ())
          this->PR_ID_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->PR_ID_parser_->post_string ();

          this->PR_ID (tmp);
        }
      }

      return true;
    }

    typedef ::common::transition_threshold_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }
}

namespace variables
{
}

// Begin epilogue.
//
//
// End epilogue.

