// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_COMMON_SIMPL_HPP
#define PHENOTYPE_COMMON_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define PHENOTYPE_COMMON_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "phenotype_common-sskel.hpp"

#include <xsde/cxx/stack.hxx>

#include "common-simpl.hpp"

#include "variables-simpl.hpp"

namespace phenotype_common
{
  class adhesion_simpl: public adhesion_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::adhesion&);

    // Elements.
    //
    virtual bool
    adhesion_bond_breaking_rate_present ();

    virtual const ::common::units_decimal&
    adhesion_bond_breaking_rate ();

    virtual bool
    adhesion_bond_formation_rate_present ();

    virtual const ::common::units_decimal&
    adhesion_bond_formation_rate ();

    virtual bool
    adhesion_spring_constant_present ();

    virtual const ::common::units_decimal_nonnegative&
    adhesion_spring_constant ();

    virtual bool
    adhesion_receptor_density_present ();

    virtual const ::common::units_decimal_nonnegative&
    adhesion_receptor_density ();

    virtual bool
    surface_binding_energy_present ();

    virtual const ::common::units_decimal&
    surface_binding_energy ();

    virtual bool
    number_of_adhered_cells_present ();

    virtual const ::common::units_decimal_nonnegative&
    number_of_adhered_cells ();

    virtual bool
    maximum_number_of_adhered_cells_present ();

    virtual const ::common::units_unsignedShort&
    maximum_number_of_adhered_cells ();

    virtual bool
    adhered_surface_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    adhered_surface_area ();

    virtual bool
    maximum_adhered_surface_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    maximum_adhered_surface_area ();

    virtual bool
    adhesion_force_per_surface_area_present ();

    virtual const ::common::units_decimal&
    adhesion_force_per_surface_area ();

    virtual bool
    adhesion_probability_present ();

    virtual const ::common::units_fraction&
    adhesion_probability ();

    virtual bool
    detachment_proability_present ();

    virtual const ::common::units_fraction&
    detachment_proability ();

    virtual bool
    rolling_observation_next ();

    virtual const ::phenotype_common::rolling_observation&
    rolling_observation ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct adhesion_simpl_state
    {
      const ::phenotype_common::adhesion* adhesion_;
      ::phenotype_common::adhesion::rolling_observation_const_iterator rolling_observation_;
      ::phenotype_common::adhesion::rolling_observation_const_iterator rolling_observation_end_;
    };

    adhesion_simpl_state adhesion_simpl_state_;
  };

  class rolling_observation_simpl: public rolling_observation_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::rolling_observation&);

    // Elements.
    //
    virtual const ::common::units_decimal&
    rolling_velocity ();

    virtual const ::common::units_decimal&
    shear_stress ();

    public:
    struct rolling_observation_simpl_state
    {
      const ::phenotype_common::rolling_observation* rolling_observation_;
    };

    rolling_observation_simpl_state rolling_observation_simpl_state_;
  };

  class friction_simpl: public friction_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::friction&);

    // Elements.
    //
    virtual bool
    compression_present ();

    virtual const ::common::units_decimal_nonnegative&
    compression ();

    virtual bool
    ECM_present ();

    virtual const ::common::units_decimal_nonnegative&
    ECM ();

    virtual bool
    shear_present ();

    virtual const ::common::units_decimal_nonnegative&
    shear ();

    public:
    struct friction_simpl_state
    {
      const ::phenotype_common::friction* friction_;
    };

    friction_simpl_state friction_simpl_state_;
  };

  class mechanics_simpl: public mechanics_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::mechanics&);

    // Elements.
    //
    virtual bool
    friction_present ();

    virtual const ::phenotype_common::friction&
    friction ();

    virtual bool
    maximum_cell_deformation_present ();

    virtual const ::common::units_decimal&
    maximum_cell_deformation ();

    virtual bool
    mechanical_pressure_present ();

    virtual const ::common::units_decimal&
    mechanical_pressure ();

    virtual bool
    indentation_observation_next ();

    virtual const ::phenotype_common::indentation_observation&
    indentation_observation ();

    virtual bool
    poisson_ratio_present ();

    virtual const ::common::units_decimal&
    poisson_ratio ();

    virtual bool
    youngs_modulus_present ();

    virtual const ::common::units_decimal&
    youngs_modulus ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct mechanics_simpl_state
    {
      const ::phenotype_common::mechanics* mechanics_;
      ::phenotype_common::mechanics::indentation_observation_const_iterator indentation_observation_;
      ::phenotype_common::mechanics::indentation_observation_const_iterator indentation_observation_end_;
    };

    mechanics_simpl_state mechanics_simpl_state_;
  };

  class indentation_observation_simpl: public indentation_observation_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::indentation_observation&);

    // Elements.
    //
    virtual const ::common::units_decimal&
    depth ();

    virtual bool
    poisson_ratio_present ();

    virtual const ::common::units_decimal&
    poisson_ratio ();

    virtual bool
    youngs_modulus_present ();

    virtual const ::common::units_decimal&
    youngs_modulus ();

    public:
    struct indentation_observation_simpl_state
    {
      const ::phenotype_common::indentation_observation* indentation_observation_;
    };

    indentation_observation_simpl_state indentation_observation_simpl_state_;
  };

  class motility_simpl: public motility_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::motility&);

    // Elements.
    //
    virtual bool
    unrestricted_next ();

    virtual const ::phenotype_common::motility_types&
    unrestricted ();

    virtual bool
    restricted_next ();

    virtual const ::phenotype_common::motility_types&
    restricted ();

    public:
    struct motility_simpl_state
    {
      const ::phenotype_common::motility* motility_;
      ::phenotype_common::motility::unrestricted_const_iterator unrestricted_;
      ::phenotype_common::motility::unrestricted_const_iterator unrestricted_end_;
      ::phenotype_common::motility::restricted_const_iterator restricted_;
      ::phenotype_common::motility::restricted_const_iterator restricted_end_;
    };

    motility_simpl_state motility_simpl_state_;
  };

  class motility_types_simpl: public motility_types_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::motility_types&);

    // Attributes.
    //
    virtual bool
    ID_present ();

    virtual unsigned int
    ID ();

    // Elements.
    //
    virtual bool
    timescale_present ();

    virtual const ::phenotype_common::timescale&
    timescale ();

    virtual bool
    restriction_present ();

    virtual const ::variables::experimental_conditions&
    restriction ();

    virtual bool
    net_displacement_present ();

    virtual const ::common::units_decimal&
    net_displacement ();

    virtual bool
    total_displacement_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_displacement ();

    virtual bool
    mean_square_displacement_present ();

    virtual const ::common::units_decimal_nonnegative&
    mean_square_displacement ();

    virtual bool
    mean_speed_present ();

    virtual const ::common::units_decimal&
    mean_speed ();

    virtual bool
    net_speed_present ();

    virtual const ::common::units_decimal&
    net_speed ();

    virtual bool
    persistence_present ();

    virtual const ::common::units_decimal&
    persistence ();

    virtual bool
    mean_path_length_present ();

    virtual const ::common::units_decimal&
    mean_path_length ();

    virtual bool
    diffusion_coefficient_present ();

    virtual const ::common::units_decimal&
    diffusion_coefficient ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct motility_types_simpl_state
    {
      const ::phenotype_common::motility_types* motility_types_;
    };

    motility_types_simpl_state motility_types_simpl_state_;
  };

  class timescale_simpl: public timescale_sskel
  {
    public:
    timescale_simpl ();

    virtual void
    pre (const ::phenotype_common::timescale&);

    // Attributes.
    //
    virtual bool
    mitotic_present ();

    virtual bool
    mitotic ();

    public:
    ::common::units_decimal_simpl base_impl_;

    public:
    struct timescale_simpl_state
    {
      const ::phenotype_common::timescale* timescale_;
    };

    timescale_simpl_state timescale_simpl_state_;
  };

  class transport_processes_simpl: public transport_processes_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::transport_processes&);

    // Elements.
    //
    virtual bool
    variable_next ();

    virtual const ::phenotype_common::transport_variable&
    variable ();

    public:
    struct transport_processes_simpl_state
    {
      const ::phenotype_common::transport_processes* transport_processes_;
      ::phenotype_common::transport_processes::variable_const_iterator variable_;
      ::phenotype_common::transport_processes::variable_const_iterator variable_end_;
    };

    transport_processes_simpl_state transport_processes_simpl_state_;
  };

  class transport_variable_simpl: public transport_variable_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::transport_variable&);

    // Attributes.
    //
    virtual ::std::string
    name ();

    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    virtual bool
    ID_present ();

    virtual unsigned long long
    ID ();

    virtual bool
    type_present ();

    virtual const ::variables::amount_type&
    type ();

    virtual bool
    ChEBI_ID_present ();

    virtual ::std::string
    ChEBI_ID ();

    virtual bool
    MeSH_ID_present ();

    virtual ::std::string
    MeSH_ID ();

    virtual bool
    DrugBank_ID_present ();

    virtual ::std::string
    DrugBank_ID ();

    virtual bool
    GMO_ID_present ();

    virtual ::std::string
    GMO_ID ();

    virtual bool
    GO_ID_present ();

    virtual ::std::string
    GO_ID ();

    virtual bool
    UniProt_ID_present ();

    virtual ::std::string
    UniProt_ID ();

    virtual bool
    PR_ID_present ();

    virtual ::std::string
    PR_ID ();

    // Elements.
    //
    virtual bool
    all_present ();

    virtual bool
    export_rate_present ();

    virtual const ::common::units_decimal&
    export_rate ();

    virtual bool
    export_rate_per_unit_surface_area_present ();

    virtual const ::common::units_decimal&
    export_rate_per_unit_surface_area ();

    virtual bool
    import_rate_present ();

    virtual const ::common::units_decimal&
    import_rate ();

    virtual bool
    import_rate_per_unit_surface_area_present ();

    virtual const ::common::units_decimal&
    import_rate_per_unit_surface_area ();

    virtual bool
    saturation_density_present ();

    virtual const ::common::units_decimal&
    saturation_density ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct transport_variable_simpl_state
    {
      const ::phenotype_common::transport_variable* transport_variable_;
    };

    transport_variable_simpl_state transport_variable_simpl_state_;
  };

  class geometrical_parameters_simpl: public geometrical_parameters_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::geometrical_parameters&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    // Elements.
    //
    virtual bool
    aspect_ratio_present ();

    virtual const ::common::units_decimal_nonnegative&
    aspect_ratio ();

    virtual bool
    circularity_present ();

    virtual const ::common::units_decimal_nonnegative&
    circularity ();

    virtual bool
    eccentricity_present ();

    virtual const ::common::units_decimal_nonnegative&
    eccentricity ();

    virtual bool
    sphericity_present ();

    virtual const ::common::units_decimal_nonnegative&
    sphericity ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct geometrical_parameters_simpl_state
    {
      const ::phenotype_common::geometrical_parameters* geometrical_parameters_;
    };

    geometrical_parameters_simpl_state geometrical_parameters_simpl_state_;
  };

  class lengths_simpl: public lengths_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::lengths&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    // Elements.
    //
    virtual bool
    diameter_present ();

    virtual const ::common::units_decimal_nonnegative&
    diameter ();

    virtual bool
    major_axis_present ();

    virtual const ::common::units_decimal_nonnegative&
    major_axis ();

    virtual bool
    minor_axis_present ();

    virtual const ::common::units_decimal_nonnegative&
    minor_axis ();

    virtual bool
    perimeter_present ();

    virtual const ::common::units_decimal_nonnegative&
    perimeter ();

    virtual bool
    radius_present ();

    virtual const ::common::units_decimal_nonnegative&
    radius ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct lengths_simpl_state
    {
      const ::phenotype_common::lengths* lengths_;
    };

    lengths_simpl_state lengths_simpl_state_;
  };

  class areas_3D_simpl: public areas_3D_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::areas_3D&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    // Elements.
    //
    virtual bool
    free_surface_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    free_surface_area ();

    virtual bool
    total_surface_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_surface_area ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct areas_3D_simpl_state
    {
      const ::phenotype_common::areas_3D* areas_3D_;
    };

    areas_3D_simpl_state areas_3D_simpl_state_;
  };

  class areas_2D_simpl: public areas_2D_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::areas_2D&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    // Elements.
    //
    virtual bool
    total_area_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_area ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct areas_2D_simpl_state
    {
      const ::phenotype_common::areas_2D* areas_2D_;
    };

    areas_2D_simpl_state areas_2D_simpl_state_;
  };

  class volumes_simpl: public volumes_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::volumes&);

    // Attributes.
    //
    virtual bool
    units_present ();

    virtual ::std::string
    units ();

    // Elements.
    //
    virtual bool
    fluid_volume_present ();

    virtual const ::common::units_decimal_nonnegative&
    fluid_volume ();

    virtual bool
    fluid_volume_fraction_present ();

    virtual const ::common::units_fraction&
    fluid_volume_fraction ();

    virtual bool
    solid_calcified_volume_present ();

    virtual const ::common::units_decimal_nonnegative&
    solid_calcified_volume ();

    virtual bool
    solid_volume_present ();

    virtual const ::common::units_decimal_nonnegative&
    solid_volume ();

    virtual bool
    solid_volume_fraction_present ();

    virtual const ::common::units_fraction&
    solid_volume_fraction ();

    virtual bool
    total_volume_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_volume ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct volumes_simpl_state
    {
      const ::phenotype_common::volumes* volumes_;
    };

    volumes_simpl_state volumes_simpl_state_;
  };

  class geometrical_properties_simpl: public geometrical_properties_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::geometrical_properties&);

    // Elements.
    //
    virtual bool
    parameters_present ();

    virtual const ::phenotype_common::geometrical_parameters&
    parameters ();

    virtual bool
    lengths_present ();

    virtual const ::phenotype_common::lengths&
    lengths ();

    virtual bool
    areas_present ();

    virtual const ::phenotype_common::areas_3D&
    areas ();

    virtual bool
    volumes_present ();

    virtual const ::phenotype_common::volumes&
    volumes ();

    virtual bool
    cross_section_next ();

    virtual const ::phenotype_common::cross_section&
    cross_section ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct geometrical_properties_simpl_state
    {
      const ::phenotype_common::geometrical_properties* geometrical_properties_;
      ::phenotype_common::geometrical_properties::cross_section_const_iterator cross_section_;
      ::phenotype_common::geometrical_properties::cross_section_const_iterator cross_section_end_;
    };

    geometrical_properties_simpl_state geometrical_properties_simpl_state_;
  };

  class cross_section_simpl: public cross_section_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::cross_section&);

    // Elements.
    //
    virtual bool
    parameters_present ();

    virtual const ::phenotype_common::geometrical_parameters&
    parameters ();

    virtual bool
    lengths_present ();

    virtual const ::phenotype_common::lengths&
    lengths ();

    virtual bool
    areas_present ();

    virtual const ::phenotype_common::areas_2D&
    areas ();

    virtual bool
    custom_present ();

    virtual const ::common::custom&
    custom ();

    public:
    struct cross_section_simpl_state
    {
      const ::phenotype_common::cross_section* cross_section_;
    };

    cross_section_simpl_state cross_section_simpl_state_;
  };

  class mass_simpl: public mass_sskel
  {
    public:
    virtual void
    pre (const ::phenotype_common::mass&);

    // Elements.
    //
    virtual bool
    biomass_present ();

    virtual const ::common::units_decimal_nonnegative&
    biomass ();

    virtual bool
    fluid_mass_present ();

    virtual const ::common::units_decimal_nonnegative&
    fluid_mass ();

    virtual bool
    total_mass_present ();

    virtual const ::common::units_decimal_nonnegative&
    total_mass ();

    public:
    struct mass_simpl_state
    {
      const ::phenotype_common::mass* mass_;
    };

    mass_simpl_state mass_simpl_state_;
  };
}

#ifdef PHENOTYPE_COMMON_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PHENOTYPE_COMMON_SIMPL_HPP
