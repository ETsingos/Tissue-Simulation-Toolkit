// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "common-simpl.hpp"

#include <xsde/cxx/serializer/validating/string-common.hxx>

namespace common
{
  // custom_base_simpl
  //

  void custom_base_simpl::
  pre (const ::common::custom& x)
  {
    this->custom_base_simpl_state_.custom_ = &x;
  }

  // double_list_simpl
  //

  void double_list_simpl::
  pre (const ::common::double_list& x)
  {
    this->double_list_simpl_state_.i_ = x.begin ();
    this->double_list_simpl_state_.end_ = x.end ();
  }

  bool double_list_simpl::
  item_next ()
  {
    return this->double_list_simpl_state_.i_ != this->double_list_simpl_state_.end_;
  }

  double double_list_simpl::
  item ()
  {
    return *this->double_list_simpl_state_.i_++;
  }

  // unsigned_int_list_simpl
  //

  void unsigned_int_list_simpl::
  pre (const ::common::unsigned_int_list& x)
  {
    this->unsigned_int_list_simpl_state_.i_ = x.begin ();
    this->unsigned_int_list_simpl_state_.end_ = x.end ();
  }

  bool unsigned_int_list_simpl::
  item_next ()
  {
    return this->unsigned_int_list_simpl_state_.i_ != this->unsigned_int_list_simpl_state_.end_;
  }

  unsigned int unsigned_int_list_simpl::
  item ()
  {
    return *this->unsigned_int_list_simpl_state_.i_++;
  }

  // two_doubles_simpl
  //

  two_doubles_simpl::
  two_doubles_simpl ()
  : two_doubles_sskel (&base_impl_)
  {
  }

  void two_doubles_simpl::
  pre (const ::common::two_doubles& x)
  {
    this->base_impl_.pre (x);
  }

  // units_double_list_simpl
  //

  units_double_list_simpl::
  units_double_list_simpl ()
  : units_double_list_sskel (&base_impl_)
  {
  }

  void units_double_list_simpl::
  pre (const ::common::units_double_list& x)
  {
    this->base_impl_.pre (x);
    this->units_double_list_simpl_state_.units_double_list_ = &x;
  }

  bool units_double_list_simpl::
  units_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->units_present ();
  }

  ::std::string units_double_list_simpl::
  units ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->units ();
  }

  bool units_double_list_simpl::
  measurement_type_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->measurement_type_present ();
  }

  ::std::string units_double_list_simpl::
  measurement_type ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->measurement_type ();
  }

  bool units_double_list_simpl::
  uncertainty_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->uncertainty_present ();
  }

  double units_double_list_simpl::
  uncertainty ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->uncertainty ();
  }

  bool units_double_list_simpl::
  negative_uncertainty_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->negative_uncertainty_present ();
  }

  double units_double_list_simpl::
  negative_uncertainty ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->negative_uncertainty ();
  }

  bool units_double_list_simpl::
  positive_uncertainty_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->positive_uncertainty_present ();
  }

  double units_double_list_simpl::
  positive_uncertainty ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->positive_uncertainty ();
  }

  bool units_double_list_simpl::
  uncertainty_percentage_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->uncertainty_percentage_present ();
  }

  double units_double_list_simpl::
  uncertainty_percentage ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->uncertainty_percentage ();
  }

  bool units_double_list_simpl::
  negative_uncertainty_percentage_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->negative_uncertainty_percentage_present ();
  }

  double units_double_list_simpl::
  negative_uncertainty_percentage ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->negative_uncertainty_percentage ();
  }

  bool units_double_list_simpl::
  positive_uncertainty_percentage_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->positive_uncertainty_percentage_present ();
  }

  double units_double_list_simpl::
  positive_uncertainty_percentage ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->positive_uncertainty_percentage ();
  }

  bool units_double_list_simpl::
  median_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->median_present ();
  }

  double units_double_list_simpl::
  median ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->median ();
  }

  bool units_double_list_simpl::
  standard_deviation_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->standard_deviation_present ();
  }

  double units_double_list_simpl::
  standard_deviation ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->standard_deviation ();
  }

  bool units_double_list_simpl::
  interquartile_range_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->interquartile_range_present ();
  }

  const ::common::two_doubles& units_double_list_simpl::
  interquartile_range ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->interquartile_range ();
  }

  bool units_double_list_simpl::
  range_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->range_present ();
  }

  const ::common::two_doubles& units_double_list_simpl::
  range ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->range ();
  }

  bool units_double_list_simpl::
  min_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->min_present ();
  }

  double units_double_list_simpl::
  min ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->min ();
  }

  bool units_double_list_simpl::
  max_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->max_present ();
  }

  double units_double_list_simpl::
  max ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->max ();
  }

  bool units_double_list_simpl::
  standard_error_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->standard_error_present ();
  }

  double units_double_list_simpl::
  standard_error ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->standard_error ();
  }

  bool units_double_list_simpl::
  standard_error_of_the_mean_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->standard_error_of_the_mean_present ();
  }

  double units_double_list_simpl::
  standard_error_of_the_mean ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->standard_error_of_the_mean ();
  }

  bool units_double_list_simpl::
  number_obs_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->number_obs_present ();
  }

  int units_double_list_simpl::
  number_obs ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->number_obs ();
  }

  bool units_double_list_simpl::
  skewnesss_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->skewnesss_present ();
  }

  double units_double_list_simpl::
  skewnesss ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->skewnesss ();
  }

  bool units_double_list_simpl::
  kurtosis_present ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->kurtosis_present ();
  }

  double units_double_list_simpl::
  kurtosis ()
  {
    return this->units_double_list_simpl_state_.units_double_list_->kurtosis ();
  }

  // delimited_list_simpl
  //

  delimited_list_simpl::
  delimited_list_simpl ()
  : delimited_list_sskel (&base_impl_)
  {
  }

  void delimited_list_simpl::
  pre (const ::common::delimited_list& x)
  {
    this->base_impl_.pre (x);
    this->delimited_list_simpl_state_.delimited_list_ = &x;
  }

  bool delimited_list_simpl::
  delimiter_present ()
  {
    return this->delimited_list_simpl_state_.delimited_list_->delimiter_present ();
  }

  ::std::string delimited_list_simpl::
  delimiter ()
  {
    return this->delimited_list_simpl_state_.delimited_list_->delimiter ();
  }

  // units_delimited_list_simpl
  //

  units_delimited_list_simpl::
  units_delimited_list_simpl ()
  : units_delimited_list_sskel (&base_impl_)
  {
  }

  void units_delimited_list_simpl::
  pre (const ::common::units_delimited_list& x)
  {
    this->base_impl_.pre (x);
    this->units_delimited_list_simpl_state_.units_delimited_list_ = &x;
  }

  bool units_delimited_list_simpl::
  units_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->units_present ();
  }

  ::std::string units_delimited_list_simpl::
  units ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->units ();
  }

  bool units_delimited_list_simpl::
  measurement_type_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->measurement_type_present ();
  }

  ::std::string units_delimited_list_simpl::
  measurement_type ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->measurement_type ();
  }

  bool units_delimited_list_simpl::
  uncertainty_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->uncertainty_present ();
  }

  double units_delimited_list_simpl::
  uncertainty ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->uncertainty ();
  }

  bool units_delimited_list_simpl::
  negative_uncertainty_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->negative_uncertainty_present ();
  }

  double units_delimited_list_simpl::
  negative_uncertainty ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->negative_uncertainty ();
  }

  bool units_delimited_list_simpl::
  positive_uncertainty_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->positive_uncertainty_present ();
  }

  double units_delimited_list_simpl::
  positive_uncertainty ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->positive_uncertainty ();
  }

  bool units_delimited_list_simpl::
  uncertainty_percentage_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->uncertainty_percentage_present ();
  }

  double units_delimited_list_simpl::
  uncertainty_percentage ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->uncertainty_percentage ();
  }

  bool units_delimited_list_simpl::
  negative_uncertainty_percentage_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->negative_uncertainty_percentage_present ();
  }

  double units_delimited_list_simpl::
  negative_uncertainty_percentage ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->negative_uncertainty_percentage ();
  }

  bool units_delimited_list_simpl::
  positive_uncertainty_percentage_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->positive_uncertainty_percentage_present ();
  }

  double units_delimited_list_simpl::
  positive_uncertainty_percentage ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->positive_uncertainty_percentage ();
  }

  bool units_delimited_list_simpl::
  median_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->median_present ();
  }

  double units_delimited_list_simpl::
  median ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->median ();
  }

  bool units_delimited_list_simpl::
  standard_deviation_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->standard_deviation_present ();
  }

  double units_delimited_list_simpl::
  standard_deviation ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->standard_deviation ();
  }

  bool units_delimited_list_simpl::
  interquartile_range_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->interquartile_range_present ();
  }

  const ::common::two_doubles& units_delimited_list_simpl::
  interquartile_range ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->interquartile_range ();
  }

  bool units_delimited_list_simpl::
  range_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->range_present ();
  }

  const ::common::two_doubles& units_delimited_list_simpl::
  range ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->range ();
  }

  bool units_delimited_list_simpl::
  min_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->min_present ();
  }

  double units_delimited_list_simpl::
  min ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->min ();
  }

  bool units_delimited_list_simpl::
  max_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->max_present ();
  }

  double units_delimited_list_simpl::
  max ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->max ();
  }

  bool units_delimited_list_simpl::
  standard_error_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->standard_error_present ();
  }

  double units_delimited_list_simpl::
  standard_error ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->standard_error ();
  }

  bool units_delimited_list_simpl::
  standard_error_of_the_mean_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->standard_error_of_the_mean_present ();
  }

  double units_delimited_list_simpl::
  standard_error_of_the_mean ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->standard_error_of_the_mean ();
  }

  bool units_delimited_list_simpl::
  number_obs_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->number_obs_present ();
  }

  int units_delimited_list_simpl::
  number_obs ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->number_obs ();
  }

  bool units_delimited_list_simpl::
  skewnesss_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->skewnesss_present ();
  }

  double units_delimited_list_simpl::
  skewnesss ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->skewnesss ();
  }

  bool units_delimited_list_simpl::
  kurtosis_present ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->kurtosis_present ();
  }

  double units_delimited_list_simpl::
  kurtosis ()
  {
    return this->units_delimited_list_simpl_state_.units_delimited_list_->kurtosis ();
  }

  // units_decimal_simpl
  //

  units_decimal_simpl::
  units_decimal_simpl ()
  : units_decimal_sskel (&base_impl_)
  {
  }

  void units_decimal_simpl::
  pre (const ::common::units_decimal& x)
  {
    this->base_impl_.pre (x);
    this->units_decimal_simpl_state_.units_decimal_ = &x;
  }

  bool units_decimal_simpl::
  units_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->units_present ();
  }

  ::std::string units_decimal_simpl::
  units ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->units ();
  }

  bool units_decimal_simpl::
  measurement_type_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->measurement_type_present ();
  }

  ::std::string units_decimal_simpl::
  measurement_type ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->measurement_type ();
  }

  bool units_decimal_simpl::
  uncertainty_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->uncertainty_present ();
  }

  double units_decimal_simpl::
  uncertainty ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->uncertainty ();
  }

  bool units_decimal_simpl::
  negative_uncertainty_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->negative_uncertainty_present ();
  }

  double units_decimal_simpl::
  negative_uncertainty ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->negative_uncertainty ();
  }

  bool units_decimal_simpl::
  positive_uncertainty_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->positive_uncertainty_present ();
  }

  double units_decimal_simpl::
  positive_uncertainty ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->positive_uncertainty ();
  }

  bool units_decimal_simpl::
  uncertainty_percentage_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->uncertainty_percentage_present ();
  }

  double units_decimal_simpl::
  uncertainty_percentage ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->uncertainty_percentage ();
  }

  bool units_decimal_simpl::
  negative_uncertainty_percentage_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->negative_uncertainty_percentage_present ();
  }

  double units_decimal_simpl::
  negative_uncertainty_percentage ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->negative_uncertainty_percentage ();
  }

  bool units_decimal_simpl::
  positive_uncertainty_percentage_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->positive_uncertainty_percentage_present ();
  }

  double units_decimal_simpl::
  positive_uncertainty_percentage ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->positive_uncertainty_percentage ();
  }

  bool units_decimal_simpl::
  median_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->median_present ();
  }

  double units_decimal_simpl::
  median ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->median ();
  }

  bool units_decimal_simpl::
  standard_deviation_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->standard_deviation_present ();
  }

  double units_decimal_simpl::
  standard_deviation ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->standard_deviation ();
  }

  bool units_decimal_simpl::
  interquartile_range_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->interquartile_range_present ();
  }

  const ::common::two_doubles& units_decimal_simpl::
  interquartile_range ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->interquartile_range ();
  }

  bool units_decimal_simpl::
  range_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->range_present ();
  }

  const ::common::two_doubles& units_decimal_simpl::
  range ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->range ();
  }

  bool units_decimal_simpl::
  min_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->min_present ();
  }

  double units_decimal_simpl::
  min ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->min ();
  }

  bool units_decimal_simpl::
  max_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->max_present ();
  }

  double units_decimal_simpl::
  max ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->max ();
  }

  bool units_decimal_simpl::
  standard_error_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->standard_error_present ();
  }

  double units_decimal_simpl::
  standard_error ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->standard_error ();
  }

  bool units_decimal_simpl::
  standard_error_of_the_mean_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->standard_error_of_the_mean_present ();
  }

  double units_decimal_simpl::
  standard_error_of_the_mean ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->standard_error_of_the_mean ();
  }

  bool units_decimal_simpl::
  number_obs_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->number_obs_present ();
  }

  int units_decimal_simpl::
  number_obs ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->number_obs ();
  }

  bool units_decimal_simpl::
  skewnesss_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->skewnesss_present ();
  }

  double units_decimal_simpl::
  skewnesss ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->skewnesss ();
  }

  bool units_decimal_simpl::
  kurtosis_present ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->kurtosis_present ();
  }

  double units_decimal_simpl::
  kurtosis ()
  {
    return this->units_decimal_simpl_state_.units_decimal_->kurtosis ();
  }

  // units_decimal_nonnegative_simpl
  //

  units_decimal_nonnegative_simpl::
  units_decimal_nonnegative_simpl ()
  : units_decimal_nonnegative_sskel (&base_impl_)
  {
  }

  void units_decimal_nonnegative_simpl::
  pre (const ::common::units_decimal_nonnegative& x)
  {
    this->base_impl_.pre (x);
  }

  // units_unsignedShort_simpl
  //

  units_unsignedShort_simpl::
  units_unsignedShort_simpl ()
  : units_unsignedShort_sskel (&base_impl_)
  {
  }

  void units_unsignedShort_simpl::
  pre (const ::common::units_unsignedShort& x)
  {
    this->base_impl_.pre (x);
    this->units_unsignedShort_simpl_state_.units_unsignedShort_ = &x;
  }

  bool units_unsignedShort_simpl::
  measurement_type_present ()
  {
    return this->units_unsignedShort_simpl_state_.units_unsignedShort_->measurement_type_present ();
  }

  ::std::string units_unsignedShort_simpl::
  measurement_type ()
  {
    return this->units_unsignedShort_simpl_state_.units_unsignedShort_->measurement_type ();
  }

  bool units_unsignedShort_simpl::
  units_present ()
  {
    return this->units_unsignedShort_simpl_state_.units_unsignedShort_->units_present ();
  }

  ::std::string units_unsignedShort_simpl::
  units ()
  {
    return this->units_unsignedShort_simpl_state_.units_unsignedShort_->units ();
  }

  // units_boolean_simpl
  //

  units_boolean_simpl::
  units_boolean_simpl ()
  : units_boolean_sskel (&base_impl_)
  {
  }

  void units_boolean_simpl::
  pre (const ::common::units_boolean& x)
  {
    this->base_impl_.pre (x);
    this->units_boolean_simpl_state_.units_boolean_ = &x;
  }

  bool units_boolean_simpl::
  units_present ()
  {
    return this->units_boolean_simpl_state_.units_boolean_->units_present ();
  }

  ::std::string units_boolean_simpl::
  units ()
  {
    return this->units_boolean_simpl_state_.units_boolean_->units ();
  }

  // fraction_simpl
  //

  fraction_simpl::
  fraction_simpl ()
  : fraction_sskel (&base_impl_)
  {
  }

  void fraction_simpl::
  pre (const ::common::fraction& x)
  {
    this->base_impl_.pre (x);
  }

  // units_fraction_simpl
  //

  units_fraction_simpl::
  units_fraction_simpl ()
  : units_fraction_sskel (&base_impl_)
  {
  }

  void units_fraction_simpl::
  pre (const ::common::units_fraction& x)
  {
    this->base_impl_.pre (x);
  }

  // units_string_simpl
  //

  units_string_simpl::
  units_string_simpl ()
  : units_string_sskel (&base_impl_)
  {
  }

  void units_string_simpl::
  pre (const ::common::units_string& x)
  {
    this->base_impl_.pre (x);
    this->units_string_simpl_state_.units_string_ = &x;
  }

  bool units_string_simpl::
  units_present ()
  {
    return this->units_string_simpl_state_.units_string_->units_present ();
  }

  ::std::string units_string_simpl::
  units ()
  {
    return this->units_string_simpl_state_.units_string_->units ();
  }

  bool units_string_simpl::
  measurement_type_present ()
  {
    return this->units_string_simpl_state_.units_string_->measurement_type_present ();
  }

  ::std::string units_string_simpl::
  measurement_type ()
  {
    return this->units_string_simpl_state_.units_string_->measurement_type ();
  }

  bool units_string_simpl::
  uncertainty_present ()
  {
    return this->units_string_simpl_state_.units_string_->uncertainty_present ();
  }

  double units_string_simpl::
  uncertainty ()
  {
    return this->units_string_simpl_state_.units_string_->uncertainty ();
  }

  bool units_string_simpl::
  negative_uncertainty_present ()
  {
    return this->units_string_simpl_state_.units_string_->negative_uncertainty_present ();
  }

  double units_string_simpl::
  negative_uncertainty ()
  {
    return this->units_string_simpl_state_.units_string_->negative_uncertainty ();
  }

  bool units_string_simpl::
  positive_uncertainty_present ()
  {
    return this->units_string_simpl_state_.units_string_->positive_uncertainty_present ();
  }

  double units_string_simpl::
  positive_uncertainty ()
  {
    return this->units_string_simpl_state_.units_string_->positive_uncertainty ();
  }

  bool units_string_simpl::
  uncertainty_percentage_present ()
  {
    return this->units_string_simpl_state_.units_string_->uncertainty_percentage_present ();
  }

  double units_string_simpl::
  uncertainty_percentage ()
  {
    return this->units_string_simpl_state_.units_string_->uncertainty_percentage ();
  }

  bool units_string_simpl::
  negative_uncertainty_percentage_present ()
  {
    return this->units_string_simpl_state_.units_string_->negative_uncertainty_percentage_present ();
  }

  double units_string_simpl::
  negative_uncertainty_percentage ()
  {
    return this->units_string_simpl_state_.units_string_->negative_uncertainty_percentage ();
  }

  bool units_string_simpl::
  positive_uncertainty_percentage_present ()
  {
    return this->units_string_simpl_state_.units_string_->positive_uncertainty_percentage_present ();
  }

  double units_string_simpl::
  positive_uncertainty_percentage ()
  {
    return this->units_string_simpl_state_.units_string_->positive_uncertainty_percentage ();
  }

  bool units_string_simpl::
  median_present ()
  {
    return this->units_string_simpl_state_.units_string_->median_present ();
  }

  double units_string_simpl::
  median ()
  {
    return this->units_string_simpl_state_.units_string_->median ();
  }

  bool units_string_simpl::
  standard_deviation_present ()
  {
    return this->units_string_simpl_state_.units_string_->standard_deviation_present ();
  }

  double units_string_simpl::
  standard_deviation ()
  {
    return this->units_string_simpl_state_.units_string_->standard_deviation ();
  }

  bool units_string_simpl::
  interquartile_range_present ()
  {
    return this->units_string_simpl_state_.units_string_->interquartile_range_present ();
  }

  const ::common::two_doubles& units_string_simpl::
  interquartile_range ()
  {
    return this->units_string_simpl_state_.units_string_->interquartile_range ();
  }

  bool units_string_simpl::
  range_present ()
  {
    return this->units_string_simpl_state_.units_string_->range_present ();
  }

  const ::common::two_doubles& units_string_simpl::
  range ()
  {
    return this->units_string_simpl_state_.units_string_->range ();
  }

  bool units_string_simpl::
  min_present ()
  {
    return this->units_string_simpl_state_.units_string_->min_present ();
  }

  double units_string_simpl::
  min ()
  {
    return this->units_string_simpl_state_.units_string_->min ();
  }

  bool units_string_simpl::
  max_present ()
  {
    return this->units_string_simpl_state_.units_string_->max_present ();
  }

  double units_string_simpl::
  max ()
  {
    return this->units_string_simpl_state_.units_string_->max ();
  }

  bool units_string_simpl::
  standard_error_present ()
  {
    return this->units_string_simpl_state_.units_string_->standard_error_present ();
  }

  double units_string_simpl::
  standard_error ()
  {
    return this->units_string_simpl_state_.units_string_->standard_error ();
  }

  bool units_string_simpl::
  standard_error_of_the_mean_present ()
  {
    return this->units_string_simpl_state_.units_string_->standard_error_of_the_mean_present ();
  }

  double units_string_simpl::
  standard_error_of_the_mean ()
  {
    return this->units_string_simpl_state_.units_string_->standard_error_of_the_mean ();
  }

  bool units_string_simpl::
  number_obs_present ()
  {
    return this->units_string_simpl_state_.units_string_->number_obs_present ();
  }

  int units_string_simpl::
  number_obs ()
  {
    return this->units_string_simpl_state_.units_string_->number_obs ();
  }

  bool units_string_simpl::
  skewnesss_present ()
  {
    return this->units_string_simpl_state_.units_string_->skewnesss_present ();
  }

  double units_string_simpl::
  skewnesss ()
  {
    return this->units_string_simpl_state_.units_string_->skewnesss ();
  }

  bool units_string_simpl::
  kurtosis_present ()
  {
    return this->units_string_simpl_state_.units_string_->kurtosis_present ();
  }

  double units_string_simpl::
  kurtosis ()
  {
    return this->units_string_simpl_state_.units_string_->kurtosis ();
  }

  // data_storage_formats_simpl
  //

  data_storage_formats_simpl::
  data_storage_formats_simpl ()
  : data_storage_formats_sskel (0)
  {
  }

  void data_storage_formats_simpl::
  pre (const ::common::data_storage_formats& x)
  {
    this->data_storage_formats_simpl_state_ = &x;
  }

  void data_storage_formats_simpl::
  _serialize_content ()
  {
    if (::xsde::cxx::serializer::validating::string_common::validate_facets (
          this->data_storage_formats_simpl_state_->string (),
          this->_facets (),
          this->_context ()))
      this->_characters (this->data_storage_formats_simpl_state_->string ());
  }

  // threshold_type_simpl
  //

  threshold_type_simpl::
  threshold_type_simpl ()
  : threshold_type_sskel (0)
  {
  }

  void threshold_type_simpl::
  pre (const ::common::threshold_type& x)
  {
    this->threshold_type_simpl_state_ = &x;
  }

  void threshold_type_simpl::
  _serialize_content ()
  {
    if (::xsde::cxx::serializer::validating::string_common::validate_facets (
          this->threshold_type_simpl_state_->string (),
          this->_facets (),
          this->_context ()))
      this->_characters (this->threshold_type_simpl_state_->string ());
  }

  // transition_threshold_simpl
  //

  transition_threshold_simpl::
  transition_threshold_simpl ()
  : transition_threshold_sskel (&base_impl_)
  {
  }

  void transition_threshold_simpl::
  pre (const ::common::transition_threshold& x)
  {
    this->base_impl_.pre (x);
    this->transition_threshold_simpl_state_.transition_threshold_ = &x;
  }

  ::std::string transition_threshold_simpl::
  quantity ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->quantity ();
  }

  const ::common::threshold_type& transition_threshold_simpl::
  type ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->type ();
  }

  bool transition_threshold_simpl::
  variable_ID_present ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->variable_ID_present ();
  }

  unsigned long long transition_threshold_simpl::
  variable_ID ()
  {
    return this->transition_threshold_simpl_state_.transition_threshold_->variable_ID ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

