// Copyright (c) 2005-2016 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PHENOTYPE_DATASET_IPP
#define PHENOTYPE_DATASET_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

#include "microenvironment.ipp"

#include "phenotype.ipp"

#include "phenotype_base.ipp"

namespace phenotype_dataset
{
  // phenotype_dataset
  //

  inline
  bool phenotype_dataset::
  keywords_present () const
  {
    return this->keywords_present_;
  }

  inline
  void phenotype_dataset::
  keywords_present (bool x)
  {
    this->keywords_present_ = x;
  }

  inline
  const ::std::string& phenotype_dataset::
  keywords () const
  {
    return this->keywords_;
  }

  inline
  ::std::string& phenotype_dataset::
  keywords ()
  {
    return this->keywords_;
  }

  inline
  void phenotype_dataset::
  keywords (const ::std::string& x)
  {
    this->keywords_ = x;
    this->keywords_present_ = true;
  }

  inline
  bool phenotype_dataset::
  ID_present () const
  {
    return this->ID_present_;
  }

  inline
  void phenotype_dataset::
  ID_present (bool x)
  {
    this->ID_present_ = x;
  }

  inline
  unsigned long long phenotype_dataset::
  ID () const
  {
    return this->ID_;
  }

  inline
  unsigned long long& phenotype_dataset::
  ID ()
  {
    return this->ID_;
  }

  inline
  void phenotype_dataset::
  ID (unsigned long long x)
  {
    this->ID_ = x;
    this->ID_present_ = true;
  }

  inline
  bool phenotype_dataset::
  microenvironment_present () const
  {
    return this->microenvironment_ != 0;
  }

  inline
  const ::microenvironment::microenvironment& phenotype_dataset::
  microenvironment () const
  {
    return *this->microenvironment_;
  }

  inline
  ::microenvironment::microenvironment& phenotype_dataset::
  microenvironment ()
  {
    return *this->microenvironment_;
  }

  inline
  void phenotype_dataset::
  microenvironment (::microenvironment::microenvironment* x)
  {
    delete this->microenvironment_;
    this->microenvironment_ = x;
  }

  inline
  ::microenvironment::microenvironment* phenotype_dataset::
  microenvironment_detach ()
  {
    ::microenvironment::microenvironment* r = this->microenvironment_;
    this->microenvironment_ = 0;
    return r;
  }

  inline
  const phenotype_dataset::phenotype_sequence& phenotype_dataset::
  phenotype () const
  {
    return this->phenotype_;
  }

  inline
  phenotype_dataset::phenotype_sequence& phenotype_dataset::
  phenotype ()
  {
    return this->phenotype_;
  }

  inline
  const phenotype_dataset::cell_part_sequence& phenotype_dataset::
  cell_part () const
  {
    return this->cell_part_;
  }

  inline
  phenotype_dataset::cell_part_sequence& phenotype_dataset::
  cell_part ()
  {
    return this->cell_part_;
  }

  inline
  bool phenotype_dataset::
  custom_present () const
  {
    return this->custom_ != 0;
  }

  inline
  const ::common::custom& phenotype_dataset::
  custom () const
  {
    return *this->custom_;
  }

  inline
  ::common::custom& phenotype_dataset::
  custom ()
  {
    return *this->custom_;
  }

  inline
  void phenotype_dataset::
  custom (::common::custom* x)
  {
    delete this->custom_;
    this->custom_ = x;
  }

  inline
  ::common::custom* phenotype_dataset::
  custom_detach ()
  {
    ::common::custom* r = this->custom_;
    this->custom_ = 0;
    return r;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // PHENOTYPE_DATASET_IPP
