<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="profiler_8cpp" kind="file" language="C++">
    <compoundname>profiler.cpp</compoundname>
    <includes refid="profiler_8hpp" local="yes">profiler.hpp</includes>
    <includes local="no">iomanip</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/util/profiler.cpp</label>
        <link refid="profiler_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>profiler.hpp</label>
        <link refid="profiler_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>chrono</label>
      </node>
      <node id="6">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;profiler.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROFILING_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="class_profiler" kindref="compound">Profiler</ref><sp/>profiler<sp/>=<sp/><ref refid="class_profiler" kindref="compound">Profiler</ref>();</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Profiler::new_timer(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><ref refid="structtimer" kindref="compound">timer</ref><sp/>new_timer;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>new_timer.name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>new_timer.count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dex<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>index++;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>timers.push_back(new_timer);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dex;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Profiler::start_new_timer(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtimer" kindref="compound">timer</ref><sp/>=<sp/>new_timer(name);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>start_timer(<ref refid="structtimer" kindref="compound">timer</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtimer" kindref="compound">timer</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Profiler::start_timer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtimer" kindref="compound">timer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].start<sp/>=<sp/>std::chrono::system_clock::now();</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Profiler::stop_timer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtimer" kindref="compound">timer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].stop<sp/>=<sp/>std::chrono::system_clock::now();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].delta<sp/>=<sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].stop<sp/>-<sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].start;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].sum<sp/>+=<sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].delta;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].count++;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].avg<sp/>=<sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].sum<sp/>/<sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].count;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="structtimer" kindref="compound">timer</ref><sp/>Profiler::get_timer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtimer" kindref="compound">timer</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>];<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Profiler::print_timer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtimer" kindref="compound">timer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(20)<sp/>&lt;&lt;<sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].name</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>last:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(13)<sp/>&lt;&lt;<sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].delta.count()</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>sum:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(13)<sp/>&lt;&lt;<sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].sum.count()</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>avg:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(13)<sp/>&lt;&lt;<sp/>timers[<ref refid="structtimer" kindref="compound">timer</ref>].avg.count()</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Profiler::stop_print(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structtimer" kindref="compound">timer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>stop_timer(<ref refid="structtimer" kindref="compound">timer</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>print_timer(<ref refid="structtimer" kindref="compound">timer</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Profiler::print_all()<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>index;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>print_timer(i);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/util/profiler.cpp"/>
  </compounddef>
</doxygen>
