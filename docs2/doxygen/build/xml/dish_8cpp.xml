<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="dish_8cpp" kind="file" language="C++">
    <compoundname>dish.cpp</compoundname>
    <includes refid="dish_8hpp" local="yes">dish.hpp</includes>
    <includes refid="crash_8hpp" local="yes">crash.hpp</includes>
    <includes refid="info_8hpp" local="yes">info.hpp</includes>
    <includes refid="inputoutput_8hpp" local="yes">inputoutput.hpp</includes>
    <includes refid="parameter_8hpp" local="yes">parameter.hpp</includes>
    <includes refid="pde_8hpp" local="yes">pde.hpp</includes>
    <includes refid="sticky_8hpp" local="yes">sticky.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">list</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">vector</includes>
    <includes local="yes">../lib/json/json.hpp</includes>
    <incdepgraph>
      <node id="46">
        <label>../lib/json/json.hpp</label>
      </node>
      <node id="3">
        <label>ca.hpp</label>
        <link refid="ca_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cell.hpp</label>
        <link refid="cell_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp</label>
        <link refid="dish_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>dish.hpp</label>
        <link refid="dish_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>cl.hpp</label>
        <link refid="cl_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>cl_manager.hpp</label>
        <link refid="cl__manager_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>graph.hpp</label>
        <link refid="graph_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>mainpage.hpp</label>
        <link refid="mainpage_8hpp_source"/>
      </node>
      <node id="14">
        <label>parameter.hpp</label>
        <link refid="parameter_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>parameters.hpp</label>
        <link refid="parameters_8hpp_source"/>
      </node>
      <node id="21">
        <label>pde.hpp</label>
        <link refid="pde_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>pdetype.h</label>
        <link refid="pdetype_8h_source"/>
      </node>
      <node id="38">
        <label>crash.hpp</label>
        <link refid="crash_8hpp_source"/>
      </node>
      <node id="39">
        <label>info.hpp</label>
        <link refid="info_8hpp_source"/>
      </node>
      <node id="35">
        <label>inputoutput.hpp</label>
        <link refid="inputoutput_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>random.hpp</label>
        <link refid="random_8hpp_source"/>
      </node>
      <node id="40">
        <label>sticky.hpp</label>
        <link refid="sticky_8hpp_source"/>
      </node>
      <node id="28">
        <label>CL/opencl.h</label>
      </node>
      <node id="23">
        <label>MultiCellDS-pimpl.hpp</label>
      </node>
      <node id="24">
        <label>MultiCellDS-simpl.hpp</label>
      </node>
      <node id="25">
        <label>MultiCellDS.hpp</label>
      </node>
      <node id="41">
        <label>algorithm</label>
      </node>
      <node id="5">
        <label>array</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="32">
        <label>cstring</label>
      </node>
      <node id="42">
        <label>errno.h</label>
      </node>
      <node id="22">
        <label>float.h</label>
      </node>
      <node id="43">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="19">
        <label>iostream</label>
      </node>
      <node id="29">
        <label>iterator</label>
      </node>
      <node id="30">
        <label>limits</label>
      </node>
      <node id="44">
        <label>list</label>
      </node>
      <node id="20">
        <label>math.h</label>
      </node>
      <node id="36">
        <label>mcds_io.h</label>
      </node>
      <node id="15">
        <label>ostream</label>
      </node>
      <node id="18">
        <label>parameter.tpp</label>
      </node>
      <node id="8">
        <label>random</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="45">
        <label>string.h</label>
      </node>
      <node id="10">
        <label>unordered_map</label>
      </node>
      <node id="11">
        <label>unordered_set</label>
      </node>
      <node id="31">
        <label>utility</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="dish_8cpp_1a3c638035d71663ea96aecfeea6817aa5" prot="public" static="no">
        <name>EXTERNAL_OFF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp" line="42" column="9" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dish_8cpp_1aecc69afcd140a2ebbca81dfbe9aefed4" prot="public" static="no">
        <type>nlohmann::json_abi_v3_11_2::json</type>
        <definition>using json =  nlohmann::json_abi_v3_11_2::json</definition>
        <argsstring></argsstring>
        <name>json</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp" line="40" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="dish_8cpp_1aa11a52593a908c20a7259a3e72c0b348" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="class_parameter" kindref="compound">Parameter</ref></type>
        <definition>Parameter par</definition>
        <argsstring></argsstring>
        <name>par</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp" line="44" column="18" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/parameter.cpp" bodystart="7" bodyend="-1" declfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp" declline="44" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="dish_8cpp_1a23504e55d0cef50538b6cdbfd88b8e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double round</definition>
        <argsstring>(double v, int n)</argsstring>
        <name>round</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp" line="216" column="8" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp" bodystart="216" bodyend="220"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>1996-2006<sp/>Roeland<sp/>Merks,<sp/>Paulien<sp/>Hogeweg</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Tissue<sp/>Simulation<sp/>Toolkit.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">Tissue<sp/>Simulation<sp/>Toolkit<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute</highlight></codeline>
<codeline lineno="8"><highlight class="comment">it<sp/>and/or<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="9"><highlight class="comment">License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="10"><highlight class="comment">version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">Tissue<sp/>Simulation<sp/>Toolkit<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will</highlight></codeline>
<codeline lineno="13"><highlight class="comment">be<sp/>useful,<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied</highlight></codeline>
<codeline lineno="14"><highlight class="comment">warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="18"><highlight class="comment">along<sp/>with<sp/>Tissue<sp/>Simulation<sp/>Toolkit;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free</highlight></codeline>
<codeline lineno="19"><highlight class="comment">Software<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>St,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA</highlight></codeline>
<codeline lineno="20"><highlight class="comment">02110-1301<sp/>USA</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dish.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;crash.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;info.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;inputoutput.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parameter.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pde.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sticky.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../lib/json/json.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">json<sp/>=<sp/>nlohmann::json_abi_v3_11_2::json;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXTERNAL_OFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="class_parameter" kindref="compound">Parameter</ref><sp/>par;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">Dish::Dish()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>ConstructorBody();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par.load_mcds)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ImportMultiCellDS(par.mcds_input);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>cell<sp/>distribution<sp/>is<sp/>defined<sp/>by<sp/>user<sp/>in<sp/>INIT<sp/>{}<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>CPM<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cellular_potts" kindref="compound">CellularPotts</ref>(&amp;<ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>,<sp/>par.sizex,<sp/>par.sizey);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>io<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_i_o" kindref="compound">IO</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par.n_chem)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PDEfield<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p_d_e" kindref="compound">PDE</ref>(par.n_chem,<sp/>par.sizex,<sp/>par.sizey);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dish_1aae99b3ba84abb07cacdaba97e35844bd" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par.target_area<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;Cell&gt;::iterator<sp/>c<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin();<sp/>c<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;SetTargetArea(par.target_area);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par.target_area<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;Cell&gt;::iterator<sp/>c<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin();<sp/>c<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;SetTargetArea(par.target_area);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;SetTargetPerimeter(par.target_perimeter);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par.ref_adhesive_area<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;Cell&gt;::iterator<sp/>c<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin();<sp/>c<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;SetReferenceAdhesiveArea(par.ref_adhesive_area);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">Dish::~Dish()<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.clear();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>CPM;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>io;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_dish_1aac30508ed8fdc83a659451f738786ee6" kindref="member">Dish::Plot</ref>(<ref refid="class_graphics" kindref="compound">Graphics</ref><sp/>*g)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sizechange)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>sizechange<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>g-&gt;Resize(par.sizex<sp/>*<sp/>2,<sp/>par.sizey<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CPM)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>CPM-&gt;<ref refid="class_cellular_potts_1a11f6adf742a518ad543ca5d144278926" kindref="member">Plot</ref>(g);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Dish::ConstructorBody()<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>Cell::maxsigma<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>the<sp/>first<sp/>&quot;cell&quot;:<sp/>this<sp/>is<sp/>the<sp/>medium<sp/>(tau=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.push_back(*(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cell" kindref="compound">Cell</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0)));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>indicate<sp/>that<sp/>the<sp/>first<sp/>cell<sp/>is<sp/>the<sp/>medium</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.front().sigma<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.front().tau<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>CPM<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>PDEfield<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Dish::CellLonelyP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_cell" kindref="compound">Cell</ref><sp/>&amp;c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**neighbours)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbours[c.sigma][i]<sp/>==<sp/>EMPTY)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbours[c.sigma][i]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>code<sp/>by<sp/>Paulien<sp/>Hogeweg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_dish_1a41c5667d06a94812b78a83355b266770" kindref="member">Dish::CellGrowthAndDivision</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>vector&lt;bool&gt;<sp/>which_cells(<ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.size());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mem_area<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>called<sp/>for<sp/>the<sp/>first<sp/>time:<sp/>calculate<sp/>mem_area</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mem_area)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>mem_area<sp/>=<sp/><ref refid="class_dish_1af370945f41e9730ee5884b1e56e6be9c" kindref="member">TargetArea</ref>()<sp/>/<sp/><ref refid="class_dish_1ac0e346a1c7242449b148d4765aaa9ff7" kindref="member">CountCells</ref>();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cell_division<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>vector&lt;Cell&gt;::iterator<sp/>c;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin(),<sp/>c++);<sp/>c<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c-&gt;Area()<sp/>-<sp/>c-&gt;TargetArea())<sp/>&gt;<sp/>c-&gt;GrowthThreshold())<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="class_cell_1a89086e3c8e2c7619030f86b0fcd2a0b2" kindref="member">IncrementTargetArea</ref>();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c-&gt;Area()<sp/>&gt;<sp/>2<sp/>*<sp/>mem_area))<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>which_cells[c-&gt;Sigma()]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cell_division++;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>scheduled<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell_division)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>CPM-&gt;<ref refid="class_cellular_potts_1abeb159c2b9095666fa7fca2dcce71dd2" kindref="member">DivideCells</ref>(which_cells);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_dish_1ac0e346a1c7242449b148d4765aaa9ff7" kindref="member">Dish::CountCells</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>vector&lt;Cell&gt;::const_iterator<sp/>i;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin(),<sp/>i++);<sp/>i<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i-&gt;AliveP())<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>amount++;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Dead<sp/>cell\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>amount;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_dish_1a9e0e66bef40b8aa33fa28ea4e0a78d87" kindref="member">Dish::Area</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_area<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>vector&lt;Cell&gt;::const_iterator<sp/>i;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin(),<sp/>i++);<sp/>i<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>total_area<sp/>+=<sp/>i-&gt;Area();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_area;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_dish_1af370945f41e9730ee5884b1e56e6be9c" kindref="member">Dish::TargetArea</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_area<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>vector&lt;Cell&gt;::const_iterator<sp/>i;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin(),<sp/>i++);<sp/>i<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i-&gt;AliveP())</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_area<sp/>+=<sp/>i-&gt;TargetArea();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_area;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_dish_1a1e73feecedc005f2782aaf2e37ab2df6" kindref="member">Dish::SetCellOwner</ref>(<ref refid="class_cell" kindref="compound">Cell</ref><sp/>&amp;which_cell)<sp/>{<sp/>which_cell.owner<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Dish::ClearGrads(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>vector&lt;Cell&gt;::iterator<sp/>i;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin(),<sp/>i++);<sp/>i<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>i-&gt;ClearGrad();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Dish::ZygoteArea(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CPM-&gt;ZygoteArea();<sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_dish_1a6b658e8fc9319152205518588bf53587" kindref="member">Dish::Time</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CPM-&gt;<ref refid="class_cellular_potts_1ad9d48cf8ec7e117e3328958806aa9fb6" kindref="member">Time</ref>();<sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Dish::MeasureChemConcentrations(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>chemical<sp/>concentrations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(vector&lt;Cell&gt;::iterator<sp/>c<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin();<sp/>c<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>par.n_chem;<sp/>ch++)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;chem[ch]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>current<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>par.n_chem;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_dish_1a403577ee8ef78a8cb7b2b4d888167649" kindref="member">SizeX</ref>()<sp/>*<sp/><ref refid="class_dish_1aee8463a854b44635bb7917c39af70040" kindref="member">SizeY</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cn<sp/>=<sp/>CPM-&gt;<ref refid="class_cellular_potts_1af5bbce2aae8baeead6cf173dd3d81d02" kindref="member">Sigma</ref>(0,<sp/>i);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cn<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>[cn].chem[ch]<sp/>+=<sp/>PDEfield-&gt;<ref refid="class_p_d_e_1a1af66fa14990bc666d9bf549cc753100" kindref="member">Sigma</ref>(ch,<sp/>0,<sp/>i);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(vector&lt;Cell&gt;::iterator<sp/>c<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin();<sp/>c<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>par.n_chem;<sp/>ch++)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;chem[ch]<sp/>/=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)c-&gt;Area();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>round(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ten_pow_n<sp/>=<sp/>pow(10,<sp/>n);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>v<sp/>*=<sp/>ten_pow_n;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>round(v)<sp/>/<sp/>ten_pow_n;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Dish::MCDS_import_cell(MCDS_io<sp/>*mcds,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cell_id)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>io_cell<sp/>*iocell<sp/>=<sp/>mcds-&gt;cell_by_id(cell_id);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="class_cell" kindref="compound">Cell</ref><sp/>*n_cell<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cell" kindref="compound">Cell</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>iocell-&gt;mcds_obj-&gt;phenotype_dataset().ID());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>n_cell-&gt;setSigma(iocell-&gt;mcds_obj-&gt;ID());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.push_back(*n_cell);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>n_cell-&gt;<ref refid="class_cell_1af3a3882fdf4e48130af67184cc70fe9d" kindref="member">setTau</ref>(0);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>n_cell-&gt;<ref refid="class_cell_1a0f78f87720f0eca3520678bea6194b9f" kindref="member">SetTargetArea</ref>(0);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Dish::ImportMultiCellDS(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;fname)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>MCDS_io<sp/>mcds(fname);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>mcds.process_cellshapes();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>mcds.lattice_from_vector();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>par.sizex<sp/>=<sp/>mcds.get_size_x();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>par.sizey<sp/>=<sp/>mcds.get_size_y();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>CPM;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>CPM<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_cellular_potts" kindref="compound">CellularPotts</ref>(&amp;<ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>,<sp/>par.sizex,<sp/>par.sizey);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par.n_chem)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>PDEfield<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p_d_e" kindref="compound">PDE</ref>(par.n_chem,<sp/>par.sizex,<sp/>par.sizey);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**sigma<sp/>=<sp/>CPM-&gt;getSigma();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**lattice<sp/>=<sp/>mcds.get_lattice();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>std::copy(*lattice,<sp/>(*lattice)<sp/>+<sp/>(par.sizex<sp/>*<sp/>par.sizey),<sp/>*sigma);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iocell<sp/>:<sp/>*mcds.get_cells())<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>MCDS_import_cell(&amp;mcds,<sp/>iocell.second.mcds_obj-&gt;ID());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>CPM-&gt;MeasureCellSizes();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>sizechange<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Dish::MCDS_export_cell(MCDS_io<sp/>*mcds,<sp/><ref refid="class_cell" kindref="compound">Cell</ref><sp/>*cell)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cell_id<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>-&gt;Sigma();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>io_cell<sp/>*iocell<sp/>=<sp/>mcds-&gt;get_new_cell(cell_id);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>iocell-&gt;type<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>-&gt;tau;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>iocell-&gt;target_area<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>-&gt;TargetArea();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>iocell-&gt;area<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>-&gt;area;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>-&gt;GetCentroid(&amp;iocell-&gt;centroid_x,<sp/>&amp;iocell-&gt;centroid_y);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ovx,<sp/>ovy;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>-&gt;MajorMinorAxis(&amp;iocell-&gt;major_axis,<sp/>&amp;iocell-&gt;minor_axis,<sp/>&amp;ovx,<sp/>&amp;ovy);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Dish::ExportMultiCellDS(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;fname)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**sigma<sp/>=<sp/>CPM-&gt;get_annealed_sigma(par.mcds_anneal_steps);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>MCDS_io<sp/>mcds;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(vector&lt;Cell&gt;::iterator<sp/>c<sp/>=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.begin()<sp/>+<sp/>1;<sp/>c<sp/>!=<sp/><ref refid="class_dish_1a033f004ac525f6edbf0af46819acf707" kindref="member">cell</ref>.end();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>MCDS_export_cell(&amp;mcds,<sp/>&amp;(*c));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>mcds.set_lattice(sigma,<sp/>par.sizex,<sp/>par.sizey);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>mcds.set_unit_mult(par.dx);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>mcds.set_unit_name(</highlight><highlight class="stringliteral">&quot;micron&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>mcds.denoise(par.mcds_denoise_steps);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>mcds.vector_from_lattice();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>mcds.finalize_cellshapes();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>mcds.add_metadata(</highlight><highlight class="stringliteral">&quot;tst_metadata.xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>mcds.add_time();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>mcds.write(fname);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Done<sp/>exporting!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_dish_1a403577ee8ef78a8cb7b2b4d888167649" kindref="member">Dish::SizeX</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CPM-&gt;<ref refid="class_cellular_potts_1aac9603962bcbae57b0fff53e0e381a8f" kindref="member">SizeX</ref>();<sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_dish_1aee8463a854b44635bb7917c39af70040" kindref="member">Dish::SizeY</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CPM-&gt;<ref refid="class_cellular_potts_1a8f3a3165333e6136ac2f1abe1bf0429b" kindref="member">SizeY</ref>();<sp/>}</highlight></codeline>
    </programlisting>
    <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/cellular_potts/dish.cpp"/>
  </compounddef>
</doxygen>
