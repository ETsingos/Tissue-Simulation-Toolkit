<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classcl_1_1_sampler" kind="class" language="C++" prot="public">
    <compoundname>cl::Sampler</compoundname>
    <basecompoundref refid="classcl_1_1detail_1_1_wrapper" prot="public" virt="non-virtual">cl::detail::Wrapper&lt; cl_sampler &gt;</basecompoundref>
    <includes refid="cl_8hpp" local="no">cl.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcl_1_1_sampler_1a1c8395b386e3b1c09dc43f4134909390" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cl::Sampler::Sampler</definition>
        <argsstring>()</argsstring>
        <name>Sampler</name>
        <qualifiedname>cl::Sampler::Sampler</qualifiedname>
        <briefdescription>
<para>Default constructor - initializes to NULL. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="4124" column="3" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="4124" bodyend="4124"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_sampler_1a41d7df0a069717bc570a6ccdab3d3acd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cl::Sampler::Sampler</definition>
        <argsstring>(const Context &amp;context, cl_bool normalized_coords, cl_addressing_mode addressing_mode, cl_filter_mode filter_mode, cl_int *err=NULL)</argsstring>
        <name>Sampler</name>
        <qualifiedname>cl::Sampler::Sampler</qualifiedname>
        <param>
          <type>const <ref refid="classcl_1_1_context" kindref="compound">Context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>cl_bool</type>
          <declname>normalized_coords</declname>
        </param>
        <param>
          <type>cl_addressing_mode</type>
          <declname>addressing_mode</declname>
        </param>
        <param>
          <type>cl_filter_mode</type>
          <declname>filter_mode</declname>
        </param>
        <param>
          <type>cl_int *</type>
          <declname>err</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classcl_1_1_sampler" kindref="compound">Sampler</ref> in a specified context. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps clCreateSampler(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="4130" column="3" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="4130" bodyend="4141"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_sampler_1ac0c5fd852a7f9cc39918c8b67c4e662f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__CL_EXPLICIT_CONSTRUCTORS</type>
        <definition>__CL_EXPLICIT_CONSTRUCTORS cl::Sampler::Sampler</definition>
        <argsstring>(const cl_sampler &amp;sampler)</argsstring>
        <name>Sampler</name>
        <qualifiedname>cl::Sampler::Sampler</qualifiedname>
        <param>
          <type>const cl_sampler &amp;</type>
          <declname>sampler</declname>
        </param>
        <briefdescription>
<para>Constructor from cl_sampler - takes ownership. </para>
        </briefdescription>
        <detaileddescription>
<para>This effectively transfers ownership of a refcount on the cl_sampler into the new <ref refid="classcl_1_1_sampler" kindref="compound">Sampler</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="4148" column="30" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="4148" bodyend="4149"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_sampler_1a4edef47991d28368cb63f57e924d34bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcl_1_1_sampler" kindref="compound">Sampler</ref> &amp;</type>
        <definition>Sampler &amp; cl::Sampler::operator=</definition>
        <argsstring>(const cl_sampler &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>cl::Sampler::operator=</qualifiedname>
        <param>
          <type>const cl_sampler &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator from cl_sampler - takes ownership. </para>
        </briefdescription>
        <detaileddescription>
<para>This effectively transfers ownership of a refcount on the rhs and calls clReleaseSampler() on the value previously held by this instance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="4156" column="11" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="4156" bodyend="4159"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_sampler_1a684ea0f7bb85233239ba3a266795c1a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cl::Sampler::Sampler</definition>
        <argsstring>(const Sampler &amp;sam)</argsstring>
        <name>Sampler</name>
        <qualifiedname>cl::Sampler::Sampler</qualifiedname>
        <param>
          <type>const <ref refid="classcl_1_1_sampler" kindref="compound">Sampler</ref> &amp;</type>
          <declname>sam</declname>
        </param>
        <briefdescription>
<para>Copy constructor to forward copy to the superclass correctly. Required for MSVC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="4164" column="3" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="4164" bodyend="4164"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_sampler_1a4c05855fddee1688b229bf333162c794" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcl_1_1_sampler" kindref="compound">Sampler</ref> &amp;</type>
        <definition>Sampler &amp; cl::Sampler::operator=</definition>
        <argsstring>(const Sampler &amp;sam)</argsstring>
        <name>operator=</name>
        <qualifiedname>cl::Sampler::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classcl_1_1_sampler" kindref="compound">Sampler</ref> &amp;</type>
          <declname>sam</declname>
        </param>
        <briefdescription>
<para>Copy assignment to forward copy to the superclass correctly. Required for MSVC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="4169" column="11" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="4169" bodyend="4172"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_sampler_1a692268678bf12b7b754009f9ba291fbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>cl_int</type>
        <definition>cl_int cl::Sampler::getInfo</definition>
        <argsstring>(cl_sampler_info name, T *param) const</argsstring>
        <name>getInfo</name>
        <qualifiedname>cl::Sampler::getInfo</qualifiedname>
        <param>
          <type>cl_sampler_info</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Wrapper for clGetSamplerInfo(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="4191" column="22" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="4191" bodyend="4195"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_sampler_1ae98feb073f7295721af31275530fef5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>cl_int</type>
            <declname>name</declname>
            <defname>name</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structcl_1_1detail_1_1param__traits" kindref="compound">detail::param_traits</ref>&lt; detail::cl_sampler_info, name &gt;::param_type</type>
        <definition>detail::param_traits&lt; detail::cl_sampler_info, name &gt;::param_type cl::Sampler::getInfo</definition>
        <argsstring>(cl_int *err=NULL) const</argsstring>
        <name>getInfo</name>
        <qualifiedname>cl::Sampler::getInfo</qualifiedname>
        <param>
          <type>cl_int *</type>
          <declname>err</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Wrapper for clGetSamplerInfo() that returns by value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="4200" column="3" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="4200" bodyend="4208"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class interface for cl_sampler. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Copies of these objects are shallow, meaning that the copy will refer to the same underlying cl_sampler as the original. For details, see clRetainSampler() and clReleaseSampler().</para>
</simplesect>
<simplesect kind="see"><para>cl_sampler </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>cl::detail::Wrapper&lt; cl_sampler &gt;</label>
        <link refid="classcl_1_1detail_1_1_wrapper"/>
      </node>
      <node id="1">
        <label>cl::Sampler</label>
        <link refid="classcl_1_1_sampler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>cl::detail::Wrapper&lt; cl_sampler &gt;</label>
        <link refid="classcl_1_1detail_1_1_wrapper"/>
      </node>
      <node id="1">
        <label>cl::Sampler</label>
        <link refid="classcl_1_1_sampler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="4121" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="4121" bodyend="4209"/>
    <listofallmembers>
      <member refid="classcl_1_1detail_1_1_wrapper_1a83841267bac5ad4411ec8935f78315d8" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>cl_type</name></member>
      <member refid="classcl_1_1_sampler_1a692268678bf12b7b754009f9ba291fbc" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>getInfo</name></member>
      <member refid="classcl_1_1_sampler_1ae98feb073f7295721af31275530fef5f" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>getInfo</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a1292547dd0c591aa972e25b793481583" prot="protected" virt="non-virtual"><scope>cl::Sampler</scope><name>object_</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a83936d9a0be85837d0d2603bce850b31" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>operator()</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a30993cd6ba246771306e4164ce2202eb" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>operator()</name></member>
      <member refid="classcl_1_1_sampler_1a4edef47991d28368cb63f57e924d34bd" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>operator=</name></member>
      <member refid="classcl_1_1_sampler_1a4c05855fddee1688b229bf333162c794" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>operator=</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a49b3fcc3a16d0e2ad3295b3e38fb1bf8" prot="public" virt="non-virtual" ambiguityscope="Wrapper&lt; cl_sampler &gt;::"><scope>cl::Sampler</scope><name>operator=</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a207374e201c6c33c01bdc7ee09e92d76" prot="protected" virt="non-virtual"><scope>cl::Sampler</scope><name>release</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1adfdff8a6c98ca62fedc6a9ffced47a06" prot="protected" virt="non-virtual"><scope>cl::Sampler</scope><name>retain</name></member>
      <member refid="classcl_1_1_sampler_1a1c8395b386e3b1c09dc43f4134909390" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>Sampler</name></member>
      <member refid="classcl_1_1_sampler_1a41d7df0a069717bc570a6ccdab3d3acd" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>Sampler</name></member>
      <member refid="classcl_1_1_sampler_1ac0c5fd852a7f9cc39918c8b67c4e662f" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>Sampler</name></member>
      <member refid="classcl_1_1_sampler_1a684ea0f7bb85233239ba3a266795c1a4" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>Sampler</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1aa1b916a75114fe3217018378d5f1eb71" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>Wrapper</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a514167f4ed7af4cc0ff0002bf082798f" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>Wrapper</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1af91bafdf8593c34e0d0722cdd93010be" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>Wrapper</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1aa254b6401dc19abcc7c21d2a664cadf9" prot="public" virt="non-virtual"><scope>cl::Sampler</scope><name>~Wrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
