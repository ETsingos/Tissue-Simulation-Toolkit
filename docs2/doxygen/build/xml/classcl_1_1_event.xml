<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classcl_1_1_event" kind="class" language="C++" prot="public">
    <compoundname>cl::Event</compoundname>
    <basecompoundref refid="classcl_1_1detail_1_1_wrapper" prot="public" virt="non-virtual">cl::detail::Wrapper&lt; cl_event &gt;</basecompoundref>
    <includes refid="cl_8hpp" local="no">cl.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcl_1_1_event_1a90e01689f7b394fc003d66c48a7f6f95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cl::Event::Event</definition>
        <argsstring>()</argsstring>
        <name>Event</name>
        <qualifiedname>cl::Event::Event</qualifiedname>
        <briefdescription>
<para>Default constructor - initializes to NULL. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2584" column="3" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2584" bodyend="2584"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_event_1ae0f6ce1b52cb9832128fd3e6c1ec9547" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__CL_EXPLICIT_CONSTRUCTORS</type>
        <definition>__CL_EXPLICIT_CONSTRUCTORS cl::Event::Event</definition>
        <argsstring>(const cl_event &amp;event)</argsstring>
        <name>Event</name>
        <qualifiedname>cl::Event::Event</qualifiedname>
        <param>
          <type>const cl_event &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Constructor from cl_event - takes ownership. </para>
        </briefdescription>
        <detaileddescription>
<para>This effectively transfers ownership of a refcount on the cl_event into the new <ref refid="classcl_1_1_event" kindref="compound">Event</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2591" column="30" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2591" bodyend="2592"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_event_1abb50980a18eae852375f7d328d46d3cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcl_1_1_event" kindref="compound">Event</ref> &amp;</type>
        <definition>Event &amp; cl::Event::operator=</definition>
        <argsstring>(const cl_event &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>cl::Event::operator=</qualifiedname>
        <param>
          <type>const cl_event &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator from cl_event - takes ownership. </para>
        </briefdescription>
        <detaileddescription>
<para>This effectively transfers ownership of a refcount on the rhs and calls clReleaseEvent() on the value previously held by this instance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2599" column="9" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2599" bodyend="2602"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_event_1a4ad1d3040fcb24188f1ac2cd73591252" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>cl_int</type>
        <definition>cl_int cl::Event::getInfo</definition>
        <argsstring>(cl_event_info name, T *param) const</argsstring>
        <name>getInfo</name>
        <qualifiedname>cl::Event::getInfo</qualifiedname>
        <param>
          <type>cl_event_info</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Wrapper for clGetEventInfo(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2605" column="22" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2605" bodyend="2609"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_event_1a78c94797afab6aa2f21bf3c2a476804d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>cl_int</type>
            <declname>name</declname>
            <defname>name</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structcl_1_1detail_1_1param__traits" kindref="compound">detail::param_traits</ref>&lt; detail::cl_event_info, name &gt;::param_type</type>
        <definition>detail::param_traits&lt; detail::cl_event_info, name &gt;::param_type cl::Event::getInfo</definition>
        <argsstring>(cl_int *err=NULL) const</argsstring>
        <name>getInfo</name>
        <qualifiedname>cl::Event::getInfo</qualifiedname>
        <param>
          <type>cl_int *</type>
          <declname>err</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Wrapper for clGetEventInfo() that returns by value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2614" column="3" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2614" bodyend="2622"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_event_1a3f5ef317602809c4a99d6f244f758b5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>cl_int</type>
        <definition>cl_int cl::Event::getProfilingInfo</definition>
        <argsstring>(cl_profiling_info name, T *param) const</argsstring>
        <name>getProfilingInfo</name>
        <qualifiedname>cl::Event::getProfilingInfo</qualifiedname>
        <param>
          <type>cl_profiling_info</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Wrapper for clGetEventProfilingInfo(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2626" column="10" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2626" bodyend="2630"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_event_1a8eacc834b594c290ed019b32bdd73938" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>cl_int</type>
            <declname>name</declname>
            <defname>name</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structcl_1_1detail_1_1param__traits" kindref="compound">detail::param_traits</ref>&lt; detail::cl_profiling_info, name &gt;::param_type</type>
        <definition>detail::param_traits&lt; detail::cl_profiling_info, name &gt;::param_type cl::Event::getProfilingInfo</definition>
        <argsstring>(cl_int *err=NULL) const</argsstring>
        <name>getProfilingInfo</name>
        <qualifiedname>cl::Event::getProfilingInfo</qualifiedname>
        <param>
          <type>cl_int *</type>
          <declname>err</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Wrapper for clGetEventProfilingInfo() that returns by value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2635" column="3" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2635" bodyend="2643"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_event_1a51f83064c2024df649667071e81fb847" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cl_int</type>
        <definition>cl_int cl::Event::wait</definition>
        <argsstring>() const</argsstring>
        <name>wait</name>
        <qualifiedname>cl::Event::wait</qualifiedname>
        <briefdescription>
<para>Blocks the calling thread until this event completes. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps clWaitForEvents(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2649" column="10" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2649" bodyend="2652"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcl_1_1_event_1ac28c9c7bec902c477913945f7dcecf42" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>cl_int</type>
        <definition>static cl_int cl::Event::waitForEvents</definition>
        <argsstring>(const VECTOR_CLASS&lt; Event &gt; &amp;events)</argsstring>
        <name>waitForEvents</name>
        <qualifiedname>cl::Event::waitForEvents</qualifiedname>
        <param>
          <type>const VECTOR_CLASS&lt; <ref refid="classcl_1_1_event" kindref="compound">Event</ref> &gt; &amp;</type>
          <declname>events</declname>
        </param>
        <briefdescription>
<para>Blocks the calling thread until every event specified is complete. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps clWaitForEvents(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2673" column="17" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2673" bodyend="2679"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class interface for cl_event. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Copies of these objects are shallow, meaning that the copy will refer to the same underlying cl_event as the original. For details, see clRetainEvent() and clReleaseEvent().</para>
</simplesect>
<simplesect kind="see"><para>cl_event </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>cl::detail::Wrapper&lt; cl_event &gt;</label>
        <link refid="classcl_1_1detail_1_1_wrapper"/>
      </node>
      <node id="1">
        <label>cl::Event</label>
        <link refid="classcl_1_1_event"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>cl::detail::Wrapper&lt; cl_event &gt;</label>
        <link refid="classcl_1_1detail_1_1_wrapper"/>
      </node>
      <node id="1">
        <label>cl::Event</label>
        <link refid="classcl_1_1_event"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2581" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2581" bodyend="2680"/>
    <listofallmembers>
      <member refid="classcl_1_1detail_1_1_wrapper_1a83841267bac5ad4411ec8935f78315d8" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>cl_type</name></member>
      <member refid="classcl_1_1_event_1a90e01689f7b394fc003d66c48a7f6f95" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>Event</name></member>
      <member refid="classcl_1_1_event_1ae0f6ce1b52cb9832128fd3e6c1ec9547" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>Event</name></member>
      <member refid="classcl_1_1_event_1a4ad1d3040fcb24188f1ac2cd73591252" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>getInfo</name></member>
      <member refid="classcl_1_1_event_1a78c94797afab6aa2f21bf3c2a476804d" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>getInfo</name></member>
      <member refid="classcl_1_1_event_1a3f5ef317602809c4a99d6f244f758b5f" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>getProfilingInfo</name></member>
      <member refid="classcl_1_1_event_1a8eacc834b594c290ed019b32bdd73938" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>getProfilingInfo</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a1292547dd0c591aa972e25b793481583" prot="protected" virt="non-virtual"><scope>cl::Event</scope><name>object_</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a83936d9a0be85837d0d2603bce850b31" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>operator()</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a30993cd6ba246771306e4164ce2202eb" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>operator()</name></member>
      <member refid="classcl_1_1_event_1abb50980a18eae852375f7d328d46d3cd" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>operator=</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a49b3fcc3a16d0e2ad3295b3e38fb1bf8" prot="public" virt="non-virtual" ambiguityscope="Wrapper&lt; cl_event &gt;::"><scope>cl::Event</scope><name>operator=</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a207374e201c6c33c01bdc7ee09e92d76" prot="protected" virt="non-virtual"><scope>cl::Event</scope><name>release</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1adfdff8a6c98ca62fedc6a9ffced47a06" prot="protected" virt="non-virtual"><scope>cl::Event</scope><name>retain</name></member>
      <member refid="classcl_1_1_event_1a51f83064c2024df649667071e81fb847" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>wait</name></member>
      <member refid="classcl_1_1_event_1ac28c9c7bec902c477913945f7dcecf42" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>waitForEvents</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1aa1b916a75114fe3217018378d5f1eb71" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>Wrapper</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a514167f4ed7af4cc0ff0002bf082798f" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>Wrapper</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1af91bafdf8593c34e0d0722cdd93010be" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>Wrapper</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1aa254b6401dc19abcc7c21d2a664cadf9" prot="public" virt="non-virtual"><scope>cl::Event</scope><name>~Wrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
