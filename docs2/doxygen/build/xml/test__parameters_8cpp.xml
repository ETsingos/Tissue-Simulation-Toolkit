<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="test__parameters_8cpp" kind="file" language="C++">
    <compoundname>test_parameters.cpp</compoundname>
    <includes refid="parameter_8cpp" local="yes">parameter.cpp</includes>
    <includes refid="parameter__file_8cpp" local="yes">parameter_file.cpp</includes>
    <includes local="no">catch2/catch_test_macros.hpp</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">exception</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">unistd.h</includes>
    <includes refid="parameters_8hpp" local="yes">parameters.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>parameter.cpp</label>
        <link refid="parameter_8cpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>parameter.hpp</label>
        <link refid="parameter_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>parameter_file.cpp</label>
        <link refid="parameter__file_8cpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>parameter_file.hpp</label>
        <link refid="parameter__file_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>parameters.hpp</label>
        <link refid="parameters_8hpp_source"/>
      </node>
      <node id="1">
        <label>/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp</label>
        <link refid="test__parameters_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>catch2/catch_test_macros.hpp</label>
      </node>
      <node id="13">
        <label>cctype</label>
      </node>
      <node id="17">
        <label>cstdio</label>
      </node>
      <node id="18">
        <label>cstdlib</label>
      </node>
      <node id="19">
        <label>cstring</label>
      </node>
      <node id="20">
        <label>exception</label>
      </node>
      <node id="14">
        <label>fstream</label>
      </node>
      <node id="11">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>ostream</label>
      </node>
      <node id="8">
        <label>parameter.tpp</label>
      </node>
      <node id="21">
        <label>sstream</label>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="22">
        <label>unistd.h</label>
      </node>
      <node id="10">
        <label>unordered_map</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="test__parameters_8cpp_1ada51b0ee5ab93f1c5f7898d24af1c094" prot="public" static="no">
        <name>CATCH_SECTION</name>
        <initializer>SECTION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="140" column="9"/>
      </memberdef>
      <memberdef kind="define" id="test__parameters_8cpp_1aece3379fc61f8e34c3ef8881f176ab6f" prot="public" static="no">
        <name>SECTION</name>
        <param><defname>TEXT</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="143" column="9"/>
      </memberdef>
      <memberdef kind="define" id="test__parameters_8cpp_1adda5b373e4336405c34c7591a467ddbc" prot="public" static="no">
        <name>PARAMETER</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>DEFAULT</defname></param>
        <param><defname>DESC</defname></param>
        <initializer>REQUIRE(par.NAME == par2.NAME);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="144" column="9"/>
      </memberdef>
      <memberdef kind="define" id="test__parameters_8cpp_1a312dcc674efbff23002dbf33c17522ab" prot="public" static="no">
        <name>CONSTRAINT</name>
        <param><defname>EXPR</defname></param>
        <param><defname>MESSAGE</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="145" column="9"/>
      </memberdef>
      <memberdef kind="define" id="test__parameters_8cpp_1ac5f41b3cefc075e35486583b52712b0d" prot="public" static="no">
        <name>SECTION</name>
        <initializer>CATCH_SECTION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="151" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__parameters_8cpp_1af0092029eef950c6b11d8bba1b6f5600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test default construction&quot;, &quot;[parameters]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test default construction&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[parameters]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="17" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" bodystart="17" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="test__parameters_8cpp_1ad9cf6847483f65e3220db72d56fcccf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string save_to_temp_file</definition>
        <argsstring>(char const *buf, std::size_t len)</argsstring>
        <name>save_to_temp_file</name>
        <param>
          <type>char const *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="33" column="13" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" bodystart="33" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="test__parameters_8cpp_1a5ae2d0ee9273479dca49062f1c45ddd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test error when input file does not exist&quot;, &quot;[parameters]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test error when input file does not exist&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[parameters]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="43" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="test__parameters_8cpp_1a28fc23c65885c544d7b0b99f5f8e6f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test loading parameters from file&quot;, &quot;[parameters]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test loading parameters from file&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[parameters]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="49" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" bodystart="49" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="test__parameters_8cpp_1a3072e076d3e64262b3d8dcee5badf34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test validating parameter constraints&quot;, &quot;[parameters]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test validating parameter constraints&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[parameters]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="85" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" bodystart="85" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="test__parameters_8cpp_1a597a606bd9b76cd9c6bbd4a000af8b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test saving parameters to a stream&quot;, &quot;[parameters]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test saving parameters to a stream&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[parameters]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="100" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" bodystart="100" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="test__parameters_8cpp_1aae1e4ae77ccb86676b414da225cdd897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test save-and-load roundtrip&quot;, &quot;[parameters]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test save-and-load roundtrip&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[parameters]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" line="121" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp" bodystart="121" bodyend="156"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Load<sp/>the<sp/>real<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parameter.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parameter_file.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dependencies<sp/>for<sp/>the<sp/>test<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;catch2/catch_test_macros.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>default<sp/>construction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[parameters]&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="class_parameter" kindref="compound">Parameter</ref><sp/>par;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>testing<sp/>everything,<sp/>just<sp/>one<sp/>of<sp/>each<sp/>supported<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>REQUIRE(par.store);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>REQUIRE(par.sizex<sp/>==<sp/>200);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>REQUIRE(par.dt<sp/>==<sp/>2.0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>REQUIRE(par.datadir<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;data_film&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>std::string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>REQUIRE(par.diff_coeff.size()<sp/>==<sp/>1u);<sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;double&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>REQUIRE(par.diff_coeff<sp/>==<sp/>std::vector&lt;double&gt;{1e-13});</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Save<sp/>contents<sp/>of<sp/>buffer<sp/>to<sp/>a<sp/>temp<sp/>file<sp/>and<sp/>return<sp/>the<sp/>file&apos;s<sp/>name</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>C++<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>way<sp/>to<sp/>create<sp/>a<sp/>temp<sp/>file,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>resort</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>to<sp/>C<sp/>and<sp/>POSIX.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">std::string<sp/>save_to_temp_file(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*buf,<sp/>std::size_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp_file_name[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;tmp_test_parameters_XXXXXX&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>mkstemp(temp_file_name);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>ssize_t<sp/>written<sp/>=<sp/>write(fd,<sp/>buf,<sp/>len);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>REQUIRE(written<sp/>==<sp/>len);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(temp_file_name,<sp/>strlen(temp_file_name));</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>error<sp/>when<sp/>input<sp/>file<sp/>does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[parameters]&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="class_parameter" kindref="compound">Parameter</ref><sp/>par;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>REQUIRE_THROWS(par.<ref refid="class_parameter_1aa823776a89e25a72a1724d0de83a261c" kindref="member">Read</ref>(</highlight><highlight class="stringliteral">&quot;doesnotexist&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>loading<sp/>parameters<sp/>from<sp/>file&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[parameters]&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pars[]<sp/>=<sp/>(</highlight><highlight class="stringliteral">&quot;#<sp/>This<sp/>is<sp/>a<sp/>comment\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>And<sp/>we<sp/>should<sp/>test<sp/>empty<sp/>lines<sp/>too\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;store<sp/>=<sp/>false\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>graphics<sp/><sp/><sp/><sp/>=true\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sizex=<sp/>100\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>sizey<sp/><sp/><sp/>=<sp/><sp/><sp/>123<sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>dt=2.5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;datadir<sp/>=<sp/>data_pictures<sp/><sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;n_chem<sp/>=<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;diff_coeff<sp/><sp/><sp/>=<sp/>1e-13,<sp/>1.0<sp/>,<sp/>3<sp/>,2e-7,17.8<sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;decay_rate<sp/>=<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;secr_rate<sp/>=<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::string<sp/>file<sp/>=<sp/>save_to_temp_file(pars,<sp/>strlen(pars));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="class_parameter" kindref="compound">Parameter</ref><sp/>par;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>par.<ref refid="class_parameter_1aa823776a89e25a72a1724d0de83a261c" kindref="member">Read</ref>(file);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>values<sp/>read<sp/>from<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>REQUIRE_FALSE(par.store);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>REQUIRE(par.graphics);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>REQUIRE(par.sizex<sp/>==<sp/>100);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>REQUIRE(par.sizey<sp/>==<sp/>123);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>REQUIRE(par.dt<sp/>==<sp/>2.5);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>REQUIRE(par.datadir<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;data_pictures&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>REQUIRE(par.diff_coeff<sp/>==<sp/>std::vector&lt;double&gt;{1e-13,<sp/>1.0,<sp/>3.0,<sp/>2e-7,<sp/>17.8});</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>others<sp/>are<sp/>still<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>REQUIRE(par.storage_stride<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>remove(file.c_str());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>REQUIRE(err<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>validating<sp/>parameter<sp/>constraints&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[parameters]&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="class_parameter" kindref="compound">Parameter</ref><sp/>par;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>REQUIRE_NOTHROW(par.<ref refid="class_parameter_1ac8ccc5bae08b210927f7949e9df47611" kindref="member">Validate</ref>());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>par.n_chem<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>REQUIRE_THROWS_AS(par.<ref refid="class_parameter_1ac8ccc5bae08b210927f7949e9df47611" kindref="member">Validate</ref>(),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>par.diff_coeff<sp/>=<sp/>{1.0,<sp/>2.0};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>REQUIRE_THROWS_AS(par.<ref refid="class_parameter_1ac8ccc5bae08b210927f7949e9df47611" kindref="member">Validate</ref>(),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>par.decay_rate<sp/>=<sp/>{1.0,<sp/>2.0};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>REQUIRE_THROWS_AS(par.<ref refid="class_parameter_1ac8ccc5bae08b210927f7949e9df47611" kindref="member">Validate</ref>(),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>par.secr_rate<sp/>=<sp/>{1.0,<sp/>2.0};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>REQUIRE_NOTHROW(par.<ref refid="class_parameter_1ac8ccc5bae08b210927f7949e9df47611" kindref="member">Validate</ref>());</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>saving<sp/>parameters<sp/>to<sp/>a<sp/>stream&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[parameters]&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="class_parameter" kindref="compound">Parameter</ref><sp/>par;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>all<sp/>digits<sp/>are<sp/>saved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>brittle,<sp/>but<sp/>it<sp/>rounds<sp/>the<sp/>right<sp/>way<sp/>it<sp/>seems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>par.dt<sp/>=<sp/>2.1234567890123;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>par.<ref refid="class_parameter_1a0dd49c376211ab4e87c22ab94e2c8471" kindref="member">Write</ref>(oss);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>std::string<sp/>output<sp/>=<sp/>oss.str();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>all<sp/>supported<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>REQUIRE(output.find(</highlight><highlight class="stringliteral">&quot;store<sp/>=<sp/>true\n&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>output.npos);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>REQUIRE(output.find(</highlight><highlight class="stringliteral">&quot;sizex<sp/>=<sp/>200\n&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>output.npos);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>REQUIRE(output.find(</highlight><highlight class="stringliteral">&quot;dt<sp/>=<sp/>2.1234567890123\n&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>output.npos);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>REQUIRE(output.find(</highlight><highlight class="stringliteral">&quot;datadir<sp/>=<sp/>data_film\n&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>output.npos);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>REQUIRE(output.find(</highlight><highlight class="stringliteral">&quot;diff_coeff<sp/>=<sp/>1e-13\n&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>output.npos);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>REQUIRE(output.find(</highlight><highlight class="stringliteral">&quot;#<sp/>Cellular<sp/>Potts<sp/>Model<sp/>-<sp/>Grid\n&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>output.npos);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>save-and-load<sp/>roundtrip&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[parameters]&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="class_parameter" kindref="compound">Parameter</ref><sp/>par;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>par.store<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>par.dt<sp/>=<sp/>3.141592653589793;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>par.datadir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;data_pictures&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>par.n_chem<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>par.diff_coeff<sp/>=<sp/>{0.125,<sp/>7.0,<sp/>-3.0};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>par.decay_rate<sp/>=<sp/>{10.0,<sp/>100.5,<sp/>1000.0};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>par.secr_rate<sp/>=<sp/>{1,<sp/>2,<sp/>3.25};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>par.J_pol<sp/>=<sp/>13;<sp/></highlight><highlight class="comment">//<sp/>unlucky<sp/>number<sp/>to<sp/>ensure<sp/>we<sp/>find<sp/>any<sp/>bugs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>par.<ref refid="class_parameter_1a0dd49c376211ab4e87c22ab94e2c8471" kindref="member">Write</ref>(oss);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>std::string<sp/>output<sp/>=<sp/>oss.str();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>std::string<sp/>file<sp/>=<sp/>save_to_temp_file(output.data(),<sp/>output.size());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="class_parameter" kindref="compound">Parameter</ref><sp/>par2;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>par2.<ref refid="class_parameter_1aa823776a89e25a72a1724d0de83a261c" kindref="member">Read</ref>(file);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_SECTION<sp/>SECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECTION(TEXT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PARAMETER(TYPE,<sp/>NAME,<sp/>DEFAULT,<sp/>DESC)<sp/>REQUIRE(par.NAME<sp/>==<sp/>par2.NAME);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONSTRAINT(EXPR,<sp/>MESSAGE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parameters.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CONSTRAINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PARAMETER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECTION<sp/>CATCH_SECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CATCH_SECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>remove(file.c_str());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>REQUIRE(err<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/parameters/tests/test_parameters.cpp"/>
  </compounddef>
</doxygen>
