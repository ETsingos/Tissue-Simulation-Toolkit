<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="hull_8cpp" kind="file" language="C++">
    <compoundname>hull.cpp</compoundname>
    <includes refid="hull_8hpp" local="yes">hull.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/plotting/hull.cpp</label>
        <link refid="hull_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hull.hpp</label>
        <link refid="hull_8hpp_source"/>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="hull_8cpp_1a1c45750c2758d03b8387378f556b4ee8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float isLeft</definition>
        <argsstring>(Point P0, Point P1, Point P2)</argsstring>
        <name>isLeft</name>
        <param>
          <type><ref refid="class_point" kindref="compound">Point</ref></type>
          <declname>P0</declname>
        </param>
        <param>
          <type><ref refid="class_point" kindref="compound">Point</ref></type>
          <declname>P1</declname>
        </param>
        <param>
          <type><ref refid="class_point" kindref="compound">Point</ref></type>
          <declname>P2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/plotting/hull.cpp" line="21" column="14" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/plotting/hull.cpp" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="hull_8cpp_1ad687868582cf5cc0fe52ae4d93f319cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int chainHull_2D</definition>
        <argsstring>(Point *P, int n, Point *H)</argsstring>
        <name>chainHull_2D</name>
        <param>
          <type><ref refid="class_point" kindref="compound">Point</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="class_point" kindref="compound">Point</ref> *</type>
          <declname>H</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/plotting/hull.cpp" line="32" column="5" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/plotting/hull.cpp" bodystart="32" bodyend="103"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2001,<sp/>softSurfer<sp/>(www.softsurfer.com)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>may<sp/>be<sp/>freely<sp/>used<sp/>and<sp/>modified<sp/>for<sp/>any<sp/>purpose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>providing<sp/>that<sp/>this<sp/>copyright<sp/>notice<sp/>is<sp/>included<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SoftSurfer<sp/>makes<sp/>no<sp/>warranty<sp/>for<sp/>this<sp/>code,<sp/>and<sp/>cannot<sp/>be<sp/>held</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>liable<sp/>for<sp/>any<sp/>real<sp/>or<sp/>imagined<sp/>damage<sp/>resulting<sp/>from<sp/>its<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Users<sp/>of<sp/>this<sp/>code<sp/>must<sp/>verify<sp/>correctness<sp/>for<sp/>their<sp/>application.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assume<sp/>that<sp/>a<sp/>class<sp/>is<sp/>already<sp/>given<sp/>for<sp/>the<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Point<sp/>with<sp/>coordinates<sp/>{float<sp/>x,<sp/>y;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>isLeft():<sp/>tests<sp/>if<sp/>a<sp/>point<sp/>is<sp/>Left|On|Right<sp/>of<sp/>an<sp/>infinite<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Input:<sp/><sp/>three<sp/>points<sp/>P0,<sp/>P1,<sp/>and<sp/>P2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Return:<sp/>&gt;0<sp/>for<sp/>P2<sp/>left<sp/>of<sp/>the<sp/>line<sp/>through<sp/>P0<sp/>and<sp/>P1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=0<sp/>for<sp/>P2<sp/>on<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;0<sp/>for<sp/>P2<sp/>right<sp/>of<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>See:<sp/>the<sp/>January<sp/>2001<sp/>Algorithm<sp/>on<sp/>Area<sp/>of<sp/>Triangles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hull.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>isLeft(<ref refid="class_point" kindref="compound">Point</ref><sp/>P0,<sp/><ref refid="class_point" kindref="compound">Point</ref><sp/>P1,<sp/><ref refid="class_point" kindref="compound">Point</ref><sp/>P2)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(P1.x<sp/>-<sp/>P0.x)<sp/>*<sp/>(P2.y<sp/>-<sp/>P0.y)<sp/>-<sp/>(P2.x<sp/>-<sp/>P0.x)<sp/>*<sp/>(P1.y<sp/>-<sp/>P0.y);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>chainHull_2D():<sp/>Andrew&apos;s<sp/>monotone<sp/>chain<sp/>2D<sp/>convex<sp/>hull<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Input:<sp/><sp/>P[]<sp/>=<sp/>an<sp/>array<sp/>of<sp/>2D<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>presorted<sp/>by<sp/>increasing<sp/>x-<sp/>and<sp/>y-coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>the<sp/>number<sp/>of<sp/>points<sp/>in<sp/>P[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Output:<sp/>H[]<sp/>=<sp/>an<sp/>array<sp/>of<sp/>the<sp/>convex<sp/>hull<sp/>vertices<sp/>(max<sp/>is<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Return:<sp/>the<sp/>number<sp/>of<sp/>points<sp/>in<sp/>H[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chainHull_2D(<ref refid="class_point" kindref="compound">Point</ref><sp/>*P,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="class_point" kindref="compound">Point</ref><sp/>*H)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>output<sp/>array<sp/>H[]<sp/>will<sp/>be<sp/>used<sp/>as<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bot<sp/>=<sp/>0,<sp/>top<sp/>=<sp/>(-1);<sp/></highlight><highlight class="comment">//<sp/>indices<sp/>for<sp/>bottom<sp/>and<sp/>top<sp/>of<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>scan<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>indices<sp/>of<sp/>points<sp/>with<sp/>min<sp/>x-coord<sp/>and<sp/>min|max<sp/>y-coord</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minmin<sp/>=<sp/>0,<sp/>minmax;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xmin<sp/>=<sp/>P[0].x;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P[i].x<sp/>!=<sp/>xmin)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>minmax<sp/>=<sp/>i<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minmax<sp/>==<sp/>n<sp/>-<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>degenerate<sp/>case:<sp/>all<sp/>x-coords<sp/>==<sp/>xmin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>H[++top]<sp/>=<sp/>P[minmin];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P[minmax].y<sp/>!=<sp/>P[minmin].y)<sp/></highlight><highlight class="comment">//<sp/>a<sp/>nontrivial<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>H[++top]<sp/>=<sp/>P[minmax];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>H[++top]<sp/>=<sp/>P[minmin];<sp/></highlight><highlight class="comment">//<sp/>add<sp/>polygon<sp/>endpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>top<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>indices<sp/>of<sp/>points<sp/>with<sp/>max<sp/>x-coord<sp/>and<sp/>min|max<sp/>y-coord</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxmin,<sp/>maxmax<sp/>=<sp/>n<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xmax<sp/>=<sp/>P[n<sp/>-<sp/>1].x;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>n<sp/>-<sp/>2;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P[i].x<sp/>!=<sp/>xmax)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>maxmin<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>lower<sp/>hull<sp/>on<sp/>the<sp/>stack<sp/>H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>H[++top]<sp/>=<sp/>P[minmin];<sp/></highlight><highlight class="comment">//<sp/>push<sp/>minmin<sp/>point<sp/>onto<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>minmax;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++i<sp/>&lt;=<sp/>maxmin)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lower<sp/>line<sp/>joins<sp/>P[minmin]<sp/>with<sp/>P[maxmin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft(P[minmin],<sp/>P[maxmin],<sp/>P[i])<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>maxmin)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>P[i]<sp/>above<sp/>or<sp/>on<sp/>the<sp/>lower<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(top<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>at<sp/>least<sp/>2<sp/>points<sp/>on<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>P[i]<sp/>is<sp/>left<sp/>of<sp/>the<sp/>line<sp/>at<sp/>the<sp/>stack<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft(H[top<sp/>-<sp/>1],<sp/>H[top],<sp/>P[i])<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>P[i]<sp/>is<sp/>a<sp/>new<sp/>hull<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top--;<sp/></highlight><highlight class="comment">//<sp/>pop<sp/>top<sp/>point<sp/>off<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>H[++top]<sp/>=<sp/>P[i];<sp/></highlight><highlight class="comment">//<sp/>push<sp/>P[i]<sp/>onto<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>compute<sp/>the<sp/>upper<sp/>hull<sp/>on<sp/>the<sp/>stack<sp/>H<sp/>above<sp/>the<sp/>bottom<sp/>hull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxmax<sp/>!=<sp/>maxmin)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>distinct<sp/>xmax<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>H[++top]<sp/>=<sp/>P[maxmax];<sp/></highlight><highlight class="comment">//<sp/>push<sp/>maxmax<sp/>point<sp/>onto<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>bot<sp/>=<sp/>top;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>bottom<sp/>point<sp/>of<sp/>the<sp/>upper<sp/>hull<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>maxmin;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--i<sp/>&gt;=<sp/>minmax)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>upper<sp/>line<sp/>joins<sp/>P[maxmax]<sp/>with<sp/>P[minmax]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft(P[maxmax],<sp/>P[minmax],<sp/>P[i])<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&gt;<sp/>minmax)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>P[i]<sp/>below<sp/>or<sp/>on<sp/>the<sp/>upper<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(top<sp/>&gt;<sp/>bot)<sp/></highlight><highlight class="comment">//<sp/>at<sp/>least<sp/>2<sp/>points<sp/>on<sp/>the<sp/>upper<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>P[i]<sp/>is<sp/>left<sp/>of<sp/>the<sp/>line<sp/>at<sp/>the<sp/>stack<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft(H[top<sp/>-<sp/>1],<sp/>H[top],<sp/>P[i])<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>P[i]<sp/>is<sp/>a<sp/>new<sp/>hull<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top--;<sp/></highlight><highlight class="comment">//<sp/>pop<sp/>top<sp/>point<sp/>off<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>H[++top]<sp/>=<sp/>P[i];<sp/></highlight><highlight class="comment">//<sp/>push<sp/>P[i]<sp/>onto<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minmax<sp/>!=<sp/>minmin)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>H[++top]<sp/>=<sp/>P[minmin];<sp/></highlight><highlight class="comment">//<sp/>push<sp/>joining<sp/>endpoint<sp/>onto<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>top<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/plotting/hull.cpp"/>
  </compounddef>
</doxygen>
