<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classcl_1_1_platform" kind="class" language="C++" prot="public">
    <compoundname>cl::Platform</compoundname>
    <basecompoundref refid="classcl_1_1detail_1_1_wrapper" prot="public" virt="non-virtual">cl::detail::Wrapper&lt; cl_platform_id &gt;</basecompoundref>
    <includes refid="cl_8hpp" local="no">cl.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcl_1_1_platform_1a616344e02c3723347c752c02b7015212" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cl::Platform::Platform</definition>
        <argsstring>()</argsstring>
        <name>Platform</name>
        <qualifiedname>cl::Platform::Platform</qualifiedname>
        <briefdescription>
<para>Default constructor - initializes to NULL. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2009" column="3" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2009" bodyend="2009"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_platform_1a526f9d24eb15ff4531904a68c2fad7b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__CL_EXPLICIT_CONSTRUCTORS</type>
        <definition>__CL_EXPLICIT_CONSTRUCTORS cl::Platform::Platform</definition>
        <argsstring>(const cl_platform_id &amp;platform)</argsstring>
        <name>Platform</name>
        <qualifiedname>cl::Platform::Platform</qualifiedname>
        <param>
          <type>const cl_platform_id &amp;</type>
          <declname>platform</declname>
        </param>
        <briefdescription>
<para>Constructor from cl_platform_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This simply copies the platform ID value, which is an inexpensive operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2016" column="30" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2016" bodyend="2017"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_platform_1aeaee2d9f15f2927c4a0467cc734a29a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcl_1_1_platform" kindref="compound">Platform</ref> &amp;</type>
        <definition>Platform &amp; cl::Platform::operator=</definition>
        <argsstring>(const cl_platform_id &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>cl::Platform::operator=</qualifiedname>
        <param>
          <type>const cl_platform_id &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator from cl_platform_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This simply copies the platform ID value, which is an inexpensive operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2024" column="12" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2024" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_platform_1aa58f213a48d2a4b6342a595f2940f852" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cl_int</type>
        <definition>cl_int cl::Platform::getInfo</definition>
        <argsstring>(cl_platform_info name, STRING_CLASS *param) const</argsstring>
        <name>getInfo</name>
        <qualifiedname>cl::Platform::getInfo</qualifiedname>
        <param>
          <type>cl_platform_info</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespacecl_1ad3ff55c5fe80ec84842876af323559c7" kindref="member">STRING_CLASS</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Wrapper for clGetPlatformInfo(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2030" column="10" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2030" bodyend="2034"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_platform_1a436c09964ac6314a3763f5c15fb92e7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>cl_int</type>
            <declname>name</declname>
            <defname>name</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structcl_1_1detail_1_1param__traits" kindref="compound">detail::param_traits</ref>&lt; detail::cl_platform_info, name &gt;::param_type</type>
        <definition>detail::param_traits&lt; detail::cl_platform_info, name &gt;::param_type cl::Platform::getInfo</definition>
        <argsstring>(cl_int *err=NULL) const</argsstring>
        <name>getInfo</name>
        <qualifiedname>cl::Platform::getInfo</qualifiedname>
        <param>
          <type>cl_int *</type>
          <declname>err</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Wrapper for clGetPlatformInfo() that returns by value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2039" column="3" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2039" bodyend="2047"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_platform_1a8d2e984d5a25e6db87fee4eb358c134e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cl_int</type>
        <definition>cl_int cl::Platform::getDevices</definition>
        <argsstring>(cl_device_type type, VECTOR_CLASS&lt; Device &gt; *devices) const</argsstring>
        <name>getDevices</name>
        <qualifiedname>cl::Platform::getDevices</qualifiedname>
        <param>
          <type>cl_device_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>VECTOR_CLASS&lt; <ref refid="classcl_1_1_device" kindref="compound">Device</ref> &gt; *</type>
          <declname>devices</declname>
        </param>
        <briefdescription>
<para>Gets a list of devices for this platform. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps clGetDeviceIDs(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2053" column="10" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2053" bodyend="2071"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcl_1_1_platform_1af411de5b4cb0f553ea1dc2147e58d837" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>cl_int</type>
        <definition>static cl_int cl::Platform::get</definition>
        <argsstring>(VECTOR_CLASS&lt; Platform &gt; *platforms)</argsstring>
        <name>get</name>
        <qualifiedname>cl::Platform::get</qualifiedname>
        <param>
          <type>VECTOR_CLASS&lt; <ref refid="classcl_1_1_platform" kindref="compound">Platform</ref> &gt; *</type>
          <declname>platforms</declname>
        </param>
        <briefdescription>
<para>Gets a list of available platforms. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps clGetPlatformIDs(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2135" column="17" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2135" bodyend="2155"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_platform_1a2a60edf4cfdfda695919c2879a9ae64e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>cl_int</type>
        <definition>static cl_int cl::Platform::get</definition>
        <argsstring>(Platform *platform)</argsstring>
        <name>get</name>
        <qualifiedname>cl::Platform::get</qualifiedname>
        <param>
          <type><ref refid="classcl_1_1_platform" kindref="compound">Platform</ref> *</type>
          <declname>platform</declname>
        </param>
        <briefdescription>
<para>Gets the first available platform. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps clGetPlatformIDs(), returning the first result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2161" column="17" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2161" bodyend="2181"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_platform_1a87f6baad09c31e9f2bc8755a61439d04" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcl_1_1_platform" kindref="compound">Platform</ref></type>
        <definition>static Platform cl::Platform::get</definition>
        <argsstring>(cl_int *errResult=NULL)</argsstring>
        <name>get</name>
        <qualifiedname>cl::Platform::get</qualifiedname>
        <param>
          <type>cl_int *</type>
          <declname>errResult</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Gets the first available platform, returning it by value. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps clGetPlatformIDs(), returning the first result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2187" column="19" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2187" bodyend="2211"/>
      </memberdef>
      <memberdef kind="function" id="classcl_1_1_platform_1a01bea413d721189214cc59cfbc5d092d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcl_1_1_platform" kindref="compound">Platform</ref></type>
        <definition>static Platform cl::Platform::getDefault</definition>
        <argsstring>(cl_int *errResult=NULL)</argsstring>
        <name>getDefault</name>
        <qualifiedname>cl::Platform::getDefault</qualifiedname>
        <param>
          <type>cl_int *</type>
          <declname>errResult</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2213" column="19" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2213" bodyend="2215"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class interface for cl_platform_id. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Copies of these objects are inexpensive, since they don&apos;t &apos;own&apos; any underlying resources or data structures.</para>
</simplesect>
<simplesect kind="see"><para>cl_platform_id </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>cl::detail::Wrapper&lt; cl_platform_id &gt;</label>
        <link refid="classcl_1_1detail_1_1_wrapper"/>
      </node>
      <node id="1">
        <label>cl::Platform</label>
        <link refid="classcl_1_1_platform"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>cl::detail::Wrapper&lt; cl_platform_id &gt;</label>
        <link refid="classcl_1_1detail_1_1_wrapper"/>
      </node>
      <node id="1">
        <label>cl::Platform</label>
        <link refid="classcl_1_1_platform"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" line="2006" column="1" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl.hpp" bodystart="2006" bodyend="2221"/>
    <listofallmembers>
      <member refid="classcl_1_1detail_1_1_wrapper_1a83841267bac5ad4411ec8935f78315d8" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>cl_type</name></member>
      <member refid="classcl_1_1_platform_1af411de5b4cb0f553ea1dc2147e58d837" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>get</name></member>
      <member refid="classcl_1_1_platform_1a2a60edf4cfdfda695919c2879a9ae64e" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>get</name></member>
      <member refid="classcl_1_1_platform_1a87f6baad09c31e9f2bc8755a61439d04" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>get</name></member>
      <member refid="classcl_1_1_platform_1a01bea413d721189214cc59cfbc5d092d" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>getDefault</name></member>
      <member refid="classcl_1_1_platform_1a8d2e984d5a25e6db87fee4eb358c134e" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>getDevices</name></member>
      <member refid="classcl_1_1_platform_1aa58f213a48d2a4b6342a595f2940f852" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>getInfo</name></member>
      <member refid="classcl_1_1_platform_1a436c09964ac6314a3763f5c15fb92e7d" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>getInfo</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a1292547dd0c591aa972e25b793481583" prot="protected" virt="non-virtual"><scope>cl::Platform</scope><name>object_</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a83936d9a0be85837d0d2603bce850b31" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>operator()</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a30993cd6ba246771306e4164ce2202eb" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>operator()</name></member>
      <member refid="classcl_1_1_platform_1aeaee2d9f15f2927c4a0467cc734a29a3" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>operator=</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a49b3fcc3a16d0e2ad3295b3e38fb1bf8" prot="public" virt="non-virtual" ambiguityscope="Wrapper&lt; cl_platform_id &gt;::"><scope>cl::Platform</scope><name>operator=</name></member>
      <member refid="classcl_1_1_platform_1a616344e02c3723347c752c02b7015212" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>Platform</name></member>
      <member refid="classcl_1_1_platform_1a526f9d24eb15ff4531904a68c2fad7b3" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>Platform</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a207374e201c6c33c01bdc7ee09e92d76" prot="protected" virt="non-virtual"><scope>cl::Platform</scope><name>release</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1adfdff8a6c98ca62fedc6a9ffced47a06" prot="protected" virt="non-virtual"><scope>cl::Platform</scope><name>retain</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1aa1b916a75114fe3217018378d5f1eb71" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>Wrapper</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1a514167f4ed7af4cc0ff0002bf082798f" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>Wrapper</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1af91bafdf8593c34e0d0722cdd93010be" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>Wrapper</name></member>
      <member refid="classcl_1_1detail_1_1_wrapper_1aa254b6401dc19abcc7c21d2a664cadf9" prot="public" virt="non-virtual"><scope>cl::Platform</scope><name>~Wrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
