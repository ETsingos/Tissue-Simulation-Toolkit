<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="cl__manager_8cpp" kind="file" language="C++">
    <compoundname>cl_manager.cpp</compoundname>
    <includes refid="cl__manager_8hpp" local="yes">cl_manager.hpp</includes>
    <includes refid="parameter_8hpp" local="yes">parameter.hpp</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="3">
        <label>cl.hpp</label>
        <link refid="cl_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl_manager.cpp</label>
        <link refid="cl__manager_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cl_manager.hpp</label>
        <link refid="cl__manager_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>parameter.hpp</label>
        <link refid="parameter_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>parameters.hpp</label>
        <link refid="parameters_8hpp_source"/>
      </node>
      <node id="4">
        <label>CL/opencl.h</label>
      </node>
      <node id="10">
        <label>cstring</label>
      </node>
      <node id="15">
        <label>fstream</label>
      </node>
      <node id="16">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="12">
        <label>ostream</label>
      </node>
      <node id="14">
        <label>parameter.tpp</label>
      </node>
      <node id="17">
        <label>sstream</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="cl__manager_8cpp_1af11ee2bd5d6c6bf29fd8fabb35ca2f11" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_l_manager" kindref="compound">CLManager</ref></type>
        <definition>CLManager clm</definition>
        <argsstring></argsstring>
        <name>clm</name>
        <initializer>= <ref refid="class_c_l_manager" kindref="compound">CLManager</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl_manager.cpp" line="7" column="11" bodyfile="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl_manager.cpp" bodystart="7" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;cl_manager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parameter.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="class_c_l_manager" kindref="compound">CLManager</ref><sp/>clm<sp/>=<sp/><ref refid="class_c_l_manager" kindref="compound">CLManager</ref>();</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CLManager::make_context()<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="class_parameter" kindref="compound">Parameter</ref><sp/>par;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>platform<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>std::vector&lt;cl::Platform&gt;<sp/>all_platforms;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><ref refid="classcl_1_1_platform_1af411de5b4cb0f553ea1dc2147e58d837" kindref="member">cl::Platform::get</ref>(&amp;all_platforms);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_plat<sp/>=<sp/>all_platforms.size();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_plat<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>No<sp/>platforms<sp/>found.<sp/>Check<sp/>OpenCL<sp/>installation!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;num_plat&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>num_plat<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(par.opencl_pref_platform<sp/>&lt;<sp/>num_plat)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>platform<sp/>=<sp/>par.opencl_pref_platform;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>select<sp/>platform:<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>par.opencl_pref_platform</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="classcl_1_1_platform" kindref="compound">cl::Platform</ref><sp/>default_platform<sp/>=<sp/>all_platforms[platform];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>platform:<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>platform<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>default_platform.<ref refid="classcl_1_1_platform_1aa58f213a48d2a4b6342a595f2940f852" kindref="member">getInfo</ref>&lt;CL_PLATFORM_NAME&gt;()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>std::vector&lt;cl::Device&gt;<sp/>all_devices;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>default_platform.<ref refid="classcl_1_1_platform_1a8d2e984d5a25e6db87fee4eb358c134e" kindref="member">getDevices</ref>(CL_DEVICE_TYPE_ALL,<sp/>&amp;all_devices);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_devices.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>No<sp/>devices<sp/>found.<sp/>Check<sp/>OpenCL<sp/>installation!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>device<sp/>=<sp/>all_devices[0];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>device:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>device.<ref refid="classcl_1_1_device_1a575493c25049dae087540ed8a65efd6d" kindref="member">getInfo</ref>&lt;CL_DEVICE_NAME&gt;()</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>context<sp/>=<sp/><ref refid="classcl_1_1_context" kindref="compound">cl::Context</ref>({device});</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>queue<sp/>=<sp/><ref refid="classcl_1_1_command_queue" kindref="compound">cl::CommandQueue</ref>(context,<sp/>device);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="classcl_1_1_program" kindref="compound">cl::Program</ref><sp/>CLManager::make_program(std::string<sp/>filename,<sp/>std::string<sp/>head)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!context_prepared)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>make_context();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>cl::Program::Sources<sp/>sources;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>inFile;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>inFile.open(filename);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>strStream;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>strStream<sp/>&lt;&lt;<sp/>head;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>strStream<sp/>&lt;&lt;<sp/>inFile.rdbuf();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::string<sp/>kernel_code<sp/>=<sp/>strStream.str();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>sources.push_back({kernel_code.c_str(),<sp/>kernel_code.length()});</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="classcl_1_1_program" kindref="compound">cl::Program</ref><sp/>program<sp/>=<sp/><ref refid="classcl_1_1_program" kindref="compound">cl::Program</ref>(context,<sp/>sources);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(program.build({device})<sp/>!=<sp/>CL_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Error<sp/>building:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>program.getBuildInfo&lt;CL_PROGRAM_BUILD_LOG&gt;(device)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classcl_1_1_program" kindref="compound">cl::Program</ref>)0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>program;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/koenkeijzer/Documents/CPM/Tissue-Simulation-Toolkit/src/compute/cl_manager.cpp"/>
  </compounddef>
</doxygen>
